VDNet Python Library
---------------------

The aim of this library is to provide a unified way of interacting with all
vmware products and third party software/devices to be used for NSX testing.
The library provides an abstract way of utilizing different interfaces like
REST/SOAP APIs, CLIs and UI interfaces.


Requirements
-------------

The following packages are needed for the library to be used:

pyvmomi
paramiko
...


Directory Structure
--------------------

 vmware
    \common - common code that is used across the library
    \esx - client library for interacting with ESX
    \vc - client library for interacting with VC
    \vm - client library for interacting with a VM
    \interfaces - location of interface definitions. These define the actions
                  that or more clients of the library can implement.
samples - sample code for using the library

    Structure of individual client library
    ---------------------------------------

    esx
        \ api - code for interacting with VSphere SOAP API
        \ ui - code for interacting with VSphere NGC
        \ cmd - code for interacting with ESX CLIs
        esx_client.py - client code that is the point of entry for this library
    kvm
        \ api - code for interacting with libvirt API
        \ cmd - code for interacting with linux commandline
            \ rhel60_power_impl - RHEL 6.0 impl for power interface
            \ ubuntu1204_power_impl - Ubuntu 12.04 impl for power_interface


Usage
------

The entry point of using the library is one of many client modules that are
part of the library. A client module can be identified by "_client" in the
end of its name. For e.g esx_client.py.

    Client features
    ________________

        - A client can interact with a particular product or component

        - A client exposes methods that can manipulate the particular
          product or component that the client is supposed to model

        - All clients expose a CRUDQ (create, read, update, delete and
          query) interface as well as various action methods. Each of
          the action methods are defined in one of the interface classes
          in the interface directory

        - Clients expose methods that take schema objects as one of the inputs
          and can also return schema objects in their response. Schema objects
          can be generically converted between among other things: XML/JSON
          payloads, CLI params/dumps, method args, dicts.

        - Methods can be executed using different execution types like API,
          CMD and UI. Default execution type is defined in the client. The
          methods have an execution type argument that can override the default
          set in the client.

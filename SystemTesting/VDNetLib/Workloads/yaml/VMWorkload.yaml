---
applianceaction:
  derived_components:
    - vse
  description: "Perform an action on the appliance"
  format: string
  method: appliance_action
  params:
    - applianceaction
  preprocess: PreProcessShiftTypeAPI
  sample_value: redeploy
  type: action
applyimage:
  derived_components:
    - vc
    - host
  description: "Method to apply Image files to Host"
  format: string
  sample_value: esx
  method: ApplyImageProfile
  params:
    - applyimage
    - vc
    - host
  preprocess: PreProcessHashTypeAPI
  type: action
bridge:
  derived_components:
    - vse
  description: "Create a bridge between two Logical interfaces using the given spec"
  format: vdnet index
  linkedworkload: SwitchWorkload
  method: CreateAndVerifyComponent
  params:
    - bridge
  postprocess: StoreSubComponentObjects
  preprocess: PreProcessNSXSubComponent
  sample_value: "vsm.[1].vse.[1].bridge.[1]"
  type: component
capacity:
  derived_components:
    - logicalservicesnode
  description: "capacity of logical services node"
  format: string
  method: ProcessParameters
  sample_value: small
  type: parameter
configuremulticast:
  derived_components:
    - vm
  description: "Set multicast version on Linux VM"
  format: string
  method: SetMulticastVersion
  params:
    - configuremulticast
    - multicastversion
  preprocess: PreProcessShiftTypeAPI
  sample_value: igmp
  type: action
multicastversion:
  derived_components:
    - vm
  description: "multicast protocol version"
  format: integer
  sample_value: 2
  type: parameter
deletebridge:
  derived_components:
    - vse
  description: "Delete a bridge between vxlan and vlan"
  format: vdnet index
  method: DeleteComponent
  params:
    - deletebridge
  postprocess: RemoveSubComponentObjects
  preprocess: ConstructArrayOfObjects
  sample_value: "vsm.[1].vse.[1].bridge.[1]"
  type: component
deletelif:
  derived_components:
    - vse
  description: "Delete a lif between vxlan and vlan"
  format: vdnet index
  method: DeleteComponent
  params:
    - deletelif
  postprocess: RemoveSubComponentObjects
  preprocess: ConstructArrayOfObjects
  sample_value: "vsm.[1].vse.[1].lif.[1]"
  type: component

delete_global_lif:
  derived_components:
    - globaldistributedlogicalrouter
  description: "Delete a global lif on gdlr"
  format: vdnet index
  method: DeleteComponent
  params:
    - delete_global_lif
  postprocess: RemoveSubComponentObjects
  preprocess: ConstructArrayOfObjects
  sample_value: "vsm.[1].globaldistributedlogicalrouter.[1].global_lif.[1]"
  type: component

deletedhcprelay:
  derived_components:
    - vse
  description: "delete dhcp relay for vdr"
  format: vdnet index
  method: DeleteComponent
  params:
    - deletedhcprelay
  postprocess: RemoveSubComponentObjects
  preprocess: ConstructArrayOfObjects
  sample_value: "vsm.[1].vse.[1].dhcprelay.[1]"
  type: component

deletepcipassthru:
  derived_components:
    - vm
  description: "Remove a pci passthru device"
  format: vdnet index
  method: RemoveVirtualAdapters
  params:
    - deletepcipassthru
  postprocess: RemoveSubComponentObjects
  preprocess: PreProcessDeleteVnic
  sample_value: "vm.[1].pcipassthru.[1]"
  type: component
deletevnic:
  dependency:
    - vnic
  derived_components:
    - vm
  description: "Remove a vnic on VM"
  format: vdnet index
  method: RemoveVirtualAdapters
  params:
    - deletevnic
  postprocess: RemoveSubComponentObjects
  preprocess: PreProcessDeleteVnic
  sample_value: "vm.[1].vnic.[1]"
  type: component

waitfortools:
  derived_components:
    - vm
  description: "To indicate whether to wait until the tools is ready"
  format: boolean
  sample_value: 'true'
  type: parameter

waitforstaf:
  derived_components:
    - vm
  description: "To indicate whether to wait until the staf is ready"
  format: boolean
  sample_value: 'true'
  type: parameter

deletevif:
  dependency:
    - vif
  derived_components:
    - vm
  description: "Remove VIF(s) from VM"
  format: vdnet index
  method: RemoveVirtualAdapters
  params:
    - deletevnic
  postprocess: RemoveSubComponentObjects
  preprocess: ConstructArrayOfObjects
  sample_value: "vm.[1].vnic.[1]"
  type: component

deployprofile:
  derived_components:
    - cluster
    - data center
  description: "Method to Deploy ESX Image files to Autodeploy server"
  format: vdnet index
  method: DeployProfileRule
  params:
    - deployprofile
  preprocess: ConstructArrayOfObjects
  sample_value: "vc.[1].datacenter.[1]"
  type: action
dns_settings:
  derived_components:
    - logicalservicesnode
  description: "dns settings of logical services node"
  format:
    domain_name: string
    primary_dns: ip address
    secondary_dns: ip address
  method: ProcessParameters
  sample_value:
    domain_name: node
    primary_dns:  10.10.10.1
    secondary_dns: 9.9.9.1
  type: parameter
dsthost:
  derived_components:
    - vm
  description: "Destination host for vmotion"
  format: vdnet index
  method: GetMultipleComponentObjects
  sample_value: host.[1]
  type: parameter
dvfilter:
  derived_components:
    - vm
  description: "init slowpath vm"
  linkedworkload: DVFilterSlowpathWorkload
  method: CreateDVFilterComponent
  params:
    - adapters : vdnet_index
  postprocess: StoreSubComponentObjects
  preprocess: PreProcessNSXSubComponent
  objtype:
     vm: 'VDNetLib::DVFilterSlowpath::DVFilterSlowpath'
  type: component
firstnodeofcluster:
  derived_components:
    - vxlancontroller
  description: "Flag to indicate if the VM appliance is the first node in that cluster"
  format: boolean
  sample_value: true
  type: parameter
instanceuuid:
  derived_components:
    - vm
  description: "Specify VM instance UUID"
  format: string
  method: ProcessUUID
  sample_value: "875c8c71-065d9a9b"
  type: parameter
ippool:
  derived_components:
    - vsm
  description: "IP Pool required for deploying controller. Controller fetches IPs from these pools"
  format: string
  method: GetOneObjectFromOneTuple
  sample_value: 10.1.1.1-10.1.1.3
  type: parameter
lif:
  derived_components:
    - vse
  description: "Create Logical interfaces on VM appliances using the given spec"
  linkedworkload: NetAdapterWorkload
  method: CreateAndVerifyComponent
  params:
    - lif
  postprocess: StoreSubComponentObjects
  preprocess: PreProcessNSXSubComponent
  format:
    portgroup: vdnet index
    connected: 1
  sample_value:
    portgroup : vsm.[1].vse.[1].virtualwire.[1]
    connected : 1
  allowed_values:
    - 1
    - 0
  type: component
  objtype:
    vse: 'VDNetLib::VSM::VSE'

global_lif:
  derived_components:
    - globaldistributedlogicalrouter
  description: "Create Logical interfaces on Global VDR using the given spec"
  linkedworkload: NetAdapterWorkload
  method: CreateAndVerifyComponent
  params:
    - global_lif
  postprocess: StoreSubComponentObjects
  preprocess: PreProcessNSXSubComponent
  format:
    portgroup: vdnet index
    connected: 1
  sample_value:
    portgroup : 'vsm.[1].globaltransportzone.[1].globallogicalswitch.[3]'
    connected : 1
  allowed_values:
    - 1
    - 0
  type: component

dhcprelay:
  type: component
  derived_components:
    - vse
  description: "Create DHCP relay agents on VM appliances using the given spec"
  method: CreateAndVerifyComponent
  params:
    - dhcprelay
  preprocess: PreProcessNSXSubComponent
  postprocess: StoreSubComponentObjects
  linkedworkload: VMWorkload
  format:
    - primaryaddress : string
    - relayagent : vdnet index

relayagent:
  type: parameter
  derived_components:
    - dhcprelay
  description: "Configure relay agent for vdr"
  method: GetMultipleComponentObjects
  params:
    - relayagent
  format : vdnet index
  sample_value:
    - "vsm.[1].vse.[1].lif.[1-2]"

interface:
  derived_components:
    - gateway
  description: "Create Logical interfaces on VM appliances using the given spec"
  linkedworkload: NetAdapterWorkload
  method: CreateAndVerifyComponent
  params:
    - interface
  postprocess: StoreSubComponentObjects
  preprocess: PreProcessNSXSubComponent
  format:
    portgroup : vdnet index
  sample_value:
    portgroup : vsm.[1].vse.[1].virtualwire.[1]
  type: component
deleteinterface:
  derived_components:
    - gateway
  description: "Delete an interface on Gateway"
  format: vdnet index
  method: DeleteComponent
  params:
    - deleteinterface
    - vnic_index
  postprocess: RemoveSubComponentObjects
  preprocess: PreProcessDeleteComponentsAndParameters
  sample_value: "vsm.[1].gateway.[1].interface.[1]"
  type: component
dhcpippool:
  derived_components:
    - gateway
  description: "Create an IP pool on gateway edge"
  linkedworkload: GroupingObjectWorkload
  method: CreateAndVerifyComponent
  params:
    - dhcpippool
  postprocess: StoreSubComponentObjects
  preprocess: PreProcessNSXSubComponent
  format:
  sample_value:
  type: component
deleteippool:
  derived_components:
    - gateway
  description: "Delete an IP pool on Gateway"
  format: vdnet index
  method: DeleteComponent
  params:
    - deleteippool
  postprocess: RemoveSubComponentObjects
  preprocess: ConstructArrayOfObjects
  sample_value: "vsm.[1].gateway.[1].interface.[1].dhcpippool.[1]"
  type: component
location:
  derived_components:
    - vc
  description: "datacenter of logical services node"
  format: vdnet index
  method: ProcessParameters
  sample_value: "vc.[1].datacenter.[1]"
  type: parameter
logicalservicesnodeinterface:
  derived_components:
    - logicalservicenode
  description: "Deploy a logical services interface from Neutron"
  format: vdnet index
  linkedworkload: NetAdapterWorkload
  method: CreateAndVerifyComponent
  params:
    - logicalservicesnodeinterface
  postprocess: StoreSubComponentObjects
  preprocess: PreProcessNSXSubComponent
  sample_value: "neutron.[1].logicalservicesnode.[1].logicalservicesnodeinterface.[1]"
  type: component
pcipassthru:
  dependency:
    - vmstate
    - reservememory
  derived_components:
    - vm
  description: "Create pci passthru devices using the given spec"
  format:
    driver : string
    portgroup : vdnet index
  sample_value:
    driver : 'sriov'
    portgroup : host.[1].portgroup.[1]
  linkedworkload: NetAdapterWorkload
  method: AddEthernetAdapters
  params:
    - pcipassthru
  postprocess: StoreVnicObjects
  preprocess: PreProcessCreateVnic
  type: component
primaryaddress:
  derived_components:
    - vm
  description: "Primary IP address"
  format: string
  sample_value: DHCP
  type: parameter
  method: GenerateIPUsingEquation

ip_addresses:
  derived_components:
    - vm
  description: "ip addresses"
  format: string
  sample_value: " 10.3.3.3 10.5.5.5"
  type: parameter
  method: ProcessParameters

priority:
  derived_component:
    - vm
  description: "priority of vmotion operation"
  format: string
  sample_value: high
  allowed_values:
    - high
    - low
  type: parameter
profile:
  derived_components:
    - vm
  description: Upgrades the VM
  format: string
  sample_value: update
  method: Upgrade
  preprocess: PreProcessShiftTypeAPI
  params:
    - edge
  type: action
reconfigure:
  derived_components:
    - vm
  description: "Reconfigure VM"
  format: boolean
  method: Reconfigure
  params:
    - instanceuuid
  preprocess: PreProcessReconfigureVM
  sample_value: true
  type: action
reservememory:
  dependency:
    - vmstate
  derived_components:
    - vm
  description: "Reserve memory for VM"
  format: integer
  method: ReserveMemory
  params:
    - reservememory
  preprocess: PreProcessShiftTypeAPI
  sample_value: 3000
  type: action
sslenabled:
  derived_components:
    - vxlancontroller
  description: "Method to set vxlan controller ssl status(true/false)"
  format: boolean
  sample_value: true
  method: set_controller_ssl
  params:
    - sslenabled
  preprocess: PreProcessHashRefTypeAPI
  type: action
staytime:
  derived_components:
    - vm
  description: "Stay time on dsthost in case of roundtrip vmotion"
  format: integer
  sample_value: 10
  type: parameter
subnetmask:
  derived_components:
    - vm
  description: "Subnet mask"
  format: string
  sample_value: DHCP
  type: parameter
tools:
  derived_components:
    - vm
  description: "Upgrade vmtools for VM object using given build"
  format: string
  method: PerformToolsUpgrade
  params:
    - tools
  preprocess: PreProcessShiftTypeAPI
  sample_value: default
  allowed_values:
    - default
    - notools
    - sb-111111
    - ob-111111
  type: action
version:
  dependency:
    - vmstate
  derived_components:
    - vm
  description: "Change hardware version of the vm"
  format: string
  sample_value: vmx-08
  method: UpgradeVM
  params:
    - version
  preprocess: PreProcessShiftTypeAPI
  type: action
vmotion:
  derived_components:
    - vm
  description: "vmotion the specified VM"
  format: string
  method: VMotion
  params:
    - vmotion
    - dsthost
    - priority
    - staytime
    - datastore
    - portgroup
    - crossdatastore
    - vc
  postprocess: PostProcessUpdateVMHostObject
  preprocess: PreProcessHashTypeAPI
  sample_value: roundtrip
  allowed_values:
    - roundtrip
    - oneway
    - storage
    - hostandstorage
    - vc
    - vds
    - xvmotion
  type: action
crossdatastore:
  derived_components:
    - vm
  description: "indicate whether across datastore when vmotion"
  format: boolean
  sample_value: false
  type: parameter
vmstate:
  derived_components:
    - vm
  description: "Power on/off, suspend/resume specified VM with optional paramters"
  format: string
  method: ChangeVMState
  params:
    - vmstate
    - waitforvdnet
    - waitfortools
    - waitforstaf
  postprocess: PostProcessChangeVMState
  preprocess: PreProcessChangeVMState
  sample_value: poweron
  type: action

cpu_count:
   type: verification
   description: gets the cpu count for NSX Edge vm
   derived_components:
      - vm
   format:
      execution_type: 'cli'
   preprocess: PreProcessVerificationAndParameters
   method: VerifyCpuCount
   params:
      - execution_type
   sample_value:
      execution_type: 'cli'

nic_count:
   type: verification
   description: gets the nic count for NSX Edge vm
   derived_components:
      - vm
   format:
      execution_type: 'cli'
   preprocess: PreProcessVerificationAndParameters
   method: VerifyNicCount
   params:
      - execution_type
   sample_value:
      execution_type: 'cli'

virtual_disk_count:
   type: verification
   description: gets the virtual disk count for NSX edge vm
   derived_components:
      - vm
   format:
      execution_type: 'cli'
   preprocess: PreProcessVerificationAndParameters
   method: VerifyVirtualDiskCount
   params:
      - execution_type
   sample_value:
      execution_type: 'cli'

mem_size:
   type: verification
   description: gets the memory size for NSX edge vm
   derived_components:
      - vm
   format:
      execution_type: 'cli'
   preprocess: PreProcessVerificationAndParameters
   method: VerifyMemSize
   params:
      - execution_type
   sample_value:
      execution_type: 'cli'

max_mem_usage:
   type: verification
   description: gets the maximum memory usage for NSX edge vm
   derived_components:
      - vm
   format:
      execution_type: 'cli'
   preprocess: PreProcessVerificationAndParameters
   method: VerifyMaxMemUsage
   params:
      - execution_type
   sample_value:
      execution_type: 'cli'

max_cpu_usage:
   type: verification
   description: gets the maximum cpu usage for NSX edge vm
   derived_components:
      - vm
   format:
      execution_type: 'cli'
   preprocess: PreProcessVerificationAndParameters
   method: VerifyMaxCpuUsage
   params:
      - execution_type
   sample_value:
      execution_type: 'cli'

disk_size:
   type: verification
   description: gets the disk size for NSX edge vm
   derived_components:
      - vm
   format:
      disk_index: 1
      execution_type: 'cli'
   preprocess: PreProcessVerificationAndParameters
   method: VerifyDiskSize
   params:
      - disk_index
      - execution_type
   sample_value:
      disk_index: '1'
      execution_type: 'cli'

nic_type:
   type: verification
   description: gets the NIC type for NSX edge vm
   derived_components:
      - vm
   format:
      vnic_index: 1
      execution_type: 'cli'
   preprocess: PreProcessVerificationAndParameters
   method: VerifyNicType
   params:
      - vnic_index
      - execution_type
   sample_value:
      vnic_index: '2'
      execution_type: 'cli'

vnic:
  derived_components:
    - vm
  description: "Create virtual ethernet adapter using the given spec"
  format:
    driver : string
    portgroup : vdnet index
  linkedworkload: NetAdapterWorkload
  method: AddEthernetAdapters
  params:
    - vnic
  postprocess: StoreVnicObjects
  preprocess: PreProcessCreateVnic
  sample_value:
    driver : e1000
    portgroup : host.[1].portgroup.[1]
  type: component
vxlancontrollerservice:
  derived_component:
    - vxlancontroller
  description: "Method to stop/restart controller service"
  format: string
  method: vxlan_controller_service
  params:
    - vxlancontrollerservice
  preprocess: PreProcessHashRefTypeAPI
  sample_value: stop
  type: action
controllerpassword:
  derived_component:
    - vxlancontroller
  description: "Method to change controller password"
  format: string
  method: change_controller_password
  params:
    - controllerpassword
  preprocess: PreProcessShiftTypeAPI
  postprocess: PostProcessControllerPassword
  sample_value: NewPassword12!
  type: action
findvmin:
  description: "Find this VM in given dc, cluster, host etc"
  type: action
  derived_components:
    - vm
  format: vdnet index
  preprocess: PreProcessShiftTypeAPI
  method: FindAndUpdate
  params:
    - findvmin

vif:
  type: component
  description: 'Create virtual ethernet adapter on KVM VMs'
  preprocess: TransformSubComponentSpec
  method: AddEthernetAdapters
  params:
    - vif
  postprocess: StoreVnicObjects
  linkedworkload: NetAdapterWorkload
  sample_value:
    driver : e1000
    network : kvm.[1].bridge.[1]
  format:
    driver : string
    portgroup : vdnet index
  derived_components:
    - vm
queryadapters:
  type: 'verification'
  description: 'Used for verifying active adapters on a virtual machine'
  preprocess: PreProcessVerification
  method: QueryAdapters
  format:
    - macaddress: 'vdnet index->read->attribute'
      portid: 'vdnet index->read->attribute'
      vswitch: 'vdnet index->read->attribute'
      portgroup: 'vdnet index->read->attribute'
      dvportid: 'vdnet index->read->attribute'
      ipaddress: 'vdnet index->read->attribute'
      teamuplink: 'vdnet index->read->attribute'
      uplinkportid: 'vdnet index->read->attribute'
      activefilters: 'vdnet index->read->attribute'
  sample_value:
    - macaddress: 'vm.[1].vnic.[2]->read->macaddress'
      portid: 'vm.[1].vnic.[2]->read->portid'
      vswitch: 'vm.[1].vnic.[2]->read->vswitch'
      portgroup: 'vm.[1].vnic.[2]->read->portgroup'
      dvportid: 'vm.[1].vnic.[2]->read->dvportid'
      ipaddress: 'vm.[1].vnic.[2]->read->ipaddress'
      teamuplink: 'vm.[1].vnic.[2]->read->teamuplink'
      uplinkportid: 'vm.[1].vnic.[2]->read->uplinkportid'
      activefilters: 'vm.[1].vnic.[2]->read->activefilters'
  derived_components:
    - vm
  params:
    - queryadapters
dhcp:
  derived_components:
    - gateway
  description: "Create DHCP service on gateway edge"
  linkedworkload: GroupingObjectWorkload
  method: CreateAndVerifyComponent
  params:
    - dhcp
  preprocess: PreProcessNSXSubComponent
  postprocess: StoreSubComponentObjects
  format:
  sample_value:
  type: component

faulttolerance:
  description: Turn on/off fault tolerance the specified VM
  type: action
  format: string
  sample_value: enable
  derived_components:
    - VM
  allowed_values:
    - enable
    - disable
  preprocess: PreProcessFaultToleranceVM
  method: FaultTolerance
  params:
    - faulttolerance
    - secondaryhost
secondaryhost:
  description: Secondary Host for the VM to moved after failover
  type: parameter
  method: GetMultipleComponentObjects
  format: vdnet-index
  derived_components:
    - vm
  sample_value: 'host.[1]'
executeedgecli:
  description: "Execute Edge CLI"
  format: "Hash with structure"
  method: ExecuteEdgeCommand
  preprocess: PreProcessVerification
  params:
    - edge_command
    - edge_schema_key
    - executeedgecli
  type: verification
edge_command:
  description: pass the edge command
  format: string
  type: parameter
  sample_value: 'show configuration ospf'
edge_schema_key:
  description: specify the key so as to pick the edge schema
  format: string
  type: parameter
  allowed_values:
     - ospf
     - network
     - edge_firewall
  sample_value: 'ospf'

appliance_pool_id:
  description: Identifier for appliance pool. When specified, MP picks an appliance from this pool
  derived_components:
    - logicalrouter
  format: string
  sample_value: TBD
  type: parameter

appliance_id:
  description: Identifier for appliance. When specified, MP picks this appliance
  derived_components:
    - logicalrouter
  format: string
  sample_value: "6621bcb8-a97d-477f-bc2a-ca97210a637a"
  type: parameter

configure_nsx_manager:
 type: action
 description: Configure NSX manager on the node
 derived_components:
  - nsxcontroller
 format:
  operation: 'ref: operation'
  nsx: 'vdnet index'
 preprocess: PreProcessNestedParametersForAction
 method: configure_nsx_manager
 params:
  - configure_nsx_manager
 sample_value:
  operation: set
  nsx: nsxmanager.[1]

read:
  type: verification
  derived_components:
    - host
  method: Readattributes
  preprocess: PreProcessVerification
  description: 'Used for reading vm attributes from esxcli'
  format:
     'worldid' : null
     'processid' : null
     'vmxcartelid' : null
     'uuid' : null
     'displayname' : null
     'configfile' : null
  samplevalue:
     'worldid' : null
     'processid' : null
     'vmxcartelid' : null
     'uuid' : null
     'displayname' : null
     'configfile' : null
  params:
    - read
# This is a temporary key till get component attribute
# for verification key works
name:
  derived_components:
    - vm
  description: Name of the component
  method: GetComponentAttribute
  format: vdnet index
  type: parameter

rename_vm:
  allowed_values:
    - name : 'testvm'
  derived_components:
    - esx
    - kvm
  description: Renaming the vm
  format:
    name: 'ref: name'
  method: rename_vm
  params:
    - rename_vm
  preprocess: PreProcessShiftTypeAPI
  sample_value:
    state: 'testvm'
  type: action

globalrouteconfig:
  derived_components:
    - gateway
  description: configure global route parameters on edge
  linkedworkload: RouterWorkload
  method: CreateComponent
  preprocess: PreProcessSubComponentsInPython
  type: component
  objtype:
    gateway : 'VDNetLib::VSM::Gateway::GlobalRouteConfig'

configure_arp_entry:
 type: action
 description: Adds/Deletes ARP entry on the host.
 derived_components:
  - vm
 format:
  operation: 'ref: operation'
  destination_mac: 'ref: destination_mac'
  destination_ip: 'ref: destination_ip'
 preprocess: PreProcessNestedParametersForAction
 method: configure_arp_entry
 params:
  - configure_arp_entry
 sample_value:
  operation: 'add'
  destination_mac: '0A:B2:43:59:EF:21'
  destination_ip: '192.169.23.10'


tools_running_status:
   type: verification
   description: gets the VM Tools Running Status for NSX edge vm
   derived_components:
      - vm
   format:
      execution_type: 'cli'
   preprocess: PreProcessVerificationAndParameters
   method: VerifyToolsRunningStatus
   params:
      - execution_type
   sample_value:
      execution_type: 'cli'

nic_status:
   type: verification
   description: gets the NIC status for NSX edge vm
   derived_components:
      - vm
   format:
      vnic_index: 1
      execution_type: 'cli'
   preprocess: PreProcessVerificationAndParameters
   method: VerifyNicStatus
   params:
      - vnic_index
      - execution_type
   sample_value:
      vnic_index: '2'
      execution_type: 'cli'

setipforward:
  derived_components:
    - vm
  description: "Set ip forward on Linux VM"
  format: string
  method: SetIpForward
  params:
    - setipforward
  preprocess: PreProcessShiftTypeAPI
  sample_value: "0 or 1"
  type: action

router_type:
  type: parameter
  derived_components:
    - vse
  description: "local or global vdr"
  format: string
  sample_value: GLOBAL_DISTRIBUTED_ROUTER

read_edgevnic_southbound_bfd_ips:
  type: verification
  derived_components:
    - vm
  method: ReadEdgeSouthboundBfdIps
  preprocess: PreProcessVerification
  description: Get edge vm's ip addresses for southbound and BFD
  format:
     adapter_label: 'Network adapter 3'
     southbound_subnet: '169.0.0.0'
     bfd_subnet: '169.255.255.0'
  samplevalue:
     adapter_label: 'Network adapter 3'
     southbound_subnet: '169.0.0.0'
     bfd_subnet: '169.255.255.0'
     'read_edgevnic_southbound_bfd_ips':
        'southbound_ip[?]defined': ''
        'bfd_ip[?]defined': ''
  params:
    - read_edgevnic_southbound_bfd_ips
    - adapter_label
    - southbound_subnet
    - bfd_subnet

adapter_label:
  allowed_values:
    - 'Network adapter 3'
  derived_components:
    - vm
  description: net adapter label
  format: string
  sample_value: 'Network adapter 3'
  type: parameter

southbound_subnet:
  allowed_values:
    - ipv4 subnet
  derived_components:
    - vm
  description: ipv4 subnet for southbound ip
  format: string
  sample_value: '169.0.0.0'
  type: parameter

bfd_subnet:
  allowed_values:
    - ipv4 subnet
  derived_components:
    - vm
  description: ipv4 subnet for bfd ip
  format: string
  sample_value: '169.255.255.0'
  type: parameter

nexthopmapping:
  derived_components:
    - vm
  description: Get next hop sourcebound ip
  format: nsxmanager.[1].logicalrouter.[1]->read_next_hop->next_hop
  sample_value: nsxmanager.[1].logicalrouter.[1]->read_next_hop->next_hop
  type: parameter

gateways:
  derived_components:
    - all
  description: Get an array of edge objs
  format: vdnet index
  method: GetComponentObjects
  sample_value: 'nsxedge.[-1]'
  type: parameter

read_nexthop_gateway:
  type: verification
  derived_components:
    - vm
  method: ReadNextHopGateway
  preprocess: PreProcessVerification
  postprocess: ReplaceObjectsWithVDNetIndex
  description: 'get vdnet index for an edge vm, who matches next hop'
  format:
     'gateways': vdnet index
     'adapter_label': string
     'nexthopmapping': ip address
  samplevalue:
     'gateways': nsxedge.[-1]
     'adapter_label': 'Network adapter 3'
     'nexthopmapping': nsxmanager.[1].logicalrouter.[1]->read_next_hop->next_hop
     'read_nexthop_gateway':
         'gateway[?]defined': ''
  params:
    - read_nexthop_gateway
    - gateways
    - adapter_label
    - nexthopmapping

get_single_adapter_info:
  derived_components:
    - vm
  description: Returns the information about a specific adapter
  type: verification
  method: get_single_adapter_info
  format:
      - adapter_ip: string
        adapter_name: string
        timeout: integer
  params:
    - get_single_adapter_info
    - execution_type
    - adapter_ip
    - adapter_name
    - timeout
  preprocess: PreProcessVerification
  sample_value:
      - adapter_ip: '192.168.1.1'
        adapter_name: 'eth1'
        timeout: 300

configure_linux_service_state:
  derived_components:
    - vm
  description: Configure linux service to the expect status.
  params:
    - service_name
    - configure_linux_service_state
  preprocess: PreProcessShiftTypeAPI
  format:
    service_name: 'ref: service_name'
    configure_linux_service_state: 'ref: configure_linux_service_state'
  method: VMOpsConfigureLinuxService
  sample_value:
    service_name: 'sshd'
    configure_linux_service_state: 'stop'
  type: action

start_netcat_server:
  derived_components:
    - vm
  description: Starts a netcat server
  type: action
  preprocess: PreProcessNestedParametersForAction
  method: start_netcat_server
  format:
    ip: 'ref: ip'
    port: 'ref: port'
    wait: 'ref: wait'
    udp: 'ref: udp'
    execution_type: 'ref: execution_type'
  params:
    - start_netcat_server
  sample_value:
    ip: '127.0.0.1'
    port: 8888
    udp: True
    wait: False
    execution_type: 'cmd'

start_ncat_server:
  derived_components:
    - vm
  description: Starts an ncat server
  type: action
  preprocess: PreProcessNestedParametersForAction
  method: start_ncat_server
  format:
    ip: 'ref: ip'
    port: 'ref: port'
    wait: 'ref: wait'
    udp: 'ref: udp'
    keep_open: 'ref: keep_open'
    sh_exec_command: 'ref: sh_exec_command'
    execution_type: 'ref: execution_type'
  params:
    - start_netcat_server
  sample_value:
    ip: '127.0.0.1'
    port: 8888
    wait: False
    udp: True
    keep_open: True
    sh_exec_command: '/bin/echo Foo'
    execution_type: 'cmd'

snapshot:
  derived_components:
    - vm
  description: 'Add/Revert/Delete VM snapshot'
  type: action
  method: VMOpsSnapshot
  preprocess: PreProcessShiftTypeAPI
  postprocess: PostProcessWaitForVDNet
  params:
    - snapshot
    - name
    - waitforvdnet
  format:
    snapshot: string
    name: string
    waitforvdnet: 'ref waitforvdnet'
  sample_value:
    snapshot: create
    name: 'VM-snapshot-1'
    waitforvdnet: 'false'
  allowed_values:
    - create
    - revert
    - delete
waitforvdnet:
  derived_components:
    - vm
  description: 'Whether we need additional operations for vdnet
                environment to be ready after snapshot is done on VM'
  type: parameter
  format: boolean
  sample_value: true

validate_mac:
  method: VMOpsValidateMAC
  derived_components:
    - vm
  description: Validate the mac allocschema value
  type: action
  preprocess: PreProcessNestedParametersForAction
  params:
    - mac_allocschema
    - mac_range
  format:
    mac_allocschema: 'ref: mac_allocschema'
    mac_range: 'ref: mac_range'
  sample_value:
    mac_allocschema: 'prefix'
    mac_range: '00:51:22-24'

mac_allocschema:
  type: parameter
  description: schema type of VC allocation
  derived_components:
    - vm
  format: string
  allowed_values:
    - 'prefix'
    - 'oui'
    - 'range'
  sample_value: 'oui'
mac_range:
  type: parameter
  description: range prefix mac addr value used in VC allocation
  derived_components:
    - vm
  format: string
  sample_value: '00:50:20:00:00:00-00:50:20:ff:ff:ff'

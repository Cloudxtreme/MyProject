---
sync: &SYNC
  derived_components:
    - all
  description: Flags whether we should wait for an operation to complete.
  format: boolean
  sample_value: true
  type: parameter
  method: ConvertToPythonBool

bfd_enabled:
  description: bfd enable or disable
  format: boolean
  type: parameter
  sample_value: 'true'

enabled:
  description: flag to specify if given property is enabled or not
  format: boolean
  type: parameter
  sample_value: 'true'

probe_interval:
  description: bfd keepalive timer
  format: integer
  type: parameter
  sample_value: '100'

is_global:
  derived_components:
    - vsm
  description: a flag to indicate of component is global
  format: string
  sample_value: 'true'
  type: parameter

adapter: &ADAPTER
  derived_components:
    - all
  description: Get the corresponding adapter Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'vm.[1].vnic.[1]'
  type: parameter

vminstance: &VMINSTANCE
  derived_components:
    - all
  description: name of the vm instance created in the cloud
  format: string
  sample_value: 'vdnet-vsm-2407082-2-multivc'
  type: parameter

adapters: &ADAPTERS
    derived_components:
      - all
    description: Get an array of adapters Obj
    format: vdnet index
    method: GetMultipleComponentObjects
    sample_value: 'vm.[1-2].vnic.[1-2]'
    type: parameter
addressfamily:
  allowed_values:
    - ipv4
    - ipv6
  derived_components:
    - host
  description: IPv4/IPv6 mode
  format: string
  sample_value: ipv4
  type: parameter
allowedexception:
  derived_components:
    - all
  description: Whether allow the host exists in cluster already
  format:
    - string
  sample_value:
    - hostalreadyexists
  type: parameter
answerfile:
  derived_components:
    - all
  description: answerfile used by Host/VC Workload
  format: path
  sample_value: /tmp/answerfile
  type: parameter
build:
  derived_components:
    - all
  description: Build number
  format: integer
  sample_value: 133280
  type: parameter
cert_thumbprint:
  derived_components:
    - all
  description: ssl thumbprint of inventory item
  format: vdnet index
  method: ProcessParameters
  sample_value: 'nsxmanager.[1]'
  type: parameter
checkifrealized:
  derived_components:
    - all
  description: Sample key to check verification end to end
  format: vdnet index
  method: VerifyBackingComponentExistsForEndpoint
  params:
    - checkifrealized
  preprocess: ConvertParamTuplesToObjects
  sample_value: 'vsm.[-1].networkscope.[].virtualwire.[]'
  type: action
cluster:
  derived_components:
    - all
  description: Get the corresponding cluster Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'vc.[1].cluster.[1]'
  type: parameter
clusters:
  derived_components:
    - all
  description: Get an array of cluster Objs
  format: vdnet index
  method: GetMultipleComponentObjects
  sample_value: 'vc.[1].cluster.[1-2]'
  type: parameter
controllers:
  derived_components:
    - all
  description: Get an array of controller objs
  format: vdnet index
  method: GetComponentObjects
  sample_value: 'vsm.[1].vxlancontroller.[-1]'
  type: parameter
managers:
  derived_components:
    - all
  description: Get an array of manager objs
  format: vdnet index
  method: GetComponentObjects
  sample_value: 'nsxmanager.[-1]'
  type: parameter
datacenter:
  derived_components:
    - all
  description: Get the corresponding datacenter Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'vc.[1].datacenter.[1]'
  type: parameter
datacenters:
  derived_components:
    - all
  description: Get an array of datacenter Objs
  format: vdnet index
  method: GetComponentObjects
  sample_value: 'vc.[1].datacenter.[1-2]'
  type: parameter
datastore:
  derived_components:
    - all
  description: Get datastore object
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'host.[1].datastore.[1]'
  type: parameter
datastoretype:
  allowed_values:
    - shared
    - local
  derived_components:
    - all
  description: 'Datastore to be used for deploying VMs '
  format: string
  sample_value: shared
  type: parameter
description:
  derived_components:
    - all
  description: description
  format: string
  sample_value: security group creation
  type: parameter
DESTINATION_IP_TEMPLATE: &DESTINATION_IP_TEMPLATE
  allowed_values:
    - 'vm.[1].vnic.[1]'
    - 'host.[1].vmknic.[1]'
    - 'host.[1].vmnic.[1]'
  derived_components:
    - all
  description: 'The Destination IP of the aux VM '
  format: vdnet index
  sample_value: 'vm.[1].vnic.[1]'
  type: parameter

destinationip:
  <<: *DESTINATION_IP_TEMPLATE
  method: ProcessIP
destination_mac: &DESTINATION_MAC
  allowed_values:
    - 'vm.[1].vnic.[1]'
    - 'host.[1].vmknic.[1]'
    - 'host.[1].vmnic.[1]'
  derived_components:
    - all
  description: 'The Destination MAC of the aux VM '
  format: vdnet index
  method: GetComponentAttribute
  sample_value: 'vm.[1].vnic.[1]'
  type: parameter
destinationmac:
  <<: *DESTINATION_MAC
  method: ProcessMAC
entity:
  derived_components:
    - all
  description: Get the corresponding entity Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'host.[1]'
  type: parameter
execution_type: &EXECUTION_TYPE
  allowed_values:
    - staf
    - esxcli
    - cli
    - api
  derived_components:
    - all
  description: How does the user plan to execute the request
  format: string
  sample_value: esxcli
  type: parameter
executiontype: *EXECUTION_TYPE
expectedresult:
  allowed_values:
    - PASS
    - FAIL
    - SKIP
  derived_components:
    - all
  description: Expected result of the workloads
  format:
     status_code: 'ref: status_code'
     exception: 'ref: exception'
  sample_value: PASS
  type: parameter
  method: PreProcessNestedParameters
expectedresultcode:
  allowed_values:
    - 201
    - 404
  derived_components:
    - all
  description: 'Expected result code '
  format: integer
  sample_value: 201
  type: parameter
expected_output:
  derived_components:
    - all
  description: 'Expected output (generic)'
  format: string
  sample_value: 'some string data'
  type: parameter
host:
  derived_components:
    - all
  description: Get the corresponding host Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'host.[1]'
  type: parameter
dest_host:
  derived_components:
    - all
  description: Get the corresponding host Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'host.[1]'
  type: parameter
hosts:
  derived_components:
    - all
  description: Get an array of host Obj
  format: vdnet index
  method: GetComponentObjects
  sample_value: 'host.[1-5]'
  type: parameter
inheritanceallowed:
  allowed_values:
    - true
    - false
  derived_components:
    - all
  description: inheritance allowed for the vsm object created
  format: boolean
  sample_value: true
  type: parameter
ipaddress:
  derived_components:
    - all
  description: IP of any node
  format: ip address
  method: ProcessParameters
  sample_value: 172.32.1.1
  type: parameter

port:
  derived_components:
    - all
  description: Any port number
  format: integer
  method: ProcessParameters
  sample_value: 9999
  type: parameter

domain_id:
  derived_components:
    - all
  description: Any domain number
  format: integer
  method: ProcessParameters
  sample_value: 0
  type: parameter

flowset_id:
  derived_components:
    - vm
    - kvm
  description: Any flowset number
  format: integer
  method: ProcessParameters
  sample_value: 9999
  type: parameter

license:
  allowed_values:
    - add
    - assign
  derived_components:
    - all
  description: License key to be added in Inventory
  format: string
  method: ConfigureLicense
  params:
    - license
    - licensekey
    - entity
  preprocess: PreProcessHashTypeAPI
  sample_value: add
  type: action
licensekey:
  derived_components:
    - all
  description: License key to be added in Inventory
  format: String
  sample_value: licensekey
  type: parameter
metadata:
  derived_components:
    - all
  description: class name of managed object
  format:
    expectedresultcode: integer
    expectedvalue: string
    keyundertest: string
  sample_value:
    expectedresultcode: 201
    expectedvalue: test
    keyundertest: display_name
  type: parameter
mgmtaddress:
  derived_components:
    - all
  description: IP of any node
  format: ip address
  method: ProcessParameters
  sample_value: 172.32.1.1
  type: parameter
name: &NAME
  derived_components:
    - all
  description: Name of the component
  format: string
  method: AutogenerateName
  sample_value: test-26663
  type: parameter
resource_type: *NAME
host_name: *NAME
service_name:
  derived_components:
    - all
  description: Name of the service
  format: string
  method: AutogenerateName
  sample_value: nsxa
  type: parameter
noofretries:
  derived_components:
    - all
  description: Number of Retries
  format: integer
  sample_value: 5
  type: parameter
sleepbetweenretry:
  derived_components:
    - all
  description: Sleep time between each retry in seconds
  format: integer
  sample_value: 5
  type: parameter
interval:
  description: 'interval time in seconds'
  type: parameter
  format: integer
  sample_value: 5
ovs:
  derived_components:
    - all
  description: Get the corresponding ovs Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'host.[1].ovs.[1]'
  type: parameter
password:
  derived_components:
    - all
  description: Password to login to the endpoint
  format: string
  method: ProcessParameters
  sample_value: password
  type: parameter
cmd_password:
  derived_components:
    - all
  description: Password to login to the cmd intf of endpoint
  format: string
  method: ProcessParameters
  sample_value: password
  type: parameter
policyid:
  derived_components:
    - all
  description: Name of policy id
  format: string
  sample_value: StaticIpRoutePolicy
  type: parameter
policyoption:
  derived_components:
    - all
  description: Name of policy option
  format: string
  sample_value: FixedStaticIpRoute
  type: parameter
portgroup:
  derived_components:
    - all
  description: Get the corresponding portgroup Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'host.[1].portgroup.[1]'
  type: parameter
portgroups:
  derived_components:
    - all
  description: Get an array of portgroup Obj
  format: vdnet index
  method: GetComponentObjects
  sample_value: 'host.[1].portgroup.[1-2]'
  type: parameter
profilepath:
  derived_components:
    - all
  description: profile path
  format: string
  sample_value: ipRouteConfig.GenericStaticRouteProfile
  type: parameter
resourcepool:
  derived_components:
    - all
  description: Get resource pool object
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'vc.[1].cluster.[1]'
  type: parameter
role:
  derived_components:
    - all
  description: Role of the user
  format: string
  sample_value: API_PROVIDER
  type: parameter
schema:
  derived_components:
    - all
  description: class name of managed object
  format: string
  method: ProcessParameters
  sample_value: /v1/schema/NVPConfigDto
  type: parameter
sleepbetweencombos:
  derived_components:
    - all
  description: Sleep between the combinations
  format: integer
  sample_value: 60
  type: parameter
sleepbetweenworkloads:
  derived_components:
    - all
  description: Sleep between the workloads
  format: integer
  sample_value: 60
  type: parameter
sourceip:
  allowed_values:
    - 'vm.[1].vnic.[1]'
    - 'host.[1].vmknic.[1]'
    - 'host.[1].vmnic.[1]'
  derived_components:
    - all
  description: 'The source IP of the test VM '
  format: vdnet index
  method: ProcessIP
  sample_value: 'vm.[1].vnic.[1]'
  type: parameter
sourcemac:
  allowed_values:
    - 'vm.[1].vnic.[1]'
    - 'host.[1].vmknic.[1]'
    - 'host.[1].vmnic.[1]'
  derived_components:
    - all
  description: 'The source MAC of the test VM '
  format: vdnet index
  method: ProcessMAC
  sample_value: 'vm.[1].vnic.[1]'
  type: parameter
switch:
  derived_components:
    - all
  description: Get the corresponding switch Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'host.[1].vss.[1]'
  type: parameter
switches:
  derived_components:
    - all
  description: Get an array of switch Obj
  format: vdnet index
  method: GetComponentObjects
  sample_value: 'host.[1].vss.[1-2]'
  type: parameter
username:
  derived_components:
    - all
  description: Username to login to the endpoint
  format: string
  method: ProcessParameters
  sample_value: test-26663
  type: parameter
cmd_username:
  derived_components:
    - all
  description: Username to login to the cmd intf of endpoint
  format: string
  method: ProcessParameters
  sample_value: root
  type: parameter
uuid:
  derived_components:
    - all
  description: UUID of VSM node
  format: string
  method: ProcessParameters
  sample_value: uuid-2
  type: parameter
value:
  derived_components:
    - all
  description: value of managed object
  format: string
  method: ProcessParameters
  sample_value: test
  type: parameter
vc:
  derived_components:
    - all
  description: Get the corresponding adapter Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'vc.[1]'
  type: parameter
vces:
  derived_components:
    - all
  description: Get an array of adapter Obj
  format: vdnet index
  method: GetComponentObjects
  sample_value: 'vc.[1-2]'
  type: parameter
verifyendpointattributes:
  description: verifies all the attributes of an API endpoint
  format: 'Hash with following structure: { attribute1 => "equal_to[::]<tuple>" attribute2 => "equal_to[::]<tuple>"}'
  method: GetEndpointAttributes
  params:
    - verifyendpointattributes
  preprocess: PreProcessVerification
  type: verification
vm:
  derived_components:
    - all
  description: Get the corresponding vm Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'vm.[1]'
  type: parameter
vmknics:
  derived_components:
    - all
  description: Get reference to the array of vmnic objects
  format: vdnet index
  method: GetMultipleComponentObjects
  sample_value: 'host.[1].vmknic.[1];;host.[1].vmknic.[2]'
  type: parameter
vmnic:
  derived_components:
    - all
  description: Get the corresponding vmnic Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'host.[1].vmnic.[1]'
  type: parameter
disk:
   description: Disk details for virtual machine
   type: parameter
   derived_components:
      - vm
   format:
      size: string
   sample_value:
      size: 16000000
memory:
   description: Memory for virtual machine
   type: parameter
   derived_components:
      - vm
   format:
      size: string
   sample_value:
      size: 16000
cpus:
   description: Number of cpus for virtual machine
   derived_components:
      - vm
   format:
      cores: string
   type: parameter
   sample_value:
      cores: 4
size:
   description: Memory or disk size
   type: parameter
   derived_components:
      - vm
   format: string
   sample_value: '16000'
cores:
   description: Number of cores
   type: parameter
   derived_components:
      - vm
   format: string
   sample_value: '4'

vmnicadapter: *ADAPTERS

uplink: *ADAPTERS

vms:
  derived_components:
    - all
  description: Get an array of vm Obj
  format: vdnet index
  method: GetComponentObjects
  sample_value: 'vm.[1-2]'
  type: parameter

operation:
  derived_components:
    - all
  description: Operation key
  format: string
  method: ProcessParameters
  sample_value: install
  type: parameter
installtype:
  description: Install and deploy type for various appliances and VMs
  type: parameter
  derived_components:
    - vm
    - host
  format: string
  sample_value: linkedclone
  allowed_values:
    - linkedclone
    - fullclone
    - legacyclone
    - ovfdeploy
ovfurl:
   description: 'absolute path to a ovf file'
   type: parameter
   derived_components:
      - vm
   format: path

ovftool_params:
   description: 'extra args to ovtool invocation'
   type: parameter
   derived_components:
      - vm
   format: string

ovfdiskmode:
   description: 'special extra arg to ovtool invocation for diskmode default: thin'
   type: parameter
   derived_components:
      - vm
   format: string

pswitch:
  type: parameter
  derived_components:
    - all
  description: Get the corresponding pswitch Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'pswitch.[1]'

resource:
 type: parameter
 description: file or url to a specific resource
 derived_components:
  - host
 format: string
 method: ProcessResourceParameter
 sample_value: 'https://a.b.c.d/location_to_ovf'

nsx:
 type: parameter
 description: index of nsx component
 derived_components:
  - all
 method: GetOneObjectFromOneTuple
 format: vdnet index
 sample_value: 'nsxmanager.[1]'

component_attribute_param: &component_attribute_param
    type: parameter
    method: GetComponentAttribute
    format: vdnet index
    derived_components:
      - all

certificate:
    <<: *component_attribute_param
    description: Certificate of the Node used for various connections
    sample_value: kvm.[1]->certificate

shared_secret:
    <<: *component_attribute_param
    description: Shared Secret between any nodes like Hypervisor<->Manager
    sample_value: kvm.[1]->shared_secret

os_type:
    <<: *component_attribute_param
    description: OS Type used for the Hypervisor or OS for NSX
    sample_value: kvm.[1]->os_type

external_id:
    <<: *component_attribute_param
    description: Unique External ID for any nsx based compoenent
    sample_value: kvm.[1]->system_id

nsx_api_user:
    <<: *component_attribute_param
    description: API User for the NSX Nodes like Manager
    sample_value: nsxmanager.[1]->nsx_api_user

device_name:
    <<: *component_attribute_param
    description: Device name for the vtep
    sample_value: kvm.[1].vtep.[1]->device_name

logical_router_id:
    <<: *component_attribute_param
    description: ID of the Logical Router
    sample_value: nsxmanager.[1].logicalrouter.[1]->logical_router_id

adapter_name:
    <<: *component_attribute_param
    description: name of the adapter
    sample_value: vm.[1].vnic.[1]->adapter_name

network_name:
    <<: *component_attribute_param
    description: name of the network
    sample_value: '169.0.0'

ip_version:
    <<: *component_attribute_param
    description: to specify ipform ip4|ip6
    sample_value: 'ip4'

id:
    type: parameter
    description: id/uuid of the entitiy
    derived_components:
     - all
    method: GetComponentAttribute
    format: vdnet index
    sample_value: 'nsxmanager.uplinkprofile.[1]'

host_id:
 type: parameter
 description: id/uuid of the host
 derived_components:
  - all
 method: GetComponentAttribute
 format: vdnet index
 sample_value: 'host.[1]'

admin_state:
 type: parameter
 description: State of the component
 derived_components:
  - logicalport
  - logicalswitch
 format: string
 sample_value: up
 allowed_values:
  - up
  - down

ostype:
  derived_components:
    - all
  description: Type of OS
  format: string
  sample_value: windows
  type: parameter

summary:
  derived_components:
    - all
  description: Detailed description of object getting created or updated
  format: string
  sample_value: Detailed description of object getting created or updated
  type: parameter

begin:
  derived_components:
    - all
  description: Starting value of range
  format: integer or ip address
  method: PickRandomNumberFromARange
  sample_value: 5001
  type: parameter

end:
  derived_components:
    - all
  description: Ending value of range
  format: integer or ip address
  sample_value: 5001
  type: parameter

transport_zone_id:
  derived_components:
    - transportzone
    - logicalswitch
    - transportnode
  description: Transport zone to be used for binding to a logical switch
  format: vdnet index
  method: GetComponentAttribute
  sample_value: 'nsxmanager.[1].transport_zone.[1]'
  type: parameter

node_id:
  derived_components:
    - logicalrouter
    - logicalrouterport
    - logicalswitch
    - transportnode
    - torgateway
  description: id of a node example- transport node
  format: vdnet index
  method: GetComponentAttribute
  sample_value: 'nsxmanager.[1].transportnode.[1]'
  type: parameter

switch_id:
  description: Hypervisor switch id
  format: vdnet index
  sample_value: 'esx.[x].nsxvswitch.[1]'
  derived_components:
     - transportnode
     - logicalport
  method: ProcessParameters
  type: parameter

ipaddresses:
  derived_components:
    - serviceprofile
    - transportnode
    - logicalport
  description: array of ip address
  format:
    - ip address
  sample_value:
    - 192.168.1.1
    - 192.168.1.2
  method: GetMultipleComponentAttributeFromArray
  type: parameter

macaddresses:
  derived_components:
    - All
  description: array of mac address
  format:
    - mac address
  sample_value:
    - 00:11:22:33:44:55
    - 00:11:22:33:aa:bb
  method: GetMultipleComponentAttributeFromArray
  type: parameter

read:
  type: verification
  derived_components:
    - all
  method: ReadComponent
  preprocess: PreProcessVerification
  description: 'Used for reading Grouping Object attributes'
  format:
     'name': 'string'
  samplevalue:
     'name': 'test'
  params:
    - read

controller_ip:
  description: Hypervisor controller ip
  format: vdnet index
  sample_value: 'esx.[x].nsxvswitch.[1]'
  derived_components:
     - transportnode
     - logicalport
  method: GetComponentAttribute
  type: parameter

control_cluster_thumbprint:
  description: Control cluster thumbprint
  format: vdnet index
  sample_value: 'nsxcontroller.[1]'
  derived_components:
     - cluster_node
     - nsxcontroller
  method: GetComponentAttribute
  type: parameter

manager_ip:
  description: Manager ip
  format: vdnet index
  sample_value: 'nsxmanager.[1]'
  derived_components:
     - transportnode
     - logicalport
     - cluster_node
     - nsxmanager
  method: GetComponentAttribute
  type: parameter

manager_thumbprint:
  description: Manager thumbprint
  format: vdnet index
  sample_value: 'nsxmanager.[1]'
  derived_components:
     - transportnode
     - logicalport
     - cluster_node
  method: GetComponentAttribute
  type: parameter

discover:
  derived_components:
    - all
  description: If true then get_id method will be called from CreateComponent
  format: boolean
  sample_value: true
  type: parameter

endpoints:
  derived_components:
    - all
  description: Get an array of controller objs or esx objs or kvm objs which is used for verification module
  format: vdnet index
  method: GetPyComponentObjectsFromTuple
  sample_value: 'nsxmanager.[1].nsxcontroller.[-1] or esx.[1] or kvm.[1]'
  type: parameter

table:
  type: parameter
  description: 'Top level attribute of verification hashes.'
  derived_components:
    - all
  preprocess: PreProcessNestedParameters

adapter_type:
  type: parameter
  description: 'Type of the adapter'
  derived_components:
    - all
  method: GetComponentAttribute
  format: vdnet index
  sample_value: 'vm.[1].vnic.[1]'

adapter_ip: &ADAPTER_IP
  type: parameter
  description: 'IP address of the adapter'
  derived_components:
    - all
  method: GetComponentAttribute
  format: vdnet index
  sample_value: 'vm.[1].vnic.[1]'

netmask:
  type: parameter
  description: 'netmask of a network'
  derived_components:
    - all
  method: GetComponentAttribute
  format: string
  sample_value: '255.255.255.0'

ip_address: *ADAPTER_IP

adapter_mac: &ADAPTER_MAC
  type: parameter
  description: 'Mac Address of the component passed in as value to this key'
  derived_components:
    - all
  method: GetComponentAttribute
  format: vdnet index
  sample_value: 'vm.[1].vnic.[1]'

macaddress: *ADAPTER_MAC

adapter_interface: &ADAPTER_INTERFACE
  type: parameter
  description: 'Name of the interface passed in as value to this key'
  derived_components:
    - all
  method: GetComponentAttribute
  format: vdnet index
  sample_value: 'vm.[1].vnic.[1]'

switch_vni:
  description: VNI of the logical switch.
  format: vdnet index
  sample_value: 'nsxmanager.[1].logicalswitch.[1]'
  derived_components:
     - logicalswitch
  method: GetComponentAttribute
  type: parameter

switch_name:
  description: Name of the switch
  format: vdnet index
  sample_value: 'nsxmanager.[1].logicalswitch.[1]'
  derived_components:
     - logicalswitch
     - transportnode
  method: GetComponentAttribute
  type: parameter

host_switch_name:
  description: Name of the host switch related to a logical switch
  format: string
  sample_value: 'nsxvswitch'
  derived_components:
     - logicalswitch
  type: parameter

map_object:
  derived_components:
    - all
  description: If true then component will be mapped to Python facade
  format: boolean
  sample_value: true
  type: parameter

id_:
  derived_components:
    - all
  description: If true then component will be mapped to Python facade
  format: integer
  sample_value: 1
  method: GetComponentAttribute
  type: parameter

ippool_id:
  derived_components:
    - logicalswitch
    - transportnode
  description: Id of the IP pool
  format: vdnet index
  method: GetComponentAttribute
  sample_value: 'nsxmanager.[1].ippool.[1]'
  type: parameter

csr_id:
  derived_components:
    - csr
  description: Id of CSR generated on NSXManager
  format: string
  method: GetComponentAttribute
  sample_value: 'nsxmanager.[1].csr.[1]'
  type: parameter

switch_fail_mode:
  allowed_values:
    - standalone
    - secure
  derived_components:
    - kvm
  description: Specifies the fail mode of an OVS bridge.
  format: string
  preprocess: GetComponentAttribute
  sample_value: standalone
  type: parameter

controller_role_config:
  type: parameter
  description: Controller role config in add node to MP cluster API
  derived_components:
    - nsxmanager
  method: PreProcessNestedParameters
  format:
    host_msg_client_info:
      account_name: "ref: account_name"
      certificate: "ref: certificate"
      shared_secret: "ref: shared_secret"
    control_plane_server_certificate: "ref: control_plane_server_certificate"

host_msg_client_info:
  type: parameter
  description: Controller role config in add node to MP cluster API
  derived_components:
    - nsxmanager
  method: PreProcessNestedParameters
  format:
    host_msg_client_info:
      account_name: "ref: account_name"
      certificate: "ref: certificate"
      shared_secret: "ref: shared_secret"

mgr_role_config:
  type: parameter
  description: Manager role config in add node to MP cluster API
  derived_components:
    - nsxmanager
  method: PreProcessNestedParameters
  format:
    mgr_role_config:
      username: "ref: username"
      password: "ref: password"
      type: "AddManagementNodeSpec"
      remote_address: "ref: remote_address"
      cert_thumbprint: "ref: cert_thumbprint"
  sample_value:
    external_id: "nsxmanager.[2]"
    mgr_role_config:
      username: "admin"
      password: "default"
      node_type: "AddManagementNodeSpec"
      manager_ip: "nsxmanager.[2]"
      manager_thumbprint: "nsxmanager.[2]"

credential_type:
  type: parameter
  description:  Messaging client credential type.
                Currently, AccountNameAndSharedSecret credential type
                is the only supported type.
  derived_components:
    - nsxmanager
  format:
    credential_type: "AccountNameAndSharedSecret"

account_name:
  type: parameter
  description:  Account name for the messaging client.
                Identifies the client on the message bus.
  derived_components:
    - nsxmanager
  format:
    account_name: string

cluster_node_type:
  description: node type either management or controller
  format: vdnet index
  sample_value: ["AddManagementNodeSpec", "AddControllerNodeSpec"]
  derived_components:
     - nsxmanager
  method: ProcessParameters
  type: parameter

node_type:
  type: parameter
  description: Takes value - AddManagementNodeSpec
  derived_components:
    - nsxmanager
  format:
    node_type: "AddManagementNodeSpec"
  sample_value:
    node_type: "AddManagementNodeSpec"

result_object:
  type: parameter
  description: Result object of API
  derived_component:
   - all
  format: string
  sample_value: 'certificates'

result_count:
  derived_components:
    - all
  description: Result count
  format: integer
  sample_value: 2
  type: parameter

results:
  derived_components:
    - all
  description: result array
  format: array
  sample_value:
    - mtu
    - ipaddress
  type: parameter

strict:
 type: parameter
 description: Flag that is passed to the method executing a request to tell
                it whether to raise an exception or not when the command
                failed.
 derived_component:
   - all
 format: string
 method: ConvertToPythonBool

vmnic_name:
  derived_components:
    - all
  description: name of vmnic on host
  format: string
  method: ProcessParameters
  sample_value: vmnic1
  type: parameter
network:
  derived_components:
    - all
  description: Name of network to be used for components or test VMs deployment.
  format:
    - string
  sample_value:
    - VM Network
  type: parameter
management_network:
  derived_components:
    - all
  description: Name of network to be used for components or test VMs deployment.
  format:
    - string
  sample_value:
    - VM Network
  type: parameter

internal_network:
  derived_components:
    - all
  description: Name of network to be used for components or test VMs deployment.
  format:
    - string
  sample_value:
    - VM Network
  type: parameter

uplink_network:
  derived_components:
    - all
  description: Name of network to be used for components or test VMs deployment.
  format:
    - string
  sample_value:
    - VM Network
  type: parameter

esx:
  derived_components:
    - all
  description: Get the corresponding esx Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'esx.[1]'
  type: parameter

kvm:
  derived_components:
    - all
  description: Get the corresponding kvm Obj
  format: vdnet index
  method: GetOneObjectFromOneTuple
  sample_value: 'kvm.[1]'
  type: parameter

port_id: &PORT_ID
  description: Identifier for all types of ports.
  derived_components:
    - all
  format: String
  sample_value: "9858d43f-c4e9-435a-9e3a-145c4b546127"
  method: GetComponentAttribute
  type: parameter

lr_port_id: *PORT_ID

get_version:
  type: verification
  description: Verify NSXManager version
  derived_components:
    - nsxmanager
    - nsxcontroller
  format:
    version: string
  preprocess: PreProcessVerification
  method: verify_version
  params:
    - get_version
    - execution_type

enable_dhcp:
  derived_components:
    - ovs
  description: Specifies whether or not to enable DHCP on the interface.
  format: bool
  sample_value: true
  type: parameter
  method: ConvertToPythonBool

force:
  description: command option yes/no
  derived_components:
    - all
  format: string
  sample_value: yes/no
  type: parameter

manager_username:
  derived_components:
    - all
  description: Username to login to the NSX Manager
  format: string
  method: ProcessParameters
  sample_value: admin
  type: parameter

manager_password:
  derived_components:
    - all
  description: Password to login to the NSX Manager
  format: string
  method: ProcessParameters
  sample_value: default
  type: parameter

version:
  derived_components:
    - nsxmanager
  description: NSXManager version
  format: string
  method: GetComponentAttribute
  type: parameter
  sample_value:
    version: "nsxmanager.[1].version"

certificate_type:
  derived_components:
    - certificate
    - csr
    - crl
  description: Certificate Type(cert, csr, crl)
  format: string
  sample_value: 'cert/csr/crl'
  type: parameter

status_code:
  derived_components:
    - all
  description: 'Used for expected user input for status code
                RUNTIME_ERROR is internally generated by vdnet
                so this value cannot be used. For reference
                see pylib/vmware/common/status_codes.yaml'
  format: string
  sample_value: SUCCESS
  type: parameter
  allowed_values:
   - SUCCESS
   - FAILURE
   - INVALID_PARAM
   - BAD_REQUEST
   - CONFLICT
   - NOT_FOUND
   - BAD_REQUEST
   - NOT_IMPLEMENTED
   - METHOD_NOT_ALLOWED

reason:
  derived_components:
    - all
  description: Used for expected reason for error
  format: string
  sample_value: "SDK doesnt support read yet"
  type: parameter
  allowed_values:
   - "<any string>"

product_code:
  derived_components:
    - all
  description: Used for expected user input for error
  format: string
  sample_value: 'No such file or directory'
  type: parameter
  allowed_values:
   - 'No such file or directory'

edgetype:
  derived_components:
    - all
  description: NSX Edge type compact large xlarge
  format: string
  method: ProcessParameters
  sample_value: compact
  type: parameter

application_name:
  derived_components:
    - nsxmanager
  description: Application name running on NSXManager
  format: string
  method: ProcessParameters
  type: parameter
  sample_value: apptmgmt

# NSX LSwitch switching_profile_ids
switching_profile_ids:
  type: parameter
  description: List of switching profile identifiers.
  derived_components:
    - logicalswitch
    - logicalport
  format: list
  method: PreProcessNestedParameters
  sample_value:
    switching_profile_ids:
        - switching_profile_value: "nsxmanager.[1].qos_profile.[1]->id"
          switching_profile_key: "qos"
        - switching_profile_value: "nsxmanager.[1].port_mirroring_profile.[1]->id"
          switching_profile_key: "port-mirroring"
switching_profile_value:
  type: parameter
  description: switching profile ID value
  derived_components:
    - all
  format: vdnet index
  method: GetComponentAttribute
  sample_value: "nsxmanager.[1].qos_profile.[1]"
switching_profile_key:
  type: parameter
  description: switching profile ID key
  derived_components:
    - all
  format: string
  sample_value: "qos"

vif_id:
  description: the vif uuid
  derived_components:
    - clusternode
  format: string
  method: GetComponentAttribute
  type: parameter

ip:
  derived_components:
    - all
  description: IP address of entity
  format: 'ip address'
  sample_value: "10.1.1.1"
  type: parameter

timeout:
  derived_components:
    - all
  description: Time after which the command/api returns even if it could not
               ran to completion.
  format: integer
  sample_value: 120
  type: parameter

ui_ip:
  derived_components:
    - nsxmanager
  description: Ip that points to UAS
  format: vdnet index
  sample_value: "nsxmanager.[1]"
  type: parameter

keywords:
  derived_components:
    - all
  description: array of keywords
  format:
    - keyword
  sample_value:
    - 'keyword1'
    - 'keyword2'
  type: parameter

deletelistofcomponents:
  derived_components:
    - any
  description: Delete list of components
  format: list of component names
  postprocess: RemoveListOfReplicatedSubComponentObjects
  method: DeleteComponent
  preprocess: PreProcessDeleteListOfComponents
  sample_value: ['testcomponent','testpylib']
  type: component
  params:
    - execution_type

vnic_name:
  derived_components:
    - all
  description: Name of the vnic on appliance/VM
  format: string
  method: ProcessParameters
  sample_value: "mgmt"
  type: parameter

thumbprint:
  derived_components:
    - all
  description: Thumbprint of appliance/VM
  format: string
  method: ProcessParameters
  type: parameter
  sample_value:
    thumbprint: "thumbprint"

random_number_from_seed:
  derived_components:
    - all
  description: random number from a seed value
  format: string
  method: GetRandomNumberFromSeed
  sample_value: 100001
  type: parameter

tool:
  derived_components:
    - all
  description: name of a tool
  type: parameter
  format: string
  sample_value: 'tshark'

file_name:
  derived_components:
    - all
  description: name/path of a file
  type: parameter
  format: string
  sample_value: '/tmp/foo.cap'

source_file_name:
  derived_components:
    - all
  description: name/path of a file
  type: parameter
  format: string
  sample_value: '/tmp/foo.cap'

dest_file_name:
  derived_components:
    - all
  description: name/path of a file
  type: parameter
  format: string
  sample_value: '/tmp/foo.cap'

source:
  derived_components:
    - all
  description: source file for example
  type: parameter
  format: string
  sample_value: '/tmp/file'

destination:
  derived_components:
    - all
  description: destination file for example
  type: parameter
  format: string
  sample_value: '/dev/null'

read_filter: &READ_FILTER
  method: ResolveTuplesInSpaceSeparatedString
  derived_components:
    - all
  description: filter used while analyzing/reading traffic
  type: parameter
  format: string
  sample_value: '-T fields vm.[1]->GetIPv4 foo bar'

capture_filter: *READ_FILTER

stop_capture:
  derived_components:
    - all
  description: Indicates whether or not to attempt stopping the capture process
  type: parameter
  format: boolean
  sample_value: 'true'

capture:
  derived_components:
    - vm
    - kvm
  description: Start the capture process
  params:
    - start_capture_process
  format:
    - tool
    - file_name
    - adapter_name
    - execution_type
  type: action
  method: start_capture
  preprocess: PreProcessNestedParametersForAction
  sample_value:
    tool: 'tshark'
    file_name: '/tmp/test.cap'
    adapter_name: 'eth1'
    execution_type: 'cmd'

get_ipfix_capture_data:
  derived_components:
    - vm
    - kvm
  description: Gets the IPFIX data captured by any tool
  type: verification
  method: get_ipfix_capture_data
  format:
    table:
      - domain_id: string
        pktcount: integer
  params:
    - get_ipfix_capture_data
    - execution_type
    - stop_capture
    - read_filter
    - file_name
    - tool
  preprocess: PreProcessVerification
  sample_value:
    table:
      - domain_id: 123
        pktcount: 3

get_capture_data:
  derived_components:
    - vm
    - kvm
  description: Gets the data captured by any tool from a file
  type: verification
  method: get_capture_data
  format:
    table:
      - src_ip: string
        dst_ip: string
  params:
    - get_capture_data
    - execution_type
    - stop_capture
    - read_filter
    - file_name
    - tool
  preprocess: PreProcessVerification
  sample_value:
    table:
      - src_ip: '192.168.1.2'
        dst_ip: '192.168.1.3'

vnic_index:
  description: integer position to specify the NIC interface to be queried
  format: String
  sample_value: 4
  derived_components:
     - all
  method: ProcessParameters
  type: parameter

disk_index:
  description: integer position to specify the Disk/ HDD entry to be queried
  format: String
  sample_value: 4
  derived_components:
     - all
  method: ProcessParameters
  type: parameter

ordered:
  derived_components:
    - all
  description: Specifies whether the operation on a list of objects
    should be done per object ordering or not.
  format: string
  sample_value: "true"
  type: parameter

profile_id: &PROFILE_ID
  <<: *component_attribute_param
  description: Identifier for a Profile.
  sample_value: nsxmanager.[1].dhcprelay_profile.[1]

dhcp_relay_profile_id: *PROFILE_ID

service_id: *PROFILE_ID

runtime_params:
  derived_components:
    - all
  description: runtime parameters to set on connection
  format:
    - username
    - password
  sample_value:
    username: 'user1'
    password: 'pass'
  type: parameter

query_params:
  derived_components:
    - all
  description: extra HTTP query parameters for CRUD calls
  format:
    unbind: 'true'
  sample_value:
    query_params:
      unbind: 'true'
  type: parameter

kernel:
  description: string indicating the kernel version
  format: String
  sample_value: '7.0.0.0.0'
  derived_components:
     - all
  method: ProcessParameters
  type: parameter

build_number:
  description: string indicating the build number
  format: String
  sample_value: '2252106'
  derived_components:
     - all
  method: ProcessParameters
  type: parameter

# TODO(Mihir): Workloads like this should be added in PktCap/Traffic type of
# workload definition at YAML KeysDB rather than ParentWorkload. (BZ 1381889).
get_captured_packet_count:
  derived_components:
    - vm
    - kvm
  description: Gets the captured packet count
  type: verification
  method: get_captured_packet_count
  format:
    pktcount: integer
  params:
    - get_captured_packet_count
    - execution_type
    - stop_capture
    - file_name
    - tool
  preprocess: PreProcessVerification
  sample_value:
    pktcount: 3

path:
  derived_components:
    - nsxmanager
  description: 'Directory path'
  format: string
  type: parameter
  sample_value: '/cat_user'

source_path:
  derived_components:
    - nsxmanager
  description: 'Source path'
  format: string
  type: parameter
  sample_value: '/common/nsxcli'

destination_path:
  derived_components:
    - nsxmanager
  description: 'Destination path'
  format: string
  type: parameter
  sample_value: '/tmp'

merge:
  derived_components:
    - all
  description: merge while updating or not
  format: boolean
  sample_value:
    merge: false
  type: parameter

persistdata:
  derived_components:
    - all
  description: Used to save run time paramters
  format: boolean
  sample_value: yes
  type: parameter

test_data:
  description: "Store runtime test data"
  preprocess:  PreProcessNestedParametersForAction
  postprocess: PersistTestData
  method: StoreTestData
  type: action
  sample_value:
    test_data:
      - ipaddress: 192.168.1.4
  params:
    - test_data

get_test_data:
  description: "Retrieves the runtime test data"
  preprocess: ComparePersistedTestData
  method: DummyRetrieveTestData
  sample_value:
    test_data:
      - ipaddress: 192.168.1.4
  params:
    - get_test_data
  type: verification

bfdconfig:
  description: BFD configuration for TOR
  format: string
  method: ProcessParameters
  type: parameter
  sample_value: none
  derived_component:
     - tor

search_log:
  derived_components:
    - nsxmanager
  description: Verify log content on NSX Manager.
  format: string
  method: search_log
  preprocess: PreProcessVerificationAndParameters
  type: verification
  params:
    - search_log
    - execution_type
    - file_name
    - search_string

search_string:
  description: Name of the string to be searched
  derived_components:
    - nsxmanager
  sample_value: 'Exception'
  format: string
  type: parameter

gateway_cluster_member_index:
  description: Edge cluster member index.
  derived_components:
    - logicalrouterport
    - logicalrouter
  format: array
  method: GetComponentAttribute
  sample_value: 'nsxmanager.[1].edgenode.[1]->member_index'
  type: parameter

# Start of parameter keys that map to a method on the python side using
# GetComponentAttribute method
src_port: &TCPUDP_PORT
  allowed_values:
    - 1-65535
  derived_components:
    - all
  description: Any TCP/UDP port number between 1-65535
  format: integer
  method: GetComponentAttribute
  sample_value: 1024
  type: parameter

dst_port: *TCPUDP_PORT

vlan_id:
  allowed_values:
    - 0-4095
  derived_components:
    - all
  description: vlan
  method: GetComponentAttribute
  format: integer
  sample_value: 1
  type: parameter

eth_type: &eth_type
  derived_components:
    - all
  description: EtherType field in the L2 packet header
  format: integer
  method: GetComponentAttribute
  sample_value: 0x800
  type: parameter

ether_type: *eth_type

ip_proto:
  derived_components:
    - all
  description: Protocol number in the IP header
  format: integer
  method: GetComponentAttribute
  sample_value: 6
  type: parameter

count:
  derived_components:
    - all
  type: parameter
  description: "counter for items"
  format: integer
  sample_value: 5

pattern:
  derived_components:
    - all
  type: parameter
  description: "string that you're looking for in a grep"
  format: string
  sample_value: 'example'

source_ip: *ADAPTER_IP

source_mac: *ADAPTER_MAC

destination_ip:
  <<: *DESTINATION_IP_TEMPLATE
  method: GetComponentAttribute
# End of parameter keys that map to a method on the python side using
# GetComponentAttribute method

remote_access:
  derived_components:
    - all
  description: RemoteAccess enabled or disabled
  format: boolean
  type: parameter
  sample_value: true

up_count: &UP_COUNT
  derived_components:
    - all
  description: Number of up elements
  format: integer
  type: parameter
  sample_value: 10

down_count:
  <<: *UP_COUNT
  description: Number of down elements

admin_down_count:
  <<: *UP_COUNT
  description: Number of administratively-down elements

init_count:
  <<: *UP_COUNT
  description: Number of elements in init state

degraded_count:
  <<: *UP_COUNT
  description: Number of degraded elements

unknown_count:
  <<: *UP_COUNT
  description: Number of unknown elements

logical_entity:
  derived_components:
    - all
  description: Any NSX Logical entity
  format: string
  method: GetComponentAttribute
  sample_value: LOGICAL_SWITCH
  type: parameter

section_id:
    <<: *component_attribute_param
    description: ID of the DFW section
    sample_value: nsxmanager.[1].dfwsection.[1]->id

rule_id:
    <<: *component_attribute_param
    description: ID of the DFW rule
    sample_value: nsxmanager.[1].firewallrule.[1]->id

layer:
  derived_components:
    - firewallrule
  description: specifies whether it is layer3 or layer2 nsx firewall rule
  format: string
  sample_value: layer3
  type: parameter

status:
  allowed_values:
    - true
    - false
  derived_components:
    - all
  description: status of setting item
  format: boolean
  sample_value: true
  type: parameter

tags:
  derived_components:
    - all
  description: Opaque identifiers meaningful to the API user(Array of scope and tag)
  format:
    - scope: string
      tag: string
  sample_value:
    - scope: "Scope-1"
      tag: "Tag-1"
  type: parameter

scope:
  derived_components:
    - all
  description: Scope of tag
  format: string
  sample_value: "Scope-1"
  type: parameter

tag:
  derived_components:
    - all
  description: Value of tag
  format: string
  sample_value: "Tag-1"
  type: parameter

credential:
  type: parameter
  description: Credential for login into Host/NSXManager/NSXController
  derived_component:
   - all
  format:
    username: 'ref:username'
    password: 'ref:password'
    thumbprint: 'ref:thumbprint'
  sample_value:
    username: root
    password: ca$hc0w
    thumbprint: 3f6a29eb-f8a7-11e4-ab2a-f5e20e2fc4a6

connection_status: &connection_status
  derived_components:
    - all
  description: status of connection
  format: string
  sample_value: "true"
  type: parameter

control_connection_status: &control_connection_status
  derived_components:
    - nsxmanager
  description: 'Control connection status'
  format:
    status: "ref: status"
    up_count: "ref: up_count"
    down_count: "ref: down_count"
  type: parameter
  sample_value:
    status: UP
    up_count: 2
    down_count: 0

pnic_status:
  <<: *control_connection_status
  description: 'pNic status'

tunnel_status:
  derived_components:
    - all
  description: 'Tunnel status'
  format:
    status: "ref: status"
    bfd_diagnostic: "ref: bfd_diagnostic"
    bfd_status: "ref: bfd_status"
    up_count: "ref: up_count"
    down_count: "ref: down_count"
  type: parameter
  sample_value:
    status: UP
    bfd_diagnostic:
      concatenated_path_down_count: 0
      administratively_down_count: 0
      no_diagnostic_count: 1
      path_down_count: 0
      reverse_concatenated_path_down_count: 0
      control_detection_time_expired_count: 0
      echo_function_failed_count: 0
      forwarding_plane_reset_count: 0
    bfd_status:
      admin_down_count: 0
      up_count: 2
      down_count: 0
      init_count: 0
    up_count: 1
    down_count: 0

bfd_diagnostic:
  derived_components:
    - nsxmanager
  description: In-depth bfd diagnostics
  format:
    concatenated_path_down_count: "ref: concatenated_path_down_count"
    administratively_down_count: "ref: administratively_down_count"
    no_diagnostic_count: "ref: no_diagnostic_count"
    path_down_count: "ref: path_down_count"
    reverse_concatenated_path_down_count: "ref: reverse_concatenated_path_down_count"
    control_detection_time_expired_count: "ref: control_detection_time_expired_count"
    echo_function_failed_count: "ref: echo_function_failed_count"
    forwarding_plane_reset_count: "ref: forwarding_plane_reset_count"
  type: parameter
  sample_value:
    concatenated_path_down_count: 0
    administratively_down_count: 0
    no_diagnostic_count: 1
    path_down_count: 0
    reverse_concatenated_path_down_count: 0
    control_detection_time_expired_count: 0
    echo_function_failed_count: 0
    forwarding_plane_reset_count: 0

mgmt_connection_status: *connection_status
concatenated_path_down_count: *connection_status
administratively_down_count: *connection_status
no_diagnostic_count: *connection_status
path_down_count: *connection_status
reverse_concatenated_path_down_count: *connection_status
control_detection_time_expired_count: *connection_status
echo_function_failed_count: *connection_status
forwarding_plane_reset_count: *connection_status

bfd_status:
  derived_components:
    - nsxmanager
  description: 'In-depth bfd status'
  format:
    admin_down_count: "ref: admin_down_count"
    up_count: "ref: up_count"
    down_count: "ref: down_count"
    init_count: "ref: init_count"
  type: parameter
  sample_value:
    admin_down_count: 0
    up_count: 2
    down_count: 0
    init_count: 0

wait:
  <<: *SYNC
  description: Flag to indicate a blocking vs non-blocking call

keep_open:
  <<: *SYNC
  description: Flag to indicate keep-open mode

sh_exec_command:
  <<: *connection_status
  description: "Command to be executed on shell"

udp:
  <<: *SYNC
  description: Flag to indicate UDP mode

---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Developer: jana
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify that two datacenter,two vds three control plane mode '
Tags: sanity
TestName: TwoDatacenterTwoVDSThreeControlMode
Testbed: ''
TestbedSpec:
  host:
    '[1]': {}
    '[2-3]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-28201
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-28201
              host: 'host.[2]'
        '[2]':
          Cluster:
            '[1]':
              clustername: ComputeCluster2-28201
              host: 'host.[3]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[2]'
          host: 'host.[3]'
          vmnicadapter: 'host.[3].vmnic.[1]'
  vm:
    '[1-3]':
      host: 'host.[2]'
      vmstate: poweroff
    '[4-6]':
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: x.x.x.x
          ipranges:
            - a.a.a.a-b.b.b.b
          name: AutoGenerate
          prefixlength: xx
      multicastiprange:
        '[1]':
          begin: 239.1.1.1
          end: 239.1.1.100
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2];;vc.[1].datacenter.[2].cluster.[1]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 10000
          end: 19000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[2].cluster.[1]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 19
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  CreateVirtualWire2:
    Type: TransportZone
    VirtualWire:
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  CreateVirtualWire3:
    Type: TransportZone
    VirtualWire:
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  ExitSequence:
    -
      - RebootHost
  NetperfTestVirtualWire1:
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: netperf
  NetperfTestVirtualWire2:
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[5].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: netperf
  NetperfTestVirtualWire3:
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[6].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: netperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1],vm.[4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[2],vm.[5]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[3],vm.[6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  RebootHost:
    TestHost: 'host.[1]'
    Type: Host
    reboot: yes
  Sequence:
    -
      - CreateVirtualWire1
    -
      - CreateVirtualWire2
    -
      - CreateVirtualWire3
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM3
      - PoweronVM4
    -
      - PoweronVM5
      - PoweronVM6
    -
      - NetperfTestVirtualWire1
    -
      - NetperfTestVirtualWire2
    -
      - NetperfTestVirtualWire3
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Developer: jana
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify that one datacenter,two vds three control plane mode '
Tags: sanity
TestName: OneDatacenterTwoVDSThreeControlMode
Testbed: ''
TestbedSpec:
  host:
    '[1]': {}
    '[2-3]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-28201
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-28201
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-28201
              host: 'host.[3]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3]'
          vmnicadapter: 'host.[3].vmnic.[1]'
  vm:
    '[1-3]':
      host: 'host.[2]'
      vmstate: poweroff
    '[4-6]':
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: x.x.x.x
          ipranges:
            - a.a.a.a-b.b.b.b
          name: AutoGenerate
          prefixlength: xx
      multicastiprange:
        '[1]':
          begin: 239.1.1.1
          end: 239.1.1.100
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 10000
          end: 19000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 19
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  CreateVirtualWire2:
    Type: TransportZone
    VirtualWire:
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  CreateVirtualWire3:
    Type: TransportZone
    VirtualWire:
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  ExitSequence:
    -
      - RebootHost
  NetperfTestVirtualWire1:
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: netperf
  NetperfTestVirtualWire2:
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[5].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: netperf
  NetperfTestVirtualWire3:
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[6].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: netperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1],vm.[4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[2],vm.[5]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[3],vm.[6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  RebootHost:
    TestHost: 'host.[1]'
    Type: Host
    reboot: yes
  Sequence:
    -
      - CreateVirtualWire1
    -
      - CreateVirtualWire2
    -
      - CreateVirtualWire3
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM3
      - PoweronVM4
    -
      - PoweronVM5
      - PoweronVM6
    -
      - NetperfTestVirtualWire1
    -
      - NetperfTestVirtualWire2
    -
      - NetperfTestVirtualWire3
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To test the scenario where VTEPs have VMs having the same mac addresses in the same VNI.To get a full verification for an VNI relatedinformation on ESX host side and controller side
Tags: sanity
TestName: DuplicateVMMAC
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ArpPingVM1:
    SupportAdapter: 'vm.[2-4].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM1234_FAIL:
    ExpectedResult: Fail
    SupportAdapter: 'vm.[7].vnic.[1]'
    TestAdapter: 'vm.[1-4].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM2:
    SupportAdapter: 'vm.[1].vnic.[1],vm.[3].vnic.[1],vm.[4].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM3:
    SupportAdapter: 'vm.[1].vnic.[1],vm.[2].vnic.[1],vm.[4].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM4:
    SupportAdapter: 'vm.[1-3].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM7:
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM789_FAIL:
    ExpectedResult: Fail
    SupportAdapter: 'vm.[1].vnic.[1]'
    TestAdapter: 'vm.[7-9].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM8:
    SupportAdapter: 'vm.[7].vnic.[1],vm.[9].vnic.[1]'
    TestAdapter: 'vm.[8].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM9:
    SupportAdapter: 'vm.[7-8].vnic.[1]'
    TestAdapter: 'vm.[9].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ChangeVM1AndVM4Vnic1MacAddressTothesame:
    TestAdapter: 'vm.[1].vnic.[1],vm.[4].vnic.[1]'
    Type: NetAdapter
    setmacaddr: 00:11:22:33:14:14
  ChangeVM1Vnic1MacAddress:
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    setmacaddr: 00:11:22:33:11:11
  ChangeVM4Vnic1MacAddress:
    TestAdapter: 'vm.[4].vnic.[1]'
    Type: NetAdapter
    setmacaddr: 00:11:22:33:44:44
  ChangeVM7AndVM8Vnic1MacAddressTothesame:
    TestAdapter: 'vm.[7-8].vnic.[1]'
    Type: NetAdapter
    setmacaddr: 00:11:22:33:78:78
  ChangeVM7Vnic1MacAddress:
    TestAdapter: 'vm.[7].vnic.[1]'
    Type: NetAdapter
    setmacaddr: 00:11:22:33:44:77
  ChangeVM8Vnic1MacAddress:
    TestAdapter: 'vm.[8].vnic.[1]'
    Type: NetAdapter
    setmacaddr: 00:11:22:33:44:88
  CheckVirtualWire23ControllerInfo:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
    Type: Switch
    controllerstatusonhosts: up
    hosts: 'host.[2-4]'
    noofretries: 10
  CheckVirtualWire23MTEPOnAllHost:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
    Type: Switch
    checkmteponhost: 'host.[2-4]'
  CheckVirtualWire2ArpEntryOnHost2:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
    host: 'host.[2]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire2ArpEntryOnHost3:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
    host: 'host.[3]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire2ArpEntryOnHost4:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
    host: 'host.[4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire2MacEntryOnHost2:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
    host: 'host.[2]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire2MacEntryOnHost3:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
      - mac: 'vm.[4].vnic.[1]'
    host: 'host.[3]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire2MacEntryOnHost4:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[4].vnic.[1]'
    host: 'host.[4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire3ArpEntryOnHost2:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    host: 'host.[2]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CheckVirtualWire3ArpEntryOnHost3:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    host: 'host.[3]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CheckVirtualWire3ArpEntryOnHost4:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
    host: 'host.[4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CheckVirtualWire3MacEntryOnHost2:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[8].vnic.[1]'
      - mac: 'vm.[9].vnic.[1]'
    host: 'host.[2]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CheckVirtualWire3MacEntryOnHost3:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[7].vnic.[1]'
      - mac: 'vm.[9].vnic.[1]'
    host: 'host.[3]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CheckVirtualWire3MacEntryOnHost4:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[7].vnic.[1]'
      - mac: 'vm.[8].vnic.[1]'
    host: 'host.[4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  ClearArpEntryForVirtualWire2OnAllHosts:
    Type: Switch
    clearvwireentryonhost: arp
    hosts: 'host.[2-4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  ClearArpEntryForVirtualWire3OnAllHosts:
    Type: Switch
    clearvwireentryonhost: arp
    hosts: 'host.[2-4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  Deploy_Controller2:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[2]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  Deploy_Controller3:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[3]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  DownUpVM1234Vnic1:
    TestAdapter: 'vm.[1-4].vnic.[1]'
    Type: NetAdapter
    devicestatus: 'down,up'
  DownUpVM789Vnic1:
    TestAdapter: 'vm.[7-9].vnic.[1]'
    Type: NetAdapter
    devicestatus: 'down,up'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  IperfTestVirtualWire2Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[1-4].vnic.[1]'
    TestAdapter: 'vm.[1-4].vnic.[1]'
    TestDuration: 30
    Type: Traffic
    toolname: iperf
  IperfTestVirtualWire3Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[7-9].vnic.[1]'
    TestAdapter: 'vm.[7-9].vnic.[1]'
    TestDuration: 30
    Type: Traffic
    toolName: iperf
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[1-4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
      - PoweronVM4
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - IperfTestVirtualWire2Unicat
    -
      - IperfTestVirtualWire3Unicat
    -
      - ArpPingVM1
      - ArpPingVM2
      - ArpPingVM3
      - ArpPingVM4
    -
      - VerifyVirtualWire2VMsArpEntryOnControllers
      - VerifyVirtualWire2VMsMacEntryOnControllers
    -
      - ArpPingVM7
      - ArpPingVM8
      - ArpPingVM9
    -
      - VerifyVirtualWire3VMsArpEntryOnControllers
      - VerifyVirtualWire3VMsMacEntryOnControllers
    -
      - VerifyVirtualWireVtepTableOnControllers
      - VerifyVirtualWireConnectionTableOnControllers
    -
      - ClearArpEntryForVirtualWire2OnAllHosts
    -
      - ArpPingVM1234_FAIL
    -
      - ArpPingVM1
      - ArpPingVM2
      - ArpPingVM3
      - ArpPingVM4
    -
      - CheckVirtualWire2ArpEntryOnHost2
      - CheckVirtualWire2ArpEntryOnHost3
      - CheckVirtualWire2ArpEntryOnHost4
    -
      - CheckVirtualWire2MacEntryOnHost2
      - CheckVirtualWire2MacEntryOnHost3
      - CheckVirtualWire2MacEntryOnHost4
    -
      - ClearArpEntryForVirtualWire3OnAllHosts
    -
      - ArpPingVM789_FAIL
    -
      - ArpPingVM7
      - ArpPingVM8
      - ArpPingVM9
    -
      - CheckVirtualWire3ArpEntryOnHost2
      - CheckVirtualWire3ArpEntryOnHost3
      - CheckVirtualWire3ArpEntryOnHost4
    -
      - CheckVirtualWire3MacEntryOnHost2
      - CheckVirtualWire3MacEntryOnHost3
      - CheckVirtualWire3MacEntryOnHost4
    -
      - CheckVirtualWire23ControllerInfo
    -
      - CheckVirtualWire23MTEPOnAllHost
    -
      - SetVDS12MacAddressChangeSecurityPolicyAccept2
    -
      - SetVDS12ForgedTransmitChangeSecurityPolicyAccept2
    -
      - ChangeVM1AndVM4Vnic1MacAddressTothesame
    -
      - VerifyVirtualWire2VMsMacEntryOnControllers
    -
      - IperfTestVirtualWire2Unicat
    -
      - ChangeVM1Vnic1MacAddress
      - ChangeVM4Vnic1MacAddress
    -
      - DownUpVM1234Vnic1
    -
      - IperfTestVirtualWire2Unicat
    -
      - SetVDS12MacAddressChangeSecurityPolicyAccept3
    -
      - SetVDS12ForgedTransmitChangeSecurityPolicyAccept3
    -
      - ChangeVM7AndVM8Vnic1MacAddressTothesame
    -
      - VerifyVirtualWire3VMsMacEntryOnControllers
    -
      - ChangeVM7Vnic1MacAddress
      - ChangeVM8Vnic1MacAddress
    -
      - DownUpVM789Vnic1
    -
      - IperfTestVirtualWire3Unicat
    -
      - ArpPingVM1
      - ArpPingVM2
      - ArpPingVM3
      - ArpPingVM4
    -
      - VerifyVirtualWire2VMsArpEntryOnControllers
      - VerifyVirtualWire2VMsMacEntryOnControllers
    -
      - ArpPingVM7
      - ArpPingVM8
      - ArpPingVM9
    -
      - VerifyVirtualWire3VMsArpEntryOnControllers
      - VerifyVirtualWire3VMsMacEntryOnControllers
    -
      - VerifyVirtualWireVtepTableOnControllers
      - VerifyVirtualWireConnectionTableOnControllers
    -
      - ClearArpEntryForVirtualWire2OnAllHosts
    -
      - ArpPingVM1234_FAIL
    -
      - ArpPingVM1
      - ArpPingVM2
      - ArpPingVM3
      - ArpPingVM4
    -
      - CheckVirtualWire2ArpEntryOnHost2
      - CheckVirtualWire2ArpEntryOnHost3
      - CheckVirtualWire2ArpEntryOnHost4
    -
      - CheckVirtualWire2MacEntryOnHost2
      - CheckVirtualWire2MacEntryOnHost3
      - CheckVirtualWire2MacEntryOnHost4
    -
      - ClearArpEntryForVirtualWire3OnAllHosts
    -
      - ArpPingVM789_FAIL
    -
      - ArpPingVM7
      - ArpPingVM8
      - ArpPingVM9
    -
      - CheckVirtualWire3ArpEntryOnHost2
      - CheckVirtualWire3ArpEntryOnHost3
      - CheckVirtualWire3ArpEntryOnHost4
    -
      - CheckVirtualWire3MacEntryOnHost2
      - CheckVirtualWire3MacEntryOnHost3
      - CheckVirtualWire3MacEntryOnHost4
    -
      - CheckVirtualWire23ControllerInfo
    -
      - CheckVirtualWire23MTEPOnAllHost
  SetVDS12ForgedTransmitChangeSecurityPolicyAccept2:
    TestSwitch: 'vc.[1].vds.[1-2]'
    Type: Switch
    policytype: forgedTransmits
    securitypolicy: Enable
    virtualwire: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  SetVDS12ForgedTransmitChangeSecurityPolicyAccept3:
    TestSwitch: 'vc.[1].vds.[1-2]'
    Type: Switch
    policytype: forgedTransmits
    securitypolicy: Enable
    virtualwire: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  SetVDS12MacAddressChangeSecurityPolicyAccept2:
    TestSwitch: 'vc.[1].vds.[1-2]'
    Type: Switch
    policytype: macChanges
    securitypolicy: Enable
    virtualwire: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  SetVDS12MacAddressChangeSecurityPolicyAccept3:
    TestSwitch: 'vc.[1].vds.[1-2]'
    Type: Switch
    policytype: macChanges
    securitypolicy: Enable
    virtualwire: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire2VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
      - mac: 'vm.[4].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire3VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[7].vnic.[1]'
      - mac: 'vm.[8].vnic.[1]'
      - mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWireConnectionTableOnControllers:
    Type: Switch
    'VerifyConnectionTableOnController[?]contains':
      - hostip: 'host.[2]'
      - hostip: 'host.[3]'
      - hostip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
  VerifyVirtualWireVtepTableOnControllers:
    Type: Switch
    'VerifyVtepTableOnController[?]contain_once':
      - cluster: 'vc.[1].datacenter.[1].cluster.[2]'
        vtepip: 'host.[2]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[3]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 5
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify that VTEP use static IP Pool '
Tags: sanity
TestName: StaticVTEPIP
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[1]':
          driver: any
    '[2-5]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2-3]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[4-5]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          vmnicadapter: 'host.[2-3].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[4-5]'
          vmnicadapter: 'host.[4-5].vmnic.[1]'
  vm:
    '[1-3]':
      host: 'host.[2]'
      vmstate: poweroff
    '[10-12]':
      host: 'host.[5]'
      vmstate: poweroff
    '[4-6]':
      host: 'host.[3]'
      vmstate: poweroff
    '[7-9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]': &1
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
        '[3]': *1
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          ippool: 'vsm.[1].ippool.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          ippool: 'vsm.[1].ippool.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  Deploy_Controller2:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[2]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  Deploy_Controller3:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[3]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  ExitSequence: []
  NetperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[4].vnic.[1],vm.[10].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1],vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire1Unicat:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[4].vnic.[1],vm.[10].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1],vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire2Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[5].vnic.[1],vm.[11].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1],vm.[8].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire2Unicat:
    L3Protocol: ipv4
    L4Protocol: udp
    SupportAdapter: 'vm.[5].vnic.[1],vm.[11].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1],vm.[8].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  NetperfTestVirtualWire3Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[6].vnic.[1],vm.[12].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1],vm.[9].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire3Unicat:
    L3Protocol: ipv6
    L4Protocol: tcp
    SupportAdapter: 'vm.[6].vnic.[1],vm.[12].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1],vm.[9].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1],vm.[4],vm.[7],vm.[10]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[2],vm.[5],vm.[8],vm.[11]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[3],vm.[6],vm.[9],vm.[12]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM10:
    TestVM: 'vm.[10]'
    Type: VM
    vmstate: poweron
  PoweronVM11:
    TestVM: 'vm.[11]'
    Type: VM
    vmstate: poweron
  PoweronVM12:
    TestVM: 'vm.[12]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - Deploy_Controller2
    -
      - Deploy_Controller3
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM3
      - PoweronVM4
    -
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
    -
      - PoweronVM9
      - PoweronVM10
    -
      - PoweronVM11
      - PoweronVM12
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - NetperfTestVirtualWire2Multicast
    -
      - NetperfTestVirtualWire3Multicast
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: |-
  To verify product working well after password change,
                             https://bugzilla.eng.vmware.com/show_bug.cgi?id=1332303
Tags: sanity
TestName: ChangeControllerPassword
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ChangeControllerPassword:
    TestVM: 'vsm.[1].vxlancontroller.[1]'
    Type: VM
    controllerpassword: NewPassword12!
  CreateNetworkScope2:
    Type: NSX
    networkscope:
      '[2]':
        clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
        name: network-scope-2-29511
    sleepbetweenworkloads: 300
    testnsx: 'vsm.[1]'
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  CreateVirtualWire4:
    Type: TransportZone
    VirtualWire:
      '[4]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[2]'
  CreateVirtualWire5:
    Type: TransportZone
    VirtualWire:
      '[5]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[2]'
  CreateVirtualWire6:
    Type: TransportZone
    VirtualWire:
      '[6]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[2]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteNetworkScope2:
    TestNSX: 'vsm.[1]'
    Type: NSX
    deletenetworkscope: 'vsm.[1].networkscope.[2]'
    sleepbetweenworkloads: 10
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
    -
      - DeleteNetworkScope2
  NetperfTestVirtualWire1Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire2Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
  NetperfTestVirtualWire3Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9],'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  RebootFirstController:
    TestVM: 'vsm.[1].vxlancontroller.[1]'
    Type: VM
    vmstate: reboot
  RestoreDefaultPassword:
    TestVM: 'vsm.[1].vxlancontroller.[1]'
    Type: VM
    controllerpassword: Defaultca$hc0w
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - ChangeControllerPassword
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - RebootFirstController
    -
      - CreateNetworkScope2
    -
      - CreateVirtualWire4
    -
      - CreateVirtualWire5
    -
      - CreateVirtualWire6
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - RestoreDefaultPassword
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify the MTEP function on host '
Tags: sanity
TestName: MTEPFuncTraffic
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CheckMTEPOnHost:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
    Type: Switch
    checkmteponhost: 'host.[2-4]'
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Multicast:
    L3Protocol: 'ipv4,ipv6'
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire1Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: netperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - CheckMTEPOnHost
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To verify the scenario when a Host comes down and comes back up
Tags: sanity
TestName: RebootHostAndCheckConnectionOnController
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Unicat:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: netperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  RebootHost2:
    TestHost: 'host.[2]'
    Type: Host
    reboot: yes
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - NetperfTestVirtualWire1Unicat
    -
      - VerifyVirtualWireConnectionTableOnControllers2
    -
      - VerifyVirtualWireVtepTableOnControllers2
    -
      - RebootHost2
    -
      - PoweronVM1
    -
      - VerifyVirtualWireConnectionTableOnControllers2
    -
      - VerifyVirtualWireVtepTableOnControllers2
    -
      - NetperfTestVirtualWire1Unicat
  VerifyVirtualWireConnectionTableOnControllers2:
    Type: Switch
    'VerifyConnectionTableOnController[?]contains':
      - hostip: 'host.[2]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  VerifyVirtualWireVtepTableOnControllers2:
    Type: Switch
    'VerifyVtepTableOnController[?]contains':
      - cluster: 'vc.[1].datacenter.[1].cluster.[2]'
        vtepip: 'host.[2]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'VNIDatabaseUpdate: To verify whether VTEP updates controller when VNI is added/deleted '
Tags: sanity
TestName: VNIDatabaseUpdate
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1: &1
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1: &2
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1: &3
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1: &4
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1: &5
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1: &6
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1: &7
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1: &8
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1: &9
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  DeleteVirtualWire:
    DeleteVirtualWire: 'vsm.[1].networkscope.[1].virtualwire.[-1]'
    SkipPostProcess: 1
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    sleepbetweenworkloads: 10
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9],'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweroffVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweroff
  PoweroffVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweroff
  PoweroffVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweroff
  PoweroffVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweroff
  PoweroffVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweroff
  PoweroffVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweroff
  PoweroffVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweroff
  PoweroffVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweroff
  PoweroffVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  ReconfigureConnectionBetweenVsmAndEsx:
    TestHost: 'host.[2-4]'
    Type: Host
    reconfigurefirewall: true
    ruleset: rabbitmqproxy
  RemoveVM1FromVirtualWire1: *1
  RemoveVM2FromVirtualWire1: *2
  RemoveVM3FromVirtualWire1: *3
  RemoveVM4FromVirtualWire2: *4
  RemoveVM5FromVirtualWire2: *5
  RemoveVM6FromVirtualWire2: *6
  RemoveVM7FromVirtualWire3: *7
  RemoveVM8FromVirtualWire3: *8
  RemoveVM9FromVirtualWire3: *9
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - VerifyVirtualWire2ExistOnControllers
      - VerifyVirtualWire3ExistOnControllers
      - VerifyVirtualWire2ExistOnHosts
      - VerifyVirtualWire3ExistOnHosts
    -
      - PoweroffVM1
      - PoweroffVM2
      - PoweroffVM3
    -
      - PoweroffVM4
      - PoweroffVM5
      - PoweroffVM6
    -
      - PoweroffVM7
      - PoweroffVM8
      - PoweroffVM9
    -
      - RemoveVM1FromVirtualWire1
      - RemoveVM4FromVirtualWire2
      - RemoveVM7FromVirtualWire3
    -
      - RemoveVM2FromVirtualWire1
      - RemoveVM5FromVirtualWire2
      - RemoveVM8FromVirtualWire3
    -
      - RemoveVM3FromVirtualWire1
      - RemoveVM6FromVirtualWire2
      - RemoveVM9FromVirtualWire3
    -
      - DeleteVirtualWire
    -
      - VerifyVirtualWire2NotExistOnControllers
      - VerifyVirtualWire3NotExistOnControllers
      - VerifyVirtualWire2NotExistOnHosts
      - VerifyVirtualWire3NotExistOnHosts
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - VerifyVirtualWire2ExistOnControllers
      - VerifyVirtualWire3ExistOnControllers
      - VerifyVirtualWire2ExistOnHosts
      - VerifyVirtualWire3ExistOnHosts
    -
      - ReconfigureConnectionBetweenVsmAndEsx
    -
      - PoweroffVM1
      - PoweroffVM2
      - PoweroffVM3
    -
      - PoweroffVM4
      - PoweroffVM5
      - PoweroffVM6
    -
      - PoweroffVM7
      - PoweroffVM8
      - PoweroffVM9
    -
      - RemoveVM1FromVirtualWire1
      - RemoveVM4FromVirtualWire2
      - RemoveVM7FromVirtualWire3
    -
      - RemoveVM2FromVirtualWire1
      - RemoveVM5FromVirtualWire2
      - RemoveVM8FromVirtualWire3
    -
      - RemoveVM3FromVirtualWire1
      - RemoveVM6FromVirtualWire2
      - RemoveVM9FromVirtualWire3
    -
      - DeleteVirtualWire
    -
      - VerifyVirtualWire2NotExistOnControllers
      - VerifyVirtualWire3NotExistOnControllers
      - VerifyVirtualWire2NotExistOnHosts
      - VerifyVirtualWire3NotExistOnHosts
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - VerifyVirtualWire2ExistOnControllers
      - VerifyVirtualWire3ExistOnControllers
      - VerifyVirtualWire2ExistOnHosts
      - VerifyVirtualWire3ExistOnHosts
    -
      - ReconfigureConnectionBetweenVsmAndEsx
  VerifyVirtualWire2ExistOnControllers:
    Type: Switch
    VerifyVirtualWireOnController:
      'vni[?]equal_to': EXIST
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2ExistOnHosts:
    Type: Switch
    VerifyVirtualWireOnHost:
      - 'vni[?]equal_to': EXIST
      - 'vni[?]equal_to': EXIST
      - 'vni[?]equal_to': EXIST
    host: 'host.[2-4]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2NotExistOnControllers:
    Type: Switch
    VerifyVirtualWireOnController:
      'vni[?]equal_to': NOT_EXIST
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2NotExistOnHosts:
    Type: Switch
    VerifyVirtualWireOnHost:
      - 'vni[?]equal_to': NOT_EXIST
      - 'vni[?]equal_to': NOT_EXIST
      - 'vni[?]equal_to': NOT_EXIST
    host: 'host.[2-4]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire3ExistOnControllers:
    Type: Switch
    VerifyVirtualWireOnController:
      'vni[?]equal_to': EXIST
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3ExistOnHosts:
    Type: Switch
    VerifyVirtualWireOnHost:
      - 'vni[?]equal_to': EXIST
      - 'vni[?]equal_to': EXIST
      - 'vni[?]equal_to': EXIST
    host: 'host.[2-4]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3NotExistOnControllers:
    Type: Switch
    VerifyVirtualWireOnController:
      'vni[?]equal_to': NOT_EXIST
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3NotExistOnHosts:
    Type: Switch
    VerifyVirtualWireOnHost:
      - 'vni[?]equal_to': NOT_EXIST
      - 'vni[?]equal_to': NOT_EXIST
      - 'vni[?]equal_to': NOT_EXIST
    host: 'host.[2-4]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify teaming policy: Fail over and SRCMAC '
Tags: 'sanity,physical'
TestName: TeamingPolicy-FailOverAndSRCMAC
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[1]':
          driver: any
    '[2]':
      pswitchport:
        '[1]':
          vmnic: 'host.[2].vmnic.[1]'
        '[2]':
          vmnic: 'host.[2].vmnic.[2]'
      vmnic:
        '[1-2]':
          driver: any
    '[3]':
      pswitchport:
        '[1]':
          vmnic: 'host.[3].vmnic.[1]'
        '[2]':
          vmnic: 'host.[3].vmnic.[2]'
      vmnic:
        '[1-2]':
          driver: any
    '[4-5]':
      vmnic:
        '[1-2]':
          driver: any
  pswitch:
    '[1]':
      ip: XX.XX.XX.XX
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2-3]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[4-5]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          vmnicadapter: 'host.[2-3].vmnic.[1-2]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[4-5]'
          vmnicadapter: 'host.[4-5].vmnic.[1]'
  vm:
    '[1-2]':
      host: 'host.[2]'
      vmstate: poweroff
    '[3-4]':
      host: 'host.[3]'
      vmstate: poweroff
    '[5-6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7-8]':
      host: 'host.[5]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: LOADBALANCE_SRCMAC
          vibs: install
          vlan: 19
          vmkniccount: 4
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  Deploy_Controller2:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[2]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  Deploy_Controller3:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[3]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  DisableIPPIM:
    Mode: sparse-dense-mode
    TestPort: 'host.[2-3].pswitchport.[-1]'
    Type: Port
    disablepim: 19
  EnableIPPIM:
    Mode: sparse-dense-mode
    TestPort: 'host.[2-3].pswitchport.[-1]'
    Type: Port
    enablepim: 19
  ExitSequence:
    -
      - EnableIPPIM
  NetperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[3].vnic.[1],vm.[7].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1],vm.[5].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWireMulticastPass:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2-8].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWireUnicatFail:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[5-8].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    expectedresult: Fail
    toolname: iperf
  NetperfTestVirtualWireUnicatPass:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2-8].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-8]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - Deploy_Controller2
    -
      - Deploy_Controller3
    -
      - CreateVirtualWire1
    -
      - DisableIPPIM
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM3
      - PoweronVM4
    -
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
    -
      - NetperfTestVirtualWireUnicatFail
    -
      - EnableIPPIM
    -
      - NetperfTestVirtualWireUnicatPass
      - NetperfTestVirtualWireMulticastPass
    -
      - UpdateVirtualWireToUnicast
    -
      - NetperfTestVirtualWireUnicatPass
      - NetperfTestVirtualWireMulticastPass
    -
      - UpdateVirtualWireToHybrid
    -
      - NetperfTestVirtualWireUnicatPass
    -
      - NetperfTestVirtualWireMulticastPass
  UpdateVirtualWireToHybrid:
    Type: Switch
    controlplanemode: HYBRID_MODE
    name: test
    reconfigure: true
    sleepbetweenworkloads: 10
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  UpdateVirtualWireToUnicast:
    Type: Switch
    controlplanemode: UNICAST_MODE
    name: test
    reconfigure: true
    sleepbetweenworkloads: 10
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify VXLAN work as 5.1 model if no controller deploy '
Tags: sanity
TestName: NoController
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[1]':
          driver: any
    '[2-3]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          version: 5.1.0
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3]'
          version: 5.1.0
          vmnicadapter: 'host.[3].vmnic.[1]'
  vm:
    '[1-3]':
      host: 'host.[2]'
      vmstate: poweroff
    '[4-6]':
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 19
          vmkniccount: 1
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWireHybridFail:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    expectedresult: Fail
  CreateVirtualWireMulticast:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  CreateVirtualWireUnicastFail:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    expectedresult: Fail
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteAllVirtualWires
  IperfTestVirtualWire1:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  IperfTestVirtualWire1Multicast:
    L3Protocol: 'ipv4,ipv6'
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-2]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWireMulticast
    -
      - CreateVirtualWireUnicastFail
    -
      - CreateVirtualWireHybridFail
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
    -
      - IperfTestVirtualWire1
    -
      - IperfTestVirtualWire1Multicast
    -
      - UpgradeVDS
    -
      - IperfTestVirtualWire1
    -
      - IperfTestVirtualWire1Multicast
  UpgradeVDS:
    TestSwitch: 'vc.[1].vds.[1-2]'
    Type: Switch
    upgradevds: 5.5.0
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify vxlan support guest vlan '
Tags: sanity
TestName: GuestVlan
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  CreateVirtualWire2:
    Type: TransportZone
    VirtualWire:
      '[2]':
        controlplanemode: UNICAST_MODE
        guestvlanallowed: true
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteAllVirtualWires
  IperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  IperfTestVirtualWire1Unicat:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  IperfTestVirtualWire2Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[8].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  IperfTestVirtualWire2Unicat:
    L3Protocol: ipv6
    L4Protocol: tcp
    SupportAdapter: 'vm.[8].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  IperfTestVirtualWire2VlanMulticast:
    L3Protocol: 'ipv4,ipv6'
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[5].vnic.[1].vlaninterface.[1]'
    TestAdapter: 'vm.[4].vnic.[1].vlaninterface.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  IperfTestVirtualWire2VlanUnicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'udp,tcp'
    SupportAdapter: 'vm.[5].vnic.[1].vlaninterface.[1]'
    TestAdapter: 'vm.[4].vnic.[1].vlaninterface.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 100M
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-2]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-5],vm.[7-8]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire1
    -
      - CreateVirtualWire2
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM4
      - PoweronVM5
    -
      - PoweronVM7
      - PoweronVM8
    -
      - SetVLANVM4VM5
    -
      - IperfTestVirtualWire1Unicat
    -
      - IperfTestVirtualWire2VlanUnicat
    -
      - IperfTestVirtualWire2Unicat
    -
      - IperfTestVirtualWire1Multicast
    -
      - IperfTestVirtualWire2VlanMulticast
    -
      - IperfTestVirtualWire2Multicast
  SetVLANVM4VM5:
    TestAdapter: 'vm.[4-5].vnic.[1]'
    Type: NetAdapter
    vlaninterface:
      '[1]':
        vlanid: 21
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'UpdateController: To verify that VTEP updatesthe controller with its local databaseTo verify whether controller storesinformation about all VTEPsTo verify whether a VTEP successfully getsinformation about other relevant VTEPs fromthe controller;one VNI info should not sync to another VNI on controllerTo verify whether a VTEP converts the initial ARP request from a VM into multicastpacket if the controller  doesnt know how to reach the destination ip'
Tags: sanity
TestName: UpdateController
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ArpPingVM1:
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 30
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
    verification: Verification_0
  ArpPingVM4:
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 30
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
    verification: Verification_2
  ArpPingVM56:
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[5-6].vnic.[1]'
    TestDuration: 30
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM7:
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM89:
    SupportAdapter: 'vm.[7].vnic.[1]'
    TestAdapter: 'vm.[8-9].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  CheckWire2MTEPOnHost:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
    Type: Switch
    checkmteponhost: 'host.[2-4]'
  CheckWire3MTEPOnHost:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
    Type: Switch
    checkmteponhost: 'host.[2-4]'
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire2Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    toolName: iperf
    verification: Verification_1
  NetperfTestVirtualWire3Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9],'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - ArpPingVM1
    -
      - CheckWire2MTEPOnHost
    -
      - CheckWire3MTEPOnHost
    -
      - NetperfTestVirtualWire2Unicat
    -
      - ArpPingVM4
      - ArpPingVM56
    -
      - VerifyVirtualWire2VMsArpEntryOnControllers
      - VerifyVM123789ArpEntryNotOnVirtualwire2Controller
      - VerifyVirtualWire2VMsMacEntryOnControllers
      - VerifyVM123789MacEntryNotOnVirtualwire2Controller
      - VerifyVirtualWire2ConnectionTableOnControllers
      - VerifyVirtualWire2VtepTableOnControllers
    -
      - NetperfTestVirtualWire3Unicat
    -
      - ArpPingVM7
      - ArpPingVM89
    -
      - VerifyVirtualWire3VMsArpEntryOnControllers
      - VerifyVM123456ArpEntryNotOnVirtualwire3Controller
      - VerifyVirtualWire3VMsMacEntryOnControllers
      - VerifyVM123456MacEntryNotOnVirtualwire3Controller
      - VerifyVirtualWire3ConnectionTableOnControllers
      - VerifyVirtualWire3VtepTableOnControllers
  Verification_0:
    PktCapVerificaton:
      innerpkttype: broadcast
      l3protocolheader: 0x08
      pktcapfilter: 'count 15,vxlan vsm.[1].networkscope.[1].virtualwire.[1],flowdirection tx,capturestage post'
      pktcount: 10+
      pkttype: multicast
      target: 'host.[2].vmnic.[1]'
      tos: 0x0
      verificationtype: pktcapuserworld
      vxlanid: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  Verification_1:
    PktCapVerificaton:
      innerpkttype: unicast
      innertos: 0x0
      l3protocolheader: 0x08
      pktcapfilter: 'count 15,vxlan vsm.[1].networkscope.[1].virtualwire.[2],flowdirection tx,capturestage post'
      pktcount: 10+
      pkttype: unicast
      target: 'host.[2].vmnic.[1]'
      tos: 0x0
      verificationtype: pktcapuserworld
      vxlanid: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  Verification_2:
    PktCapVerificaton:
      innerpkttype: broadcast
      l3protocolheader: 0x0a
      pktcapfilter: 'count 15,vxlan vsm.[1].networkscope.[1].virtualwire.[2],flowdirection tx,capturestage post'
      pktcount: 10+
      pkttype: unicast
      target: 'host.[2].vmnic.[1]'
      tos: 0x0
      verificationtype: pktcapuserworld
      vxlanid: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVM123456ArpEntryNotOnVirtualwire3Controller:
    Type: Switch
    'VerifyArpEntryOnController[?]not_contains':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
      - ip: 'vm.[5].vnic.[1]'
        mac: 'vm.[5].vnic.[1]'
      - ip: 'vm.[6].vnic.[1]'
        mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVM123456MacEntryNotOnVirtualwire3Controller:
    Type: Switch
    'VerifyMacEntryOnController[?]not_contains':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
      - mac: 'vm.[4].vnic.[1]'
      - mac: 'vm.[5].vnic.[1]'
      - mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVM123789ArpEntryNotOnVirtualwire2Controller:
    Type: Switch
    'VerifyArpEntryOnController[?]not_contains':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVM123789MacEntryNotOnVirtualwire2Controller:
    Type: Switch
    'VerifyMacEntryOnController[?]not_contains':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
      - mac: 'vm.[7].vnic.[1]'
      - mac: 'vm.[8].vnic.[1]'
      - mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2ConnectionTableOnControllers:
    Type: Switch
    'VerifyConnectionTableOnController[?]contain_once':
      - hostip: 'host.[2]'
      - hostip: 'host.[3]'
      - hostip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
      - ip: 'vm.[5].vnic.[1]'
        mac: 'vm.[5].vnic.[1]'
      - ip: 'vm.[6].vnic.[1]'
        mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[4].vnic.[1]'
      - mac: 'vm.[5].vnic.[1]'
      - mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VtepTableOnControllers:
    Type: Switch
    'VerifyVtepTableOnController[?]contain_once':
      - cluster: 'vc.[1].datacenter.[1].cluster.[2]'
        vtepip: 'host.[2]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[3]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire3ConnectionTableOnControllers:
    Type: Switch
    'VerifyConnectionTableOnController[?]contain_once':
      - hostip: 'host.[2]'
      - hostip: 'host.[3]'
      - hostip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[7].vnic.[1]'
      - mac: 'vm.[8].vnic.[1]'
      - mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3VtepTableOnControllers:
    Type: Switch
    'VerifyVtepTableOnController[?]contain_once':
      - cluster: 'vc.[1].datacenter.[1].cluster.[2]'
        vtepip: 'host.[2]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[3]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify one cluster mapping to multiple TZ '
Tags: sanity
TestName: OneClusterInMultipleTZ
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateNetworkScope2:
    Type: NSX
    networkscope:
      '[2]':
        clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
        name: network-scope-2-29511
    testnsx: 'vsm.[1]'
  CreateVirtualWire1:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  CreateVirtualWire4:
    Type: TransportZone
    VirtualWire:
      '[4]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[2]'
  CreateVirtualWire5:
    Type: TransportZone
    VirtualWire:
      '[5]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[2]'
  CreateVirtualWire6:
    Type: TransportZone
    VirtualWire:
      '[6]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[2]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteNetworkScope2:
    TestNSX: 'vsm.[1]'
    Type: NSX
    deletenetworkscope: 'vsm.[1].networkscope.[2]'
    sleepbetweenworkloads: 10
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteAllVirtualWires
    -
      - DeleteNetworkScope2
  NetperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire1Unicat:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire2Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[5].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire2Unicat:
    L3Protocol: ipv4
    L4Protocol: udp
    SupportAdapter: 'vm.[5].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  NetperfTestVirtualWire3Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[8].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire3Unicat:
    L3Protocol: ipv6
    L4Protocol: tcp
    SupportAdapter: 'vm.[8].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-2]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-5]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-8]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateNetworkScope2
    -
      - CreateVirtualWire1
    -
      - CreateVirtualWire4
    -
      - CreateVirtualWire5
    -
      - CreateVirtualWire6
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM7
      - PoweronVM4
    -
      - PoweronVM5
      - PoweronVM8
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - NetperfTestVirtualWire2Multicast
    -
      - NetperfTestVirtualWire3Multicast
    -
      - ShrinkVXLANCluster
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - NetperfTestVirtualWire2Multicast
    -
      - NetperfTestVirtualWire3Multicast
  ShrinkVXLANCluster:
    Type: TransportZone
    clusters: 'vc.[1].datacenter.[1].cluster.[2]'
    testtransportzone: 'vsm.[1].networkscope.[2]'
    transportzoneaction: shrink
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To verify the VTEP support mutiple different Guest OS on host
Tags: sanity
TestName: VMMultipleOS
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ArpPingVM1:
    SupportAdapter: 'vm.[2-4].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM1234_FAIL:
    ExpectedResult: Fail
    SupportAdapter: 'vm.[7].vnic.[1]'
    TestAdapter: 'vm.[1-4].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM2:
    SupportAdapter: 'vm.[1].vnic.[1],vm.[3-4].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM3:
    SupportAdapter: 'vm.[1-2].vnic.[1],vm.[4].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM4:
    SupportAdapter: 'vm.[1-3].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM7:
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM789_FAIL:
    ExpectedResult: Fail
    SupportAdapter: 'vm.[1].vnic.[1]'
    TestAdapter: 'vm.[7-9].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM8:
    SupportAdapter: 'vm.[7].vnic.[1],vm.[9].vnic.[1]'
    TestAdapter: 'vm.[8].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM9:
    SupportAdapter: 'vm.[7-8].vnic.[1]'
    TestAdapter: 'vm.[9].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  CheckVirtualWire23ControllerInfo:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
    Type: Switch
    controllerstatusonhosts: up
    hosts: 'host.[2-4]'
    noofretries: 10
  CheckVirtualWire23MTEPOnAllHost:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
    Type: Switch
    checkmteponhost: 'host.[2-4]'
  CheckVirtualWire2ArpEntryOnHost2:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
    host: 'host.[2]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire2ArpEntryOnHost3:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
    host: 'host.[3]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire2ArpEntryOnHost4:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
    host: 'host.[4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire2MacEntryOnHost2:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
    host: 'host.[2]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire2MacEntryOnHost3:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
      - mac: 'vm.[4].vnic.[1]'
    host: 'host.[3]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire2MacEntryOnHost4:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[4].vnic.[1]'
    host: 'host.[4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CheckVirtualWire3ArpEntryOnHost2:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    host: 'host.[2]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CheckVirtualWire3ArpEntryOnHost3:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    host: 'host.[3]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CheckVirtualWire3ArpEntryOnHost4:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
    host: 'host.[4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CheckVirtualWire3MacEntryOnHost2:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[8].vnic.[1]'
      - mac: 'vm.[9].vnic.[1]'
    host: 'host.[2]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CheckVirtualWire3MacEntryOnHost3:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[7].vnic.[1]'
      - mac: 'vm.[9].vnic.[1]'
    host: 'host.[3]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CheckVirtualWire3MacEntryOnHost4:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[7].vnic.[1]'
      - mac: 'vm.[8].vnic.[1]'
    host: 'host.[4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  ClearArpEntryForVirtualWire2OnAllHosts:
    Type: Switch
    clearvwireentryonhost: arp
    hosts: 'host.[2-4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  ClearArpEntryForVirtualWire3OnAllHosts:
    Type: Switch
    clearvwireentryonhost: arp
    hosts: 'host.[2-4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  Deploy_Controller2:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[2]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  Deploy_Controller3:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[3]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  IperfTestVirtualWire2Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[1-4].vnic.[1]'
    TestAdapter: 'vm.[1-4].vnic.[1]'
    TestDuration: 30
    Type: Traffic
    toolname: iperf
  IperfTestVirtualWire3Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[7-9].vnic.[1]'
    TestAdapter: 'vm.[7-9].vnic.[1]'
    TestDuration: 30
    Type: Traffic
    toolName: iperf
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[1-4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
      - PoweronVM4
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - IperfTestVirtualWire2Unicat
    -
      - IperfTestVirtualWire3Unicat
    -
      - ArpPingVM1
      - ArpPingVM2
      - ArpPingVM3
      - ArpPingVM4
    -
      - VerifyVirtualWire2VMsArpEntryOnControllers
      - VerifyVirtualWire2VMsMacEntryOnControllers
    -
      - ArpPingVM7
      - ArpPingVM8
      - ArpPingVM9
    -
      - VerifyVirtualWire3VMsArpEntryOnControllers
      - VerifyVirtualWire3VMsMacEntryOnControllers
    -
      - VerifyVirtualWireVtepTableOnControllers
      - VerifyVirtualWireConnectionTableOnControllers
    -
      - ClearArpEntryForVirtualWire2OnAllHosts
    -
      - ArpPingVM1234_FAIL
    -
      - ArpPingVM1
      - ArpPingVM2
      - ArpPingVM3
      - ArpPingVM4
    -
      - CheckVirtualWire2ArpEntryOnHost2
      - CheckVirtualWire2ArpEntryOnHost3
      - CheckVirtualWire2ArpEntryOnHost4
    -
      - CheckVirtualWire2MacEntryOnHost2
      - CheckVirtualWire2MacEntryOnHost3
      - CheckVirtualWire2MacEntryOnHost4
    -
      - ClearArpEntryForVirtualWire3OnAllHosts
    -
      - ArpPingVM789_FAIL
    -
      - ArpPingVM7
      - ArpPingVM8
      - ArpPingVM9
    -
      - CheckVirtualWire3ArpEntryOnHost2
      - CheckVirtualWire3ArpEntryOnHost3
      - CheckVirtualWire3ArpEntryOnHost4
    -
      - CheckVirtualWire3MacEntryOnHost2
      - CheckVirtualWire3MacEntryOnHost3
      - CheckVirtualWire3MacEntryOnHost4
    -
      - CheckVirtualWire23ControllerInfo
    -
      - CheckVirtualWire23MTEPOnAllHost
  VerifyVirtualWire2VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
      - mac: 'vm.[4].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire3VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[7].vnic.[1]'
      - mac: 'vm.[8].vnic.[1]'
      - mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWireConnectionTableOnControllers:
    Type: Switch
    'VerifyConnectionTableOnController[?]contains':
      - hostip: 'host.[2]'
      - hostip: 'host.[3]'
      - hostip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
  VerifyVirtualWireVtepTableOnControllers:
    Type: Switch
    'VerifyVtepTableOnController[?]contain_once':
      - cluster: 'vc.[1].datacenter.[1].cluster.[2]'
        vtepip: 'host.[2]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[3]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 5
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify VXLAN configuration order: 1.no controller deploy or vds versoin less than 5.5: only can create multicast mode logical switch2.after deploy one or more controller, upgrade vds version to 5.5: can create 3 control plane(unicast/multicast/hybrid) mode logical switch'
Tags: sanity
TestName: ConfigOrder
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[1]':
          driver: any
    '[2-3]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          version: 5.1.0
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3]'
          version: 5.1.0
          vmnicadapter: 'host.[3].vmnic.[1]'
  vm:
    '[1-3]':
      host: 'host.[2]'
      vmstate: poweroff
    '[4-6]':
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 19
          vmkniccount: 1
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWireHybrid:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  CreateVirtualWireHybridFail:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    expectedresult: Fail
  CreateVirtualWireMulticast:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  CreateVirtualWireUnicast:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  CreateVirtualWireUnicastFail:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    expectedresult: Fail
  DeleteAllController:
    TestNSX: 'vsm.[1]'
    Type: NSX
    deletevxlancontroller: 'vsm.[1].vxlancontroller.[-1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeployController1:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[1]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  DeployController2:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[2]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  DeployController3:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[3]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteAllVirtualWires
    -
      - DeleteAllController
  IperfTestVirtualWire1:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  IperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  IperfTestVirtualWire2:
    L3Protocol: ipv4
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[5].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 100M
  IperfTestVirtualWire2Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[5].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  IperfTestVirtualWire3:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[6].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  IperfTestVirtualWire3Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[6].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1],vm.[4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[2],vm.[5]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[3],vm.[6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWireMulticast
    -
      - CreateVirtualWireUnicastFail
    -
      - CreateVirtualWireHybridFail
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM4
    -
      - IperfTestVirtualWire1
    -
      - IperfTestVirtualWire1Multicast
    -
      - UpgradeVDS
    -
      - DeployController1
    -
      - DeployController2
    -
      - DeployController3
    -
      - CreateVirtualWireUnicast
    -
      - CreateVirtualWireHybrid
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM2
      - PoweronVM5
    -
      - PoweronVM3
      - PoweronVM6
    -
      - IperfTestVirtualWire1
    -
      - IperfTestVirtualWire2
    -
      - IperfTestVirtualWire3
    -
      - IperfTestVirtualWire1Multicast
    -
      - IperfTestVirtualWire2Multicast
    -
      - IperfTestVirtualWire3Multicast
  UpgradeVDS:
    TestSwitch: 'vc.[1].vds.[1-2]'
    Type: Switch
    upgradevds: 5.5.0
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To verify that VM IP address overlapin different logical switch
Tags: sanity
TestName: VMIPAddressOverLap
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ArpPingVM4:
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM56:
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[5-6].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM7:
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM89:
    SupportAdapter: 'vm.[7].vnic.[1]'
    TestAdapter: 'vm.[8-9].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  IperfTestVirtualWire1Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  IperfTestVirtualWire2Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  IperfTestVirtualWire3Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
    udpbandwidth: 10000M
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9],'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - SetDuplicateIPForVM4VM7
    -
      - SetDuplicateIPForVM5VM8
    -
      - SetDuplicateIPForVM6VM9
    -
      - IperfTestVirtualWire1Unicat
    -
      - IperfTestVirtualWire2Unicat
    -
      - ArpPingVM4
      - ArpPingVM56
    -
      - VerifyVirtualWire2VMsArpEntryOnControllers
      - VerifyVirtualWire2VMsMacEntryOnControllers
    -
      - IperfTestVirtualWire3Unicat
    -
      - ArpPingVM7
      - ArpPingVM89
    -
      - VerifyVirtualWire3VMsArpEntryOnControllers
      - VerifyVirtualWire3VMsMacEntryOnControllers
  SetDuplicateIPForVM4VM7:
    TestAdapter: 'vm.[4].vnic.[1],vm.[7].vnic.[1]'
    Type: NetAdapter
    ipv4: 192.168.200.1
  SetDuplicateIPForVM5VM8:
    TestAdapter: 'vm.[5].vnic.[1],vm.[8].vnic.[1]'
    Type: NetAdapter
    ipv4: 192.168.200.2
  SetDuplicateIPForVM6VM9:
    TestAdapter: 'vm.[6].vnic.[1],vm.[9].vnic.[1]'
    Type: NetAdapter
    ipv4: 192.168.200.3
  VerifyVirtualWire2VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
      - ip: 'vm.[5].vnic.[1]'
        mac: 'vm.[5].vnic.[1]'
      - ip: 'vm.[6].vnic.[1]'
        mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[4].vnic.[1]'
      - mac: 'vm.[5].vnic.[1]'
      - mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire3VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[7].vnic.[1]'
      - mac: 'vm.[8].vnic.[1]'
      - mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify the scenarios list below: 1) whether netcpa establishes connections for VNI with right controllers after the VNI-controller  mapping database is downloaded.2) the link between a host and the controller  goes down.'
Tags: sanity
TestName: CheckControllerConnnectionOnHost
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CheckVirtualWireControllerInfo_Down:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
    Type: Switch
    controllerstatusonhosts: down
    hosts: 'host.[2-4]'
    noofretries: 10
  CheckVirtualWireControllerInfo_UP:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
    Type: Switch
    controllerstatusonhosts: up
    hosts: 'host.[2-4]'
    noofretries: 10
  Create3VirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  DisabledFirewallOnAllHosts:
    TestHost: 'host.[2-4]'
    Type: Host
    firewall: setstatus
    status: disabled
  DisabledNetcpaServiceOnAllHost:
    TestHost: 'host.[2-4]'
    Type: Host
    firewall: setenabled
    flag: disabled
    servicename: netCP
  EnabledFirewallOnallHosts:
    TestHost: 'host.[2-4]'
    Type: Host
    firewall: setstatus
    status: enabled
  EnabledNetcpaServiceOnAllHost:
    TestHost: 'host.[2-4]'
    Type: Host
    firewall: setenabled
    flag: enabled
    servicename: netCP
  ExitSequence:
    -
      - DisabledFirewallOnAllHosts
    -
      - EnabledNetcpaServiceOnAllHost
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  IperfTestVirtualWire1:
    L4Protocol: tcp
    SupportAdapter: 'vm.[1-3].vnic.[1]'
    TestAdapter: 'vm.[1-3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
  IperfTestVirtualWire2:
    L4Protocol: tcp
    SupportAdapter: 'vm.[4-6].vnic.[1]'
    TestAdapter: 'vm.[4-6].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
  IperfTestVirtualWire2UnicatFail:
    L4Protocol: tcp
    SupportAdapter: 'vm.[4-6].vnic.[1]'
    TestAdapter: 'vm.[4-6].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    expectedresult: Fail
    toolName: iperf
  IperfTestVirtualWire3:
    L4Protocol: tcp
    SupportAdapter: 'vm.[7-9].vnic.[1]'
    TestAdapter: 'vm.[7-9].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9],'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - Create3VirtualWires
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - EnabledFirewallOnallHosts
    -
      - DisabledNetcpaServiceOnAllHost
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - IperfTestVirtualWire1
    -
      - CheckVirtualWireControllerInfo_Down
    -
      - IperfTestVirtualWire2UnicatFail
    -
      - EnabledNetcpaServiceOnAllHost
    -
      - CheckVirtualWireControllerInfo_UP
    -
      - IperfTestVirtualWire1
    -
      - IperfTestVirtualWire2
    -
      - IperfTestVirtualWire3
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Developer: jana
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify the ip learning function on host that one datacenter,two vds three control plane mode '
Tags: sanity
TestName: IPLearning
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1:
    L4Protocol: tcp
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 30
    Type: Traffic
    toolName: iperf
  NetperfTestVirtualWire2:
    L4Protocol: udp
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 30
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  NetperfTestVirtualWire3:
    L4Protocol: tcp
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 30
    Type: Traffic
    toolName: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - VerifyIpLearningVM1NotOnHost
      - VerifyIpLearningVM2NotOnHost
    -
      - NetperfTestVirtualWire1
    -
      - VerifyIpLearningVM1OnHost
      - VerifyIpLearningVM2OnHost
      - VerifyIpLearningVM3OnHost
    -
      - NetperfTestVirtualWire2
    -
      - VerifyIpLearningVM4OnHost
      - VerifyIpLearningVM5OnHost
      - VerifyIpLearningVM6OnHost
    -
      - NetperfTestVirtualWire3
    -
      - VerifyIpLearningVM7OnHost
      - VerifyIpLearningVM8OnHost
      - VerifyIpLearningVM9OnHost
  VerifyIpLearningVM1NotOnHost:
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    'VerifyIpLearningOnHost[?]not_contains':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
  VerifyIpLearningVM1OnHost:
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    'VerifyIpLearningOnHost[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
    noofretries: 5
  VerifyIpLearningVM2NotOnHost:
    TestAdapter: 'vm.[2].vnic.[1]'
    Type: NetAdapter
    'VerifyIpLearningOnHost[?]not_contains':
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
  VerifyIpLearningVM2OnHost:
    TestAdapter: 'vm.[2].vnic.[1]'
    Type: NetAdapter
    'VerifyIpLearningOnHost[?]contain_once':
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
    noofretries: 5
  VerifyIpLearningVM3OnHost:
    TestAdapter: 'vm.[3].vnic.[1]'
    Type: NetAdapter
    'VerifyIpLearningOnHost[?]contain_once':
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
    noofretries: 5
  VerifyIpLearningVM4OnHost:
    TestAdapter: 'vm.[4].vnic.[1]'
    Type: NetAdapter
    'VerifyIpLearningOnHost[?]contain_once':
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
    noofretries: 5
  VerifyIpLearningVM5OnHost:
    TestAdapter: 'vm.[5].vnic.[1]'
    Type: NetAdapter
    'VerifyIpLearningOnHost[?]contain_once':
      - ip: 'vm.[5].vnic.[1]'
        mac: 'vm.[5].vnic.[1]'
    noofretries: 5
  VerifyIpLearningVM6OnHost:
    TestAdapter: 'vm.[6].vnic.[1]'
    Type: NetAdapter
    'VerifyIpLearningOnHost[?]contain_once':
      - ip: 'vm.[6].vnic.[1]'
        mac: 'vm.[6].vnic.[1]'
    noofretries: 5
  VerifyIpLearningVM7OnHost:
    TestAdapter: 'vm.[7].vnic.[1]'
    Type: NetAdapter
    'VerifyIpLearningOnHost[?]contain_once':
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
    noofretries: 5
  VerifyIpLearningVM8OnHost:
    TestAdapter: 'vm.[8].vnic.[1]'
    Type: NetAdapter
    'VerifyIpLearningOnHost[?]contain_once':
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
    noofretries: 5
  VerifyIpLearningVM9OnHost:
    TestAdapter: 'vm.[9].vnic.[1]'
    Type: NetAdapter
    'VerifyIpLearningOnHost[?]contain_once':
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    noofretries: 5
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'VMPropertyUpdate: To verify whether controllerupdates all VTEPs  about change in a VMs propertyVTEPIPUpdate: To verify whether change of vmknic ip of a VTEP is  propagated to the controller.VMMultipleIP: To verify whether VTEP updates the controller when a VM has multiple IP addresses'
Tags: sanity
TestName: VMPropertyUpdate
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  AddVm4Vnic1SubIPs:
    IpInterface:
      '[1]':
        ipv4address: 192.168.200.4
        netmask: 255.255.0.0
        subipindex: 1
      '[2]':
        ipv4address: 192.168.200.5
        netmask: 255.255.0.0
        subipindex: 2
    TestAdapter: 'vm.[4].vnic.[1]'
    Type: NetAdapter
  ArpPingVM4:
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM4SubIP1:
    SupportAdapter: 'vm.[5].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1].ipinterface.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM4SubIP2:
    SupportAdapter: 'vm.[6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1].ipinterface.[2]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM4Vnic1To2:
    ExpectedResult: Fail
    SupportAdapter: 'vm.[4].vnic.[2]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM4Vnic2:
    SupportAdapter: 'vm.[8].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[2]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM56:
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[5-6].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM7:
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM89:
    SupportAdapter: 'vm.[7].vnic.[1]'
    TestAdapter: 'vm.[8-9].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ChangeVM4Vnic1IpAddress:
    IPv4: 192.168.200.1
    TestAdapter: 'vm.[4].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  ChangeVM5Vnic1IpAddress:
    IPv4: 192.168.200.2
    TestAdapter: 'vm.[5].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  ChangeVM6Vnic1IpAddress:
    IPv4: 192.168.200.3
    TestAdapter: 'vm.[6].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  ChangeVM7Vnic1MacAddress:
    TestAdapter: 'vm.[7].vnic.[1]'
    Type: NetAdapter
    setmacaddr: 00:11:22:33:44:77
  ChangeVM8Vnic1MacAddress:
    TestAdapter: 'vm.[8].vnic.[1]'
    Type: NetAdapter
    setmacaddr: 00:11:22:33:44:88
  ChangeVM9Vnic1MacAddress:
    TestAdapter: 'vm.[9].vnic.[1]'
    Type: NetAdapter
    setmacaddr: 00:11:22:33:44:99
  ChangeVtep2DhcpIpAddress:
    Type: Switch
    cluster: 'vc.[1].datacenter.[1].cluster.[2]'
    host: 'host.[2]'
    ipv4: dhcp
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  ChangeVtep2StaticIpAddress:
    Type: Switch
    cluster: 'vc.[1].datacenter.[1].cluster.[2]'
    host: 'host.[2]'
    ipv4: static
    ipv4address: 172.19.1.20
    netmask: 255.255.0.0
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1InExitSeq:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
    expectedResult: ignore
  DeleteVM2Vnic1InExitSeq:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
    expectedResult: ignore
  DeleteVM3Vnic1InExitSeq:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
    expectedResult: ignore
  DeleteVM4Vnic1InExitSeq:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
    expectedResult: ignore
  DeleteVM4Vnic2InExitSeq:
    ExpectedResult: ignore
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[2]'
  DeleteVM5Vnic1InExitSeq:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
    expectedResult: ignore
  DeleteVM6Vnic1InExitSeq:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
    expectedResult: ignore
  DeleteVM7Vnic1InExitSeq:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
    expectedResult: ignore
  DeleteVM8Vnic1InExitSeq:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
    expectedResult: ignore
  DeleteVM9Vnic1InExitSeq:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
    expectedResult: ignore
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1InExitSeq
    -
      - DeleteVM2Vnic1InExitSeq
    -
      - DeleteVM3Vnic1InExitSeq
    -
      - DeleteVM4Vnic1InExitSeq
    -
      - DeleteVM4Vnic2InExitSeq
    -
      - DeleteVM5Vnic1InExitSeq
    -
      - DeleteVM6Vnic1InExitSeq
    -
      - DeleteVM7Vnic1InExitSeq
    -
      - DeleteVM8Vnic1InExitSeq
    -
      - DeleteVM9Vnic1InExitSeq
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire2Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    toolName: iperf
  NetperfTestVirtualWire3Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    toolname: iperf
  PlaceVM4Vnic2OnVirtualWire3:
    TestVM: 'vm.[4]'
    Type: VM
    vnic:
      '[2]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9],'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - NetperfTestVirtualWire2Unicat
    -
      - ArpPingVM4
      - ArpPingVM56
    -
      - VerifyVirtualWire2VMsArpEntryOnControllers
      - VerifyVirtualWire2VMsMacEntryOnControllers
    -
      - NetperfTestVirtualWire3Unicat
    -
      - ArpPingVM7
      - ArpPingVM89
    -
      - VerifyVirtualWire3VMsArpEntryOnControllers
      - VerifyVirtualWire3VMsMacEntryOnControllers
    -
      - SetVDS12MacAddressChangeSecurityPolicyAccept
    -
      - SetVDS12ForgedTransmitChangeSecurityPolicyAccept
    -
      - ChangeVM4Vnic1IpAddress
      - ChangeVM5Vnic1IpAddress
      - ChangeVM6Vnic1IpAddress
    -
      - ChangeVM7Vnic1MacAddress
      - ChangeVM8Vnic1MacAddress
      - ChangeVM9Vnic1MacAddress
    -
      - ArpPingVM4
      - ArpPingVM56
    -
      - VerifyVirtualWire2VMsArpEntryOnControllers
      - VerifyVirtualWire2VMsMacEntryOnControllers
    -
      - ArpPingVM7
      - ArpPingVM89
    -
      - VerifyVirtualWire3VMsArpEntryOnControllers
      - VerifyVirtualWire3VMsMacEntryOnControllers
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - ChangeVtep2StaticIpAddress
    -
      - VerifyVirtualWire2VtepTableOnControllers
    -
      - VerifyVirtualWire3VtepTableOnControllers
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - ChangeVtep2DhcpIpAddress
    -
      - AddVm4Vnic1SubIPs
    -
      - ArpPingVM4
      - ArpPingVM4SubIP1
      - ArpPingVM4SubIP2
      - ArpPingVM56
    -
      - VerifyVirtualWire2VMsSubIPArpEntryOnControllers
      - VerifyVirtualWire2VMsMacEntryOnControllers
    -
      - PlaceVM4Vnic2OnVirtualWire3
    -
      - ArpPingVM4Vnic2
      - ArpPingVM89
    -
      - VerifyVirtualWire2VMsVnic2ArpEntryOnControllers
      - VerifyVirtualWire2VMsVnic2MacEntryOnControllers
    -
      - ArpPingVM4Vnic1To2
  SetVDS12ForgedTransmitChangeSecurityPolicyAccept:
    TestSwitch: 'vc.[1].vds.[1-2]'
    Type: Switch
    policytype: forgedTransmits
    securitypolicy: Enable
    virtualwire: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  SetVDS12MacAddressChangeSecurityPolicyAccept:
    TestSwitch: 'vc.[1].vds.[1-2]'
    Type: Switch
    policytype: macChanges
    securitypolicy: Enable
    virtualwire: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire2VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
      - ip: 'vm.[5].vnic.[1]'
        mac: 'vm.[5].vnic.[1]'
      - ip: 'vm.[6].vnic.[1]'
        mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[4].vnic.[1]'
      - mac: 'vm.[5].vnic.[1]'
      - mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VMsSubIPArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
      - ip: 'vm.[4].vnic.[1].ipinterface.[1]'
        mac: 'vm.[4].vnic.[1]'
      - ip: 'vm.[4].vnic.[1].ipinterface.[2]'
        mac: 'vm.[4].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VMsVnic2ArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[4].vnic.[2]'
        mac: 'vm.[4].vnic.[2]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire2VMsVnic2MacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[4].vnic.[2]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire2VtepTableOnControllers:
    Type: Switch
    'VerifyVtepTableOnController[?]contain_once':
      - cluster: 'vc.[1].datacenter.[1].cluster.[2]'
        vtepip: 'host.[2]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[3]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 5
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire3VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[7].vnic.[1]'
      - mac: 'vm.[8].vnic.[1]'
      - mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3VtepTableOnControllers:
    Type: Switch
    'VerifyVtepTableOnController[?]contain_once':
      - cluster: 'vc.[1].datacenter.[1].cluster.[2]'
        vtepip: 'host.[2]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[3]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To verify the scenario during and afterVSM is rebooted
Tags: sanity
TestName: RebootVSM
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CheckController1SSLFalseOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[1]'
        sslenabled: false
  CheckController2SSLFalseOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[2]'
        sslenabled: false
  CheckController3SSLFalseOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[3]'
        sslenabled: false
  CreateVirtualWire1:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  CreateVirtualWire23:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 660
    Type: Traffic
    toolName: netperf
  NetperfTestVirtualWire2Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    toolname: netperf
  NetperfTestVirtualWire3Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    toolname: netperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  RestartVSM:
    TestNSX: 'vsm.[1]'
    Type: NSX
    sleepbetweenworkloads: 60
    vmstate: restart
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - RestartVSM
      - NetperfTestVirtualWire1Unicat
    -
      - SetControllerSSLToFalse
    -
      - CheckController1SSLFalseOnHost
    -
      - CheckController2SSLFalseOnHost
    -
      - CheckController3SSLFalseOnHost
    -
      - CreateVirtualWire23
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
  SetControllerSSLToFalse:
    TestVM: 'vsm.[1].vxlancontroller.[1]'
    Type: VM
    sleepbetweenworkloads: 15
    sslenabled: false
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: Delete controller Info file on host This file shoud be sync again after delete or add new controller
Tags: sanity
TestName: DeleteControllerInfoFile
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CheckController1SSLFalseOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[1]'
        sslenabled: false
  CheckController1SSLFalseOnHostFail:
    ExpectedResult: Fail
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[1]'
        sslenabled: false
  CheckController2SSLFalseOnHost:
    Type: Host
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[2]'
        sslenabled: false
  CheckController2SSLFalseOnHostFail:
    ExpectedResult: Fail
    Type: Host
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[2]'
        sslenabled: false
  CheckController2SSLTrueOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[2]'
        sslenabled: true
  CheckController3SSLFalseOnHost:
    Type: Host
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[3]'
        sslenabled: false
  CheckController3SSLFalseOnHostFail:
    ExpectedResult: Fail
    Type: Host
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[3]'
        sslenabled: false
  CheckController3SSLTrueOnHost:
    Type: Host
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[3]'
        sslenabled: true
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteController1:
    TestNSX: 'vsm.[1]'
    Type: NSX
    deletevxlancontroller: 'vsm.[1].vxlancontroller.[1]'
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  Deploy_Controller1:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[1]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire1Unicat:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1],vm.[2]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  RemoveControllerInfoFileOnHost:
    Type: Host
    removecontrollerinfofile: /etc/vmware/netcpa/config-by-vsm.xml
    testhost: 'host.[2-3]'
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - SetControllerSSLToFalse
    -
      - CheckController1SSLFalseOnHost
    -
      - CheckController2SSLFalseOnHost
    -
      - CheckController3SSLFalseOnHost
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - RemoveControllerInfoFileOnHost
    -
      - CheckController1SSLFalseOnHostFail
    -
      - CheckController2SSLFalseOnHostFail
    -
      - CheckController3SSLFalseOnHostFail
    -
      - DeleteController1
      - NetperfTestVirtualWire1Unicat
    -
      - SetControllerSSLToTrue
    -
      - CheckController2SSLTrueOnHost
    -
      - CheckController3SSLTrueOnHost
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - Deploy_Controller1
    -
      - SetControllerSSLToFalse
    -
      - CheckController1SSLFalseOnHost
    -
      - CheckController2SSLFalseOnHost
    -
      - CheckController3SSLFalseOnHost
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
  SetControllerSSLToFalse:
    TestVM: 'vsm.[1].vxlancontroller.[1]'
    Type: VM
    sleepbetweenworkloads: 15
    sslenabled: false
  SetControllerSSLToTrue:
    TestVM: 'vsm.[1].vxlancontroller.[2]'
    Type: VM
    sleepbetweenworkloads: 15
    sslenabled: true
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: '1. Create virtual wire and send traffic, check connectivity. 2. Change the portgroup of security policies, then generate mac flooding. Check mac count. 3. Send traffic again. Verify the mac flooding, does not impact connectivity. '
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'MacFlooding: Verify that macflooding in a vdl2 network will not cause traffic failures or system problems.'
Tags: sanity
TestName: MacFlooding
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteAllVirtualWires
  MacFloodVM1:
    Type: Traffic
    supportadapter: 'vm.[2].vnic.[1]'
    testadapter: 'vm.[1].vnic.[1]'
    testduration: 100000
    toolname: Macof
  NetperfTestVirtualWire3Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - NetperfTestVirtualWire3Unicat
    -
      - SetVDS12MacAddressChangeSecurityPolicyAccept
    -
      - SetVDS12ForgedTransmitChangeSecurityPolicyAccept
    -
      - MacFloodVM1
    -
      - VerifyVirtualWire1VMsMacCountOnHost
    -
      - NetperfTestVirtualWire3Unicat
  SetVDS12ForgedTransmitChangeSecurityPolicyAccept:
    TestSwitch: 'vc.[1].vds.[1-2]'
    Type: Switch
    policytype: forgedTransmits
    securitypolicy: Enable
    virtualwire: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  SetVDS12MacAddressChangeSecurityPolicyAccept:
    TestSwitch: 'vc.[1].vds.[1-2]'
    Type: Switch
    policytype: macChanges
    securitypolicy: Enable
    virtualwire: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire1VMsMacCountOnHost:
    Type: Switch
    host: 'host.[2]'
    querymacs:
      'count[?]>': 1000
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To verify whether MTEP still works after UP & down it on a host
Tags: sanity
TestName: MTEPUpDown
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Multicast:
    L3Protocol: 'ipv4,ipv6'
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire1Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  RebootHosts:
    TestHost: 'host.[3-4]'
    Type: Host
    reboot: yes
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - RebootHosts
    -
      - PoweronVM2
      - PoweronVM3
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify that VTEP has duplicate static IP Pool '
Tags: sanity
TestName: DuplicateVTEPIP
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[1]':
          driver: any
    '[2-3]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3]'
          vmnicadapter: 'host.[3].vmnic.[1]'
  vm:
    '[1-3]':
      host: 'host.[2]'
      vmstate: poweroff
    '[4-6]':
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]': &1
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
        '[3]': *1
        '[4]': *1
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          ippool: 'vsm.[1].ippool.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          ippool: 'vsm.[1].ippool.[4]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  ExitSequence: []
  NetperfTestVirtualWire1:
    ExpectedResult: Fail
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire2:
    ExpectedResult: Fail
    L3Protocol: ipv4
    L4Protocol: udp
    SupportAdapter: 'vm.[5].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  NetperfTestVirtualWire3:
    ExpectedResult: Fail
    L3Protocol: ipv6
    L4Protocol: tcp
    SupportAdapter: 'vm.[6].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1],vm.[4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[2],vm.[5]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[3],vm.[6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM3
      - PoweronVM4
    -
      - PoweronVM5
      - PoweronVM6
    -
      - NetperfTestVirtualWire1
    -
      - NetperfTestVirtualWire2
    -
      - NetperfTestVirtualWire3
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To Verify whether VSM updates the controller  cluster about of VNI as soon as they are  added or deleted by VSM.
Tags: sanity
TestName: CheckNewAndDeletedVNIonController
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ArpPingVM1:
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM23:
    SupportAdapter: 'vm.[1].vnic.[1]'
    TestAdapter: 'vm.[2-3].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM4:
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM56:
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[5-6].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM7:
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM89:
    SupportAdapter: 'vm.[7].vnic.[1]'
    TestAdapter: 'vm.[8-9].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  CreateVirtualWire2:
    Type: TransportZone
    VirtualWire:
      '[2]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  CreateVirtualWire3:
    Type: TransportZone
    VirtualWire:
      '[3]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteVirtualWire1InExitSeq:
    DeleteVirtualWire: 'vsm.[1].networkscope.[1].virtualwire.[1]'
    ExpectedResult: ignore
    SkipPostProcess: 1
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
  DeleteVirtualWire23InExitSeq:
    DeleteVirtualWire: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
    ExpectedResult: ignore
    SkipPostProcess: 1
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
  ExitSequence:
    -
      - PowerOffAllVMs
    -
      - RemoveVM1FromVirtualWire1InExitSeq
      - RemoveVM2FromVirtualWire1InExitSeq
      - RemoveVM3FromVirtualWire1InExitSeq
    -
      - RemoveVM4FromVirtualWire2InExitSeq
      - RemoveVM5FromVirtualWire2InExitSeq
      - RemoveVM6FromVirtualWire2InExitSeq
    -
      - RemoveVM7FromVirtualWire3InExitSeq
      - RemoveVM8FromVirtualWire3InExitSeq
      - RemoveVM9FromVirtualWire3InExitSeq
    -
      - DeleteVirtualWire1InExitSeq
    -
      - DeleteVirtualWire23InExitSeq
    -
      - VerifyVirtualWire1NotExistOnControllers
    -
      - VerifyVirtualWire23NotExistOnControllers
  NetperfTestVirtualWire1:
    L4Protocol: tcp
    SupportAdapter: 'vm.[1-3].vnic.[1]'
    TestAdapter: 'vm.[1-3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
  NetperfTestVirtualWire2:
    L4Protocol: tcp
    SupportAdapter: 'vm.[4-6].vnic.[1]'
    TestAdapter: 'vm.[4-6].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
  NetperfTestVirtualWire3:
    L4Protocol: tcp
    SupportAdapter: 'vm.[7-9].vnic.[1]'
    TestAdapter: 'vm.[7-9].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9],'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PowerOffAllVMs:
    TestVM: 'vm.[1-9]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  RemoveVM1FromVirtualWire1InExitSeq:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
    expectedResult: ignore
  RemoveVM2FromVirtualWire1InExitSeq:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
    expectedResult: ignore
  RemoveVM3FromVirtualWire1InExitSeq:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
    expectedResult: ignore
  RemoveVM4FromVirtualWire2InExitSeq:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
    expectedResult: ignore
  RemoveVM5FromVirtualWire2InExitSeq:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
    expectedResult: ignore
  RemoveVM6FromVirtualWire2InExitSeq:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
    expectedResult: ignore
  RemoveVM7FromVirtualWire3InExitSeq:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
    expectedResult: ignore
  RemoveVM8FromVirtualWire3InExitSeq:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
    expectedResult: ignore
  RemoveVM9FromVirtualWire3InExitSeq:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
    expectedResult: ignore
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - NetperfTestVirtualWire1
    -
      - ArpPingVM1
      - ArpPingVM23
    -
      - VerifyVirtualWire1VMsArpEntryOnControllers
      - VerifyVirtualWire1VMsMacEntryOnControllers
      - VerifyVirtualWire1ConnectionTableOnControllers
      - VerifyVirtualWire1VtepTableOnControllers
    -
      - CreateVirtualWire2
    -
      - PlaceVMsOnVirtualWire2
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - NetperfTestVirtualWire2
    -
      - ArpPingVM4
      - ArpPingVM56
    -
      - VerifyVirtualWire2VMsArpEntryOnControllers
      - VerifyVirtualWire2VMsMacEntryOnControllers
      - VerifyVirtualWire2ConnectionTableOnControllers
      - VerifyVirtualWire2VtepTableOnControllers
      - VerifyVM123ArpEntryNotOnVirtualwire2Controller
      - VerifyVM123MacEntryNotOnVirtualwire2Controller
    -
      - CreateVirtualWire3
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - NetperfTestVirtualWire3
    -
      - ArpPingVM7
      - ArpPingVM89
    -
      - VerifyVirtualWire3VMsArpEntryOnControllers
      - VerifyVirtualWire3VMsMacEntryOnControllers
      - VerifyVirtualWire3ConnectionTableOnControllers
      - VerifyVirtualWire3VtepTableOnControllers
      - VerifyVM123456ArpEntryNotOnVirtualwire3Controller
      - VerifyVM123456MacEntryNotOnVirtualwire3Controller
  VerifyVM123456ArpEntryNotOnVirtualwire3Controller:
    Type: Switch
    'VerifyArpEntryOnController[?]not_contains':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
      - ip: 'vm.[5].vnic.[1]'
        mac: 'vm.[5].vnic.[1]'
      - ip: 'vm.[6].vnic.[1]'
        mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVM123456MacEntryNotOnVirtualwire3Controller:
    Type: Switch
    'VerifyMacEntryOnController[?]not_contains':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
      - mac: 'vm.[4].vnic.[1]'
      - mac: 'vm.[5].vnic.[1]'
      - mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVM123ArpEntryNotOnVirtualwire2Controller:
    Type: Switch
    'VerifyArpEntryOnController[?]not_contains':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVM123MacEntryNotOnVirtualwire2Controller:
    Type: Switch
    'VerifyMacEntryOnController[?]not_contains':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire1ConnectionTableOnControllers:
    Type: Switch
    'VerifyConnectionTableOnController[?]contain_once':
      - hostip: 'host.[2]'
      - hostip: 'host.[3]'
      - hostip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  VerifyVirtualWire1NotExistOnControllers:
    Type: Switch
    VerifyVirtualWireOnController:
      'vni[?]equal_to': NOT_EXIST
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    sleepbetweenworkloads: 5
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  VerifyVirtualWire1VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
      - ip: 'vm.[3].vnic.[1]'
        mac: 'vm.[3].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  VerifyVirtualWire1VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  VerifyVirtualWire1VtepTableOnControllers:
    Type: Switch
    'VerifyVtepTableOnController[?]contain_once':
      - cluster: 'vc.[1].datacenter.[1].cluster.[2]'
        vtepip: 'host.[2]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[3]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  VerifyVirtualWire23NotExistOnControllers:
    Type: Switch
    VerifyVirtualWireOnController:
      'vni[?]equal_to': NOT_EXIST
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 3
    sleepbetweenworkloads: 5
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
  VerifyVirtualWire2ConnectionTableOnControllers:
    Type: Switch
    'VerifyConnectionTableOnController[?]contain_once':
      - hostip: 'host.[2]'
      - hostip: 'host.[3]'
      - hostip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[4].vnic.[1]'
        mac: 'vm.[4].vnic.[1]'
      - ip: 'vm.[5].vnic.[1]'
        mac: 'vm.[5].vnic.[1]'
      - ip: 'vm.[6].vnic.[1]'
        mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[4].vnic.[1]'
      - mac: 'vm.[5].vnic.[1]'
      - mac: 'vm.[6].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire2VtepTableOnControllers:
    Type: Switch
    'VerifyVtepTableOnController[?]contain_once':
      - cluster: 'vc.[1].datacenter.[1].cluster.[2]'
        vtepip: 'host.[2]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[3]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  VerifyVirtualWire3ConnectionTableOnControllers:
    Type: Switch
    'VerifyConnectionTableOnController[?]contain_once':
      - hostip: 'host.[2]'
      - hostip: 'host.[3]'
      - hostip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[7].vnic.[1]'
        mac: 'vm.[7].vnic.[1]'
      - ip: 'vm.[8].vnic.[1]'
        mac: 'vm.[8].vnic.[1]'
      - ip: 'vm.[9].vnic.[1]'
        mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3VMsMacEntryOnControllers:
    Type: Switch
    'VerifyMacEntryOnController[?]contain_once':
      - mac: 'vm.[7].vnic.[1]'
      - mac: 'vm.[8].vnic.[1]'
      - mac: 'vm.[9].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
  VerifyVirtualWire3VtepTableOnControllers:
    Type: Switch
    'VerifyVtepTableOnController[?]contain_once':
      - cluster: 'vc.[1].datacenter.[1].cluster.[2]'
        vtepip: 'host.[2]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[3]'
      - cluster: 'vc.[1].datacenter.[1].cluster.[3]'
        vtepip: 'host.[4]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify controller down/up '
Tags: sanity
TestName: ControllerFailover
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CheckController1SSLFalseOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[1]'
        sslenabled: false
  CheckController1SSLTrueOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[1]'
        sslenabled: true
  CheckController2SSLFalseOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[2]'
        sslenabled: false
  CheckController2SSLTrueOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[2]'
        sslenabled: true
  CheckController3SSLFalseOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[3]'
        sslenabled: false
  CheckController3SSLTrueOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[3]'
        sslenabled: true
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 180
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire1Unicast:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 180
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire2Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[5].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 180
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire2Unicast:
    L3Protocol: ipv4
    L4Protocol: udp
    SupportAdapter: 'vm.[5].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 180
    Type: Traffic
    toolname: iperf
    udpbandwidth: 10000M
  NetperfTestVirtualWire3Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[8].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 180
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire3Unicast:
    L3Protocol: ipv6
    L4Protocol: tcp
    SupportAdapter: 'vm.[8].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 180
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1],vm.[2]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4],vm.[5]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7],vm.[8]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PowerOffPowerOnController1:
    TestVM: 'vsm.[1].vxlancontroller.[1]'
    Type: VM
    iterations: 2
    sleepbetweenworkloads: 60
    vmstate: 'poweroff,poweron'
  PowerOffPowerOnController2:
    TestVM: 'vsm.[1].vxlancontroller.[2]'
    Type: VM
    iterations: 2
    sleepbetweenworkloads: 60
    vmstate: 'poweroff,poweron'
  PowerOffPowerOnController3:
    TestVM: 'vsm.[1].vxlancontroller.[3]'
    Type: VM
    iterations: 2
    sleepbetweenworkloads: 60
    vmstate: 'poweroff,poweron'
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - SetControllerSSLToFalse
    -
      - CheckController1SSLFalseOnHost
    -
      - CheckController2SSLFalseOnHost
    -
      - CheckController3SSLFalseOnHost
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM7
      - PoweronVM4
    -
      - PoweronVM5
      - PoweronVM8
    -
      - NetperfTestVirtualWire1Unicast
      - StopRestartController1Service
    -
      - NetperfTestVirtualWire2Unicast
      - StopRestartController2Service
    -
      - NetperfTestVirtualWire3Unicast
      - StopRestartController3Service
    -
      - NetperfTestVirtualWire1Unicast
      - PowerOffPowerOnController1
    -
      - NetperfTestVirtualWire2Unicast
      - PowerOffPowerOnController2
    -
      - NetperfTestVirtualWire3Unicast
      - PowerOffPowerOnController3
    -
      - NetperfTestVirtualWire1Multicast
      - StopRestartController1Service
    -
      - NetperfTestVirtualWire2Multicast
      - StopRestartController2Service
    -
      - NetperfTestVirtualWire3Multicast
      - StopRestartController3Service
    -
      - NetperfTestVirtualWire1Multicast
      - PowerOffPowerOnController1
    -
      - NetperfTestVirtualWire2Multicast
      - PowerOffPowerOnController2
    -
      - NetperfTestVirtualWire3Multicast
      - PowerOffPowerOnController3
    -
      - SetControllerSSLToTrue
    -
      - CheckController1SSLTrueOnHost
    -
      - CheckController2SSLTrueOnHost
    -
      - CheckController3SSLTrueOnHost
    -
      - NetperfTestVirtualWire1Unicast
    -
      - NetperfTestVirtualWire2Unicast
    -
      - NetperfTestVirtualWire3Unicast
    -
      - NetperfTestVirtualWire1Multicast
    -
      - NetperfTestVirtualWire2Multicast
    -
      - NetperfTestVirtualWire3Multicast
  SetControllerSSLToFalse:
    TestVM: 'vsm.[1].vxlancontroller.[1]'
    Type: VM
    sslenabled: false
  SetControllerSSLToTrue:
    TestVM: 'vsm.[1].vxlancontroller.[1]'
    Type: VM
    sleepbetweenworkloads: 15
    sslenabled: true
  StopRestartController1Service:
    TestVM: 'vsm.[1].vxlancontroller.[1]'
    Type: VM
    iterations: 2
    sleepbetweenworkloads: 60
    vxlancontrollerservice: 'stop,restart'
  StopRestartController2Service:
    TestVM: 'vsm.[1].vxlancontroller.[2]'
    Type: VM
    iterations: 2
    sleepbetweenworkloads: 60
    vxlancontrollerservice: 'stop,restart'
  StopRestartController3Service:
    TestVM: 'vsm.[1].vxlancontroller.[3]'
    Type: VM
    iterations: 2
    sleepbetweenworkloads: 60
    vxlancontrollerservice: 'stop,restart'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify add/remove cluster in TZ '
Tags: sanity
TestName: ShrinkExpandTransportZone
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ChangePortgroupToNormal:
    TestAdapter: 'vm.[1].vnic.[1],vm.[4].vnic.[1],vm.[7].vnic.[1]'
    Type: NetAdapter
    portgroup: 'vc.[1].dvportgroup.[1]'
    reconfigure: true
  ChangePortgroupToVXLAN1:
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
    reconfigure: true
  ChangePortgroupToVXLAN2:
    TestAdapter: 'vm.[4].vnic.[1]'
    Type: NetAdapter
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
    reconfigure: true
  ChangePortgroupToVXLAN3:
    TestAdapter: 'vm.[7].vnic.[1]'
    Type: NetAdapter
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
    reconfigure: true
  CreateDVPG:
    TestVC: 'vc.[1]'
    Type: VC
    dvportgroup:
      '[1]':
        vds: 'vc.[1].vds.[1]'
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  ExpandVXLANCluster:
    Type: TransportZone
    clusters: 'vc.[1].datacenter.[1].cluster.[2]'
    testtransportzone: 'vsm.[1].networkscope.[1]'
    transportzoneaction: expand
  NetperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire1Unicat:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire1UnicatFail:
    ExpectedResult: Fail
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire1UnicatPass:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[3].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire2Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire2Unicat:
    L3Protocol: ipv4
    L4Protocol: udp
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  NetperfTestVirtualWire2UnicatFail:
    ExpectedResult: Fail
    L3Protocol: ipv4
    L4Protocol: udp
    SupportAdapter: 'vm.[5].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  NetperfTestVirtualWire2UnicatPass:
    L3Protocol: ipv4
    L4Protocol: udp
    SupportAdapter: 'vm.[6].vnic.[1]'
    TestAdapter: 'vm.[5].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  NetperfTestVirtualWire3Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire3Unicat:
    L3Protocol: ipv6
    L4Protocol: tcp
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire3UnicatFail:
    ExpectedResult: Fail
    L3Protocol: ipv6
    L4Protocol: tcp
    SupportAdapter: 'vm.[9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire3UnicatPass:
    L3Protocol: ipv6
    L4Protocol: tcp
    SupportAdapter: 'vm.[9].vnic.[1]'
    TestAdapter: 'vm.[8].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateDVPG
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - NetperfTestVirtualWire2Multicast
    -
      - NetperfTestVirtualWire3Multicast
    -
      - ChangePortgroupToNormal
    -
      - ShrinkVXLANCluster
    -
      - NetperfTestVirtualWire1UnicatPass
    -
      - NetperfTestVirtualWire2UnicatPass
    -
      - NetperfTestVirtualWire3UnicatPass
    -
      - NetperfTestVirtualWire1UnicatFail
    -
      - NetperfTestVirtualWire2UnicatFail
    -
      - NetperfTestVirtualWire3UnicatFail
    -
      - ExpandVXLANCluster
    -
      - ChangePortgroupToVXLAN1
    -
      - ChangePortgroupToVXLAN2
    -
      - ChangePortgroupToVXLAN3
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - NetperfTestVirtualWire2Multicast
    -
      - NetperfTestVirtualWire3Multicast
  ShrinkVXLANCluster:
    Type: TransportZone
    clusters: 'vc.[1].datacenter.[1].cluster.[2]'
    testtransportzone: 'vsm.[1].networkscope.[1]'
    transportzoneaction: shrink
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'This case verify duplicate address detection, when there is an arp cache on host,this case  come from PR  https://bugzilla.eng.vmware.com/show_bug.cgi?id=1296328'
Tags: sanity
TestName: DuplicateAddressDetection
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ArpPingDADHasDuplicate:
    SupportAdapter: 'vm.[1].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 3
    Type: Traffic
    arpprobe: DAD
    connectivitytest: 0
    sleepbetweenworkloads: 15
    toolName: ArpPing
  ArpPingDADNoDuplicate:
    ExpectedResult: FAIL
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 1
    Type: Traffic
    arpprobe: DAD
    connectivitytest: 0
    sleepbetweenworkloads: 15
    toolName: ArpPing
  ArpPingVM12to4:
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1],vm.[2].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM1to2:
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM2to1:
    SupportAdapter: 'vm.[1].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  CheckVirtualWire1ArpEntryOnHost1:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
    host: 'host.[2]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  CheckVirtualWire1ArpEntryOnHost2:
    Type: Switch
    'VerifyArpEntryOnHost[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
    host: 'host.[3]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteAllVirtualWires
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1],vm.[2],vm.[4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweroffVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM4
    -
      - SetIPv4VM1Vnic1
    -
      - SetIPv4VM2Vnic1
    -
      - SetIPv4VM4Vnic1
    -
      - ArpPingVM12to4
    -
      - VerifyVM12ArpEntryOnVirtualwire1Controller
    -
      - ArpPingVM2to1
    -
      - ArpPingVM1to2
    -
      - CheckVirtualWire1ArpEntryOnHost1
    -
      - CheckVirtualWire1ArpEntryOnHost2
    -
      - SetIVM2Vnic1EqualToVM1Vnic1
    -
      - ArpPingDADHasDuplicate
    -
      - PoweroffVM1
    -
      - ArpPingDADNoDuplicate
  SetIPv4VM1Vnic1:
    IPv4: 192.111.1.1
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  SetIPv4VM2Vnic1:
    IPv4: 192.111.2.1
    TestAdapter: 'vm.[2].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  SetIPv4VM4Vnic1:
    IPv4: 192.111.4.1
    TestAdapter: 'vm.[4].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  SetIVM2Vnic1EqualToVM1Vnic1:
    IPv4: 192.111.1.1
    TestAdapter: 'vm.[2].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  VerifyVM12ArpEntryOnVirtualwire1Controller:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To verify the scenario during and afterVC is rebooted
Tags: sanity
TestName: RebootVC
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire1:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  CreateVirtualWire23:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 300
    Type: Traffic
    toolName: netperf
  NetperfTestVirtualWire2Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    toolname: netperf
  NetperfTestVirtualWire3Unicat:
    L4Protocol: tcp
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    toolname: netperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  RestartVC:
    TestVC: 'vc.[1]'
    Type: VC
    operation: restart
    services: vpxd
    sleepbetweenworkloads: 150
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - RestartVC
      - NetperfTestVirtualWire1Unicat
    -
      - CreateVirtualWire23
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: N
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To verify the scenario when a stateless Host comes down and comes back up
Tags: 'sanity,stateless'
TestName: RebootStatelessHost
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[1]':
          driver: any
    '[2-5]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              allowedexception:
                - hostalreadyexists
              clustername: Profile-Cluster
              host: 'host.[2-3]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[4-5]'
          foldername: Profile
          name: Profile-test
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          vmnicadapter: 'host.[2-3].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[4-5]'
          vmnicadapter: 'host.[4-5].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[5]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 18
          vmkniccount: 1
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: LOADBALANCE_SRCMAC
          vibs: install
          vlan: 19
          vmkniccount: 4
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  AssociateProfile:
    SrcHost: 'host.[2]'
    TestVC: 'vc.[1]'
    Type: VC
    associateprofile: testprofile
  ComplianceCheck:
    CheckCompliance: testprofile
    SrcHost: 'host.[2]'
    TestVC: 'vc.[1]'
    Type: VC
    compliancestatus: Compliant
  CreateProfile:
    SrcHost: 'host.[2]'
    TestVC: 'vc.[1]'
    Type: VC
    createprofile: profile
    targetprofile: testprofile
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  Deploy_Controller2:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[2]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  Deploy_Controller3:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[3]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  NetperfTestVirtualWire1Unicast:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2-4].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: netperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  RebootHost2:
    TestHost: 'host.[2]'
    Type: Host
    reboot: yes
  Sequence:
    -
      - Deploy_Controller2
    -
      - Deploy_Controller3
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
      - PoweronVM4
    -
      - NetperfTestVirtualWire1Unicast
    -
      - CreateProfile
    -
      - AssociateProfile
    -
      - ComplianceCheck
    -
      - RebootHost2
    -
      - SleepToWaitProfile
    -
      - PoweronVM1
    -
      - NetperfTestVirtualWire1Unicast
  SleepToWaitProfile:
    Type: Command
    command: sleep 140
    testhost: 'host.[2]'
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To test multicast group connectivity in a VXLANvirtual wire which include multicast and p2p
Tags: sanity
TestName: TSAM
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  IperfTestVirtualWire1Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  IperfTestVirtualWire2Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  IperfTestVirtualWire3Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
    udpbandwidth: 10000M
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9],'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - TestMulticastConnectivity
    -
      - TestPingConnectivity
    -
      - IperfTestVirtualWire1Unicat
    -
      - IperfTestVirtualWire2Unicat
    -
      - IperfTestVirtualWire3Unicat
  TestMulticastConnectivity:
    Type: Switch
    destinationhost: 'host.[3]'
    destinationswitch: 'vc.[1].vds.[2]'
    destinationvlanid: 18
    packetsize: 1600
    sourcehost: 'host.[2]'
    sourceswitch: 'vc.[1].vds.[1]'
    sourcevlanid: 19
    testgroupconnectivity: 'multicast '
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  TestPingConnectivity:
    Type: Switch
    destinationhost: 'host.[3]'
    destinationswitch: 'vc.[1].vds.[2]'
    destinationvlanid: 18
    packetsize: 1600
    sourcehost: 'host.[2]'
    sourceswitch: 'vc.[1].vds.[1]'
    sourcevlanid: 19
    testgroupconnectivity: p2p
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1-3]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify remove host from cluster and add back again '
Tags: 'sanity,reboot'
TestName: RemoveHostFromClusterAndComeBackAgain
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1: &1
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1: &2
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1: &3
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  Delete_VM1_Vnic1: *1
  Delete_VM4_Vnic1: *2
  Delete_VM7_Vnic1: *3
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  MoveHostFromCluster_1:
    MoveHostsFromCluster: 'host.[2]'
    TestCluster: 'vc.[1].datacenter.[1].cluster.[2]'
    Type: Cluster
  MoveHostToCluster_1:
    TestCluster: 'vc.[1].datacenter.[1].cluster.[2]'
    Type: Cluster
    movehoststocluster: 'host.[2]'
    sleepbetweenworkloads: 20
  NetperfTestVirtualWire1Multicast:
    L3Protocol: 'ipv4,ipv6'
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire1Unicat:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire1UnicatPass:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[2-3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire2Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire2Unicat:
    L3Protocol: ipv4
    L4Protocol: udp
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  NetperfTestVirtualWire2UnicatPass:
    L3Protocol: ipv4
    L4Protocol: udp
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[5-6].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
    udpbandwidth: 10000M
  NetperfTestVirtualWire3Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire3Unicat:
    L3Protocol: ipv6
    L4Protocol: tcp
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire3UnicatPass:
    L3Protocol: ipv6
    L4Protocol: tcp
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[8-9].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVM1OnVirtualWire1:
    TestVM: 'vm.[1]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVM4OnVirtualWire2:
    TestVM: 'vm.[4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVM7OnVirtualWire3:
    TestVM: 'vm.[7]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweroffVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweroff
  PoweroffVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweroff
  PoweroffVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  RebootHost:
    TestHost: 'host.[2]'
    Type: Host
    reboot: yes
    sleepbetweenworkloads: 20
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - NetperfTestVirtualWire2Multicast
    -
      - NetperfTestVirtualWire3Multicast
    -
      - PoweroffVM1
      - PoweroffVM4
      - PoweroffVM7
    -
      - Delete_VM1_Vnic1
    -
      - Delete_VM4_Vnic1
    -
      - Delete_VM7_Vnic1
    -
      - MoveHostFromCluster_1
    -
      - RebootHost
    -
      - MoveHostToCluster_1
    -
      - NetperfTestVirtualWire1UnicatPass
    -
      - NetperfTestVirtualWire2UnicatPass
    -
      - NetperfTestVirtualWire3UnicatPass
    -
      - PlaceVM1OnVirtualWire1
    -
      - PlaceVM4OnVirtualWire2
    -
      - PlaceVM7OnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM4
      - PoweronVM7
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - NetperfTestVirtualWire2Multicast
    -
      - NetperfTestVirtualWire3Multicast
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify the VTEP function on host '
Tags: sanity
TestName: VTEPTrafficUnicast
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Multicast:
    L3Protocol: 'ipv4,ipv6'
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire1Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To verify the scenario when the whole Controller cluster goes down and comes back up
Tags: sanity
TestName: ShutdownDeployControllerHost
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ArpPingVM1:
    SupportAdapter: 'vm.[3].vnic.[1]'
    TestAdapter: 'vm.[1-2].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    sleepbetweenworkloads: 300
    toolName: ArpPing
  ArpPingVM3:
    SupportAdapter: 'vm.[1].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1]'
    TestDuration: 10
    Type: Traffic
    connectivitytest: 0
    sleepbetweenworkloads: 300
    toolName: ArpPing
  CheckVirtualWire1MTEPOnHost:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
    Type: Switch
    checkmteponhost: 'host.[2-4]'
  CheckVirtualWire1MacEntryOnHost2:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
    host: 'host.[2]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  CheckVirtualWire1MacEntryOnHost3:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
    host: 'host.[3]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  CheckVirtualWire1MacEntryOnHost4:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[1].vnic.[1]'
    host: 'host.[4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Unicat:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[1-3].vnic.[1]'
    TestAdapter: 'vm.[1-3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  RebootControllerHost:
    TestHost: 'host.[1]'
    Type: Host
    reboot: yes
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - NetperfTestVirtualWire1Unicat
    -
      - CheckVirtualWire1MacEntryOnHost2
      - CheckVirtualWire1MacEntryOnHost3
      - CheckVirtualWire1MacEntryOnHost4
    -
      - CheckVirtualWire1MTEPOnHost
    -
      - RebootControllerHost
    -
      - ArpPingVM1
      - ArpPingVM3
    -
      - VerifyVirtualWire1VMsArpEntryOnControllers
    -
      - NetperfTestVirtualWire1Unicat
    -
      - CheckVirtualWire1MacEntryOnHost2
      - CheckVirtualWire1MacEntryOnHost3
      - CheckVirtualWire1MacEntryOnHost4
    -
      - CheckVirtualWire1MTEPOnHost
  VerifyVirtualWire1VMsArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    noofretries: 5
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify teaming policy: Fail over and Ether Channel'
Tags: 'sanity,physical'
TestName: TeamingPolicy-FailOverAndEtherChannel
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[1]':
          driver: any
    '[2]':
      pswitchport:
        '[1]':
          vmnic: 'host.[2].vmnic.[1]'
        '[2]':
          vmnic: 'host.[2].vmnic.[2]'
      vmnic:
        '[1-2]':
          driver: any
    '[3]':
      pswitchport:
        '[1]':
          vmnic: 'host.[3].vmnic.[1]'
        '[2]':
          vmnic: 'host.[3].vmnic.[2]'
      vmnic:
        '[1-2]':
          driver: any
    '[4-5]':
      vmnic:
        '[1-2]':
          driver: any
  pswitch:
    '[1]':
      ip: XX.XX.XX.XX
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2-3]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[4-5]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          vmnicadapter: 'host.[2-3].vmnic.[1-2]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[4-5]'
          vmnicadapter: 'host.[4-5].vmnic.[1]'
  vm:
    '[1-2]':
      host: 'host.[2]'
      vmstate: poweroff
    '[3-4]':
      host: 'host.[3]'
      vmstate: poweroff
    '[5-6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7-8]':
      host: 'host.[5]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 19
          vmkniccount: 1
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ConfigureChannelGroup_1:
    Mode: On
    TestPort: 'host.[2].pswitchport.[-1]'
    Type: Port
    configurechannelgroup: 34
  ConfigureChannelGroup_2:
    Mode: On
    TestPort: 'host.[3].pswitchport.[-1]'
    Type: Port
    configurechannelgroup: 35
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteChannelGroup:
    TestSwitch: 'pswitch.[1]'
    Type: Switch
    removeportchannel: '34,35'
  Deploy_Controller2:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[2]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  Deploy_Controller3:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[3]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  DisableIPPIM:
    Mode: sparse-dense-mode
    TestPort: 'host.[2].pswitchport.[-1]'
    Type: Port
    disablepim: 19
  EnableIPPIM:
    Mode: sparse-dense-mode
    TestPort: 'host.[2].pswitchport.[-1]'
    Type: Port
    enablepim: 19
  ExitSequence:
    -
      - EnableIPPIM
    -
      - RemovePortsFromChannelGroup
    -
      - DeleteChannelGroup
  NetperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[3].vnic.[1],vm.[7].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1],vm.[5].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWireMulticastPass:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2-8].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWireUnicatFail:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[5-8].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    expectedresult: Fail
    toolname: iperf
  NetperfTestVirtualWireUnicatPass:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2-8].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-8]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  RemovePortsFromChannelGroup:
    TestPort: 'host.[2-3].pswitchport.[-1]'
    Type: Port
    configurechannelgroup: no
  Sequence:
    -
      - Deploy_Controller2
    -
      - Deploy_Controller3
    -
      - DisableIPPIM
    -
      - ConfigureChannelGroup_1
    -
      - ConfigureChannelGroup_2
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM3
      - PoweronVM4
    -
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
    -
      - NetperfTestVirtualWireUnicatFail
    -
      - EnableIPPIM
    -
      - NetperfTestVirtualWireUnicatPass
      - NetperfTestVirtualWireMulticastPass
    -
      - UpdateVirtualWireToHybrid
    -
      - NetperfTestVirtualWireUnicatPass
      - NetperfTestVirtualWireMulticastPass
    -
      - UpdateVirtualWireToUnicast
    -
      - NetperfTestVirtualWireUnicatPass
      - NetperfTestVirtualWireMulticastPass
  UpdateVirtualWireToHybrid:
    Type: Switch
    controlplanemode: HYBRID_MODE
    name: test
    reconfigure: true
    sleepbetweenworkloads: 10
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  UpdateVirtualWireToUnicast:
    Type: Switch
    controlplanemode: UNICAST_MODE
    name: test
    reconfigure: true
    sleepbetweenworkloads: 10
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify controller info sync to host '
Tags: sanity
TestName: NewControllerSyncToHost
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CheckController1SSLFalseOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[1]'
        sslenabled: false
  CheckController2SSLFalseOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[2]'
        sslenabled: false
  CheckController2SSLTrueOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[2]'
        sslenabled: true
  CheckController3SSLFalseOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[3]'
        sslenabled: false
  CheckController3SSLTrueOnHost:
    Type: Host
    sleepbetweenworkloads: 10
    testhost: 'host.[2-3]'
    'verifycontrollerinfoonhost[?]contain_once':
      - port: 1234
        server: 'vsm.[1].vxlancontroller.[3]'
        sslenabled: true
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteController1:
    TestNSX: 'vsm.[1]'
    Type: NSX
    deletevxlancontroller: 'vsm.[1].vxlancontroller.[1]'
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  Deploy_Controller1:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[1]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire1Unicat:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1],vm.[2]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - SetControllerSSLToFalse
    -
      - CheckController1SSLFalseOnHost
    -
      - CheckController2SSLFalseOnHost
    -
      - CheckController3SSLFalseOnHost
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - DeleteController1
      - NetperfTestVirtualWire1Unicat
    -
      - SetControllerSSLToTrue
    -
      - CheckController2SSLTrueOnHost
    -
      - CheckController3SSLTrueOnHost
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - Deploy_Controller1
    -
      - SetControllerSSLToFalse
    -
      - CheckController1SSLFalseOnHost
    -
      - CheckController2SSLFalseOnHost
    -
      - CheckController3SSLFalseOnHost
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire1Multicast
  SetControllerSSLToFalse:
    TestVM: 'vsm.[1].vxlancontroller.[1]'
    Type: VM
    sleepbetweenworkloads: 15
    sslenabled: false
  SetControllerSSLToTrue:
    TestVM: 'vsm.[1].vxlancontroller.[2]'
    Type: VM
    sleepbetweenworkloads: 60
    sslenabled: true
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify the MTEP list on all hosts '
Tags: sanity
TestName: VerifyMTEPTable
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CheckMTEPOnHost:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[2-3]'
    Type: Switch
    checkmteponhost: 'host.[2-4]'
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9],'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - CheckMTEPOnHost
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To verify the scenario where the VTEPs have VMs having the same IP address.
Tags: sanity
TestName: DuplicateVMIP
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ArpPingDADHasDuplicate:
    SupportAdapter: 'vm.[1].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 3
    Type: Traffic
    arpprobe: DAD
    connectivitytest: 0
    sleepbetweenworkloads: 15
    toolName: ArpPing
  ArpPingVM1ToVM4:
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  ArpPingVM2ToVM3:
    SupportAdapter: 'vm.[3].vnic.[1]'
    TestAdapter: 'vm.[2].vnic.[1]'
    TestDuration: 5
    Type: Traffic
    connectivitytest: 0
    toolName: ArpPing
  CheckVirtualWire1MTEPOnHost:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
    Type: Switch
    checkmteponhost: 'host.[2-4]'
  CheckVirtualWire1MacEntryOnHost2:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
    host: 'host.[2]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  CheckVirtualWire1MacEntryOnHost3:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[3].vnic.[1]'
      - mac: 'vm.[4].vnic.[1]'
    host: 'host.[3]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  CheckVirtualWire1MacEntryOnHost4:
    Type: Switch
    'VerifyMacEntryOnHost[?]contains':
      - mac: 'vm.[2].vnic.[1]'
      - mac: 'vm.[1].vnic.[1]'
      - mac: 'vm.[4].vnic.[1]'
    host: 'host.[4]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Unicat_1:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[1-4].vnic.[1]'
    TestAdapter: 'vm.[1-4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire1Unicat_2:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
    -
      - SetIPv4VM1Vnic1
      - SetIPv4VM2Vnic1
      - SetIPv4VM3Vnic1
      - SetIPv4VM4Vnic1
    -
      - NetperfTestVirtualWire1Unicat_1
    -
      - CheckVirtualWire1MacEntryOnHost2
      - CheckVirtualWire1MacEntryOnHost3
      - CheckVirtualWire1MacEntryOnHost4
    -
      - CheckVirtualWire1MTEPOnHost
    -
      - SetIVM1Vnic1EqualToVM2Vnic1
    -
      - NetperfTestVirtualWire1Unicat_2
    -
      - ArpPingDADHasDuplicate
    -
      - ArpPingVM1ToVM4
    -
      - VerifyVM1ArpEntryOnControllers
      - VerifyVM2ArpEntryNotOnControllers
    -
      - ArpPingVM2ToVM3
    -
      - VerifyVM2ArpEntryOnControllers
      - VerifyVM1ArpEntryNotOnControllers
    -
      - SetIPv4VM1Vnic1
    -
      - NetperfTestVirtualWire1Unicat_1
    -
      - CheckVirtualWire1MacEntryOnHost2
      - CheckVirtualWire1MacEntryOnHost3
      - CheckVirtualWire1MacEntryOnHost4
    -
      - CheckVirtualWire1MTEPOnHost
  SetIPv4VM1Vnic1:
    IPv4: 192.111.1.1
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  SetIPv4VM2Vnic1:
    IPv4: 192.111.2.1
    TestAdapter: 'vm.[2].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  SetIPv4VM3Vnic1:
    IPv4: 192.111.3.1
    TestAdapter: 'vm.[3].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  SetIPv4VM4Vnic1:
    IPv4: 192.111.4.1
    TestAdapter: 'vm.[4].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  SetIVM1Vnic1EqualToVM2Vnic1:
    IPv4: 192.111.2.1
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    netmask: 255.255.0.0
  VerifyVM1ArpEntryNotOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]not_contains':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  VerifyVM1ArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[1].vnic.[1]'
        mac: 'vm.[1].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  VerifyVM2ArpEntryNotOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]not_contains':
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  VerifyVM2ArpEntryOnControllers:
    Type: Switch
    'VerifyArpEntryOnController[?]contain_once':
      - ip: 'vm.[2].vnic.[1]'
        mac: 'vm.[2].vnic.[1]'
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify the vMotion in vxlan on hosts '
Tags: 'sanity,physical'
TestName: vMotion
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[1]':
          driver: any
    '[2-5]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster-29511
              host: 'host.[2-5]'
      dvportgroup:
        '[1]':
          vds: 'vc.[1].vds.[1]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-5]'
          vmnicadapter: 'host.[2-5].vmnic.[1]'
  vm:
    '[1]':
      datastoreType: shared
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      datastoreType: shared
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      datastoreType: shared
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      datastoreType: shared
      host: 'host.[5]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2]'
          name: network-scope-29511
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  AddvmknicHost2DVPG1:
    TestHost: 'host.[2]'
    Type: Host
    vmknic:
      '[1]':
        configurevmotion: enable
        ipv4address: 172.255.1.39
        netmask: 255.255.255.0
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  AddvmknicHost3DVPG1:
    TestHost: 'host.[3]'
    Type: Host
    vmknic:
      '[1]':
        configurevmotion: enable
        ipv4address: 172.255.1.49
        netmask: 255.255.255.0
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  AddvmknicHost4DVPG1:
    TestHost: 'host.[4]'
    Type: Host
    vmknic:
      '[1]':
        configurevmotion: enable
        ipv4address: 172.255.1.59
        netmask: 255.255.255.0
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  AddvmknicHost5DVPG1:
    TestHost: 'host.[5]'
    Type: Host
    vmknic:
      '[1]':
        configurevmotion: enable
        ipv4address: 172.255.1.69
        netmask: 255.255.255.0
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  Deploy_Controller2:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[2]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  Deploy_Controller3:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[3]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  ExitSequence: []
  NetperfTestIgnorethroughput1:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[2].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 100
    Type: Traffic
    toolname: iperf
  NetperfTestIgnorethroughput2:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[4].vnic.[1]'
    TestAdapter: 'vm.[3].vnic.[1]'
    TestDuration: 100
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM3
      - PoweronVM4
    -
      - AddvmknicHost2DVPG1
      - AddvmknicHost3DVPG1
      - AddvmknicHost4DVPG1
      - AddvmknicHost5DVPG1
    -
      - NetperfTestIgnorethroughput1
      - vMotionVM1ToHost3
    -
      - NetperfTestIgnorethroughput2
      - vMotionVM3ToHost5
  vMotionVM1ToHost3:
    Iterations: 1
    TestVM: 'vm.[1]'
    Type: VM
    dsthost: 'host.[3]'
    vmotion: roundtrip
  vMotionVM3ToHost5:
    Iterations: 1
    TestVM: 'vm.[3]'
    Type: VM
    dsthost: 'host.[5]'
    vmotion: roundtrip
---
AutomationLevel: Manual
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'Include 2 test cases: VtepTrafficTcpUdpIpv4v6: To verify whether a VTEP converts the unicast TCP/UDP traffics of IPv4 & IPv6  from VM  to vxlan Unicast traffics;VtepTrafficBUM: To verify whether a VTEP converts the BUM packets from VM to multicast packets, without contacting the controller '
Tags: sanity
TestName: VtepTrafficTcpUdpIpv4v6AndBUM
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  CheckWire2MTEPOnHost:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[2]'
    Type: Switch
    checkmteponhost: 'host.[2-4]'
  CheckWire3MTEPOnHost:
    TestSwitch: 'vsm.[1].networkscope.[1].virtualwire.[3]'
    Type: Switch
    checkmteponhost: 'host.[2-4]'
  CreateVirtualWire:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  NetperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire1Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  NetperfTestVirtualWire2Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire2Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
  NetperfTestVirtualWire3Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWire3Unicat:
    L3Protocol: 'ipv4,ipv6'
    L4Protocol: 'tcp,udp'
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PingTrafficVirtualWire1Broadcast:
    Routingscheme: broadcast
    SupportAdapter: 'vm.[2-3].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: Traffic
    toolname: ping
  PingTrafficVirtualWire2Broadcast:
    Routingscheme: broadcast
    SupportAdapter: 'vm.[5-6].vnic.[1]'
    TestAdapter: 'vm.[4].vnic.[1]'
    Type: Traffic
    toolname: ping
  PingTrafficVirtualWire3Broadcast:
    Routingscheme: broadcast
    SupportAdapter: 'vm.[8-9].vnic.[1]'
    TestAdapter: 'vm.[7].vnic.[1]'
    Type: Traffic
    toolname: ping
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9],'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVirtualWire
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - CheckWire2MTEPOnHost
    -
      - CheckWire3MTEPOnHost
    -
      - NetperfTestVirtualWire1Unicat
    -
      - NetperfTestVirtualWire2Unicat
    -
      - NetperfTestVirtualWire3Unicat
    -
      - NetperfTestVirtualWire1Multicast
    -
      - NetperfTestVirtualWire2Multicast
    -
      - NetperfTestVirtualWire3Multicast
    -
      - PingTrafficVirtualWire1Broadcast
    -
      - PingTrafficVirtualWire2Broadcast
    -
      - PingTrafficVirtualWire3Broadcast
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify teaming policy: LACP Passive and Active'
Tags: 'sanity,physical'
TestName: TeamingPolicy-LACPPassiveAndActive
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[1]':
          driver: any
    '[2]':
      pswitchport:
        '[1]':
          vmnic: 'host.[2].vmnic.[1]'
        '[2]':
          vmnic: 'host.[2].vmnic.[2]'
      vmnic:
        '[1-2]':
          driver: any
    '[3]':
      pswitchport:
        '[1]':
          vmnic: 'host.[3].vmnic.[1]'
        '[2]':
          vmnic: 'host.[3].vmnic.[2]'
      vmnic:
        '[1-2]':
          driver: any
    '[4]':
      pswitchport:
        '[1]':
          vmnic: 'host.[4].vmnic.[1]'
        '[2]':
          vmnic: 'host.[4].vmnic.[2]'
      vmnic:
        '[1-2]':
          driver: any
    '[5]':
      pswitchport:
        '[1]':
          vmnic: 'host.[5].vmnic.[1]'
        '[2]':
          vmnic: 'host.[5].vmnic.[2]'
      vmnic:
        '[1-2]':
          driver: any
  pswitch:
    '[1]':
      ip: XX.XX.XX.XX
    '[2]':
      ip: XX.XX.XX.XX
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2-3]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[4-5]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          version: 5.1.0
          vmnicadapter: 'host.[2-3].vmnic.[1-2]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[4-5]'
          version: 5.1.0
          vmnicadapter: 'host.[4-5].vmnic.[1-2]'
  vm:
    '[1-2]':
      host: 'host.[2]'
      vmstate: poweroff
    '[3-4]':
      host: 'host.[3]'
      vmstate: poweroff
    '[5-6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7-8]':
      host: 'host.[5]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: LACP_ACTIVE
          vibs: install
          vlan: 19
          vmkniccount: 1
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: LACP_PASSIVE
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  ConfigureChannelGroup_1:
    Mode: Active
    TestPort: 'host.[2-3].pswitchport.[-1]'
    Type: Port
    configurechannelgroup: 34
  ConfigureChannelGroup_2:
    Mode: Active
    TestPort: 'host.[4-5].pswitchport.[-1]'
    Type: Port
    configurechannelgroup: 34
  CreateLAGv1Active:
    TestSwitch: 'vc.[1].vds.[1]'
    Type: Switch
    lag:
      '[1]':
        lacpversion: singlelag
  CreateLAGv1Passive:
    TestSwitch: 'vc.[1].vds.[2]'
    Type: Switch
    lag:
      '[1]':
        lacpversion: singlelag
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteChannelGroup:
    TestSwitch: 'pswitch.[1-2]'
    Type: Switch
    removeportchannel: 34
  Deploy_Controller2:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[2]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  Deploy_Controller3:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[3]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  DisableIPPIM:
    Mode: sparse-dense-mode
    TestPort: 'host.[4-5].pswitchport.[1]'
    Type: Port
    disablepim: 19
  EnableIPPIM:
    Mode: sparse-dense-mode
    TestPort: 'host.[4-5].pswitchport.[1]'
    Type: Port
    enablepim: 19
  EnableLACPv1Active:
    TestPortgroup: 'vc.[1].vds.[1].uplinkportgroup.[1]'
    Type: PortGroup
    configurelag: enable
    mode: active
  EnableLACPv1Passive:
    TestPortgroup: 'vc.[1].vds.[2].uplinkportgroup.[1]'
    Type: PortGroup
    configurelag: enable
    mode: passive
  ExitSequence:
    -
      - EnableIPPIM
    -
      - RemovePortsFromChannelGroup
    -
      - DeleteChannelGroup
  NetperfTestVirtualWire1Multicast:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[4].vnic.[1],vm.[10].vnic.[1]'
    TestAdapter: 'vm.[1].vnic.[1],vm.[7].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWireMulticastPass:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[1-8].vnic.[1]'
    TestAdapter: 'vm.[1-8].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    udpbandwidth: 10M
  NetperfTestVirtualWireUnicatFail:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[1-8].vnic.[1]'
    TestAdapter: 'vm.[1-8].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    expectedresult: Fail
    toolname: iperf
  NetperfTestVirtualWireUnicatPass:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[1-8].vnic.[1]'
    TestAdapter: 'vm.[1-8].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-8]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  RemovePortsFromChannelGroup:
    TestPort: 'host.[2-5].pswitchport.[-1]'
    Type: Port
    configurechannelgroup: no
  Sequence:
    -
      - Deploy_Controller2
    -
      - Deploy_Controller3
    -
      - ConfigureChannelGroup_1
    -
      - ConfigureChannelGroup_2
    -
      - CreateLAGv1Active
    -
      - EnableLACPv1Active
    -
      - CreateLAGv1Passive
    -
      - CreateVirtualWire1
    -
      - EnableLACPv1Passive
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM3
      - PoweronVM4
    -
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
    -
      - NetperfTestVirtualWireUnicatPass
    -
      - NetperfTestVirtualWireMulticastPass
    -
      - UpgradeVDS
    -
      - NetperfTestVirtualWireUnicatPass
      - UpdateVirtualWireToUnicast
    -
      - NetperfTestVirtualWireUnicatPass
      - UpdateVirtualWireToHybrid
    -
      - NetperfTestVirtualWireUnicatPass
      - UpdateVirtualWireToMulticast
    -
      - NetperfTestVirtualWireMulticastPass
      - UpdateVirtualWireToUnicast
    -
      - NetperfTestVirtualWireMulticastPass
      - UpdateVirtualWireToHybrid
    -
      - NetperfTestVirtualWireMulticastPass
      - UpdateVirtualWireToMulticast
    -
      - DisableIPPIM
    -
      - NetperfTestVirtualWireUnicatFail
      - UpdateVirtualWireToMulticast
    -
      - EnableIPPIM
    -
      - NetperfTestVirtualWireMulticastPass
  UpdateVirtualWireToHybrid:
    Type: Switch
    controlplanemode: HYBRID_MODE
    name: test
    reconfigure: true
    sleepbetweenworkloads: 10
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  UpdateVirtualWireToMulticast:
    Type: Switch
    controlplanemode: MULTICAST_MODE
    name: test
    reconfigure: true
    sleepbetweenworkloads: 10
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  UpdateVirtualWireToUnicast:
    Type: Switch
    controlplanemode: UNICAST_MODE
    name: test
    reconfigure: true
    sleepbetweenworkloads: 10
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  UpgradeVDS:
    TestSwitch: 'vc.[1].vds.[-1]'
    Type: Switch
    upgradevds: 5.5.0
---
AutomationLevel: Automatic
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P1
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: To verify the scenario where an existing controller is deleted from the controller cluster
Tags: sanity
TestName: DeleteOneAndAllController
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[0]':
          interface: vmnic0
    '[2-4]':
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[3-4]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2]'
          vmnicadapter: 'host.[2].vmnic.[1]'
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[3-4]'
          vmnicadapter: 'host.[3-4].vmnic.[1]'
  vm:
    '[1]':
      host: 'host.[2]'
      vmstate: poweroff
    '[2]':
      host: 'host.[3]'
      vmstate: poweroff
    '[3]':
      host: 'host.[4]'
      vmstate: poweroff
    '[4]':
      host: 'host.[2]'
      vmstate: poweroff
    '[5]':
      host: 'host.[3]'
      vmstate: poweroff
    '[6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7]':
      host: 'host.[2]'
      vmstate: poweroff
    '[8]':
      host: 'host.[3]'
      vmstate: poweroff
    '[9]':
      host: 'host.[4]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: ETHER_CHANNEL
          vibs: install
          vlan: 18
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[2]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
        '[3]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  Create3VirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[2]':
        controlplanemode: UNICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
      '[3]':
        controlplanemode: HYBRID_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
  DeleteAllControllers:
    TestNSX: 'vsm.[1]'
    Type: NSX
    deletevxlancontroller: 'vsm.[1].vxlancontroller.[-1]'
  DeleteAllVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[-1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[-1].virtualwire.[-1]'
    sleepbetweenworkloads: 20
  DeleteOneActiveController:
    DeleteActiveController: Y
    TestNSX: 'vsm.[1]'
    Type: NSX
    controllers: 'vsm.[1].vxlancontroller.[-1]'
    switches: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  DeleteVM1Vnic1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVM2Vnic1:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVM3Vnic1:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVM4Vnic1:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVM5Vnic1:
    TestVM: 'vm.[5]'
    Type: VM
    deletevnic: 'vm.[5].vnic.[1]'
  DeleteVM6Vnic1:
    TestVM: 'vm.[6]'
    Type: VM
    deletevnic: 'vm.[6].vnic.[1]'
  DeleteVM7Vnic1:
    TestVM: 'vm.[7]'
    Type: VM
    deletevnic: 'vm.[7].vnic.[1]'
  DeleteVM8Vnic1:
    TestVM: 'vm.[8]'
    Type: VM
    deletevnic: 'vm.[8].vnic.[1]'
  DeleteVM9Vnic1:
    TestVM: 'vm.[9]'
    Type: VM
    deletevnic: 'vm.[9].vnic.[1]'
  Deploy_Controller1:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[1]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  Deploy_Controller2:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[2]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  Deploy_Controller3:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[3]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  ExitSequence:
    -
      - PoweroffVM
    -
      - DeleteVM1Vnic1
    -
      - DeleteVM2Vnic1
    -
      - DeleteVM3Vnic1
    -
      - DeleteVM4Vnic1
    -
      - DeleteVM5Vnic1
    -
      - DeleteVM6Vnic1
    -
      - DeleteVM7Vnic1
    -
      - DeleteVM8Vnic1
    -
      - DeleteVM9Vnic1
    -
      - DeleteAllVirtualWires
  IperfTestVirtualWire1:
    L4Protocol: tcp
    SupportAdapter: 'vm.[1-3].vnic.[1]'
    TestAdapter: 'vm.[1-3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
  IperfTestVirtualWire2:
    L4Protocol: tcp
    SupportAdapter: 'vm.[4-6].vnic.[1]'
    TestAdapter: 'vm.[4-6].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolName: iperf
  IperfTestVirtualWire2UnicatFail:
    L4Protocol: tcp
    SupportAdapter: 'vm.[4-6].vnic.[1]'
    TestAdapter: 'vm.[4-6].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    expectedresult: Fail
    toolName: iperf
  IperfTestVirtualWire3:
    L4Protocol: tcp
    SupportAdapter: 'vm.[7-9].vnic.[1]'
    TestAdapter: 'vm.[7-9].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PlaceVMsOnVirtualWire2:
    TestVM: 'vm.[4-6]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  PlaceVMsOnVirtualWire3:
    TestVM: 'vm.[7-9],'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[3]'
        startconnected: 1
  PowerOffVM456789:
    TestVM: 'vm.[4-9]'
    Type: VM
    vmstate: poweroff
  PoweroffVM:
    TestVM: 'vm.[-1]'
    Type: VM
    vmstate: poweroff
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  PoweronVM9:
    TestVM: 'vm.[9]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - Create3VirtualWires
    -
      - PlaceVMsOnVirtualWire1
    -
      - PlaceVMsOnVirtualWire2
    -
      - PlaceVMsOnVirtualWire3
    -
      - PoweronVM1
      - PoweronVM2
      - PoweronVM3
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - IperfTestVirtualWire1
      - IperfTestVirtualWire2
      - IperfTestVirtualWire3
    -
      - DeleteOneActiveController
    -
      - IperfTestVirtualWire1
      - IperfTestVirtualWire2
      - IperfTestVirtualWire3
    -
      - DeleteAllControllers
    -
      - PowerOffVM456789
    -
      - PoweronVM4
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
      - PoweronVM9
    -
      - IperfTestVirtualWire1
      - IperfTestVirtualWire2UnicatFail
    -
      - Deploy_Controller1
    -
      - Deploy_Controller2
    -
      - Deploy_Controller3
    -
      - IperfTestVirtualWire1
      - IperfTestVirtualWire2
      - IperfTestVirtualWire3
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Duration: ''
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 5511
Partnerfacing: N
Priority: P0
Procedure: ''
Product: NSX
QCPath: OP\Networking-FVT\VXLAN
Status: Execution Ready
Summary: 'To verify teaming policy: SRC ID and LACPv2 '
Tags: 'sanity,physical'
TestName: TeamingPolicy-SRCIDLACPV2
Testbed: ''
TestbedSpec:
  host:
    '[1]':
      vmnic:
        '[1]':
          driver: any
    '[2]':
      pswitchport:
        '[1]':
          vmnic: 'host.[2].vmnic.[1]'
        '[2]':
          vmnic: 'host.[2].vmnic.[2]'
      vmnic:
        '[1-2]':
          driver: any
    '[3]':
      pswitchport:
        '[1]':
          vmnic: 'host.[3].vmnic.[1]'
        '[2]':
          vmnic: 'host.[3].vmnic.[2]'
      vmnic:
        '[1-2]':
          driver: any
    '[4-5]':
      vmnic:
        '[1-2]':
          driver: any
  pswitch:
    '[1]':
      ip: XX.XX.XX.XX
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              clustername: ControllerCluster-29511
              host: 'host.[1]'
            '[2]':
              clustername: ComputeCluster1-29511
              host: 'host.[2-3]'
            '[3]':
              clustername: ComputeCluster2-29511
              host: 'host.[4-5]'
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          lag:
            '[1]':
              hosts: 'host.[2-3]'
              lagports: 2
              lagtimeout: short
        '[2]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[4-5]'
          numuplinkports: 4
          vmnicadapter: 'host.[4-5].vmnic.[1-2]'
  vm:
    '[1-2]':
      host: 'host.[2]'
      vmstate: poweroff
    '[3-4]':
      host: 'host.[3]'
      vmstate: poweroff
    '[5-6]':
      host: 'host.[4]'
      vmstate: poweroff
    '[7-8]':
      host: 'host.[5]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: XX.XX.XX.XX
          ipranges:
            - XX.XX.XX.XX-XX.XX.XX.XX
          name: ippool-controller-1-29511
          prefixlength: XX
      multicastiprange:
        '[1]':
          begin: 239.0.0.101
          end: 239.254.254.254
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2-3]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: LACP_V2
          vibs: install
          vlan: 19
          vmkniccount: 1
        '[2]':
          cluster: 'vc.[1].datacenter.[1].cluster.[3]'
          mtu: 1600
          switch: 'vc.[1].vds.[2]'
          teaming: LOADBALANCE_SRCID
          vibs: install
          vlan: 19
          vmkniccount: 4
      vxlancontroller:
        '[1]':
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  AddUplinkToLag_1:
    TestLag: 'vc.[1].vds.[1].lag.[1]'
    Type: LACP
    configuplinktolag: add
    vmnicadapter: 'host.[2-3].vmnic.[1-2]'
  ConfigureChannelGroup_1:
    Mode: Active
    TestPort: 'host.[2].pswitchport.[-1]'
    Type: Port
    configurechannelgroup: 34
  ConfigureChannelGroup_2:
    Mode: Active
    TestPort: 'host.[3].pswitchport.[-1]'
    Type: Port
    configurechannelgroup: 35
  CreateVirtualWire1:
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenerate
        tenantid: AutoGenerate
    testtransportzone: 'vsm.[1].networkscope.[1]'
  DeleteChannelGroup:
    TestSwitch: 'pswitch.[1]'
    Type: Switch
    removeportchannel: '34,35'
  Deploy_Controller2:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[2]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  Deploy_Controller3:
    Type: NSX
    testnsx: 'vsm.[1]'
    vxlancontroller:
      '[3]':
        datastore: 'host.[1]'
        host: 'host.[1]'
        ippool: 'vsm.[1].ippool.[1]'
        name: AutoGenerate
        resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
  DisableIPPIM:
    Mode: sparse-dense-mode
    TestPort: 'host.[2].pswitchport.[1]'
    Type: Port
    disablepim: 19
  DownHostsVmnic1:
    TestAdapter: 'host.[2-3].vmnic.[1]'
    Type: NetAdapter
    devicestatus: down
  DownUpHostsVmnic1:
    TestAdapter: 'host.[2-3].vmnic.[1]'
    Type: NetAdapter
    devicestatus: 'down,up'
    sleepbetweenworkloads: 20
  EnableIPPIM:
    Mode: sparse-dense-mode
    TestPort: 'host.[2].pswitchport.[1]'
    Type: Port
    enablepim: 19
  ExitSequence:
    -
      - EnableIPPIM
    -
      - RemovePortsFromChannelGroup
    -
      - DeleteChannelGroup
  NetperfTestVirtualWireMulticastPass:
    L3Protocol: ipv4
    RoutingScheme: Multicast
    SupportAdapter: 'vm.[1-8].vnic.[1]'
    TestAdapter: 'vm.[1-8].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    sleepbetweenworkloads: 30
    udpbandwidth: 10M
  NetperfTestVirtualWireUnicatFail:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[1-8].vnic.[1]'
    TestAdapter: 'vm.[1-8].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    expectedresult: Fail
    toolname: iperf
  NetperfTestVirtualWireUnicatPass:
    L3Protocol: ipv4
    L4Protocol: tcp
    SupportAdapter: 'vm.[5-8].vnic.[1]'
    TestAdapter: 'vm.[1-3].vnic.[1]'
    TestDuration: 60
    Type: Traffic
    sleepbetweenworkloads: 30
    toolname: iperf
  PlaceVMsOnVirtualWire1:
    TestVM: 'vm.[1-8]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: vmxnet3
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  PoweronVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PoweronVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PoweronVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PoweronVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  PoweronVM5:
    TestVM: 'vm.[5]'
    Type: VM
    vmstate: poweron
  PoweronVM6:
    TestVM: 'vm.[6]'
    Type: VM
    vmstate: poweron
  PoweronVM7:
    TestVM: 'vm.[7]'
    Type: VM
    vmstate: poweron
  PoweronVM8:
    TestVM: 'vm.[8]'
    Type: VM
    vmstate: poweron
  RemovePortsFromChannelGroup:
    TestPort: 'host.[2-3].pswitchport.[-1]'
    Type: Port
    configurechannelgroup: no
  Sequence:
    -
      - Deploy_Controller2
    -
      - Deploy_Controller3
    -
      - ConfigureChannelGroup_1
    -
      - ConfigureChannelGroup_2
    -
      - AddUplinkToLag_1
    -
      - CreateVirtualWire1
    -
      - PlaceVMsOnVirtualWire1
    -
      - PoweronVM1
      - PoweronVM2
    -
      - PoweronVM3
      - PoweronVM4
    -
      - PoweronVM5
      - PoweronVM6
    -
      - PoweronVM7
      - PoweronVM8
    -
      - NetperfTestVirtualWireUnicatPass
      - DownUpHostsVmnic1
    -
      - UpdateVirtualWireToUnicast
    -
      - NetperfTestVirtualWireUnicatPass
      - DownUpHostsVmnic1
    -
      - UpdateVirtualWireToHybrid
    -
      - NetperfTestVirtualWireUnicatPass
      - DownUpHostsVmnic1
    -
      - UpdateVirtualWireToMulticast
    -
      - NetperfTestVirtualWireUnicatPass
      - DownUpHostsVmnic1
    -
      - NetperfTestVirtualWireMulticastPass
      - DownUpHostsVmnic1
    -
      - UpdateVirtualWireToUnicast
    -
      - NetperfTestVirtualWireMulticastPass
      - DownUpHostsVmnic1
    -
      - UpdateVirtualWireToHybrid
    -
      - NetperfTestVirtualWireMulticastPass
      - DownUpHostsVmnic1
    -
      - UpdateVirtualWireToMulticast
    -
      - DisableIPPIM
    -
      - NetperfTestVirtualWireUnicatFail
      - UpdateVirtualWireToMulticast
    -
      - EnableIPPIM
    -
      - NetperfTestVirtualWireMulticastPass
  UpHostsVmnic1:
    TestAdapter: 'host.[2-3].vmnic.[1]'
    Type: NetAdapter
    devicestatus: up
  UpdateVirtualWireToHybrid:
    Type: Switch
    controlplanemode: HYBRID_MODE
    name: test
    reconfigure: true
    sleepbetweenworkloads: 20
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  UpdateVirtualWireToMulticast:
    Type: Switch
    controlplanemode: MULTICAST_MODE
    name: test
    reconfigure: true
    sleepbetweenworkloads: 20
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  UpdateVirtualWireToUnicast:
    Type: Switch
    controlplanemode: UNICAST_MODE
    name: test
    reconfigure: true
    sleepbetweenworkloads: 20
    testswitch: 'vsm.[1].networkscope.[1].virtualwire.[1]'
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Developer: hchilkot
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 6650
Partnerfacing: N
Priority: P0
Procedure: 1. Create 1 dvportgroup with guest tagging enabled2. Enable guest vlan tagging for the dvportgroup3. Enable MAC Learning for the dvporgroup4. Connect VM to the vxlan network and configured vlans5. Make sure that filter is enabled for vm ports6. Migrate VM to the destination host7. After migration traffic should work
Product: NSX
Status: Execution Ready
Summary: Verify that mac filter works with dvportgroup
Tags: sanity
TestName: MACFilterWithdvportgroup
TestbedSpec:
  host:
    '[1]': {}
    '[2-3]':
      vmknic:
        '[1]':
          configurevmotion: enable
          ipv4address: dhcp
          portgroup: 'vc.[1].dvportgroup.[1]'
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              host: 'host.[1]'
              name: Controller-Cluster-30818
            '[2]':
              host: 'host.[2-3]'
              name: Compute-Cluster-30818
      dvportgroup:
        '[1]':
          name: dvpg-mgmt-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 20
          vlantype: access
        '[2]':
          name: dvpg-vlan16-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 16
          vlantype: access
        '[3]':
          name: dvpg-vlan17-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 17
          vlantype: access
        '[4]':
          name: dvpg-vlanTrunk1-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
        '[5]':
          name: dvpg-vlanTrunk2-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          numuplinkports: 1
          vmnicadapter: 'host.[2-3].vmnic.[1]'
  vm:
    '[1-2]':
      datastoreType: shared
      host: 'host.[2]'
      vmstate: poweroff
    '[3-4]':
      datastoreType: shared
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: x.x.x.x
          ipranges:
            - a.a.a.a-b.b.b.b
          name: AutoGenerate
          prefixlength: xx
      multicastiprange:
        '[1]':
          begin: 239.1.1.1
          end: 239.1.1.100
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          firstnodeofcluster: true
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  AddVLANVM1:
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    vlaninterface:
      '[1]':
        vlanid: 16
  AddVLANVM3:
    TestAdapter: 'vm.[3].vnic.[1]'
    Type: NetAdapter
    vlaninterface:
      '[1]':
        vlanid: 16
  AddVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vc.[1].dvportgroup.[4]'
        startconnected: 1
  AddVNIC3:
    TestVM: 'vm.[3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vc.[1].dvportgroup.[4]'
        startconnected: 1
  DeleteVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVNIC3:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  EnableMACLearning:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      macLearning: enable
    portgroup: 'vc.[1].dvportgroup.[4]'
  ExitSequence:
    -
      - PowerOffVM
    -
      - DeleteVNIC1
    -
      - DeleteVNIC3
  PowerOffVM:
    TestVM: 'vm.[1],vm.[3]'
    Type: VM
    vmstate: poweroff
  PowerOnVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PowerOnVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - AddVNIC1
    -
      - AddVNIC3
    -
      - EnableMACLearning
    -
      - PowerOnVM1
    -
      - PowerOnVM3
    -
      - VerifyNetworkFeatures1
    -
      - VerifyNetworkFeatures3
    -
      - AddVLANVM1
    -
      - AddVLANVM3
    -
      - Traffic1
    -
      - vmotion1
    -
      - Traffic1
    -
      - vmotion2
    -
      - Traffic1
  Traffic1:
    L4Protocol: tcp
    SupportAdapter: 'vm.[3].vnic.[1].vlaninterface.[1]'
    TestAdapter: 'vm.[1].vnic.[1].vlaninterface.[1]'
    TestDuration: 10
    Type: Traffic
    toolName: iperf
  VerifyNetworkFeatures1:
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]contains':
      - Features enabled: MAC learning
  VerifyNetworkFeatures3:
    TestAdapter: 'vm.[3].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]contains':
      - Features enabled: MAC learning
  vmotion1:
    TestVM: 'vm.[1]'
    Type: VM
    dsthost: 'host.[3]'
    vmotion: oneway
  vmotion2:
    TestVM: 'vm.[1]'
    Type: VM
    dsthost: 'host.[2]'
    vmotion: oneway
---
AutomationLevel: Manual
Category: Networking
Component: VXLAN
Developer: hchilkot
FullyAutomatable: Y
PMT: 6650
Partnerfacing: N
Priority: P0
Procedure: 1. Create 1 VXLAN networks with guest tagging enabled2. Enable guest vlan tagging for the vxlan3. Enable MAC Learning for the vwire created4. Connect VM to the vxlan network and configured vlans5. Make sure that filter is enabled for vm ports6. Disable MAC filter
Product: NSX
Status: Execution Ready
Summary: Verify that enable/disable mac filter works
Tags: sanity
TestName: EnableDisableMACFilter
TestbedSpec:
  host:
    '[1]': {}
    '[2-3]':
      vmknic:
        '[1]':
          configurevmotion: enable
          ipv4address: dhcp
          portgroup: 'vc.[1].dvportgroup.[1]'
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              host: 'host.[1]'
              name: Controller-Cluster-30818
            '[2]':
              host: 'host.[2-3]'
              name: Compute-Cluster-30818
      dvportgroup:
        '[1]':
          name: dvpg-mgmt-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 20
          vlantype: access
        '[2]':
          name: dvpg-vlan16-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 16
          vlantype: access
        '[3]':
          name: dvpg-vlan17-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 17
          vlantype: access
        '[4]':
          name: dvpg-vlanTrunk1-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
        '[5]':
          name: dvpg-vlanTrunk2-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          numuplinkports: 1
          vmnicadapter: 'host.[2-3].vmnic.[1]'
  vm:
    '[1-2]':
      datastoreType: shared
      host: 'host.[2]'
      vmstate: poweroff
    '[3-4]':
      datastoreType: shared
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: x.x.x.x
          ipranges:
            - a.a.a.a-b.b.b.b
          name: AutoGenerate
          prefixlength: xx
      multicastiprange:
        '[1]':
          begin: 239.1.1.1
          end: 239.1.1.100
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          firstnodeofcluster: true
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  AddVLANVM1:
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    vlaninterface:
      '[1]':
        vlanid: 16
  AddVLANVM3:
    TestAdapter: 'vm.[3].vnic.[1]'
    Type: NetAdapter
    vlaninterface:
      '[1]':
        vlanid: 16
  AddVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  AddVNIC3:
    TestVM: 'vm.[3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  CreateVWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: HYBRID_MODE
        guestvlanallowed: true
        name: AutoGenrate
        tenantid: AutoGenerate
  DeleteVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVNIC3:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  DisableMACLearning:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      macLearning: disable
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  EnableMACLearning:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      macLearning: enable
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  ExitSequence:
    -
      - PowerOffVM
    -
      - DeleteVNIC1
    -
      - DeleteVNIC3
    -
      - DeleteVirtualWires
  PowerOffVM:
    TestVM: 'vm.[1],vm.[3]'
    Type: VM
    vmstate: poweroff
  PowerOnVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PowerOnVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVWires
    -
      - EnableMACLearning
    -
      - AddVNIC1
    -
      - AddVNIC3
    -
      - PowerOnVM1
    -
      - PowerOnVM3
    -
      - AddVLANVM1
    -
      - AddVLANVM3
    -
      - Traffic1
    -
      - VerifyNetworkFeature1
    -
      - DisableMACLearning
    -
      - VerifyNetworkFeature2
    -
      - Traffic1
  Traffic1:
    L4Protocol: tcp
    SupportAdapter: 'vm.[3].vnic.[1].vlaninterface.[1]'
    TestAdapter: 'vm.[1].vnic.[1].vlaninterface.[1]'
    TestDuration: 120
    Type: Traffic
    toolName: iperf
  VerifyNetworkFeature1:
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]contains':
      - Features enabled: MAC learning
  VerifyNetworkFeature2:
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]not_contains':
      - Features enabled: MAC learning
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Developer: hchilkot
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 6650
Partnerfacing: N
Priority: P0
Procedure: 1. Create 1 VXLAN networks with guest tagging enabled2. Enable guest vlan tagging for the vxlan3. Enable MAC Learning for the vwire created4. Connect VM to the vxlan network and configured vlans5. Make sure that filter is enabled for vm ports6. Migrate VM to the destination host7. After migration traffic should work
Product: NSX
Status: Execution Ready
Summary: Verify that enabling mac filter works with VXLAN
Tags: sanity
TestName: MACLearningFilterWithVXLAN
TestbedSpec:
  host:
    '[1]': {}
    '[2-3]':
      vmknic:
        '[1]':
          configurevmotion: enable
          ipv4address: dhcp
          portgroup: 'vc.[1].dvportgroup.[1]'
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              host: 'host.[1]'
              name: Controller-Cluster-30818
            '[2]':
              host: 'host.[2-3]'
              name: Compute-Cluster-30818
      dvportgroup:
        '[1]':
          name: dvpg-mgmt-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 20
          vlantype: access
        '[2]':
          name: dvpg-vlan16-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 16
          vlantype: access
        '[3]':
          name: dvpg-vlan17-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 17
          vlantype: access
        '[4]':
          name: dvpg-vlanTrunk1-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
        '[5]':
          name: dvpg-vlanTrunk2-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          numuplinkports: 1
          vmnicadapter: 'host.[2-3].vmnic.[1]'
  vm:
    '[1-2]':
      datastoreType: shared
      host: 'host.[2]'
      vmstate: poweroff
    '[3-4]':
      datastoreType: shared
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: x.x.x.x
          ipranges:
            - a.a.a.a-b.b.b.b
          name: AutoGenerate
          prefixlength: xx
      multicastiprange:
        '[1]':
          begin: 239.1.1.1
          end: 239.1.1.100
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          firstnodeofcluster: true
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  AddVLANVM1:
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    vlaninterface:
      '[1]':
        vlanid: 19
  AddVLANVM2:
    TestAdapter: 'vm.[3].vnic.[1]'
    Type: NetAdapter
    vlaninterface:
      '[1]':
        vlanid: 19
  AddVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  AddVNIC2:
    TestVM: 'vm.[3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  CreateVWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        guestvlanallowed: true
        name: AutoGenrate
        tenantid: AutoGenerate
  DeleteVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVNIC2:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  EnableMACLearning:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      macLearning: enable
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  ExitSequence:
    -
      - PowerOffVM
    -
      - DeleteVNIC1
    -
      - DeleteVNIC2
    -
      - DeleteVirtualWires
  PowerOffVM:
    TestVM: 'vm.[1],vm.[3]'
    Type: VM
    vmstate: poweroff
  PowerOnVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PowerOnVM2:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVWires
    -
      - AddVNIC1
    -
      - AddVNIC2
    -
      - EnableMACLearning
    -
      - PowerOnVM1
    -
      - PowerOnVM2
    -
      - VerifyNetworkFeatures
    -
      - AddVLANVM1
    -
      - AddVLANVM2
    -
      - Traffic1
    -
      - vmotion1
    -
      - Traffic1
    -
      - vmotion2
  Traffic1:
    L4Protocol: tcp
    SupportAdapter: 'vm.[3].vnic.[1].vlaninterface.[1]'
    TestAdapter: 'vm.[1].vnic.[1].vlaninterface.[1]'
    TestDuration: 120
    Type: Traffic
    toolName: iperf
  VerifyNetworkFeatures:
    TestAdapter: 'vm.[1].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]contains':
      - Features enabled: MAC learning
  vmotion1:
    TestVM: 'vm.[1]'
    Type: VM
    dsthost: 'host.[3]'
    vmotion: oneway
  vmotion2:
    TestVM: 'vm.[1]'
    Type: VM
    dsthost: 'host.[2]'
    vmotion: oneway
---
AutomationLevel: Manual
Category: Networking
Component: VXLAN
Developer: hchilkot
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 6650
Partnerfacing: N
Priority: P0
Procedure: 1. Create 1 VXLAN networks2. Enable ip discovery for the vwire created3. Make sure that vm ports has ip discovery enabled4. disabling ip discovery should show the status on host
Product: NSX
Status: Execution Ready
Summary: Verify enabling disabling ip discovery
Tags: sanity
TestName: EnableDisableIPDiscovery
TestbedSpec:
  host:
    '[1]': {}
    '[2-3]':
      vmknic:
        '[1]':
          configurevmotion: enable
          ipv4address: dhcp
          portgroup: 'vc.[1].dvportgroup.[1]'
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              host: 'host.[1]'
              name: Controller-Cluster-30818
            '[2]':
              host: 'host.[2-3]'
              name: Compute-Cluster-30818
      dvportgroup:
        '[1]':
          name: dvpg-mgmt-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 20
          vlantype: access
        '[2]':
          name: dvpg-vlan16-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 16
          vlantype: access
        '[3]':
          name: dvpg-vlan17-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 17
          vlantype: access
        '[4]':
          name: dvpg-vlanTrunk1-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
        '[5]':
          name: dvpg-vlanTrunk2-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          numuplinkports: 1
          vmnicadapter: 'host.[2-3].vmnic.[1]'
  vm:
    '[1-2]':
      datastoreType: shared
      host: 'host.[2]'
      vmstate: poweroff
    '[3-4]':
      datastoreType: shared
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: x.x.x.x
          ipranges:
            - a.a.a.a-b.b.b.b
          name: AutoGenerate
          prefixlength: xx
      multicastiprange:
        '[1]':
          begin: 239.1.1.1
          end: 239.1.1.100
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          firstnodeofcluster: true
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  AddVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  AddVNIC2:
    TestVM: 'vm.[2]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vc.[1].dvportgroup.[3]'
        startconnected: 1
  CreateVWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        name: AutoGenrate
        tenantid: AutoGenerate
  DeleteVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVNIC2:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  DisableIPDiscovery1:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      ipDiscovery: disable
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  DisableIPDiscovery2:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      ipDiscovery: disable
    portgroup: 'vc.[1].dvportgroup.[3]'
  EnableIPDiscovery1:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      ipDiscovery: enable
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  EnableIPDiscovery2:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      ipDiscovery: enable
    portgroup: 'vc.[1].dvportgroup.[3]'
  EnableMACIPDiscovery1:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      ipDiscovery: enable
      macLearning: enable
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  EnableMACIPDiscovery2:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      ipDiscovery: enable
      macLearning: enable
    portgroup: 'vc.[1].dvportgroup.[3]'
  ExitSequence:
    -
      - PowerOffVM
    -
      - DeleteVNIC1
    -
      - DeleteVNIC2
    -
      - DeleteVirtualWires
  PowerOffVM:
    TestVM: 'vm.[1-2]'
    Type: VM
    vmstate: poweroff
  PowerOnVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PowerOnVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVWires
    -
      - AddVNIC1
    -
      - AddVNIC2
    -
      - PowerOnVM1
    -
      - PowerOnVM2
    -
      - EnableIPDiscovery1
    -
      - EnableIPDiscovery2
    -
      - VerifyNetworkFeatures1
    -
      - DisableIPDiscovery1
    -
      - DisableIPDiscovery2
    -
      - VerifyNetworkFeatures2
    -
      - EnableMACIPDiscovery1
    -
      - EnableMACIPDiscovery2
    -
      - VerifyNetworkFeatures3
  VerifyNetworkFeatures1:
    TestAdapter: 'vm.[1-2].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]contains':
      - Features enabled: IP Discovery
  VerifyNetworkFeatures2:
    TestAdapter: 'vm.[1-2].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]not_contains':
      - Features enabled: IP Discovery
  VerifyNetworkFeatures3:
    TestAdapter: 'vm.[1-2].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]contains':
      - Features enabled: 'IP Discovery,MAC learning'
---
AutomationLevel: Manual
Category: Networking
Component: VXLAN
Developer: hchilkot
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 6650
Partnerfacing: N
Priority: P0
Procedure: 1. Create dvportgroup with guest tagging enabled2. Enable MAC Learning for the vwire created3. Connect VM to the vxlan network and configured vlans4. Make sure that filter is enabled for vm ports5. Check the mac expiry timeout value for the vm ports
Product: NSX
Status: Execution Ready
Summary: Verify the mac expiry timeout with dvportgroup
Tags: sanity
TestName: MACExpiryTimeoutWithDVPortgroup
TestbedSpec:
  host:
    '[1]': {}
    '[2-3]':
      vmknic:
        '[1]':
          configurevmotion: enable
          ipv4address: dhcp
          portgroup: 'vc.[1].dvportgroup.[1]'
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              host: 'host.[1]'
              name: Controller-Cluster-30818
            '[2]':
              host: 'host.[2-3]'
              name: Compute-Cluster-30818
      dvportgroup:
        '[1]':
          name: dvpg-mgmt-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 20
          vlantype: access
        '[2]':
          name: dvpg-vlan16-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 16
          vlantype: access
        '[3]':
          name: dvpg-vlan17-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 17
          vlantype: access
        '[4]':
          name: dvpg-vlanTrunk1-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
        '[5]':
          name: dvpg-vlanTrunk2-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          numuplinkports: 1
          vmnicadapter: 'host.[2-3].vmnic.[1]'
  vm:
    '[1-2]':
      datastoreType: shared
      host: 'host.[2]'
      vmstate: poweroff
    '[3-4]':
      datastoreType: shared
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: x.x.x.x
          ipranges:
            - a.a.a.a-b.b.b.b
          name: AutoGenerate
          prefixlength: xx
      multicastiprange:
        '[1]':
          begin: 239.1.1.1
          end: 239.1.1.100
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          firstnodeofcluster: true
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  AddVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vc.[1].dvportgroup.[4]'
        startconnected: 1
  AddVNIC2:
    TestVM: 'vm.[2]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vc.[1].dvportgroup.[5]'
        startconnected: 1
  AddVNIC3:
    TestVM: 'vm.[3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vc.[1].dvportgroup.[4]'
        startconnected: 1
  AddVNIC4:
    TestVM: 'vm.[4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vc.[1].dvportgroup.[5]'
        startconnected: 1
  DeleteVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVNIC2:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVNIC3:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVNIC4:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  EnableMACLearning1:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      macLearning: enable
    portgroup: 'vc.[1].dvportgroup.[4]'
  EnableMACLearning2:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      macLearning: enable
    portgroup: 'vc.[1].dvportgroup.[5]'
  ExitSequence:
    -
      - PowerOffVM
    -
      - DeleteVNIC1
    -
      - DeleteVNIC2
    -
      - DeleteVNIC3
    -
      - DeleteVNIC4
  ExpiryTimeout:
    TestAdapter: 'vm.[1-4].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]contains':
      - Mac ageout time: 180 seconds
  PowerOffVM:
    TestVM: 'vm.[1-4]'
    Type: VM
    vmstate: poweroff
  PowerOnVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PowerOnVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PowerOnVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PowerOnVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - AddVNIC1
    -
      - AddVNIC2
    -
      - AddVNIC3
    -
      - AddVNIC4
    -
      - PowerOnVM1
    -
      - PowerOnVM2
    -
      - PowerOnVM2
    -
      - PowerOnVM3
    -
      - PowerOnVM4
    -
      - EnableMACLearning1
    -
      - EnableMACLearning2
    -
      - VerifyNetworkFeatures
    -
      - ExpiryTimeout
  VerifyNetworkFeatures:
    TestAdapter: 'vm.[1-4].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]contains':
      - Features enabled: MAC learning
---
AutomationLevel: Automated
Category: Networking
Component: VXLAN
Developer: hchilkot
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 6650
Partnerfacing: N
Priority: P0
Procedure: 1. Create 1 VXLAN networks and dvpg with guest tagging enabled2. Enable guest vlan tagging for the vxlan3. Enable MAC Learning and ip disovery for vwire and dvpg4. Connect VM to the vxlan network and configured vlans5. Make sure that filter is enabled for vm ports
Product: NSX
Status: Execution Ready
Summary: Verify that enabling ip discovery and mac filter works
Tags: sanity
TestName: EnableMACFilterAndIPDiscovery
TestbedSpec:
  host:
    '[1]': {}
    '[2-3]':
      vmknic:
        '[1]':
          configurevmotion: enable
          ipv4address: dhcp
          portgroup: 'vc.[1].dvportgroup.[1]'
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              host: 'host.[1]'
              name: Controller-Cluster-30818
            '[2]':
              host: 'host.[2-3]'
              name: Compute-Cluster-30818
      dvportgroup:
        '[1]':
          name: dvpg-mgmt-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 20
          vlantype: access
        '[2]':
          name: dvpg-vlan16-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 16
          vlantype: access
        '[3]':
          name: dvpg-vlan17-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 17
          vlantype: access
        '[4]':
          name: dvpg-vlanTrunk1-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
        '[5]':
          name: dvpg-vlanTrunk2-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          numuplinkports: 1
          vmnicadapter: 'host.[2-3].vmnic.[1]'
  vm:
    '[1-2]':
      datastoreType: shared
      host: 'host.[2]'
      vmstate: poweroff
    '[3-4]':
      datastoreType: shared
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: x.x.x.x
          ipranges:
            - a.a.a.a-b.b.b.b
          name: AutoGenerate
          prefixlength: xx
      multicastiprange:
        '[1]':
          begin: 239.1.1.1
          end: 239.1.1.100
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          firstnodeofcluster: true
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  AddVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  AddVNIC2:
    TestVM: 'vm.[2]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vc.[1].dvportgroup.[4]'
        startconnected: 1
  CreateVWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1]':
        controlplanemode: MULTICAST_MODE
        guestvlanallowed: true
        name: AutoGenrate
        tenantid: AutoGenerate
  DeleteVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVNIC2:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  EnableMACIPDiscoveryDVPG:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      ipDiscovery: enable
      macLearning: enable
    portgroup: 'vc.[1].dvportgroup.[4]'
  EnableMACIPDiscoveryVwire:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      ipDiscovery: enable
      macLearning: enable
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  ExitSequence:
    -
      - PowerOffVM
    -
      - DeleteVNIC1
    -
      - DeleteVNIC2
    -
      - DeleteVirtualWires
  PowerOffVM:
    TestVM: 'vm.[1-2]'
    Type: VM
    vmstate: poweroff
  PowerOnVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PowerOnVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVWires
    -
      - AddVNIC1
    -
      - AddVNIC2
    -
      - EnableMACIPDiscoveryDVPG
    -
      - EnableMACIPDiscoveryVwire
    -
      - PowerOnVM1
    -
      - PowerOnVM2
    -
      - VerifyNetworkFeatures
  VerifyNetworkFeatures:
    TestAdapter: 'vm.[1-2].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]contains':
      - Features enabled: 'IP Discovery,MAC learning'
---
AutomationLevel: Manual
Category: Networking
Component: VXLAN
Developer: hchilkot
ExpectedResult: PASS
FullyAutomatable: Y
PMT: 6650
Partnerfacing: N
Priority: P0
Procedure: 1. Create 1 VXLAN networks with guest tagging enabled2. Enable guest vlan tagging for the vxlan3. Enable MAC Learning for the vwire created4. Connect VM to the vxlan network and configured vlans5. Make sure that filter is enabled for vm ports6. Check the mac expiry timeout value for the vm ports
Product: NSX
Status: Execution Ready
Summary: Verify enabling mac filter sets correct value of mac expiry timeout
Tags: sanity
TestName: MACExpiryTimeoutWithVXLAN
TestbedSpec:
  host:
    '[1]': {}
    '[2-3]':
      vmknic:
        '[1]':
          configurevmotion: enable
          ipv4address: dhcp
          portgroup: 'vc.[1].dvportgroup.[1]'
      vmnic:
        '[1]':
          driver: any
  vc:
    '[1]':
      datacenter:
        '[1]':
          Cluster:
            '[1]':
              host: 'host.[1]'
              name: Controller-Cluster-30818
            '[2]':
              host: 'host.[2-3]'
              name: Compute-Cluster-30818
      dvportgroup:
        '[1]':
          name: dvpg-mgmt-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 20
          vlantype: access
        '[2]':
          name: dvpg-vlan16-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 16
          vlantype: access
        '[3]':
          name: dvpg-vlan17-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 17
          vlantype: access
        '[4]':
          name: dvpg-vlanTrunk1-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
        '[5]':
          name: dvpg-vlanTrunk2-30818
          vds: 'vc.[1].vds.[1]'
          vlan: 0-4094
          vlantype: trunk
      vds:
        '[1]':
          configurehosts: add
          datacenter: 'vc.[1].datacenter.[1]'
          host: 'host.[2-3]'
          numuplinkports: 1
          vmnicadapter: 'host.[2-3].vmnic.[1]'
  vm:
    '[1-2]':
      datastoreType: shared
      host: 'host.[2]'
      vmstate: poweroff
    '[3-4]':
      datastoreType: shared
      host: 'host.[3]'
      vmstate: poweroff
  vsm:
    '[1]':
      assignrole: enterprise_admin
      ippool:
        '[1]':
          gateway: x.x.x.x
          ipranges:
            - a.a.a.a-b.b.b.b
          name: AutoGenerate
          prefixlength: xx
      multicastiprange:
        '[1]':
          begin: 239.1.1.1
          end: 239.1.1.100
          name: AutoGenerate
      networkscope:
        '[1]':
          clusters: 'vc.[1].datacenter.[1].cluster.[2]'
          name: AutoGenerate
      reconfigure: true
      segmentidrange:
        '[1]':
          begin: 5001-10001
          end: 99000
          name: AutoGenerate
      vc: 'vc.[1]'
      vdncluster:
        '[1]':
          cluster: 'vc.[1].datacenter.[1].cluster.[2]'
          mtu: 1600
          switch: 'vc.[1].vds.[1]'
          teaming: FAILOVER_ORDER
          vibs: install
          vlan: 19
          vmkniccount: 1
      vxlancontroller:
        '[1]':
          firstnodeofcluster: true
          host: 'host.[1]'
          ippool: 'vsm.[1].ippool.[1]'
          name: AutoGenerate
          resourcepool: 'vc.[1].datacenter.[1].cluster.[1]'
TestcaseLevel: Functional
TestcaseType: Functional
Version: 2
WORKLOADS:
  AddVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  AddVNIC2:
    TestVM: 'vm.[2]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  AddVNIC3:
    TestVM: 'vm.[3]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
        startconnected: 1
  AddVNIC4:
    TestVM: 'vm.[4]'
    Type: VM
    vnic:
      '[1]':
        allowguestcontrol: 1
        connected: 1
        driver: e1000
        portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
        startconnected: 1
  CreateVWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    VirtualWire:
      '[1-2]':
        controlplanemode: MULTICAST_MODE
        guestvlanallowed: true
        name: AutoGenrate
        tenantid: AutoGenerate
  DeleteVNIC1:
    TestVM: 'vm.[1]'
    Type: VM
    deletevnic: 'vm.[1].vnic.[1]'
  DeleteVNIC2:
    TestVM: 'vm.[2]'
    Type: VM
    deletevnic: 'vm.[2].vnic.[1]'
  DeleteVNIC3:
    TestVM: 'vm.[3]'
    Type: VM
    deletevnic: 'vm.[3].vnic.[1]'
  DeleteVNIC4:
    TestVM: 'vm.[4]'
    Type: VM
    deletevnic: 'vm.[4].vnic.[1]'
  DeleteVirtualWires:
    TestTransportZone: 'vsm.[1].networkscope.[1]'
    Type: TransportZone
    deletevirtualwire: 'vsm.[1].networkscope.[1].virtualwire.[1-2]'
  EnableMACLearning1:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      macLearning: enable
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[1]'
  EnableMACLearning2:
    TestNSX: 'vsm.[1]'
    Type: NSX
    networkfeatures:
      macLearning: enable
    portgroup: 'vsm.[1].networkscope.[1].virtualwire.[2]'
  ExitSequence:
    -
      - PowerOffVM
    -
      - DeleteVNIC1
    -
      - DeleteVNIC2
    -
      - DeleteVNIC3
    -
      - DeleteVNIC4
    -
      - DeleteVirtualWires
  ExpiryTimeout:
    TestAdapter: 'vm.[1-4].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]contains':
      - Mac ageout time: 180 seconds
  PowerOffVM:
    TestVM: 'vm.[1-4]'
    Type: VM
    vmstate: poweroff
  PowerOnVM1:
    TestVM: 'vm.[1]'
    Type: VM
    vmstate: poweron
  PowerOnVM2:
    TestVM: 'vm.[2]'
    Type: VM
    vmstate: poweron
  PowerOnVM3:
    TestVM: 'vm.[3]'
    Type: VM
    vmstate: poweron
  PowerOnVM4:
    TestVM: 'vm.[4]'
    Type: VM
    vmstate: poweron
  Sequence:
    -
      - CreateVWires
    -
      - AddVNIC1
    -
      - AddVNIC2
    -
      - AddVNIC3
    -
      - AddVNIC4
    -
      - PowerOnVM1
    -
      - PowerOnVM2
    -
      - PowerOnVM2
    -
      - PowerOnVM3
    -
      - PowerOnVM4
    -
      - EnableMACLearning1
    -
      - EnableMACLearning2
    -
      - VerifyNetworkFeatures
    -
      - ExpiryTimeout
  VerifyNetworkFeatures:
    TestAdapter: 'vm.[1-4].vnic.[1]'
    Type: NetAdapter
    'networkfeaturestatus[?]contains':
      - Features enabled: MAC learning

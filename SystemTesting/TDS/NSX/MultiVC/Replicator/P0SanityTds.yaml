# ------------------------------------------------------------------------------
# This TDS covers P0 sanity tests for Replicator
# ------------------------------------------------------------------------------

TDSCommonFieldsP0Case: &TDS_COMMON_FIELDS_P0_CASE
  Product: "vShield"
  Component: "Replicator"
  Category: "MultiVC"
  Version: "2"
  Tags: "multivc"
  QCPath: ""
  ExpectedResult: "PASS"
  Status: "Execution Ready"
  AutomationLevel: "Automated"
  FullyAutomatable: "Y"
  TestcaseLevel: "Functional"
  TestcaseType: "Functional"
  Priority: "P0"
  Partnerfacing: "N"

# ------------------------------------------------------------------------------
# CRUD Tests
# ------------------------------------------------------------------------------

CRUDForRoleAndRegistrationOnMaster:
  <<: *TDS_COMMON_FIELDS_P0_CASE
  TestName:  "CRUDForRoleAndRegistrationOnMaster"
  Tags: 'nsx,management,multivc,acceptance,cat'
  Developer: "yvhora"
  Summary: 'Topology with one master one slave. CRUD operation on setting role - primary, standalone etc'
  Procedure: '1. Login to the NSX managers
              2. Get the replication roles from node1, node2 ==> STANDALONE
              3. Set the replication role to Master for node1 ==> PRIMARY
              4. Register the node 2 to node 1
              5. Read the replication role from node 2 ==> SECONDARY
              6. Cleanup'
  ExpectedResult: 'After step 2 - node 1 and node 2 have standalone replication role
                   After step 3 - node 1 has primary replication role
                   After step 5 - node 2 has secondary replication role'
  TestbedSpec: *REPLICATOR_TOPOLOGY_BASIC
  WORKLOADS:
      Sequence:
            - - ReadReplicatorRoleAsStandaloneOnVSM1
            - - SetMasterNSXReplicatorAsPrimary
            - - ReadNSXReplicatorServiceStatusRunning
            - - ReadReplicatorRoleAsPrimary
            - - ReadReplicatorRoleAsStandaloneOnVSM2
            - - RegisterSlaveNSXWithMaster
            - - ReadReplicatorRoleAsSecondaryOnVSM2
      ExitSequence:
            - - UnRegisterAllSlaves
            - - SetMasterNSXReplicatorAsStandalone
            - - ReadNSXReplicatorServiceStatusStopped

CRUDForUTZOnMaster:
  <<: *TDS_COMMON_FIELDS_P0_CASE
  TestName:  "CRUDForUTZOnMaster"
  Developer: "yvhora"
  AutomationLevel: "Semi-Automated"
  Summary: 'Topology with one master one slave. CRUD operations on UTZ is synced to slave
            User assigns host/VDS cluster for the UTZ is specified
            Update operations on all fields in UTZ'
  Procedure: '1. Login to the NSX managers
              2. Set node 1 as primary while node 2 as secondary
              3. Create global transport zone from primary node
              4. Assign clusters from VC1 to the UTZ
              5. Read the global transport zone from secondary node
              6. Update the UTZ with change in control plane mode, name and description
              7. Read the UTZ attributes from secondary node for updated attributes
              8. Delete the UTZ from Primary node
              9. Cleanup'
  ExpectedResult: 'After step 3 - UTZ gets created isUniversal flag set to true
                   After step 4 - Clusters from VC1 are added to UTZ
                   After step 5 - UTZ is read from secondary node
                   After step 7 - Update to the control plane mode is synced on secondary node
                   After step 8 - Deletion of UTZ is successful'
  TestbedSpec: *REPLICATOR_TOPOLOGY_L2
  WORKLOADS:
      Sequence:
            - - SetMasterNSXReplicatorAsPrimary
            - - ReadNSXReplicatorServiceStatusRunning
            - - RegisterSlaveNSXWithMaster
            - - CreateVerifyGlobalTransportZone
            - - ReadVerifyGlobalTransportZone     #TODO: Add appropriate fix for renaming the GTZ
            - - DeleteVerifyGlobalTransportZone
      ExitSequence:
            - - UnRegisterAllSlaves
            - - SetMasterNSXReplicatorAsStandalone
            - - ReadNSXReplicatorServiceStatusStopped

      VerifyUpdatedGlobalTransportZone:
          <<: *READ_GLOBAL_TRANSPORT_ZONE
          verifyendpointattributes:
              "name[?]equal_to": 'my_global_tz'

CRUDForULSOnMaster:
  <<: *TDS_COMMON_FIELDS_P0_CASE
  TestName:  "CRUDForULSOnMaster"
  Developer: "yvhora"
  AutomationLevel: "Semi-Automated"
  Summary: 'Topology with one master one slave. CRUD operations on ULS is synced to slave'
  Procedure: '1. Login to the NSX managers
              2. Set node 1 as primary while node 2 as secondary
              3. Create global logical switch ULS1 from primary node
              4. Read the global logical switch ULS1 from secondary node for the UTZ
              5. Update the ULS1 with change in control plane mode to Hybrid from primary node
              6. Read the ULS1 from secondary node for updated attributes
              7. Delete the ULS1 from Primary node
              8. Cleanup'
  ExpectedResult: 'After step 3 - ULS1 gets created isUniversal flag set to true
                   After step 4 - ULS1 is read from secondary node
                   After step 5 - ULS1 can be updated from primary node changing control plane mode
                   After step 6 - Update to control plane mode is synced on secondary node
                   After step 7 - Deletion of ULS1 is successful'
  TestbedSpec: *REPLICATOR_TOPOLOGY_L2
  WORKLOADS:
      Sequence:
            - - SetMasterNSXReplicatorAsPrimary
            - - ReadNSXReplicatorServiceStatusRunning
            - - RegisterSlaveNSXWithMaster
            - - CreateVerifyGlobalVNIPool
            - - CreateVerifyGlobalMulticastRange
            - - CreateVerifyGlobalTransportZone
            - - CreateVerify2GlobalLogicalSwitches
            - - ReadVerifyGlobalLogicalSwitches           #TODO : Add fix for updating ULS name
            - - CompareGlobalLogicalSwitchSlaveWithMaster
            - - DeleteAllGlobalLogicalSwitches
      ExitSequence:
            - - DeleteVerifyGlobalTransportZone
            - - DeleteVerifyGlobalMulticastRange
            - - DeleteVerifyGlobalVNIPool
            - - UnRegisterAllSlaves
            - - SetMasterNSXReplicatorAsStandalone
            - - ReadNSXReplicatorServiceStatusStopped

CRUDForUSGOnMaster:
  <<: *TDS_COMMON_FIELDS_P0_CASE
  TestName:  "CRUDForUSGOnMaster"
  Tags: 'nsx,management,multivc,acceptance,cat'
  Developer: "yvhora"
  Summary: 'Topology with one master one slave. CRUD operations on USG (Universal Security Group) is synced to slave'
  Procedure: '1. Login to the NSX managers
              2. Set node 1 as primary while node 2 as secondary
              3. Create USG1 from primary node
              4. Read the USG1 from secondary node
              5. Update the USG1 for its attributes from primary node (Adding of IPsets)
              6. Read the USG1 from secondary node for updated attributes
              7. Delete the USG1 from Primary node
              8. Cleanup'
  ExpectedResult: 'After step 3 - USG1 gets created isUniversal flag set to true
                   After step 4 - USG1 is read from secondary node
                   After step 5 - USG1 can be updated from primary node changing attributes
                   After step 6 - Update to USG1 is synced on secondary node
                   After step 7 - Deletion of USG1 is successful'
  TestbedSpec: *REPLICATOR_TOPOLOGY_BASIC
  WORKLOADS:
      Sequence:
            - - SetMasterNSXReplicatorAsPrimary
            - - ReadNSXReplicatorServiceStatusRunning
            - - RegisterSlaveNSXWithMaster
            - - ReadReplicatorRoleAsPrimary
            - - CreateVerifyGlobalIPSet
            - - CreateVerifyGlobalMACSet
            - - CreateVerifyGlobalSecurityGroup
            - - ReadVerifyGlobalSecurityGroup
            - - ReadVerifyGlobalSecurityGroup_VSM2
#            - - UpdateVerifyGlobalSecurityGroup          #TODO : Add fix for updating USG name
#            - - ReadVerifyUpdatedGlobalSecurityGroup
#            - - ReadVerifyUpdatedGlobalSecurityGroup_VSM2
            - - ReadEntitySyncStatusForSG
            - - ReplicationStatusOfVSM2
            - - DeleteGlobalSecurityGroup
      ExitSequence:
            - - DeleteGlobalMacSet
            - - DeleteGlobalIPSet
            - - UnRegisterAllSlaves
            - - SetMasterNSXReplicatorAsStandalone
            - - ReadNSXReplicatorServiceStatusStopped

CRUDForUIPSetOnMaster:
  <<: *TDS_COMMON_FIELDS_P0_CASE
  TestName:  "CRUDForUIPSetOnMaster"
  Tags: 'nsx,management,multivc,acceptance,cat'
  Developer: "yvhora"
  Summary: 'Topology with one master one slave. CRUD operations on UIPSet (Universal IPSet ) is synced to slave'
  Procedure: '1. Login to the NSX managers
              2. Set node 1 as primary while node 2 as secondary
              3. Create UIPSet1 from primary node
              4. Read the UIPSet1 from secondary node
              5. Update the UIPSet1 for its attributes from primary node
              6. Read the UIPSet1 from secondary node for updated attributes
              7. Delete the UIPSet1 from Primary node
              8. Cleanup'
  ExpectedResult: 'After step 3 - UIPSet1 gets created isUniversal flag set to true
                   After step 4 - UIPSet1 is read from secondary node
                   After step 5 - UIPSet1 can be updated from primary node changing attributes
                   After step 6 - Update to UIPSet1 is synced on secondary node
                   After step 7 - Deletion of UIPSet1 is successful'
  TestbedSpec: *REPLICATOR_TOPOLOGY_BASIC
  WORKLOADS:
      Sequence:
            - - SetMasterNSXReplicatorAsPrimary
            - - ReadNSXReplicatorServiceStatusRunning
            - - RegisterSlaveNSXWithMaster
            - - ReadReplicatorRoleAsPrimary
            - - CreateVerifyGlobalIPSet
            - - ReadVerifyGlobalIPSet
            - - ReadVerifyGlobalIPSet_VSM2
            - - UpdateVerifyGlobalIPSet
            - - ReadVerifyUpdatedGlobalIPSet
            - - ReadVerifyUpdatedGlobalIPSet_VSM2
            - - ReadEntitySyncStatusForIPset
            - - ReplicationStatusOfVSM2
            - - DeleteGlobalIPSet
      ExitSequence:
            - - UnRegisterAllSlaves
            - - SetMasterNSXReplicatorAsStandalone
            - - ReadNSXReplicatorServiceStatusStopped

CRUDForUMacSetOnMaster:
  <<: *TDS_COMMON_FIELDS_P0_CASE
  TestName:  "CRUDForUMacSetOnMaster"
  Tags: 'nsx,management,multivc,acceptance,cat'
  Developer: "yvhora"
  Summary: 'Topology with one master one slave. CRUD operations on UMacSet (Universal MacSet ) is synced to slave'
  Procedure: '1. Login to the NSX managers
              2. Set node 1 as primary while node 2 as secondary
              3. Create UMacSet1 from primary node
              4. Read the UMacSet1 from secondary node
              5. Update the UMacSet1 for its attributes from primary node
              6. Read the UMacSet1 from secondary node for updated attributes
              7. Delete the UMacSet1 from Primary node
              8. Cleanup'
  ExpectedResult: 'After step 3 - UMacSet1 gets created isUniversal flag set to true
                   After step 4 - UMacSet1 is read from secondary node
                   After step 5 - UMacSet1 can be updated from primary node changing attributes
                   After step 6 - Update to UMacSet1 is synced on secondary node
                   After step 7 - Deletion of UMacSet1 is successful'
  TestbedSpec: *REPLICATOR_TOPOLOGY_BASIC
  WORKLOADS:
      Sequence:
            - - SetMasterNSXReplicatorAsPrimary
            - - ReadNSXReplicatorServiceStatusRunning
            - - RegisterSlaveNSXWithMaster
            - - ReadReplicatorRoleAsPrimary
            - - CreateVerifyGlobalMACSet
            - - ReadVerifyGlobalMacSet
            - - ReadVerifyGlobalMacSet_VSM2
            - - UpdateVerifyGlobalMacSet
            - - ReadVerifyUpdatedGlobalMacSet
            - - ReadVerifyUpdatedGlobalMacSet_VSM2
            - - ReadEntitySyncStatusForMacSet
            - - ReplicationStatusOfVSM2
            - - DeleteGlobalMacSet
      ExitSequence:
            - - UnRegisterAllSlaves
            - - SetMasterNSXReplicatorAsStandalone
            - - ReadNSXReplicatorServiceStatusStopped

CRUDAllOnMasterWithSuperUser:
  <<: *TDS_COMMON_FIELDS_P0_CASE
  TestName:  "CRUDSyncAndGetConfigOnMasterWithSuperUser"
  Developer: "yvhora"
  AutomationLevel: "Semi-Automated"
  Summary: 'Topology with one master one slave
            CRUD to sync all objects, all ULS, all UDLR, sync specific global
            entities and then do get config to verify with superuser'
  Procedure: '1. Login to the NSX managers
              2. Set node 1 as primary while node 2 as secondary
              3. Create IPSet, MacSet, SecurityGroups, UTZ, ULS, UDLR on primary node
              4. Read all the Global Objects from secondary node.
              5. Update the properties of IPset,MacSet, SG, UTZ, ULS and UDLR on primary node
              6. Read the updated properties from slave node
              7. Delete IPSet, MacSet, SecurityGroups, UTZ, ULS, UDLR on primary node
              8. Cleanup'
  ExpectedResult: 'After step 3 - all the mentioned objects are created on primary node with isUniversal=True attribute.
                   After step 4 - All the global objects are read on secondary node
                   After step 6 - Updated properties of all global objects are replicated on slave node.
                   After step 7 - Deletion all the created objects from primary node is successful'
  TestbedSpec: *REPLICATOR_TOPOLOGY_L2
  WORKLOADS:
      Sequence:
            - - SetMasterNSXReplicatorAsPrimary             #TODO: Add UDLR
            - - ReadNSXReplicatorServiceStatusRunning
            - - RegisterSlaveNSXWithMaster
            - - ReadReplicatorRoleAsPrimary
            - - CreateVerifyGlobalIPSet
            - - CreateVerifyGlobalMACSet
            - - CreateVerifyGlobalSecurityGroup
            - - ReadVerifyGlobalIPSet
            - - ReadVerifyGlobalIPSet_VSM2
            - - ReadVerifyGlobalMacSet
            - - ReadVerifyGlobalMacSet_VSM2
            - - ReadVerifyGlobalSecurityGroup
            - - ReadVerifyGlobalSecurityGroup_VSM2
            - - ReadEntitySyncStatusForIPset
            - - ReadEntitySyncStatusForMacSet
            - - ReadEntitySyncStatusForSG
            - - ReplicationStatusOfVSM2
            - - CreateVerifyGlobalVNIPool
            - - CreateVerifyGlobalMulticastRange
            - - CreateVerifyGlobalTransportZone
            - - CreateVerify2GlobalLogicalSwitches
            - - ReadVerifyGlobalTransportZone
            - - ReadVerifyGlobalTransportZone_VSM2
            - - CompareGlobalTransportZoneSlaveWithMaster
            - - ReadVerifyGlobalLogicalSwitches
            - - ReadVerifyGlobalLogicalSwitches_VSM2
            - - CompareGlobalLogicalSwitchSlaveWithMaster
            - - DeleteAllGlobalLogicalSwitches
            - - DeleteVerifyGlobalTransportZone
            - - DeleteVerifyGlobalMulticastRange
            - - DeleteVerifyGlobalVNIPool
            - - DeleteGlobalSecurityGroup
            - - DeleteGlobalMacSet
            - - DeleteGlobalIPSet
      ExitSequence:
            - - UnRegisterAllSlaves
            - - SetMasterNSXReplicatorAsStandalone
            - - ReadNSXReplicatorServiceStatusStopped

# ------------------------------------------------------------------------------
#  Miscellaneous Scenarios
# ------------------------------------------------------------------------------

RegisterUnRegisterNSXManagers:
  <<: *TDS_COMMON_FIELDS_P0_CASE
  TestName:  "RegisterUnRegisterNSXManagers"
  Tags: 'nsx,management,multivc,acceptance,cat'
  Developer: "yvhora"
  Summary: 'Topology with one master two slaves. Verify registration/unregistration of nsx managers'
  Procedure: '1. Login to the NSX managers
              2. Get the replication roles from node1, node2, node 3 ==> STANDALONE
              3. Set the replication role to Master for node1 ==> PRIMARY
              4. Register the node 2 to node 1
              5. Register the node 3 to node 1
              6. Read the replication role from node 2 ==> SECONDARY
              7. Read the replication role from node 3 ==> SECONDARY
              8. Unregister the node 2 from node 1
              9. Unregister the node 3 from node 1
              10. Cleanup'
  ExpectedResult: 'After step 2 - node 1, node 2 and node 3 have standalone replication role
                   After step 3 - node 1 has primary replication role
                   After step 6 - node 2 has secondary replication role, Secondary should have UUID and IP of primary
                   After step 7 - node 3 has secondary replication role, Secondary should have UUID and IP of primary
                   After step 8 - node 2 has standalone replication role
                   After step 9 - node 3 has standalone replication role'
  TestbedSpec: *REPLICATOR_TOPOLOGY_BASIC
  WORKLOADS:
      Sequence:
            - - ReadReplicatorRoleAsStandaloneOnVSM1
            - - SetMasterNSXReplicatorAsPrimary
            - - ReadNSXReplicatorServiceStatusRunning
            - - ReadReplicatorRoleAsPrimary
            - - ReadReplicatorRoleAsStandaloneOnVSM2
            - - ReadReplicatorRoleAsStandaloneOnVSM3
            - - RegisterSlaveNSXWithMaster
            - - RegisterSlaveNSX_VSM3_WithMaster_VSM1
            - - ReadReplicatorRoleAsSecondaryOnVSM2
            - - ReadReplicatorRoleAsSecondaryOnVSM3
            - - UnRegisterAllSlaves
            - - ReadReplicatorRoleAsStandaloneOnVSM2
            - - ReadReplicatorRoleAsStandaloneOnVSM3
      ExitSequence:
            - - SetMasterNSXReplicatorAsStandalone
            - - ReadNSXReplicatorServiceStatusStopped

AddSlaveAfterGlobalConfigurationsOnMaster:
  <<: *TDS_COMMON_FIELDS_P0_CASE
  TestName:  "AddSlaveAfterGlobalConfigurationsOnMaster"
  Developer: "yvhora"
  AutomationLevel: "Semi-Automated"
  Summary: 'Do global configurations on Master. Add slave NSX Manager, Verify all configurations have reached slave'
  Procedure: '1. Login to the NSX manager
              2. Set node 1 as primary
              3. Create IPSet, MacSet, SecurityGroups, UTZ, ULS, UDLR on primary node
              4. Register node 2 with node 1
              5. Read all the Global Objects from secondary node.
              6. Cleanup'
  ExpectedResult: 'After step 3 - all the mentioned objects are created on primary node with isUniversal=True attribute.
                   After step 4 - Node 2 becomes secondary node,
                   After step 5 - Replication of all objects is successful on secondary node as per configurations made'
  TestbedSpec: *REPLICATOR_TOPOLOGY_L2
  WORKLOADS:
      Sequence:
            - - SetMasterNSXReplicatorAsPrimary             #TODO: Add UDLR
            - - ReadNSXReplicatorServiceStatusRunning
            - - ReadReplicatorRoleAsPrimary
            - - CreateVerifyGlobalIPSet
            - - CreateVerifyGlobalMACSet
            - - CreateVerifyGlobalSecurityGroup
            - - RegisterSlaveNSXWithMaster
            - - ReadReplicatorRoleAsSecondaryOnVSM2
            - - ReadVerifyGlobalIPSet
            - - ReadVerifyGlobalIPSet_VSM2
            - - ReadVerifyGlobalMacSet
            - - ReadVerifyGlobalMacSet_VSM2
            - - ReadVerifyGlobalSecurityGroup
            - - ReadVerifyGlobalSecurityGroup_VSM2
            - - ReadEntitySyncStatusForIPset
            - - ReadEntitySyncStatusForMacSet
            - - ReadEntitySyncStatusForSG
            - - ReplicationStatusOfVSM2
            - - CreateVerifyGlobalVNIPool
            - - CreateVerifyGlobalMulticastRange
            - - CreateVerifyGlobalTransportZone
            - - CreateVerify2GlobalLogicalSwitches
            - - ReadVerifyGlobalTransportZone
            - - ReadVerifyGlobalTransportZone_VSM2
            - - CompareGlobalTransportZoneSlaveWithMaster
            - - ReadVerifyGlobalLogicalSwitches
            - - ReadVerifyGlobalLogicalSwitches_VSM2
            - - CompareGlobalLogicalSwitchSlaveWithMaster
      ExitSequence:
            - - DeleteAllGlobalLogicalSwitches
            - - DeleteVerifyGlobalTransportZone
            - - DeleteVerifyGlobalMulticastRange
            - - DeleteVerifyGlobalVNIPool
            - - DeleteGlobalSecurityGroup
            - - DeleteGlobalMacSet
            - - DeleteGlobalIPSet
            - - UnRegisterAllSlaves
            - - SetMasterNSXReplicatorAsStandalone
            - - ReadNSXReplicatorServiceStatusStopped
package TDS::NSX::Networking::VXLAN::VXLANTds;

use Data::Dumper;
use FindBin;
use lib "$FindBin::Bin/..";
use TDS::Main::VDNetMainTds;
use TDS::NSX::Networking::VXLAN::TestbedSpec;
use TDS::NSX::Networking::VXLAN::CommonWorkloads ':AllConstants';
use TDS::NSX::Networking::VXLAN::TestbedSpec ':AllConstants';
use VDNetLib::TestData::TestbedSpecs::TestbedSpec;
@ISA = qw(TDS::Main::VDNetMainTds);

{
   %VXLAN = (
      'IPLearning' => {
         TestName         => 'IPLearning',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the ip learning function on host '.
                             'that one datacenter,two vds ' .
                             'three control plane mode ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'jana',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire'],
               ['PlaceVMsOnVirtualWire1'],
               ['PlaceVMsOnVirtualWire2'],
               ['PlaceVMsOnVirtualWire3'],
               ['PoweronVM1','PoweronVM2','PoweronVM3'],
               ['PoweronVM4','PoweronVM5','PoweronVM6'],
               ['PoweronVM7','PoweronVM8','PoweronVM9'],
               ['VerifyIpLearningVM1NotOnHost',
                'VerifyIpLearningVM2NotOnHost'],
               ['NetperfTestVirtualWire1'],
               ['VerifyIpLearningVM1OnHost',
                'VerifyIpLearningVM2OnHost',
                'VerifyIpLearningVM3OnHost'],
               ['NetperfTestVirtualWire2'],
               ['VerifyIpLearningVM4OnHost',
                'VerifyIpLearningVM5OnHost',
                'VerifyIpLearningVM6OnHost'],
               ['NetperfTestVirtualWire3'],
               ['VerifyIpLearningVM7OnHost',
                'VerifyIpLearningVM8OnHost',
                'VerifyIpLearningVM9OnHost'],
            ],
            ExitSequence => [
               ['PoweroffVM'],
               ['DeleteVM1Vnic1'],
               ['DeleteVM2Vnic1'],
               ['DeleteVM3Vnic1'],
               ['DeleteVM4Vnic1'],
               ['DeleteVM5Vnic1'],
               ['DeleteVM6Vnic1'],
               ['DeleteVM7Vnic1'],
               ['DeleteVM8Vnic1'],
               ['DeleteVM9Vnic1'],
               ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,

            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },

            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            "NetperfTestVirtualWire1" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "30",
            },
            "NetperfTestVirtualWire2" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "udp",
               udpbandwidth   => "10000M",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "30",
            },
            "NetperfTestVirtualWire3" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "30",
            },
            "VerifyIpLearningVM1NotOnHost" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               "VerifyIpLearningOnHost[?]not_contains"  => [
                  {
                     ip   => "vm.[1].vnic.[1]",
                     mac  => "vm.[1].vnic.[1]",
                  },
               ],
            },
            "VerifyIpLearningVM2NotOnHost" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[2].vnic.[1]",
               "VerifyIpLearningOnHost[?]not_contains"  => [
                  {
                     ip   => "vm.[2].vnic.[1]",
                     mac  => "vm.[2].vnic.[1]",
                  },
               ],
            },
            "VerifyIpLearningVM1OnHost" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               "VerifyIpLearningOnHost[?]contain_once"  => [
                  {
                     ip   => "vm.[1].vnic.[1]",
                     mac  => "vm.[1].vnic.[1]",
                  },
               ],
               noofretries => 5,
            },
            "VerifyIpLearningVM2OnHost" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[2].vnic.[1]",
               "VerifyIpLearningOnHost[?]contain_once"  => [
                  {
                     ip   => "vm.[2].vnic.[1]",
                     mac  => "vm.[2].vnic.[1]",
                  },
               ],
               noofretries => 5,
            },
             "VerifyIpLearningVM3OnHost" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[3].vnic.[1]",
               "VerifyIpLearningOnHost[?]contain_once"  => [
                  {
                     ip   => "vm.[3].vnic.[1]",
                     mac  => "vm.[3].vnic.[1]",
                  },
               ],
               noofretries => 5,
            },

            "VerifyIpLearningVM4OnHost" => {
               Type            => "NetAdapter",
               TestAdapter     => "vm.[4].vnic.[1]",
               "VerifyIpLearningOnHost[?]contain_once"  => [
                  {
                     ip   => "vm.[4].vnic.[1]",
                     mac  => "vm.[4].vnic.[1]",
                  },
               ],
               noofretries => 5,
            },
            "VerifyIpLearningVM5OnHost" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[5].vnic.[1]",
               "VerifyIpLearningOnHost[?]contain_once"  => [
                  {
                     ip   => "vm.[5].vnic.[1]",
                     mac  => "vm.[5].vnic.[1]",
                  },
               ],
               noofretries => 5,
            },
            "VerifyIpLearningVM6OnHost" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[6].vnic.[1]",
               "VerifyIpLearningOnHost[?]contain_once"  => [
                  {
                     ip   => "vm.[6].vnic.[1]",
                     mac  => "vm.[6].vnic.[1]",
                  },
               ],
               noofretries => 5,
            },
            "VerifyIpLearningVM7OnHost" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[7].vnic.[1]",
               "VerifyIpLearningOnHost[?]contain_once"  => [
                  {
                     ip   => "vm.[7].vnic.[1]",
                     mac  => "vm.[7].vnic.[1]",
                  },
               ],
               noofretries => 5,
            },
            "VerifyIpLearningVM8OnHost" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[8].vnic.[1]",
               "VerifyIpLearningOnHost[?]contain_once"  => [
                  {
                     ip   => "vm.[8].vnic.[1]",
                     mac  => "vm.[8].vnic.[1]",
                  },
               ],
               noofretries => 5,
            },
            "VerifyIpLearningVM9OnHost" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[9].vnic.[1]",
               "VerifyIpLearningOnHost[?]contain_once"  => [
                  {
                     ip   => "vm.[9].vnic.[1]",
                     mac  => "vm.[9].vnic.[1]",
                  },
               ],
               noofretries => 5,
            },
         },
      },
      'StaticVTEPIP' => {
         TestName         => 'StaticVTEPIP',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify that VTEP use static IP Pool ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_1,
          'WORKLOADS' => {
            Sequence => [
                ['Deploy_Controller2'],
                ['Deploy_Controller3'],
                ['CreateVirtualWire'],
                ['PlaceVMsOnVirtualWire1'],
                ['PlaceVMsOnVirtualWire2'],
                ['PlaceVMsOnVirtualWire3'],
                ['PoweronVM1','PoweronVM2'],
                ['PoweronVM3','PoweronVM4'],
                ['PoweronVM5','PoweronVM6'],
                ['PoweronVM7','PoweronVM8'],
                ['PoweronVM9','PoweronVM10'],
                ['PoweronVM11','PoweronVM12'],
                ['NetperfTestVirtualWire1Unicat'],
                ['NetperfTestVirtualWire2Unicat'],
                ['NetperfTestVirtualWire3Unicat'],
                ['NetperfTestVirtualWire1Multicast'],
                ['NetperfTestVirtualWire2Multicast'],
                ['NetperfTestVirtualWire3Multicast'],
               ],
            ExitSequence => [],
            'Deploy_Controller2' => DEPLOY_SECOND_CONTROLLER,
            'Deploy_Controller3' => DEPLOY_THIRD_CONTROLLER,
            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1],vm.[4],vm.[7],vm.[10]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[2],vm.[5],vm.[8],vm.[11]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[3],vm.[6],vm.[9],vm.[12]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            'PoweronVM10' => POWERON_VM10,
            'PoweronVM11' => POWERON_VM11,
            'PoweronVM12' => POWERON_VM12,

            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1],vm.[7].vnic.[1]",
               SupportAdapter => "vm.[4].vnic.[1],vm.[10].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "udp",
               L3Protocol     => "ipv4",
               udpbandwidth   => "10000M",
               TestAdapter    => "vm.[2].vnic.[1],vm.[8].vnic.[1]",
               SupportAdapter => "vm.[5].vnic.[1],vm.[11].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv6",
               TestAdapter    => "vm.[3].vnic.[1],vm.[9].vnic.[1]",
               SupportAdapter => "vm.[6].vnic.[1],vm.[12].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1],vm.[7].vnic.[1]",
               SupportAdapter => "vm.[4].vnic.[1],vm.[10].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",,
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[2].vnic.[1],vm.[8].vnic.[1]",
               SupportAdapter => "vm.[5].vnic.[1],vm.[11].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[3].vnic.[1],vm.[9].vnic.[1]",
               SupportAdapter => "vm.[6].vnic.[1],vm.[12].vnic.[1]",
               TestDuration   => "60",
            },
         },
      },
      'DuplicateVTEPIP' => {
         TestName         => 'DuplicateVTEPIP',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify that VTEP has duplicate static IP Pool ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_2,
          'WORKLOADS' => {
            Sequence => [
                ['CreateVirtualWire'],
                ['PlaceVMsOnVirtualWire1'],
                ['PlaceVMsOnVirtualWire2'],
                ['PlaceVMsOnVirtualWire3'],
                ['PoweronVM1','PoweronVM2'],
                ['PoweronVM3','PoweronVM4'],
                ['PoweronVM5','PoweronVM6'],
                ['NetperfTestVirtualWire1'],
                ['NetperfTestVirtualWire2'],
                ['NetperfTestVirtualWire3'],
               ],
            ExitSequence => [],
            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1],vm.[4]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[2],vm.[5]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[3],vm.[6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,

            "NetperfTestVirtualWire1" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[4].vnic.[1]",
               TestDuration   => "60",
               ExpectedResult => "Fail",
            },
            "NetperfTestVirtualWire2" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "udp",
               L3Protocol     => "ipv4",
               udpbandwidth   => "10000M",
               TestAdapter    => "vm.[2].vnic.[1]",
               SupportAdapter => "vm.[5].vnic.[1]",
               TestDuration   => "60",
               ExpectedResult => "Fail",
            },
            "NetperfTestVirtualWire3" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv6",
               TestAdapter    => "vm.[3].vnic.[1]",
               SupportAdapter => "vm.[6].vnic.[1]",
               TestDuration   => "60",
               ExpectedResult => "Fail",
            },
         },
      },
      'ShrinkExpandTransportZone' => {
         TestName         => 'ShrinkExpandTransportZone',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify add/remove cluster in TZ ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
               ['CreateDVPG'],
               ['CreateVirtualWire'],
               ['PlaceVMsOnVirtualWire1'],
               ['PlaceVMsOnVirtualWire2'],
               ['PlaceVMsOnVirtualWire3'],
               ['PoweronVM1','PoweronVM2','PoweronVM3'],
               ['PoweronVM4','PoweronVM5','PoweronVM6'],
               ['PoweronVM7','PoweronVM8','PoweronVM9'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire2Unicat'],
               ['NetperfTestVirtualWire3Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
               ['NetperfTestVirtualWire2Multicast'],
               ['NetperfTestVirtualWire3Multicast'],
               ['ChangePortgroupToNormal'],
               ['ShrinkVXLANCluster'],
               ['NetperfTestVirtualWire1UnicatPass'],
               ['NetperfTestVirtualWire2UnicatPass'],
               ['NetperfTestVirtualWire3UnicatPass'],
               ['NetperfTestVirtualWire1UnicatFail'],
               ['NetperfTestVirtualWire2UnicatFail'],
               ['NetperfTestVirtualWire3UnicatFail'],
               ['ExpandVXLANCluster'],
               ['ChangePortgroupToVXLAN1'],
               ['ChangePortgroupToVXLAN2'],
               ['ChangePortgroupToVXLAN3'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire2Unicat'],
               ['NetperfTestVirtualWire3Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
               ['NetperfTestVirtualWire2Multicast'],
               ['NetperfTestVirtualWire3Multicast'],
               ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM6Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteVM9Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,
            'CreateDVPG' => {
               Type => "VC",
               TestVC => "vc.[1]",
               dvportgroup => {
                  '[1]' => {
                     vds  => 'vc.[1].vds.[1]',
                  },
               },
            },
            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "udp",
               L3Protocol     => "ipv4",
               udpbandwidth   => "10000M",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv6",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",,
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1UnicatFail" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[3].vnic.[1]",
               TestDuration   => "60",
               ExpectedResult => "Fail",
            },
            "NetperfTestVirtualWire2UnicatFail" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "udp",
               L3Protocol     => "ipv4",
               udpbandwidth   => "10000M",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5].vnic.[1]",
               TestDuration   => "60",
               ExpectedResult => "Fail",
            },
            "NetperfTestVirtualWire3UnicatFail" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv6",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[9].vnic.[1]",
               TestDuration   => "60",
               ExpectedResult => "Fail",
            },
            "NetperfTestVirtualWire1UnicatPass" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[2].vnic.[1]",
               SupportAdapter => "vm.[3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2UnicatPass" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "udp",
               L3Protocol     => "ipv4",
               udpbandwidth   => "10000M",
               TestAdapter    => "vm.[5].vnic.[1]",
               SupportAdapter => "vm.[6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3UnicatPass" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv6",
               TestAdapter    => "vm.[8].vnic.[1]",
               SupportAdapter => "vm.[9].vnic.[1]",
               TestDuration   => "60",
            },
            'ChangePortgroupToNormal' => {
               Type => "NetAdapter",
               TestAdapter => "vm.[1].vnic.[1],vm.[4].vnic.[1],vm.[7].vnic.[1]",
               reconfigure => "true",
               portgroup => "vc.[1].dvportgroup.[1]",
            },
            'ChangePortgroupToVXLAN1' => {
               Type => "NetAdapter",
               TestAdapter => "vm.[1].vnic.[1]",
               reconfigure => "true",
               portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
            },
            'ChangePortgroupToVXLAN2' => {
               Type => "NetAdapter",
               TestAdapter => "vm.[4].vnic.[1]",
               reconfigure => "true",
               portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
            },
            'ChangePortgroupToVXLAN3' => {
               Type => "NetAdapter",
               TestAdapter => "vm.[7].vnic.[1]",
               reconfigure => "true",
               portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
            },
            'ShrinkVXLANCluster' => {
               Type => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               transportzoneaction => "shrink",
               clusters  => "vc.[1].datacenter.[1].cluster.[2]",
            },
            'ExpandVXLANCluster' => {
               Type => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               transportzoneaction => "expand",
               clusters  => "vc.[1].datacenter.[1].cluster.[2]",
            },
         },
      },
      'OneClusterInMultipleTZ' => {
         TestName         => 'OneClusterInMultipleTZ',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify one cluster mapping to multiple TZ ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
               ['CreateNetworkScope2'],
               ['CreateVirtualWire1'],
               ['CreateVirtualWire4'],
               ['CreateVirtualWire5'],
               ['CreateVirtualWire6'],
               ['PlaceVMsOnVirtualWire1'],
               ['PlaceVMsOnVirtualWire2'],
               ['PlaceVMsOnVirtualWire3'],
               ['PoweronVM1','PoweronVM2'],
               ['PoweronVM7','PoweronVM4'],
               ['PoweronVM5','PoweronVM8'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire2Unicat'],
               ['NetperfTestVirtualWire3Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
               ['NetperfTestVirtualWire2Multicast'],
               ['NetperfTestVirtualWire3Multicast'],
               ['ShrinkVXLANCluster'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire2Unicat'],
               ['NetperfTestVirtualWire3Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
               ['NetperfTestVirtualWire2Multicast'],
               ['NetperfTestVirtualWire3Multicast'],
               ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteAllVirtualWires'],
                ['DeleteNetworkScope2'],
               ],

            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,

            'CreateVirtualWire1' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'CreateNetworkScope2' => {
               Type => 'NSX',
               testnsx => "vsm.[1]",
               networkscope => {
                  '[2]' => {
                     name         => "network-scope-2-$$",
                     clusters     => "vc.[1].datacenter.[1].cluster.[2-3]",
                  },
               },
            },
            'DeleteNetworkScope2'  => {
               Type               => 'NSX',
               TestNSX            => "vsm.[1]",
               deletenetworkscope => "vsm.[1].networkscope.[2]",
               sleepbetweenworkloads => "10",
             },
            'CreateVirtualWire4' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[2]",
               VirtualWire  => {
                  "[4]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "MULTICAST_MODE",
                  },
               },
            },
            'CreateVirtualWire5' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[2]",
               VirtualWire  => {
                  "[5]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'CreateVirtualWire6' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[2]",
               VirtualWire  => {
                  "[6]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "HYBRID_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-2]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-5]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-8]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "udp",
               L3Protocol     => "ipv4",
               udpbandwidth   => "10000M",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv6",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",,
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8].vnic.[1]",
               TestDuration   => "60",
            },
           'ShrinkVXLANCluster' => {
              Type => "TransportZone",
              testtransportzone   => "vsm.[1].networkscope.[2]",
              transportzoneaction => "shrink",
              clusters  => "vc.[1].datacenter.[1].cluster.[2]",
            },
         },
      },
      'NewControllerSyncToHost' => {
         TestName         => 'NewControllerSyncToHost',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify controller info sync to host ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire1'],
               ['PlaceVMsOnVirtualWire1'],
               ['PoweronVM1','PoweronVM2'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
               ['SetControllerSSLToFalse'],
               ['CheckController1SSLFalseOnHost'],
               ['CheckController2SSLFalseOnHost'],
               ['CheckController3SSLFalseOnHost'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
               ['DeleteController1','NetperfTestVirtualWire1Unicat'],
               ['SetControllerSSLToTrue'],
               ['CheckController2SSLTrueOnHost'],
               ['CheckController3SSLTrueOnHost'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
               ['Deploy_Controller1'],
               ['SetControllerSSLToFalse'],
               ['CheckController1SSLFalseOnHost'],
               ['CheckController2SSLFalseOnHost'],
               ['CheckController3SSLFalseOnHost'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
               ],
            ExitSequence => [
               ['PoweroffVM'],
               ['DeleteVM1Vnic1'],
               ['DeleteVM2Vnic1'],
               ['DeleteAllVirtualWires'],
            ],

            'Deploy_Controller1' => DEPLOY_FIRST_CONTROLLER,
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1],vm.[2]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "60",
            },
            'SetControllerSSLToFalse' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[1]",
               sslenabled => "false",
               sleepbetweenworkloads => "15",
            },
            'CheckController1SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[1]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'CheckController2SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[2]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'CheckController3SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[3]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'SetControllerSSLToTrue' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[2]",
               sslenabled => "true",
               'sleepbetweenworkloads' => "60",
            },
            'CheckController2SSLTrueOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "true",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[2]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'CheckController3SSLTrueOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "true",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[3]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            "DeleteController1"   => {
               Type       => 'NSX',
               TestNSX    => "vsm.[1]",
               deletevxlancontroller => "vsm.[1].vxlancontroller.[1]",
            },
         },
      },
      'RemoveHostFromClusterAndComeBackAgain' => {
         TestName         => 'RemoveHostFromClusterAndComeBackAgain',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify remove host from cluster and add back again ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity,reboot',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire'],
               ['PlaceVMsOnVirtualWire1'],
               ['PlaceVMsOnVirtualWire2'],
               ['PlaceVMsOnVirtualWire3'],
               ['PoweronVM1','PoweronVM2','PoweronVM3'],
               ['PoweronVM4','PoweronVM5','PoweronVM6'],
               ['PoweronVM7','PoweronVM8','PoweronVM9'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire2Unicat'],
               ['NetperfTestVirtualWire3Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
               ['NetperfTestVirtualWire2Multicast'],
               ['NetperfTestVirtualWire3Multicast'],
               ['PoweroffVM1','PoweroffVM4','PoweroffVM7'],
               ['Delete_VM1_Vnic1'],
               ['Delete_VM4_Vnic1'],
               ['Delete_VM7_Vnic1'],
               ['MoveHostFromCluster_1'],
               ['RebootHost'],
               ['MoveHostToCluster_1'],
               ['NetperfTestVirtualWire1UnicatPass'],
               ['NetperfTestVirtualWire2UnicatPass'],
               ['NetperfTestVirtualWire3UnicatPass'],
               ['PlaceVM1OnVirtualWire1'],
               ['PlaceVM4OnVirtualWire2'],
               ['PlaceVM7OnVirtualWire3'],
               ['PoweronVM1','PoweronVM4','PoweronVM7'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire2Unicat'],
               ['NetperfTestVirtualWire3Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
               ['NetperfTestVirtualWire2Multicast'],
               ['NetperfTestVirtualWire3Multicast'],
               ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM6Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteVM9Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,
            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            'PoweroffVM1' => POWEROFF_VM1,
            'PoweroffVM4' => POWEROFF_VM4,
            'PoweroffVM7' => POWEROFF_VM7,
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "udp",
               L3Protocol     => "ipv4",
               udpbandwidth   => "10000M",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv6",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4,ipv6",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",,
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1UnicatPass" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[2].vnic.[1]",
               SupportAdapter => "vm.[3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2UnicatPass" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "udp",
               L3Protocol     => "ipv4",
               udpbandwidth   => "10000M",
               TestAdapter    => "vm.[5].vnic.[1]",
               SupportAdapter => "vm.[6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3UnicatPass" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv6",
               TestAdapter    => "vm.[8].vnic.[1]",
               SupportAdapter => "vm.[9].vnic.[1]",
               TestDuration   => "60",
            },
            'Delete_VM1_Vnic1' => DELETE_VM1_VNIC1,
            'Delete_VM4_Vnic1' => DELETE_VM4_VNIC1,
            'Delete_VM7_Vnic1' => DELETE_VM7_VNIC1,
            'PlaceVM1OnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVM4OnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVM7OnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'MoveHostFromCluster_1' => {
               Type => "Cluster",
               TestCluster => "vc.[1].datacenter.[1].cluster.[2]",
               MoveHostsFromCluster => "host.[2]",
             },
             'RebootHost' => {
                Type           => "Host",
                TestHost       => "host.[2]",
                reboot         => "yes",
                sleepbetweenworkloads => "20",
             },
             'MoveHostToCluster_1' => {
                Type => "Cluster",
                TestCluster => "vc.[1].datacenter.[1].cluster.[2]",
                movehoststocluster => "host.[2]",
                sleepbetweenworkloads => "20",
             },
         },
      },
      'TeamingPolicy-SRCIDLACPV2' => {
         TestName         => 'TeamingPolicy-SRCIDLACPV2',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify teaming policy: SRC ID and LACPv2 ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity,physical',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_7,
          'WORKLOADS' => {
            Sequence => [
                ['Deploy_Controller2'],
                ['Deploy_Controller3'],
                ['ConfigureChannelGroup_1'],
                ['ConfigureChannelGroup_2'],
                ['CreateVirtualWire1'],
                ['PlaceVMsOnVirtualWire1'],
                ['PoweronVM1','PoweronVM2'],
                ['PoweronVM3','PoweronVM4'],
                ['PoweronVM5','PoweronVM6'],
                ['PoweronVM7','PoweronVM8'],
                ['NetperfTestVirtualWireUnicatPass','DownUpHostsVmnic1'],
                ['UpdateVirtualWireToUnicast'],
                ['NetperfTestVirtualWireUnicatPass','DownUpHostsVmnic1'],
                ['UpdateVirtualWireToHybrid'],
                ['NetperfTestVirtualWireUnicatPass','DownUpHostsVmnic1'],
                ['UpdateVirtualWireToMulticast'],
                ['NetperfTestVirtualWireUnicatPass','DownUpHostsVmnic1'],
                ['NetperfTestVirtualWireMulticastPass','DownUpHostsVmnic1'],
                ['UpdateVirtualWireToUnicast'],
                ['NetperfTestVirtualWireMulticastPass','DownUpHostsVmnic1'],
                ['UpdateVirtualWireToHybrid'],
                ['NetperfTestVirtualWireMulticastPass','DownUpHostsVmnic1'],
                ['UpdateVirtualWireToMulticast'],
                ['DisableIPPIM'],
                ['NetperfTestVirtualWireUnicatFail',
                 'UpdateVirtualWireToMulticast'],
                ['EnableIPPIM'],
                ['NetperfTestVirtualWireMulticastPass'],
               ],
            ExitSequence => [
               ['EnableIPPIM'],
               ['RemovePortsFromChannelGroup'],
               ['DeleteChannelGroup']
            ],
            'Deploy_Controller2' => DEPLOY_SECOND_CONTROLLER,
            'Deploy_Controller3' => DEPLOY_THIRD_CONTROLLER,
            "ConfigureChannelGroup_1" => {
               Type            => "Port",
               TestPort        => "host.[2].pswitchport.[-1]",
               configurechannelgroup =>
                          VDNetLib::Common::GlobalConfig::VDNET_CHANNEL_GROUP_A,
               Mode            => "Active",
            },
            "ConfigureChannelGroup_2" => {
               Type            => "Port",
               TestPort        => "host.[3].pswitchport.[-1]",
               configurechannelgroup =>
                          VDNetLib::Common::GlobalConfig::VDNET_CHANNEL_GROUP_B,
               Mode            => "Active",
            },
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "MULTICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-8]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            "NetperfTestVirtualWireUnicatPass" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1-3].vnic.[1]",
               SupportAdapter => "vm.[5-8].vnic.[1]",
               TestDuration   => "60",
               sleepbetweenworkloads => "30",
            },
            "NetperfTestVirtualWireUnicatFail" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1-4].vnic.[1]",
               SupportAdapter => "vm.[5-8].vnic.[1]",
               TestDuration   => "60",
               expectedresult => "Fail",
            },
            "NetperfTestVirtualWireMulticastPass" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",,
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1-4].vnic.[1]",
               SupportAdapter => "vm.[5-8].vnic.[1]",
               TestDuration   => "60",
               sleepbetweenworkloads => "30",
            },
           'UpdateVirtualWireToUnicast' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[1]",
               reconfigure    => "true",
               name           =>  "test",
               controlplanemode   => "UNICAST_MODE",
               sleepbetweenworkloads => "20",
            },
            'UpdateVirtualWireToHybrid' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[1]",
               reconfigure    => "true",
               name           =>  "test",
               controlplanemode   => "HYBRID_MODE",
               sleepbetweenworkloads => "20",
            },
            'UpdateVirtualWireToMulticast' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[1]",
               reconfigure    => "true",
               name           =>  "test",
               controlplanemode   => "MULTICAST_MODE",
               sleepbetweenworkloads => "20",
            },
            "RemovePortsFromChannelGroup" => {
               Type            => "Port",
               TestPort        => "host.[2-3].pswitchport.[-1]",
               configurechannelgroup => "no",
            },
            "DeleteChannelGroup" => {
               Type                 => "Switch",
               TestSwitch           => "pswitch.[1]",
               removeportchannel    =>
                      VDNetLib::Common::GlobalConfig::VDNET_CHANNEL_GROUP_A.",".
                      VDNetLib::Common::GlobalConfig::VDNET_CHANNEL_GROUP_B,
            },
            "DisableIPPIM" => {
               Type            => "Port",
               TestPort        => "host.[2].pswitchport.[1]",
               disablepim      => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_D,
               Mode            => VDNetLib::TestData::TestConstants::IP_PIM_SPARSE_DENSE_MODE
            },
            "EnableIPPIM" => {
               Type            => "Port",
               TestPort        => "host.[2].pswitchport.[1]",
               enablepim      => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_D,
               Mode            => VDNetLib::TestData::TestConstants::IP_PIM_SPARSE_DENSE_MODE
            },
            "DownUpHostsVmnic1" => {
               Type            => "NetAdapter",
               TestAdapter     => "host.[2-3].vmnic.[1]",
               devicestatus    => "down,up",
               sleepbetweenworkloads => "20",
            },
         },
      },
      'TeamingPolicy-LACPPassiveAndActive' => {
         TestName         => 'TeamingPolicy-LACPPassiveAndActive',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify teaming policy: LACP Passive and Active',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity,physical',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_8,
          'WORKLOADS' => {
            Sequence => [
               ['Deploy_Controller2'],
               ['Deploy_Controller3'],
               ['ConfigureChannelGroup_1'],
               ['ConfigureChannelGroup_2'],
               ['CreateLAGv1Active'],
               ['EnableLACPv1Active'],
               ['CreateLAGv1Passive'],
               ['CreateVirtualWire1'],
               ['EnableLACPv1Passive'],
               ['PlaceVMsOnVirtualWire1'],
               ['PoweronVM1','PoweronVM2'],
               ['PoweronVM3','PoweronVM4'],
               ['PoweronVM5','PoweronVM6'],
               ['PoweronVM7','PoweronVM8'],
               ['NetperfTestVirtualWireUnicatPass'],
               ['NetperfTestVirtualWireMulticastPass'],
               ['UpgradeVDS'],
               ['NetperfTestVirtualWireUnicatPass',
                'UpdateVirtualWireToUnicast'],
               ['NetperfTestVirtualWireUnicatPass',
                'UpdateVirtualWireToHybrid'],
               ['NetperfTestVirtualWireUnicatPass',
                'UpdateVirtualWireToMulticast'],
               ['NetperfTestVirtualWireMulticastPass',
                'UpdateVirtualWireToUnicast'],
               ['NetperfTestVirtualWireMulticastPass',
                'UpdateVirtualWireToHybrid'],
               ['NetperfTestVirtualWireMulticastPass',
                'UpdateVirtualWireToMulticast'],
               ['DisableIPPIM'],
               ['NetperfTestVirtualWireUnicatFail',
                'UpdateVirtualWireToMulticast'],
               ['EnableIPPIM'],
               ['NetperfTestVirtualWireMulticastPass'],
               ],
           ExitSequence => [
               ['EnableIPPIM'],
               ['RemovePortsFromChannelGroup'],
               ['DeleteChannelGroup']
               ],
            'Deploy_Controller2' => DEPLOY_SECOND_CONTROLLER,
            'Deploy_Controller3' => DEPLOY_THIRD_CONTROLLER,
            "CreateLAGv1Active" => {
               Type         => "Switch",
               TestSwitch   => "vc.[1].vds.[1]",
               'lag' => {
                  '[1]' => {
                     lacpversion => "singlelag",
                  },
               },
            },
            "EnableLACPv1Active" => {
               Type            => "PortGroup",
               TestPortgroup   => "vc.[1].vds.[1].uplinkportgroup.[1]",
               configurelag    => "enable",
               mode            => "active",
            },
            "CreateLAGv1Passive" => {
               Type         => "Switch",
               TestSwitch   => "vc.[1].vds.[2]",
               'lag' => {
                  '[1]' => {
                     lacpversion => "singlelag",
                  },
               },
            },
            "EnableLACPv1Passive" => {
               Type            => "PortGroup",
               TestPortgroup   => "vc.[1].vds.[2].uplinkportgroup.[1]",
               configurelag    => "enable",
               mode            => "passive",
            },
            "ConfigureChannelGroup_1" => {
               Type            => "Port",
               TestPort        => "host.[2-3].pswitchport.[-1]",
               configurechannelgroup =>
                          VDNetLib::Common::GlobalConfig::VDNET_CHANNEL_GROUP_A,
               Mode            => "Active",
            },
            "ConfigureChannelGroup_2" => {
               Type            => "Port",
               TestPort        => "host.[4-5].pswitchport.[-1]",
               configurechannelgroup =>
                          VDNetLib::Common::GlobalConfig::VDNET_CHANNEL_GROUP_A,
               Mode            => "Active",
            },
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "MULTICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-8]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            "NetperfTestVirtualWireUnicatPass" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1-4].vnic.[1]",
               SupportAdapter => "vm.[5-8].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWireUnicatFail" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1-4].vnic.[1]",
               SupportAdapter => "vm.[5-8].vnic.[1]",
               TestDuration   => "60",
               expectedresult => "Fail",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1],vm.[7].vnic.[1]",
               SupportAdapter => "vm.[4].vnic.[1],vm.[10].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWireMulticastPass" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",,
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1-4].vnic.[1]",
               SupportAdapter => "vm.[5-8].vnic.[1]",
               TestDuration   => "60",
            },
            'UpgradeVDS' => {
               'Type' => 'Switch',
               'TestSwitch' => 'vc.[1].vds.[-1]',
               'upgradevds' => '5.5.0',
            },
           'UpdateVirtualWireToUnicast' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[1]",
               reconfigure    => "true",
               name           =>  "test",
               controlplanemode   => "UNICAST_MODE",
               sleepbetweenworkloads => "10",
            },
            'UpdateVirtualWireToHybrid' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[1]",
               reconfigure    => "true",
               name           =>  "test",
               controlplanemode   => "HYBRID_MODE",
               sleepbetweenworkloads => "10",
            },
            'UpdateVirtualWireToMulticast' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[1]",
               reconfigure    => "true",
               name           =>  "test",
               controlplanemode   => "MULTICAST_MODE",
               sleepbetweenworkloads => "10",
            },
            "DisableIPPIM" => {
               Type            => "Port",
               TestPort        => "host.[4-5].pswitchport.[1]",
               disablepim      => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_D,
               Mode            => VDNetLib::TestData::TestConstants::IP_PIM_SPARSE_DENSE_MODE
            },
            "EnableIPPIM" => {
               Type            => "Port",
               TestPort        => "host.[4-5].pswitchport.[1]",
               enablepim      => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_D,
               Mode            => VDNetLib::TestData::TestConstants::IP_PIM_SPARSE_DENSE_MODE
            },
            "RemovePortsFromChannelGroup" => {
               Type            => "Port",
               TestPort        => "host.[2-5].pswitchport.[-1]",
               configurechannelgroup => "no",
            },
            "DeleteChannelGroup" => {
               Type                 => "Switch",
               TestSwitch           => "pswitch.[1-2]",
               removeportchannel    =>
                      VDNetLib::Common::GlobalConfig::VDNET_CHANNEL_GROUP_A,
            },
         },
      },
      'ControllerFailover' => {
         TestName         => 'ControllerFailover',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify controller down/up ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
         'WORKLOADS' => {
            Sequence => [
               ['SetControllerSSLToFalse'],
               ['CheckController1SSLFalseOnHost'],
               ['CheckController2SSLFalseOnHost'],
               ['CheckController3SSLFalseOnHost'],
               ['CreateVirtualWire'],
               ['PlaceVMsOnVirtualWire1'],
               ['PlaceVMsOnVirtualWire2'],
               ['PlaceVMsOnVirtualWire3'],
               ['PoweronVM1','PoweronVM2'],
               ['PoweronVM7','PoweronVM4'],
               ['PoweronVM5','PoweronVM8'],
               ['NetperfTestVirtualWire1Unicast','StopRestartController1Service'],
               ['NetperfTestVirtualWire2Unicast','StopRestartController2Service'],
               ['NetperfTestVirtualWire3Unicast','StopRestartController3Service'],
               ['NetperfTestVirtualWire1Unicast','PowerOffPowerOnController1'],
               ['NetperfTestVirtualWire2Unicast','PowerOffPowerOnController2'],
               ['NetperfTestVirtualWire3Unicast','PowerOffPowerOnController3'],
               ['NetperfTestVirtualWire1Multicast','StopRestartController1Service'],
               ['NetperfTestVirtualWire2Multicast','StopRestartController2Service'],
               ['NetperfTestVirtualWire3Multicast','StopRestartController3Service'],
               ['NetperfTestVirtualWire1Multicast','PowerOffPowerOnController1'],
               ['NetperfTestVirtualWire2Multicast','PowerOffPowerOnController2'],
               ['NetperfTestVirtualWire3Multicast','PowerOffPowerOnController3'],
               ['SetControllerSSLToTrue'],
               ['CheckController1SSLTrueOnHost'],
               ['CheckController2SSLTrueOnHost'],
               ['CheckController3SSLTrueOnHost'],
               ['NetperfTestVirtualWire1Unicast'],
               ['NetperfTestVirtualWire2Unicast'],
               ['NetperfTestVirtualWire3Unicast'],
               ['NetperfTestVirtualWire1Multicast'],
               ['NetperfTestVirtualWire2Multicast'],
               ['NetperfTestVirtualWire3Multicast'],
               ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteAllVirtualWires'],
               ],

            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1],vm.[2]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4],vm.[5]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7],vm.[8]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            "NetperfTestVirtualWire1Unicast" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "180",
            },
            "NetperfTestVirtualWire2Unicast" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "udp",
               L3Protocol     => "ipv4",
               udpbandwidth   => "10000M",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5].vnic.[1]",
               TestDuration   => "180",
            },
            "NetperfTestVirtualWire3Unicast" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv6",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8].vnic.[1]",
               TestDuration   => "180",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "180",
            },
            "NetperfTestVirtualWire2Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5].vnic.[1]",
               TestDuration   => "180",
            },
            "NetperfTestVirtualWire3Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8].vnic.[1]",
               TestDuration   => "180",
            },
            'SetControllerSSLToFalse' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[1]",
               sslenabled => "false",
            },
            'CheckController1SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[1]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'CheckController2SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[2]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'CheckController3SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[3]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'SetControllerSSLToTrue' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[1]",
               sslenabled => "true",
               sleepbetweenworkloads => "15",
            },
            'CheckController1SSLTrueOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "true",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[1]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'CheckController2SSLTrueOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "true",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[2]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'CheckController3SSLTrueOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "true",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[3]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'StopRestartController1Service' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[1]",
               iterations => "2",
               vxlancontrollerservice  => "stop,restart",
               sleepbetweenworkloads => "60",
            },
            'StopRestartController2Service' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[2]",
               iterations => "2",
               vxlancontrollerservice  => "stop,restart",
               sleepbetweenworkloads => "60",
            },
            'StopRestartController3Service' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[3]",
               iterations => "2",
               vxlancontrollerservice  => "stop,restart",
               sleepbetweenworkloads => "60",
            },
            'PowerOffPowerOnController3' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[3]",
               iterations => "2",
               vmstate  => "poweroff,poweron",
               sleepbetweenworkloads => "60",
            },
            'PowerOffPowerOnController2' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[2]",
               iterations => "2",
               vmstate  => "poweroff,poweron",
               sleepbetweenworkloads => "60",
            },
            'PowerOffPowerOnController1' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[1]",
               iterations => "2",
               vmstate  => "poweroff,poweron",
               sleepbetweenworkloads => "60",
            },
         },
      },
      'VtepTrafficTcpUdpIpv4v6AndBUM' => {
         TestName         => 'VtepTrafficTcpUdpIpv4v6AndBUM',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'Include 2 test cases: ' .
                             'VtepTrafficTcpUdpIpv4v6: To verify whether ' .
                             'a VTEP converts the unicast TCP/UDP '  .
                             'traffics of IPv4 & IPv6  from VM  to ' .
                             'vxlan Unicast traffics;' .
                             'VtepTrafficBUM: To verify whether a VTEP ' .
                             'converts the BUM packets from VM to ' .
                             'multicast packets, without contacting ' .
                             'the controller ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Manual',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
                ['CreateVirtualWire'],
                ['PlaceVMsOnVirtualWire1'],
                ['PlaceVMsOnVirtualWire2'],
                ['PlaceVMsOnVirtualWire3'],
                ['PoweronVM1','PoweronVM2','PoweronVM3'],
                ['PoweronVM4','PoweronVM5','PoweronVM6'],
                ['PoweronVM7','PoweronVM8','PoweronVM9'],
                ['CheckWire2MTEPOnHost'],
                ['CheckWire3MTEPOnHost'],
                ['NetperfTestVirtualWire1Unicat'],
                ['NetperfTestVirtualWire2Unicat'],
                ['NetperfTestVirtualWire3Unicat'],
                ['NetperfTestVirtualWire1Multicast'],
                ['NetperfTestVirtualWire2Multicast'],
                ['NetperfTestVirtualWire3Multicast'],
                ['PingTrafficVirtualWire1Broadcast'],
                ['PingTrafficVirtualWire2Broadcast'],
                ['PingTrafficVirtualWire3Broadcast'],
               ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM6Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteVM9Vnic1'],
                ['DeleteAllVirtualWires'],
               ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,
            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9],",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,

            'CheckWire2MTEPOnHost' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[2]",
               checkmteponhost => 'host.[2-4]',
            },
            'CheckWire3MTEPOnHost' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[3]",
               checkmteponhost => 'host.[2-4]',
            },
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",,
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
            'PingTrafficVirtualWire1Broadcast' => {
               Type           => "Traffic",
               toolname       => "ping",
               Routingscheme  => "broadcast",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
            },
            'PingTrafficVirtualWire2Broadcast' => {
               Type           => "Traffic",
               toolname       => "ping",
               Routingscheme  => "broadcast",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
            },
            'PingTrafficVirtualWire3Broadcast' => {
               Type           => "Traffic",
               toolname       => "ping",
               Routingscheme  => "broadcast",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
            },
         },
      },
      'VerifyMTEPTable' => {
         TestName         => 'VerifyMTEPTable',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the MTEP list on all hosts ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
         'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire'],
               ['PlaceVMsOnVirtualWire2'],
               ['PlaceVMsOnVirtualWire3'],
               ['PoweronVM4','PoweronVM5','PoweronVM6'],
               ['PoweronVM7','PoweronVM8','PoweronVM9'],
               ['CheckMTEPOnHost'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM6Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteVM9Vnic1'],
                ['DeleteAllVirtualWires'],
               ],
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => "vmxnet3",
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9],",
               vnic => {
                  '[1]'   => {
                     driver     => "vmxnet3",
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            'CheckMTEPOnHost' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               checkmteponhost => 'host.[2-4]',
            },
         },
      },
      'vMotion' => {
         TestName         => 'vMotion',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the vMotion in vxlan on hosts ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity,physical',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_10,
         'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire1'],
               ['PlaceVMsOnVirtualWire1'],
               ['PoweronVM1','PoweronVM2'],
               ['PoweronVM3','PoweronVM4'],
               ['AddvmknicHost2DVPG1','AddvmknicHost3DVPG1','AddvmknicHost4DVPG1','AddvmknicHost5DVPG1'],
               ['NetperfTestIgnorethroughput1','vMotionVM1ToHost3'],
               ['NetperfTestIgnorethroughput2','vMotionVM3ToHost5'],
            ],
            ExitSequence => [],
            'Deploy_Controller2' => DEPLOY_SECOND_CONTROLLER,
            'Deploy_Controller3' => DEPLOY_THIRD_CONTROLLER,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-4]",
               vnic => {
                  '[1]'   => {
                     driver            => VXLAN_VNIC_DRIVER,
                     portgroup         => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected         => 1,
                     startconnected    => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'AddvmknicHost2DVPG1' => {
               Type     => "Host",
               TestHost => "host.[2]",
               vmknic   => {
                  '[1]' => {
                     portgroup   => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     ipv4address => '172.255.1.39',
                     netmask     => "255.255.255.0",
                     configurevmotion => "enable",
                  },
               },
            },
            'AddvmknicHost3DVPG1' => {
               Type     => "Host",
               TestHost => "host.[3]",
               vmknic   => {
                  '[1]' => {
                     portgroup   => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     ipv4address => '172.255.1.49',
                     netmask     => "255.255.255.0",
                     configurevmotion => "enable",
                  },
               },
            },
            'AddvmknicHost4DVPG1' => {
               Type     => "Host",
               TestHost => "host.[4]",
               vmknic   => {
                  '[1]' => {
                     portgroup   => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     ipv4address => '172.255.1.59',
                     netmask     => "255.255.255.0",
                     configurevmotion => "enable",
                  },
               },
            },
            'AddvmknicHost5DVPG1' => {
               Type     => "Host",
               TestHost => "host.[5]",
               vmknic   => {
                  '[1]' => {
                     portgroup   => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     ipv4address => '172.255.1.69',
                     netmask     => "255.255.255.0",
                     configurevmotion => "enable",
                  },
               },
            },
            "NetperfTestIgnorethroughput1" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "100",
            },
            "NetperfTestIgnorethroughput2" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[3].vnic.[1]",
               SupportAdapter => "vm.[4].vnic.[1]",
               TestDuration   => "100",
            },
            "vMotionVM1ToHost3"       => {
               Type            => "VM",
               TestVM          => "vm.[1]",
               Iterations      => "1",
               vmotion         => "roundtrip",
               dsthost         => "host.[3]",
            },
            "vMotionVM3ToHost5"       => {
               Type            => "VM",
               TestVM          => "vm.[3]",
               Iterations      => "1",
               vmotion         => "roundtrip",
               dsthost         => "host.[5]",
            },
         },
      },
      'MTEPUpDown' => {
         TestName         => 'MTEPUpDown',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify whether MTEP still works ' .
                             'after UP & down it on a host',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
         'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire1'],
               ['PlaceVMsOnVirtualWire1'],
               ['PoweronVM1','PoweronVM2','PoweronVM3'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
               ['RebootHosts'],
               ['PoweronVM2','PoweronVM3'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver            => VXLAN_VNIC_DRIVER,
                     portgroup         => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected         => 1,
                     startconnected    => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'NetperfTestVirtualWire1Unicat' => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            'NetperfTestVirtualWire1Multicast' => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4,ipv6",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            'RebootHosts' => {
               Type            => "Host",
               TestHost        => "host.[3-4]",
               reboot          => "yes",
            },
         },
      },
      'MTEPFuncTraffic' => {
         TestName         => 'MTEPFuncTraffic',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the MTEP function on host ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
         'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire1'],
               ['PlaceVMsOnVirtualWire1'],
               ['PoweronVM1','PoweronVM2','PoweronVM3'],
               ['CheckMTEPOnHost'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver            => VXLAN_VNIC_DRIVER,
                     portgroup         => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected         => 1,
                     startconnected    => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'CheckMTEPOnHost' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[1]",
               checkmteponhost => 'host.[2-4]',
            },
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "netperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4,ipv6",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
         },
      },
      'VTEPTrafficUnicast' => {
         TestName         => 'VTEPTrafficUnicast',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the VTEP function on host ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2',

         'TestbedSpec' => Functional_Topology_15,
         'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire1'],
               ['PlaceVMsOnVirtualWire1'],
               ['PoweronVM1','PoweronVM2','PoweronVM3'],
               ['NetperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire1Multicast'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver            => VXLAN_VNIC_DRIVER,
                     portgroup         => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected         => 1,
                     startconnected    => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4,ipv6",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
         },
      },
      'TeamingPolicy-FailOverAndSRCMAC' => {
         TestName         => 'TeamingPolicy-FailOverAndSRCMAC',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify teaming policy: Fail over and SRCMAC ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity,physical',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_13,
          'WORKLOADS' => {
            Sequence => [
               ['Deploy_Controller2'],
               ['Deploy_Controller3'],
               ['CreateVirtualWire1'],
               ['DisableIPPIM'],
               ['PlaceVMsOnVirtualWire1'],
               ['PoweronVM1','PoweronVM2'],
               ['PoweronVM3','PoweronVM4'],
               ['PoweronVM5','PoweronVM6'],
               ['PoweronVM7','PoweronVM8'],
               ['NetperfTestVirtualWireUnicatFail'],
               ['EnableIPPIM'],
               ['NetperfTestVirtualWireUnicatPass',
                'NetperfTestVirtualWireMulticastPass'],
               ['UpdateVirtualWireToUnicast'],
               ['NetperfTestVirtualWireUnicatPass',
                'NetperfTestVirtualWireMulticastPass'],
               ['UpdateVirtualWireToHybrid'],
               ['NetperfTestVirtualWireUnicatPass'],
               ['NetperfTestVirtualWireMulticastPass'],
            ],
            ExitSequence => [['EnableIPPIM']],
            'Deploy_Controller2' => DEPLOY_SECOND_CONTROLLER,
            'Deploy_Controller3' => DEPLOY_THIRD_CONTROLLER,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "MULTICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-8]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            "NetperfTestVirtualWireUnicatPass" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-8].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1],vm.[5].vnic.[1]",
               SupportAdapter => "vm.[3].vnic.[1],vm.[7].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWireMulticastPass" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-8].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWireUnicatFail" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[5-8].vnic.[1]",
               TestDuration   => "60",
               expectedresult => "Fail",
            },
            'UpdateVirtualWireToHybrid' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[1]",
               reconfigure    => "true",
               name           =>  "test",
               controlplanemode   => "HYBRID_MODE",
               sleepbetweenworkloads => "10",
            },
            'UpdateVirtualWireToUnicast' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[1]",
               reconfigure    => "true",
               name           =>  "test",
               controlplanemode   => "UNICAST_MODE",
               sleepbetweenworkloads => "10",
            },
            "EnableIPPIM" => {
               Type            => "Port",
               TestPort        => "host.[2-3].pswitchport.[-1]",
               enablepim       => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_D,
               Mode            => VDNetLib::TestData::TestConstants::IP_PIM_SPARSE_DENSE_MODE,
            },
            "DisableIPPIM" => {
               Type            => "Port",
               TestPort        => "host.[2-3].pswitchport.[-1]",
               disablepim      => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_D,
               Mode            => VDNetLib::TestData::TestConstants::IP_PIM_SPARSE_DENSE_MODE,
            },
         },
      },
      'TeamingPolicy-FailOverAndEtherChannel' => {
         TestName         => 'TeamingPolicy-FailOverAndEtherChannel',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify teaming policy: ' .
                             'Fail over and Ether Channel',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity,physical',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_14,
          'WORKLOADS' => {
            Sequence => [
               ['Deploy_Controller2'],
               ['Deploy_Controller3'],
               ['DisableIPPIM'],
               ['ConfigureChannelGroup_1'],
               ['ConfigureChannelGroup_2'],
               ['CreateVirtualWire1'],
               ['PlaceVMsOnVirtualWire1'],
               ['PoweronVM1','PoweronVM2'],
               ['PoweronVM3','PoweronVM4'],
               ['PoweronVM5','PoweronVM6'],
               ['PoweronVM7','PoweronVM8'],
               ['NetperfTestVirtualWireUnicatFail'],
               ['EnableIPPIM'],
               ['NetperfTestVirtualWireUnicatPass','NetperfTestVirtualWireMulticastPass'],
               ['UpdateVirtualWireToHybrid'],
               ['NetperfTestVirtualWireUnicatPass','NetperfTestVirtualWireMulticastPass'],
               ['UpdateVirtualWireToUnicast'],
               ['NetperfTestVirtualWireUnicatPass','NetperfTestVirtualWireMulticastPass'],
            ],
            ExitSequence => [['EnableIPPIM'],['RemovePortsFromChannelGroup'],['DeleteChannelGroup']],
            'Deploy_Controller2' => DEPLOY_SECOND_CONTROLLER,
            'Deploy_Controller3' => DEPLOY_THIRD_CONTROLLER,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "MULTICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-8]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            "NetperfTestVirtualWireUnicatPass" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-8].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1],vm.[5].vnic.[1]",
               SupportAdapter => "vm.[3].vnic.[1],vm.[7].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWireMulticastPass" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-8].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWireUnicatFail" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[5-8].vnic.[1]",
               TestDuration   => "60",
               expectedresult => "Fail",
            },
           'UpdateVirtualWireToUnicast' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[1]",
               reconfigure    => "true",
               name           =>  "test",
               controlplanemode   => "UNICAST_MODE",
               sleepbetweenworkloads => "10",
            },
            'UpdateVirtualWireToHybrid' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[1]",
               reconfigure    => "true",
               name           =>  "test",
               controlplanemode   => "HYBRID_MODE",
               sleepbetweenworkloads => "10",
            },
            "EnableIPPIM" => {
               Type            => "Port",
               TestPort        => "host.[2].pswitchport.[-1]",
               enablepim       => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_D,
               Mode            => VDNetLib::TestData::TestConstants::IP_PIM_SPARSE_DENSE_MODE,
            },
            "DisableIPPIM" => {
               Type            => "Port",
               TestPort        => "host.[2].pswitchport.[-1]",
               disablepim      => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_D,
               Mode            => VDNetLib::TestData::TestConstants::IP_PIM_SPARSE_DENSE_MODE,
            },
            "ConfigureChannelGroup_1" => {
               Type            => "Port",
               TestPort        => "host.[2].pswitchport.[-1]",
               configurechannelgroup =>
                          VDNetLib::Common::GlobalConfig::VDNET_CHANNEL_GROUP_A,
               Mode            => "On",
            },
            "ConfigureChannelGroup_2" => {
               Type            => "Port",
               TestPort        => "host.[3].pswitchport.[-1]",
               configurechannelgroup =>
                          VDNetLib::Common::GlobalConfig::VDNET_CHANNEL_GROUP_B,
               Mode            => "On",
            },
            "RemovePortsFromChannelGroup" => {
               Type            => "Port",
               TestPort        => "host.[2-3].pswitchport.[-1]",
               configurechannelgroup => "no",
            },
            "DeleteChannelGroup" => {
               Type                 => "Switch",
               TestSwitch           => "pswitch.[1]",
               removeportchannel    =>
                      VDNetLib::Common::GlobalConfig::VDNET_CHANNEL_GROUP_A.",".
                      VDNetLib::Common::GlobalConfig::VDNET_CHANNEL_GROUP_B,
            },
         },
      },
      'UpdateController' => {
         TestName         => 'UpdateController',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'UpdateController: To verify that VTEP updates' .
                             'the controller with its local database' .
                             'To verify whether controller stores' .
                             'information about all VTEPs' .
                             'To verify whether a VTEP successfully gets' .
                             'information about other relevant VTEPs from' .
                             'the controller;' .
                             'one VNI info should not sync to another ' .
                             'VNI on controller' .
                             'To verify whether a VTEP converts the ' .
                             'initial ARP request from a VM into multicast' .
                             'packet if the controller  doesnt know how to ' .
                             'reach the destination ip',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
                ['CreateVirtualWire'],
                ['PlaceVMsOnVirtualWire1'],
                ['PlaceVMsOnVirtualWire2'],
                ['PlaceVMsOnVirtualWire3'],
                ['PoweronVM1','PoweronVM2','PoweronVM3'],
                ['PoweronVM4','PoweronVM5','PoweronVM6'],
                ['PoweronVM7','PoweronVM8','PoweronVM9'],
                ['ArpPingVM1'],
                ['CheckWire2MTEPOnHost'],
                ['CheckWire3MTEPOnHost'],
                ['NetperfTestVirtualWire2Unicat'],
                ['ArpPingVM4', 'ArpPingVM56'],
                ['VerifyVirtualWire2VMsArpEntryOnControllers',
                'VerifyVM123789ArpEntryNotOnVirtualwire2Controller',
                'VerifyVirtualWire2VMsMacEntryOnControllers',
                'VerifyVM123789MacEntryNotOnVirtualwire2Controller',
                'VerifyVirtualWire2ConnectionTableOnControllers',
                'VerifyVirtualWire2VtepTableOnControllers'],
                ['NetperfTestVirtualWire3Unicat'],
                ['ArpPingVM7', 'ArpPingVM89'],
                ['VerifyVirtualWire3VMsArpEntryOnControllers',
                'VerifyVM123456ArpEntryNotOnVirtualwire3Controller',
                'VerifyVirtualWire3VMsMacEntryOnControllers',
                'VerifyVM123456MacEntryNotOnVirtualwire3Controller',
                'VerifyVirtualWire3ConnectionTableOnControllers',
                'VerifyVirtualWire3VtepTableOnControllers'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM6Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteVM9Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,

            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9],",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,

            "ArpPingVM1" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[1].vnic.[1]",
               SupportAdapter   => "vm.[2-3].vnic.[1]",
               TestDuration     => "30",
               connectivitytest => "0",
               verification     => "Verification_0",
            },
           "Verification_0" => {
              'PktCapVerificaton' => {
                'target'       => 'host.[2].vmnic.[1]',
                'pktcapfilter' => 'count 15,vxlan vsm.[1].networkscope.[1].virtualwire.[1],flowdirection tx,capturestage post',
                'verificationtype' => 'pktcapuserworld',
                'vxlanid'      => "vsm.[1].networkscope.[1].virtualwire.[1]",
                'pktcount'     => '10+',
                'l3protocolheader' => '0x08',
                'pkttype'      => 'multicast',
                'tos'          => '0x0',
                'innerpkttype' => 'broadcast',
              }
            },
            'CheckWire2MTEPOnHost' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[2]",
               checkmteponhost => 'host.[2-4]',
            },
            'CheckWire3MTEPOnHost' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[3]",
               checkmteponhost => 'host.[2-4]',
            },
           "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "5",
               verification   => "Verification_1",
            },
	   "Verification_1" => {
              'PktCapVerificaton' => {
                'target'       => 'host.[2].vmnic.[1]',

               # pktcapfilter 'vxlan' can followed by vxlan id directly or followed by a tuple
               # flowdirection can be tx or rx, capturestage can be post or pre
               #'pktcapfilter' => 'count 15,vxlan 7676,flowdirection tx,capturestage post',
                'pktcapfilter' => 'count 15,vxlan vsm.[1].networkscope.[1].virtualwire.[2],flowdirection tx,capturestage post',

               # must specify the verification type to 'pktcapuserworld' if you want to capture vxlan packets,
                'verificationtype' => 'pktcapuserworld',

               # vxlan id you want to verify, can be vxlan id directly or a tuple
               #'vxlanid'      => "7676",
                'vxlanid'      => "vsm.[1].networkscope.[1].virtualwire.[2]",

                'pktcount'     => '10+',
                'l3protocolheader' => '0x08', #vxlan header flag
                'pkttype'      => 'unicast',  #outer packet type
                'tos'          => '0x0',      #outer packet tos value
                'innerpkttype' => 'unicast',  #inner packet type
                'innertos'     => '0x0',      #inner packet tos value
              }
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "5",
            },
            "ArpPingVM4" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[4].vnic.[1]",
               SupportAdapter   => "vm.[5-6].vnic.[1]",
               TestDuration     => "30",
               connectivitytest => "0",
               verification     => "Verification_2",
            },
           "Verification_2" => {
              'PktCapVerificaton' => {
                'target'       => 'host.[2].vmnic.[1]',
                'pktcapfilter' => 'count 15,vxlan vsm.[1].networkscope.[1].virtualwire.[2],flowdirection tx,capturestage post',
                'verificationtype' => 'pktcapuserworld',
                'vxlanid'      => "vsm.[1].networkscope.[1].virtualwire.[2]",
                'pktcount'     => '10+',
                'l3protocolheader' => '0x0a', #vxlan header flag
                'pkttype'      => 'unicast',  #outer packet type
                'tos'          => '0x0',      #outer packet tos value
                'innerpkttype' => 'broadcast',  #inner packet type
              }
            },
            "ArpPingVM56" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[5-6].vnic.[1]",
               SupportAdapter   => "vm.[4].vnic.[1]",
               TestDuration     => "30",
               connectivitytest => "0",
            },
            "ArpPingVM7" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[7].vnic.[1]",
               SupportAdapter   => "vm.[8-9].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM89" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[8-9].vnic.[1]",
               SupportAdapter   => "vm.[7].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            'VerifyVirtualWire2VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[4].vnic.[1]",
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      ip   => "vm.[5].vnic.[1]",
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      ip   => "vm.[6].vnic.[1]",
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire3VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[7].vnic.[1]",
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      ip   => "vm.[8].vnic.[1]",
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      ip   => "vm.[9].vnic.[1]",
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire2VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire3VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
            },
           'VerifyVirtualWire2ConnectionTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyConnectionTableOnController[?]contain_once" => [
                   {
                      hostip  => "host.[2]",
                   },
                   {
                      hostip  => "host.[3]",
                   },
                   {
                      hostip  => "host.[4]",
                   },
               ],
            },
            'VerifyVirtualWire3ConnectionTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyConnectionTableOnController[?]contain_once" => [
                   {
                      hostip  => "host.[2]",
                   },
                   {
                      hostip  => "host.[3]",
                   },
                   {
                      hostip  => "host.[4]",
                   },
               ],
            },
            'VerifyVirtualWire2VtepTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVtepTableOnController[?]contain_once" => [
                   {
                      vtepip  => "host.[2]",
                      cluster => "vc.[1].datacenter.[1].cluster.[2]",
                   },
                   {
                      vtepip  => "host.[3]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
                   {
                      vtepip  => "host.[4]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
               ],
            },
            'VerifyVirtualWire3VtepTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVtepTableOnController[?]contain_once" => [
                   {
                      vtepip  => "host.[2]",
                      cluster => "vc.[1].datacenter.[1].cluster.[2]",
                   },
                   {
                      vtepip  => "host.[3]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
                   {
                      vtepip  => "host.[4]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
               ],
            },
            'VerifyVM123789ArpEntryNotOnVirtualwire2Controller' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]not_contains" => [
                   {
                      ip   => "vm.[1].vnic.[1]",
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      ip   => "vm.[2].vnic.[1]",
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      ip   => "vm.[3].vnic.[1]",
                      mac  => "vm.[3].vnic.[1]",
                   },
                   {
                      ip   => "vm.[7].vnic.[1]",
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      ip   => "vm.[8].vnic.[1]",
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      ip   => "vm.[9].vnic.[1]",
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
            },
            'VerifyVM123456ArpEntryNotOnVirtualwire3Controller' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]not_contains" => [
                   {
                      ip   => "vm.[1].vnic.[1]",
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      ip   => "vm.[2].vnic.[1]",
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      ip   => "vm.[3].vnic.[1]",
                      mac  => "vm.[3].vnic.[1]",
                   },
                   {
                      ip   => "vm.[4].vnic.[1]",
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      ip   => "vm.[5].vnic.[1]",
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      ip   => "vm.[6].vnic.[1]",
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
            },
            'VerifyVM123789MacEntryNotOnVirtualwire2Controller' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]not_contains" => [
                   {
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      mac  => "vm.[3].vnic.[1]",
                   },
                   {
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
            },
            'VerifyVM123456MacEntryNotOnVirtualwire3Controller' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]not_contains" => [
                   {
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      mac  => "vm.[3].vnic.[1]",
                   },
                   {
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
            },
         },
      },
      'VNIDatabaseUpdate' => {
         TestName         => 'VNIDatabaseUpdate',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'VNIDatabaseUpdate: To verify whether VTEP ' .
                             'updates controller when VNI is added/deleted ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [

              # step 1, check all the virtual wires and verify virtual wires
              #         exist on controllers and hosts
                  ['CreateVirtualWire'],
                  ['PlaceVMsOnVirtualWire1'],
                  ['PlaceVMsOnVirtualWire2'],
                  ['PlaceVMsOnVirtualWire3'],
                  ['PoweronVM1','PoweronVM2','PoweronVM3'],
                  ['PoweronVM4','PoweronVM5','PoweronVM6'],
                  ['PoweronVM7','PoweronVM8','PoweronVM9'],
                  ['VerifyVirtualWire2ExistOnControllers',
                   'VerifyVirtualWire3ExistOnControllers',
                   'VerifyVirtualWire2ExistOnHosts',
                   'VerifyVirtualWire3ExistOnHosts'],

              # step 2, remove all the virtual wires and verify virtual wires
              #         not exist on controllers and hosts
                  ['PoweroffVM1','PoweroffVM2','PoweroffVM3'],
                  ['PoweroffVM4','PoweroffVM5','PoweroffVM6'],
                  ['PoweroffVM7','PoweroffVM8','PoweroffVM9'],
                  ['RemoveVM1FromVirtualWire1', 'RemoveVM4FromVirtualWire2',
                                                'RemoveVM7FromVirtualWire3'],
                  ['RemoveVM2FromVirtualWire1', 'RemoveVM5FromVirtualWire2',
                                                'RemoveVM8FromVirtualWire3'],
                  ['RemoveVM3FromVirtualWire1', 'RemoveVM6FromVirtualWire2',
                                                'RemoveVM9FromVirtualWire3'],
                  ['DeleteVirtualWire'],
                  ['VerifyVirtualWire2NotExistOnControllers',
                   'VerifyVirtualWire3NotExistOnControllers',
                   'VerifyVirtualWire2NotExistOnHosts',
                   'VerifyVirtualWire3NotExistOnHosts'],

              # step 3, add back all the virtual wires and verify virtual wires
              #         exist on controllers and hosts
                  ['CreateVirtualWire'],
                  ['PlaceVMsOnVirtualWire1'],
                  ['PlaceVMsOnVirtualWire2'],
                  ['PlaceVMsOnVirtualWire3'],
                  ['PoweronVM1','PoweronVM2','PoweronVM3'],
                  ['PoweronVM4','PoweronVM5','PoweronVM6'],
                  ['PoweronVM7','PoweronVM8','PoweronVM9'],
                  ['VerifyVirtualWire2ExistOnControllers',
                   'VerifyVirtualWire3ExistOnControllers',
                   'VerifyVirtualWire2ExistOnHosts',
                   'VerifyVirtualWire3ExistOnHosts'],

              # step 4, block the connection between Esx and VSM
                  ['ReconfigureConnectionBetweenVsmAndEsx'],

              # step 5, remove all the virtual wires and verify virtual wires
              #         not exist on controllers and hosts
                  ['PoweroffVM1','PoweroffVM2','PoweroffVM3'],
                  ['PoweroffVM4','PoweroffVM5','PoweroffVM6'],
                  ['PoweroffVM7','PoweroffVM8','PoweroffVM9'],
                  ['RemoveVM1FromVirtualWire1', 'RemoveVM4FromVirtualWire2',
                                                'RemoveVM7FromVirtualWire3'],
                  ['RemoveVM2FromVirtualWire1', 'RemoveVM5FromVirtualWire2',
                                                'RemoveVM8FromVirtualWire3'],
                  ['RemoveVM3FromVirtualWire1', 'RemoveVM6FromVirtualWire2',
                                                'RemoveVM9FromVirtualWire3'],
                  ['DeleteVirtualWire'],
                  ['VerifyVirtualWire2NotExistOnControllers',
                   'VerifyVirtualWire3NotExistOnControllers',
                   'VerifyVirtualWire2NotExistOnHosts',
                   'VerifyVirtualWire3NotExistOnHosts'],

              # step 6, add back all the virtual wires and verify virtual wires
              #         exist on controllers and hosts
                  ['CreateVirtualWire'],
                  ['PlaceVMsOnVirtualWire1'],
                  ['PlaceVMsOnVirtualWire2'],
                  ['PlaceVMsOnVirtualWire3'],
                  ['PoweronVM1','PoweronVM2','PoweronVM3'],
                  ['PoweronVM4','PoweronVM5','PoweronVM6'],
                  ['PoweronVM7','PoweronVM8','PoweronVM9'],
                  ['VerifyVirtualWire2ExistOnControllers',
                   'VerifyVirtualWire3ExistOnControllers',
                   'VerifyVirtualWire2ExistOnHosts',
                   'VerifyVirtualWire3ExistOnHosts'],

              # step 7, unblock the connection between Esx and VSM
                  ['ReconfigureConnectionBetweenVsmAndEsx'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM6Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteVM9Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,

            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9],",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            'PoweroffVM1' => POWEROFF_VM1,
            'PoweroffVM2' => POWEROFF_VM2,
            'PoweroffVM3' => POWEROFF_VM3,
            'PoweroffVM4' => POWEROFF_VM4,
            'PoweroffVM5' => POWEROFF_VM5,
            'PoweroffVM6' => POWEROFF_VM6,
            'PoweroffVM7' => POWEROFF_VM7,
            'PoweroffVM8' => POWEROFF_VM8,
            'PoweroffVM9' => POWEROFF_VM9,
            'RemoveVM1FromVirtualWire1' => DELETE_VM1_VNIC1,
            'RemoveVM2FromVirtualWire1' => DELETE_VM2_VNIC1,
            'RemoveVM3FromVirtualWire1' => DELETE_VM3_VNIC1,
            'RemoveVM4FromVirtualWire2' => DELETE_VM4_VNIC1,
            'RemoveVM5FromVirtualWire2' => DELETE_VM5_VNIC1,
            'RemoveVM6FromVirtualWire2' => DELETE_VM6_VNIC1,
            'RemoveVM7FromVirtualWire3' => DELETE_VM7_VNIC1,
            'RemoveVM8FromVirtualWire3' => DELETE_VM8_VNIC1,
            'RemoveVM9FromVirtualWire3' => DELETE_VM9_VNIC1,

            'VerifyVirtualWire2ExistOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVirtualWireOnController" => {
                  'vni[?]equal_to' => "EXIST",
               },
               noofretries  => "3",
            },
            'VerifyVirtualWire3ExistOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVirtualWireOnController" => {
                  'vni[?]equal_to' => "EXIST",
               },
               noofretries  => "3",
            },
            'VerifyVirtualWire2ExistOnHosts' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => "host.[2-4]",
               "VerifyVirtualWireOnHost" => [
                 {
                  'vni[?]equal_to' => "EXIST",
                 },
                 {
                  'vni[?]equal_to' => "EXIST",
                 },
                 {
                  'vni[?]equal_to' => "EXIST",
                 },
               ],
               noofretries  => "3",
            },
            'VerifyVirtualWire3ExistOnHosts' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => "host.[2-4]",
               "VerifyVirtualWireOnHost" => [
                 {
                  'vni[?]equal_to' => "EXIST",
                 },
                 {
                  'vni[?]equal_to' => "EXIST",
                 },
                 {
                  'vni[?]equal_to' => "EXIST",
                 },
               ],
               noofretries  => "3",
            },
            'DeleteVirtualWire' => {
               Type                  => "TransportZone",
               TestTransportZone     => "vsm.[1].networkscope.[1]",
               DeleteVirtualWire     => "vsm.[1].networkscope.[1].virtualwire.[-1]",
               SkipPostProcess       => "1",
               sleepbetweenworkloads => "10",
            },
            'VerifyVirtualWire2NotExistOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVirtualWireOnController" => {
                  'vni[?]equal_to' => "NOT_EXIST",
               },
               noofretries  => "3",
            },
            'VerifyVirtualWire3NotExistOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVirtualWireOnController" => {
                  'vni[?]equal_to' => "NOT_EXIST",
               },
               noofretries  => "3",
            },
            'VerifyVirtualWire2NotExistOnHosts' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => "host.[2-4]",
               "VerifyVirtualWireOnHost" => [
                 {
                  'vni[?]equal_to' => "NOT_EXIST",
                 },
                 {
                  'vni[?]equal_to' => "NOT_EXIST",
                 },
                 {
                  'vni[?]equal_to' => "NOT_EXIST",
                 },
               ],
               noofretries  => "3",
            },
            'VerifyVirtualWire3NotExistOnHosts' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => "host.[2-4]",
               "VerifyVirtualWireOnHost" => [
                 {
                  'vni[?]equal_to' => "NOT_EXIST",
                 },
                 {
                  'vni[?]equal_to' => "NOT_EXIST",
                 },
                 {
                  'vni[?]equal_to' => "NOT_EXIST",
                 },
               ],
               noofretries  => "3",
            },
            'ReconfigureConnectionBetweenVsmAndEsx' => {
               'Type'     => 'Host',
               'TestHost' => 'host.[2-4]',
               'reconfigurefirewall' => 'true',
               'ruleset'  => 'rabbitmqproxy'
            },
         },
      },
      'VMPropertyUpdate' => {
         TestName         => 'VMPropertyUpdate',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'VMPropertyUpdate: To verify whether controller' .
                             'updates all VTEPs  about change in a VMs property' .
                             'VTEPIPUpdate: To verify whether change of vmknic ' .
                             'ip of a VTEP is  propagated to the controller.' .
                             'VMMultipleIP: To verify whether VTEP updates the ' .
                             'controller when a VM has multiple IP addresses' ,
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [

              # step 1, check all the ARP and MAC addresses can be
              #         learned correctly on controllers
                ['CreateVirtualWire'],
                ['PlaceVMsOnVirtualWire1'],
                ['PlaceVMsOnVirtualWire2'],
                ['PlaceVMsOnVirtualWire3'],
                ['PoweronVM1','PoweronVM2','PoweronVM3'],
                ['PoweronVM4','PoweronVM5','PoweronVM6'],
                ['PoweronVM7','PoweronVM8','PoweronVM9'],
                ['NetperfTestVirtualWire2Unicat'],
                ['ArpPingVM4', 'ArpPingVM56'],
                ['VerifyVirtualWire2VMsArpEntryOnControllers',
                 'VerifyVirtualWire2VMsMacEntryOnControllers'],
                ['NetperfTestVirtualWire3Unicat'],
                ['ArpPingVM7', 'ArpPingVM89'],
                ['VerifyVirtualWire3VMsArpEntryOnControllers',
                 'VerifyVirtualWire3VMsMacEntryOnControllers'],

              # step 2, change vm4,vm5,vm6 ip addresses to new ones,
              #         change vm7,vm8,vm9 mac addresses to new ones
                ['SetVDS12MacAddressChangeSecurityPolicyAccept'],
                ['SetVDS12ForgedTransmitChangeSecurityPolicyAccept'],
                ['ChangeVM4Vnic1IpAddress', 'ChangeVM5Vnic1IpAddress',
                                            'ChangeVM6Vnic1IpAddress'],
                ['ChangeVM7Vnic1MacAddress', 'ChangeVM8Vnic1MacAddress',
                                             'ChangeVM9Vnic1MacAddress'],

              # step 3, after change vms ip/mac addresses, check the new
              #         ARP and MAC addresses can be learned correctly
              #         on controllers
                ['ArpPingVM4', 'ArpPingVM56'],
                ['VerifyVirtualWire2VMsArpEntryOnControllers',
                 'VerifyVirtualWire2VMsMacEntryOnControllers'],
                ['ArpPingVM7', 'ArpPingVM89'],
                ['VerifyVirtualWire3VMsArpEntryOnControllers',
                 'VerifyVirtualWire3VMsMacEntryOnControllers'],

              # step 4, after changing vms ip/mac addresses, check the
              #         traffic working correctly
                ['NetperfTestVirtualWire2Unicat'],
                ['NetperfTestVirtualWire3Unicat'],

              # step 5, change vmkic ip address of vtep 2
                ['ChangeVtep2StaticIpAddress'],

              # step 6, after vtep ip change, verify the new vtep ip
              #         can be learned correctly on controllers
                ['VerifyVirtualWire2VtepTableOnControllers'],
                ['VerifyVirtualWire3VtepTableOnControllers'],

              # step 7, after vtep ip change, verify the traffic still works
                ['NetperfTestVirtualWire2Unicat'],
                ['NetperfTestVirtualWire3Unicat'],

              # step 8, change vtep2 ip address back to dhcp mode
                ['ChangeVtep2DhcpIpAddress'],

              # step 9, add vm4 with 2 extra sub ip addresses
                ['AddVm4Vnic1SubIPs'],

              # step 10, after add the sub ip addresses, send the arpping again
              #           also check the controller can learn the new sub ips
                ['ArpPingVM4', 'ArpPingVM4SubIP1', 'ArpPingVM4SubIP2',
                                                   'ArpPingVM56'],
                ['VerifyVirtualWire2VMsSubIPArpEntryOnControllers',
                 'VerifyVirtualWire2VMsMacEntryOnControllers'],

              # step 11, in vm4, add one extra vnics in a different  virtual wire
                ['PlaceVM4Vnic2OnVirtualWire3'],

              # step 12, after add the extra vnic, send the arping again,
              #          also check the controller can learn the new sub ips
                ['ArpPingVM4Vnic2', 'ArpPingVM89'],
                ['VerifyVirtualWire2VMsVnic2ArpEntryOnControllers',
                 'VerifyVirtualWire2VMsVnic2MacEntryOnControllers'],

              # step 13, the two vnics in vm4 cannot connected since they are not
              #          in the same virtual wire.
                ['ArpPingVM4Vnic1To2'],

            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1InExitSeq'],
                ['DeleteVM2Vnic1InExitSeq'],
                ['DeleteVM3Vnic1InExitSeq'],
                ['DeleteVM4Vnic1InExitSeq'],
                ['DeleteVM4Vnic2InExitSeq'],
                ['DeleteVM5Vnic1InExitSeq'],
                ['DeleteVM6Vnic1InExitSeq'],
                ['DeleteVM7Vnic1InExitSeq'],
                ['DeleteVM8Vnic1InExitSeq'],
                ['DeleteVM9Vnic1InExitSeq'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1InExitSeq' => DELETE_VM1_VNIC1_IN_EXIT_SEQ,
            'DeleteVM2Vnic1InExitSeq' => DELETE_VM2_VNIC1_IN_EXIT_SEQ,
            'DeleteVM3Vnic1InExitSeq' => DELETE_VM3_VNIC1_IN_EXIT_SEQ,
            'DeleteVM4Vnic1InExitSeq' => DELETE_VM4_VNIC1_IN_EXIT_SEQ,
            'DeleteVM4Vnic2InExitSeq' => {
                            Type       => "VM",
                            TestVM     => "vm.[4]",
                            deletevnic => "vm.[4].vnic.[2]",
                            ExpectedResult => "ignore",
                        },
            'DeleteVM5Vnic1InExitSeq' => DELETE_VM5_VNIC1_IN_EXIT_SEQ,
            'DeleteVM6Vnic1InExitSeq' => DELETE_VM6_VNIC1_IN_EXIT_SEQ,
            'DeleteVM7Vnic1InExitSeq' => DELETE_VM7_VNIC1_IN_EXIT_SEQ,
            'DeleteVM8Vnic1InExitSeq' => DELETE_VM8_VNIC1_IN_EXIT_SEQ,
            'DeleteVM9Vnic1InExitSeq' => DELETE_VM9_VNIC1_IN_EXIT_SEQ,

            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9],",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,

            "ArpPingVM4" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[4].vnic.[1]",
               SupportAdapter   => "vm.[5-6].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM56" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[5-6].vnic.[1]",
               SupportAdapter   => "vm.[4].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM7" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[7].vnic.[1]",
               SupportAdapter   => "vm.[8-9].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM89" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[8-9].vnic.[1]",
               SupportAdapter   => "vm.[7].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            'VerifyVirtualWire2VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[4].vnic.[1]",
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      ip   => "vm.[5].vnic.[1]",
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      ip   => "vm.[6].vnic.[1]",
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
               noofretries  => "3",
            },
            'VerifyVirtualWire3VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[7].vnic.[1]",
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      ip   => "vm.[8].vnic.[1]",
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      ip   => "vm.[9].vnic.[1]",
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
               noofretries  => "3",
            },
            'VerifyVirtualWire2VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
               noofretries  => "3",
            },
            'VerifyVirtualWire3VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
               noofretries  => "3",
            },
            'SetVDS12MacAddressChangeSecurityPolicyAccept' => {
              'Type'           => 'Switch',
              'TestSwitch'     => 'vc.[1].vds.[1-2]',
              'virtualwire'    => "vsm.[1].networkscope.[1].virtualwire.[3]",
              'policytype'     => "macChanges",
              'securitypolicy' => 'Enable'
            },
            'SetVDS12ForgedTransmitChangeSecurityPolicyAccept' => {
              'Type'           => 'Switch',
              'TestSwitch'     => 'vc.[1].vds.[1-2]',
              'virtualwire'    => "vsm.[1].networkscope.[1].virtualwire.[3]",
              'policytype'     => "forgedTransmits",
              'securitypolicy' => 'Enable'
            },
            'ChangeVM4Vnic1IpAddress' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[4].vnic.[1]",
               IPv4           => VDNetLib::TestData::TestConstants::VXLAN_VM_STATIC_IP_1,
               netmask        => "255.255.0.0",
            },
            'ChangeVM5Vnic1IpAddress' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[5].vnic.[1]",
               IPv4           => VDNetLib::TestData::TestConstants::VXLAN_VM_STATIC_IP_2,
               netmask        => "255.255.0.0",
            },
            'ChangeVM6Vnic1IpAddress' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[6].vnic.[1]",
               IPv4           => VDNetLib::TestData::TestConstants::VXLAN_VM_STATIC_IP_3,
               netmask        => "255.255.0.0",
            },
            'ChangeVM7Vnic1MacAddress' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[7].vnic.[1]",
               setmacaddr     => '00:11:22:33:44:77',
            },
            'ChangeVM8Vnic1MacAddress' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[8].vnic.[1]",
               setmacaddr     => '00:11:22:33:44:88',
            },
            'ChangeVM9Vnic1MacAddress' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[9].vnic.[1]",
               setmacaddr     => '00:11:22:33:44:99',
            },
            "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "5",
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "5",
            },
            'ChangeVtep2StaticIpAddress' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host           => "host.[2]",
               cluster        => "vc.[1].datacenter.[1].cluster.[2]",
               ipv4           => "static",
               ipv4address    => VDNetLib::TestData::TestConstants::VXLAN_VTEP_STATIC_IP_1,
               netmask        => "255.255.0.0",
            },
            'ChangeVtep2DhcpIpAddress' => {
               Type           => "Switch",
               testswitch     => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host           => "host.[2]",
               cluster        => "vc.[1].datacenter.[1].cluster.[2]",
               ipv4           => "dhcp",
            },
            'VerifyVirtualWire2VtepTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVtepTableOnController[?]contain_once" => [
                   {
                      vtepip  => "host.[2]",
                      cluster => "vc.[1].datacenter.[1].cluster.[2]",
                   },
                   {
                      vtepip  => "host.[3]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
                   {
                      vtepip  => "host.[4]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
               ],
               noofretries  => "5",
            },
            'VerifyVirtualWire3VtepTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVtepTableOnController[?]contain_once" => [
                   {
                      vtepip  => "host.[2]",
                      cluster => "vc.[1].datacenter.[1].cluster.[2]",
                   },
                   {
                      vtepip  => "host.[3]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
                   {
                      vtepip  => "host.[4]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
               ],
            },
            'AddVm4Vnic1SubIPs' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[4].vnic.[1]",
               IpInterface    => {
                 '[1]'           => {
                     ipv4address => VDNetLib::TestData::TestConstants::VXLAN_VM_STATIC_IP_4,
                     netmask     => "255.255.0.0",
                     subipindex  => "1",
                 },
                 '[2]'           => {
                     ipv4address => VDNetLib::TestData::TestConstants::VXLAN_VM_STATIC_IP_5,
                     netmask     => "255.255.0.0",
                     subipindex  => "2",
                 },
               },
            },
            "ArpPingVM4SubIP1" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[4].vnic.[1].ipinterface.[1]",
               SupportAdapter   => "vm.[5].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM4SubIP2" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[4].vnic.[1].ipinterface.[2]",
               SupportAdapter   => "vm.[6].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            'VerifyVirtualWire2VMsSubIPArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[4].vnic.[1]",
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      ip   => "vm.[4].vnic.[1].ipinterface.[1]",
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      ip   => "vm.[4].vnic.[1].ipinterface.[2]",
                      mac  => "vm.[4].vnic.[1]",
                   },
               ],
            },
            'PlaceVM4Vnic2OnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[4]",
               vnic => {
                  '[2]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            "ArpPingVM4Vnic2" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[4].vnic.[2]",
               SupportAdapter   => "vm.[8].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            'VerifyVirtualWire2VMsVnic2ArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[4].vnic.[2]",
                      mac  => "vm.[4].vnic.[2]",
                   },
               ],
            },
            'VerifyVirtualWire2VMsVnic2MacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[4].vnic.[2]",
                   },
               ],
            },
            "ArpPingVM4Vnic1To2" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[4].vnic.[1]",
               SupportAdapter   => "vm.[4].vnic.[2]",
               TestDuration     => "5",
               connectivitytest => "0",
               ExpectedResult   => "Fail",
            },
         },
      },
      'ShutdownDeployControllerHost' => {
         TestName         => 'ShutdownDeployControllerHost',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the scenario when the whole Controller'.
                             ' cluster goes down and comes back up',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2',

         'TestbedSpec' => Functional_Topology_15,
         'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire1'],
               ['PlaceVMsOnVirtualWire1'],
               ['PoweronVM1','PoweronVM2','PoweronVM3'],
               ['NetperfTestVirtualWire1Unicat'],
               ['CheckVirtualWire1MacEntryOnHost2','CheckVirtualWire1MacEntryOnHost3',
                'CheckVirtualWire1MacEntryOnHost4'],
               ['CheckVirtualWire1MTEPOnHost'],
               ['RebootControllerHost'],
               # Add check arp entry on controller to make sure
               # controller is up after host reboot
               ['ArpPingVM1','ArpPingVM3'],
               ['VerifyVirtualWire1VMsArpEntryOnControllers'],
               ['NetperfTestVirtualWire1Unicat'],
               ['CheckVirtualWire1MacEntryOnHost2','CheckVirtualWire1MacEntryOnHost3',
                'CheckVirtualWire1MacEntryOnHost4'],
               ['CheckVirtualWire1MTEPOnHost'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver            => VXLAN_VNIC_DRIVER,
                     portgroup         => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected         => 1,
                     startconnected    => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            'CheckVirtualWire1MTEPOnHost' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[1]",
               checkmteponhost => 'host.[2-4]',
            },
            'CheckVirtualWire1MacEntryOnHost2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               host         => 'host.[2]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     mac  => "vm.[3].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire1MacEntryOnHost3' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               host         => 'host.[3]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[1].vnic.[1]",
                  },
                  {
                     mac  => "vm.[3].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire1MacEntryOnHost4' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               host         => 'host.[4]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     mac  => "vm.[1].vnic.[1]",
                  },
               ],
            },
            'RebootControllerHost' => {
                Type           => "Host",
                TestHost       => "host.[1]",
                reboot         => "yes",
            },
            "ArpPingVM1" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[1-2].vnic.[1]",
               SupportAdapter   => "vm.[3].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
               sleepbetweenworkloads => "300",#waiting for controller up
            },
            "ArpPingVM3" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[3].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
               sleepbetweenworkloads => "300",#waiting for controller up
            },
            'VerifyVirtualWire1VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[1].vnic.[1]",
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      ip   => "vm.[2].vnic.[1]",
                      mac  => "vm.[2].vnic.[1]",
                   },
               ],
               noofretries  => "5",
            },
         },
      },
      'DuplicateVMIP' => {
         TestName         => 'DuplicateVMIP',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the scenario where the VTEPs have VMs'.
                             ' having the same IP address.',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2',

         'TestbedSpec' => Functional_Topology_15,
         'WORKLOADS' => {
            Sequence => [
                ['CreateVirtualWire1'],
                ['PlaceVMsOnVirtualWire1'],
                ['PoweronVM1','PoweronVM2','PoweronVM3'],
                ['PoweronVM4'],
                ['SetIPv4VM1Vnic1','SetIPv4VM2Vnic1',
                 'SetIPv4VM3Vnic1','SetIPv4VM4Vnic1'],
                ['NetperfTestVirtualWire1Unicat_1'],
                ['CheckVirtualWire1MacEntryOnHost2','CheckVirtualWire1MacEntryOnHost3',
                'CheckVirtualWire1MacEntryOnHost4'],
                ['CheckVirtualWire1MTEPOnHost'],
                ['SetIVM1Vnic1EqualToVM2Vnic1'],
                ['NetperfTestVirtualWire1Unicat_2'],
                ['ArpPingDADHasDuplicate'],
                ['ArpPingVM1ToVM4'],
                ['VerifyVM1ArpEntryOnControllers','VerifyVM2ArpEntryNotOnControllers'],
                ['ArpPingVM2ToVM3'],
                ['VerifyVM2ArpEntryOnControllers','VerifyVM1ArpEntryNotOnControllers'],
                ['SetIPv4VM1Vnic1'],
                ['NetperfTestVirtualWire1Unicat_1'],
                ['CheckVirtualWire1MacEntryOnHost2','CheckVirtualWire1MacEntryOnHost3',
                'CheckVirtualWire1MacEntryOnHost4'],
                ['CheckVirtualWire1MTEPOnHost'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-4]",
               vnic => {
                  '[1]'   => {
                     driver            => VXLAN_VNIC_DRIVER,
                     portgroup         => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected         => 1,
                     startconnected    => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            "NetperfTestVirtualWire1Unicat_1" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1-2].vnic.[1]",
               SupportAdapter => "vm.[3-4].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Unicat_2" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[3].vnic.[1]",
               SupportAdapter => "vm.[4].vnic.[1]",
               TestDuration   => "60",
            },
            "ArpPingDADHasDuplicate" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               arpprobe         => "DAD",
               TestDuration     => "3",
               connectivitytest => "0",
               sleepbetweenworkloads => "15",
            },
            "ArpPingVM1ToVM4" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[1].vnic.[1]",
               SupportAdapter   => "vm.[4].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            'VerifyVM1ArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[1].vnic.[1]",
                      mac  => "vm.[1].vnic.[1]",
                   },
               ],
            },
            'VerifyVM2ArpEntryNotOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]not_contains" => [
                   {
                      ip   => "vm.[2].vnic.[1]",
                      mac  => "vm.[2].vnic.[1]",
                   },
               ],
            },
            "ArpPingVM2ToVM3" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[3].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            'VerifyVM2ArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[2].vnic.[1]",
                      mac  => "vm.[2].vnic.[1]",
                   },
               ],
            },
            'VerifyVM1ArpEntryNotOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]not_contains" => [
                   {
                      ip   => "vm.[1].vnic.[1]",
                      mac  => "vm.[1].vnic.[1]",
                   },
               ],
            },
            'CheckVirtualWire1MTEPOnHost' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[1]",
               checkmteponhost => 'host.[2-4]',
            },
            'CheckVirtualWire1MacEntryOnHost2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               host         => 'host.[2]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     mac  => "vm.[3].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire1MacEntryOnHost3' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               host         => 'host.[3]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[1].vnic.[1]",
                  },
                  {
                     mac  => "vm.[3].vnic.[1]",
                  },
                  {
                     mac  => "vm.[4].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire1MacEntryOnHost4' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               host         => 'host.[4]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     mac  => "vm.[1].vnic.[1]",
                  },
                  {
                     mac  => "vm.[4].vnic.[1]",
                  },
               ],
            },
            "SetIPv4VM1Vnic1" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               IPv4           => "192.111.1.1",
               netmask        => "255.255.0.0",
            },
            "SetIPv4VM2Vnic1" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[2].vnic.[1]",
               IPv4           => "192.111.2.1",
               netmask        => "255.255.0.0",
            },
            "SetIPv4VM3Vnic1" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[3].vnic.[1]",
               IPv4           => "192.111.3.1",
               netmask        => "255.255.0.0",
            },
            "SetIPv4VM4Vnic1" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[4].vnic.[1]",
               IPv4           => "192.111.4.1",
               netmask        => "255.255.0.0",
            },
            "SetIVM1Vnic1EqualToVM2Vnic1" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               IPv4           => "192.111.2.1",
               netmask        => "255.255.0.0",
            },
         },
      },
      'GuestVlan' => {
         TestName         => 'GuestVlan',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify vxlan support guest vlan ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire1'],
               ['CreateVirtualWire2'],
               ['PlaceVMsOnVirtualWire1'],
               ['PlaceVMsOnVirtualWire2'],
               ['PoweronVM1','PoweronVM2'],
               ['PoweronVM4','PoweronVM5'],
               ['PoweronVM7','PoweronVM8'],
               ['SetVLANVM4VM5'],
               ['IperfTestVirtualWire1Unicat'],
               ['NetperfTestVirtualWire2VlanUnicat'],
               ['IperfTestVirtualWire2Unicat'],
               ['IperfTestVirtualWire1Multicast'],
               ['IperfTestVirtualWire2VlanMulticast'],
               ['IperfTestVirtualWire2Multicast'],
               ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteAllVirtualWires']
               ],

            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "MULTICAST_MODE",
                  },
               },
            },
            'CreateVirtualWire2' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[2]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                     guestvlanallowed   => 'true',
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-2]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-5],vm.[7-8]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'SetVLANVM4VM5' => {
               'Type' => 'NetAdapter',
               'TestAdapter' => 'vm.[4-5].vnic.[1]',
               'vlaninterface' => {
                  '[1]' => {
                     'vlanid' => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_E,
                  },
               },
            },
            "IperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2VlanUnicat" => {
               Type           => "Traffic",
               toolName       => "netperf",
               L4Protocol     => "udp,tcp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[4].vnic.[1].vlaninterface.[1]",
               SupportAdapter => "vm.[5].vnic.[1].vlaninterface.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv6",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire2VlanMulticast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",,
               L3Protocol     => "ipv4,ipv6",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[4].vnic.[1].vlaninterface.[1]",
               SupportAdapter => "vm.[5].vnic.[1].vlaninterface.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire2Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8].vnic.[1]",
               TestDuration   => "60",
            },
         },
      },
      'RebootVC' => {
         TestName         => 'RebootVC',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the scenario during and after' .
                             'VC is rebooted',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,
         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
                ['CreateVirtualWire1'],
                ['PlaceVMsOnVirtualWire1'],
                ['PoweronVM1','PoweronVM2','PoweronVM3'],
                ['RestartVC','NetperfTestVirtualWire1Unicat'],
                ['CreateVirtualWire23'],
                ['PlaceVMsOnVirtualWire2'],
                ['PlaceVMsOnVirtualWire3'],
                ['PoweronVM4','PoweronVM5','PoweronVM6'],
                ['PoweronVM7','PoweronVM8','PoweronVM9'],
                ['NetperfTestVirtualWire2Unicat'],
                ['NetperfTestVirtualWire3Unicat'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM6Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteVM9Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,

            'CreateVirtualWire1' =>  {
                  Type  => "TransportZone",
                  TestTransportZone => "vsm.[1].networkscope.[1]",
                  VirtualWire       => {
                  "[1]" => {
                     name        => "AutoGenerate",
                     tenantid    => "AutoGenerate",
                     controlplanemode => "MULTICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolName       => "netperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "300",
            },
            'RestartVC' => {
               Type      => "VC",
               TestVC    => "vc.[1]",
               operation => "restart",
               services  => "vpxd",
               sleepbetweenworkloads => '150',
            },
            'CreateVirtualWire23' =>  {
                  Type  => "TransportZone",
                  TestTransportZone => "vsm.[1].networkscope.[1]",
                  VirtualWire       => {
                  "[2]" => {
                     name        => "AutoGenerate",
                     tenantid    => "AutoGenerate",
                     controlplanemode => "UNICAST_MODE",
                  },
                  "[3]" => {
                     name        => "AutoGenerate",
                     tenantid    => "AutoGenerate",
                     controlplanemode => "HYBRID_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolname       => "netperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "5",
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "netperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "5",
            },
         },
      },
      'DeleteControllerInfoFile' => {
         TestName         => 'DeleteControllerInfoFile',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'Delete controller Info file on host ' .
                             'This file shoud be sync again after delete ' .
                             'or add new controller',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
              ['CreateVirtualWire1'],
              ['PlaceVMsOnVirtualWire1'],
              ['PoweronVM1','PoweronVM2'],
              ['NetperfTestVirtualWire1Unicat'],
              ['NetperfTestVirtualWire1Multicast'],
              ['SetControllerSSLToFalse'],
              ['CheckController1SSLFalseOnHost'],
              ['CheckController2SSLFalseOnHost'],
              ['CheckController3SSLFalseOnHost'],
              ['NetperfTestVirtualWire1Unicat'],
              ['NetperfTestVirtualWire1Multicast'],
              ['RemoveControllerInfoFileOnHost'],
              ['CheckController1SSLFalseOnHostFail'],
              ['CheckController2SSLFalseOnHostFail'],
              ['CheckController3SSLFalseOnHostFail'],
              ['DeleteController1','NetperfTestVirtualWire1Unicat'],
              ['SetControllerSSLToTrue'],
              ['CheckController2SSLTrueOnHost'],
              ['CheckController3SSLTrueOnHost'],
              ['NetperfTestVirtualWire1Unicat'],
              ['NetperfTestVirtualWire1Multicast'],
              ['Deploy_Controller1'],
              ['SetControllerSSLToFalse'],
              ['CheckController1SSLFalseOnHost'],
              ['CheckController2SSLFalseOnHost'],
              ['CheckController3SSLFalseOnHost'],
              ['NetperfTestVirtualWire1Unicat'],
              ['NetperfTestVirtualWire1Multicast'],
           ],
            ExitSequence => [
               ['PoweroffVM'],
               ['DeleteVM1Vnic1'],
               ['DeleteVM2Vnic1'],
               ['DeleteAllVirtualWires'],
            ],

            'Deploy_Controller1' => DEPLOY_FIRST_CONTROLLER,
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1],vm.[2]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "60",
            },
            'SetControllerSSLToFalse' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[1]",
               sslenabled => "false",
               sleepbetweenworkloads => "15",
            },
            'CheckController1SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[1]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'CheckController2SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[2]",
                  },
               ],
            },
            'CheckController3SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[3]",
                  },
               ],
            },
            'SetControllerSSLToTrue' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[2]",
               sslenabled => "true",
               sleepbetweenworkloads => "15",
            },
            'CheckController2SSLTrueOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "true",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[2]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'CheckController3SSLTrueOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "true",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[3]",
                  },
               ],
            },
            "DeleteController1"   => {
               Type       => 'NSX',
               TestNSX    => "vsm.[1]",
               deletevxlancontroller => "vsm.[1].vxlancontroller.[1]",
            },
            "RemoveControllerInfoFileOnHost"   => {
               Type       => 'Host',
               testhost   => "host.[2-3]",
               removecontrollerinfofile => VDNetLib::TestData::TestConstants::CONTROLLER_INFO_FILE,
            },
            'CheckController1SSLFalseOnHostFail' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[1]",
                  },
               ],
               sleepbetweenworkloads => "10",
               ExpectedResult => "Fail",
            },
            'CheckController2SSLFalseOnHostFail' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[2]",
                  },
               ],
               ExpectedResult => "Fail",
            },
            'CheckController3SSLFalseOnHostFail' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[3]",
                  },
               ],
               ExpectedResult => "Fail",
            },
         },
      },
      'RebootHostAndCheckConnectionOnController' => {
         TestName         => 'RebootHostAndCheckConnectionOnController',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the scenario when a Host comes down'.
                             ' and comes back up',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2',

         'TestbedSpec' => Functional_Topology_15,
         'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire1'],
               ['PlaceVMsOnVirtualWire1'],
               ['PoweronVM1','PoweronVM2','PoweronVM3'],
               ['NetperfTestVirtualWire1Unicat'],
               ['VerifyVirtualWireConnectionTableOnControllers2'],
               ['VerifyVirtualWireVtepTableOnControllers2'],
               ['RebootHost2'],
               ['PoweronVM1'],
               ['VerifyVirtualWireConnectionTableOnControllers2'],
               ['VerifyVirtualWireVtepTableOnControllers2'],
               ['NetperfTestVirtualWire1Unicat'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver            => VXLAN_VNIC_DRIVER,
                     portgroup         => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected         => 1,
                     startconnected    => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "netperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            'RebootHost2' => {
                Type           => "Host",
                TestHost       => "host.[2]",
                reboot         => "yes",
            },
            'VerifyVirtualWireConnectionTableOnControllers2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyConnectionTableOnController[?]contains" => [
                   {
                      hostip  => "host.[2]",
                   },
               ],
            },
            'VerifyVirtualWireVtepTableOnControllers2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVtepTableOnController[?]contains" => [
                   {
                      vtepip  => "host.[2]",
                      cluster => "vc.[1].datacenter.[1].cluster.[2]",
                   },
               ],
            },
         },
      },
      'NoController' => {
         TestName         => 'NoController',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify VXLAN work as 5.1 model if no ' .
                             'controller deploy ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_16,
          'WORKLOADS' => {
            Sequence => [
                ['CreateVirtualWireMulticast'],
                ['CreateVirtualWireUnicastFail'],
                ['CreateVirtualWireHybridFail'],
                ['PlaceVMsOnVirtualWire1'],
                ['PoweronVM1','PoweronVM2'],
                ['IperfTestVirtualWire1'],
                ['IperfTestVirtualWire1Multicast'],
                ['UpgradeVDS'],
                ['IperfTestVirtualWire1'],
                ['IperfTestVirtualWire1Multicast'],
               ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteAllVirtualWires'],
            ],

            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'CreateVirtualWireMulticast' => CREATE_VIRTUALWIRE_MULTICAST,
            'CreateVirtualWireUnicastFail' => {
               Type              => "TransportZone",
               TestTransportZone => "vsm.[1].networkscope.[1]",
               VirtualWire       => {
                  "[2]" => {
                     name        => "AutoGenerate",
                     tenantid    => "AutoGenerate",
                     controlplanemode => "UNICAST_MODE",
                  },
               },
               expectedresult => "Fail",
            },
            'CreateVirtualWireHybridFail' => {
               Type              => "TransportZone",
               TestTransportZone => "vsm.[1].networkscope.[1]",
               VirtualWire       => {
                  "[3]" => {
                     name        => "AutoGenerate",
                     tenantid    => "AutoGenerate",
                     controlplanemode => "HYBRID_MODE",
                  },
               },
               expectedresult => "Fail",
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-2]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            "IperfTestVirtualWire1" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4,ipv6",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2].vnic.[1]",
               TestDuration   => "60",
            },
            'UpgradeVDS' => {
               'Type' => 'Switch',
               'TestSwitch' => 'vc.[1].vds.[1-2]',
               'upgradevds' => '5.5.0',
            },
         },
      },
      'VMIPAddressOverLap' => {
         TestName         => 'VMIPAddressOverLap',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify that VM IP address overlap' .
                             'in different logical switch',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
              ['CreateVirtualWire'],
              ['PlaceVMsOnVirtualWire1'],
              ['PlaceVMsOnVirtualWire2'],
              ['PlaceVMsOnVirtualWire3'],
              ['PoweronVM1','PoweronVM2','PoweronVM3'],
              ['PoweronVM4','PoweronVM5','PoweronVM6'],
              ['PoweronVM7','PoweronVM8','PoweronVM9'],
              ['SetDuplicateIPForVM4VM7'],
              ['SetDuplicateIPForVM5VM8'],
              ['SetDuplicateIPForVM6VM9'],
              ['NetperfTestVirtualWire1Unicat'],
              ['NetperfTestVirtualWire2Unicat'],
              ['ArpPingVM4', 'ArpPingVM56'],
              ['VerifyVirtualWire2VMsArpEntryOnControllers',
              'VerifyVirtualWire2VMsMacEntryOnControllers'],
              ['NetperfTestVirtualWire3Unicat'],
              ['ArpPingVM7', 'ArpPingVM89'],
              ['VerifyVirtualWire3VMsArpEntryOnControllers',
               'VerifyVirtualWire3VMsMacEntryOnControllers'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM6Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteVM9Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,
            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9],",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,

           'SetDuplicateIPForVM4VM7' => {
              'Type' => 'NetAdapter',
              'TestAdapter' => 'vm.[4].vnic.[1],vm.[7].vnic.[1]',
              'ipv4' => VDNetLib::TestData::TestConstants::VXLAN_VM_STATIC_IP_1,
           },
           'SetDuplicateIPForVM5VM8' => {
              'Type' => 'NetAdapter',
              'TestAdapter' => 'vm.[5].vnic.[1],vm.[8].vnic.[1]',
              'ipv4' => VDNetLib::TestData::TestConstants::VXLAN_VM_STATIC_IP_2,
           },
           'SetDuplicateIPForVM6VM9' => {
              'Type' => 'NetAdapter',
              'TestAdapter' => 'vm.[6].vnic.[1],vm.[9].vnic.[1]',
              'ipv4' => VDNetLib::TestData::TestConstants::VXLAN_VM_STATIC_IP_3,
           },
           "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolName       => "netperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
           },
           "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolName       => "netperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "netperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
            "ArpPingVM4" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[4].vnic.[1]",
               SupportAdapter   => "vm.[5-6].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM56" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[5-6].vnic.[1]",
               SupportAdapter   => "vm.[4].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM7" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[7].vnic.[1]",
               SupportAdapter   => "vm.[8-9].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM89" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[8-9].vnic.[1]",
               SupportAdapter   => "vm.[7].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            'VerifyVirtualWire2VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[4].vnic.[1]",
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      ip   => "vm.[5].vnic.[1]",
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      ip   => "vm.[6].vnic.[1]",
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire3VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[7].vnic.[1]",
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      ip   => "vm.[8].vnic.[1]",
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      ip   => "vm.[9].vnic.[1]",
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire2VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire3VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
            },
         },
      },
      'CheckNewAndDeletedVNIonController' => {
         TestName         => 'CheckNewAndDeletedVNIonController',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To Verify whether VSM updates the controller '.
                             ' cluster about of VNI as soon as they are ' .
                             ' added or deleted by VSM.',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2',

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
                ['CreateVirtualWire1'],
                ['PlaceVMsOnVirtualWire1'],
                ['PoweronVM1','PoweronVM2','PoweronVM3'],
                ['NetperfTestVirtualWire1'],
                ['ArpPingVM1','ArpPingVM23'],
                ['VerifyVirtualWire1VMsArpEntryOnControllers',
                'VerifyVirtualWire1VMsMacEntryOnControllers',
                'VerifyVirtualWire1ConnectionTableOnControllers',
                'VerifyVirtualWire1VtepTableOnControllers'],
                ['CreateVirtualWire2'],
                ['PlaceVMsOnVirtualWire2'],
                ['PoweronVM4','PoweronVM5','PoweronVM6'],
                ['NetperfTestVirtualWire2'],
                ['ArpPingVM4','ArpPingVM56'],
                ['VerifyVirtualWire2VMsArpEntryOnControllers',
                'VerifyVirtualWire2VMsMacEntryOnControllers',
                'VerifyVirtualWire2ConnectionTableOnControllers',
                'VerifyVirtualWire2VtepTableOnControllers',
                'VerifyVM123ArpEntryNotOnVirtualwire2Controller',
                'VerifyVM123MacEntryNotOnVirtualwire2Controller'],
                ['CreateVirtualWire3'],
                ['PlaceVMsOnVirtualWire3'],
                ['PoweronVM7','PoweronVM8','PoweronVM9'],
                ['NetperfTestVirtualWire3'],
                ['ArpPingVM7','ArpPingVM89'],
                ['VerifyVirtualWire3VMsArpEntryOnControllers',
                'VerifyVirtualWire3VMsMacEntryOnControllers',
                'VerifyVirtualWire3ConnectionTableOnControllers',
                'VerifyVirtualWire3VtepTableOnControllers',
                'VerifyVM123456ArpEntryNotOnVirtualwire3Controller',
                'VerifyVM123456MacEntryNotOnVirtualwire3Controller'],
            ],
            ExitSequence => [
                ['PowerOffAllVMs'],
                ['RemoveVM1FromVirtualWire1InExitSeq', 'RemoveVM2FromVirtualWire1InExitSeq',
                 'RemoveVM3FromVirtualWire1InExitSeq'],
                ['RemoveVM4FromVirtualWire2InExitSeq', 'RemoveVM5FromVirtualWire2InExitSeq',
                 'RemoveVM6FromVirtualWire2InExitSeq'],
                ['RemoveVM7FromVirtualWire3InExitSeq', 'RemoveVM8FromVirtualWire3InExitSeq',
                 'RemoveVM9FromVirtualWire3InExitSeq'],
                ['DeleteVirtualWire1InExitSeq'],
                ['DeleteVirtualWire23InExitSeq'],
                ['VerifyVirtualWire1NotExistOnControllers'],
                ['VerifyVirtualWire23NotExistOnControllers'],
            ],

            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'CreateVirtualWire2' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[2]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "HYBRID_MODE",
                  },
               },
            },
            'CreateVirtualWire3' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[3]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9],",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            'PowerOffAllVMs' => {
               Type => "VM",
               TestVM => "vm.[1-9]",
               vmstate  => "poweroff",
            },
            'RemoveVM1FromVirtualWire1InExitSeq' => DELETE_VM1_VNIC1_IN_EXIT_SEQ,
            'RemoveVM2FromVirtualWire1InExitSeq' => DELETE_VM2_VNIC1_IN_EXIT_SEQ,
            'RemoveVM3FromVirtualWire1InExitSeq' => DELETE_VM3_VNIC1_IN_EXIT_SEQ,
            'RemoveVM4FromVirtualWire2InExitSeq' => DELETE_VM4_VNIC1_IN_EXIT_SEQ,
            'RemoveVM5FromVirtualWire2InExitSeq' => DELETE_VM5_VNIC1_IN_EXIT_SEQ,
            'RemoveVM6FromVirtualWire2InExitSeq' => DELETE_VM6_VNIC1_IN_EXIT_SEQ,
            'RemoveVM7FromVirtualWire3InExitSeq' => DELETE_VM7_VNIC1_IN_EXIT_SEQ,
            'RemoveVM8FromVirtualWire3InExitSeq' => DELETE_VM8_VNIC1_IN_EXIT_SEQ,
            'RemoveVM9FromVirtualWire3InExitSeq' => DELETE_VM9_VNIC1_IN_EXIT_SEQ,
            "NetperfTestVirtualWire1" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
            "ArpPingVM1" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[1].vnic.[1]",
               SupportAdapter   => "vm.[2-3].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM23" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[2-3].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM4" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[4].vnic.[1]",
               SupportAdapter   => "vm.[5-6].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM56" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[5-6].vnic.[1]",
               SupportAdapter   => "vm.[4].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM7" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[7].vnic.[1]",
               SupportAdapter   => "vm.[8-9].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            "ArpPingVM89" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[8-9].vnic.[1]",
               SupportAdapter   => "vm.[7].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            'VerifyVirtualWire1VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[1].vnic.[1]",
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      ip   => "vm.[2].vnic.[1]",
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      ip   => "vm.[3].vnic.[1]",
                      mac  => "vm.[3].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire2VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[4].vnic.[1]",
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      ip   => "vm.[5].vnic.[1]",
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      ip   => "vm.[6].vnic.[1]",
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire3VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[7].vnic.[1]",
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      ip   => "vm.[8].vnic.[1]",
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      ip   => "vm.[9].vnic.[1]",
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire1VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      mac  => "vm.[3].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire2VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire3VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire1ConnectionTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyConnectionTableOnController[?]contain_once" => [
                   {
                      hostip  => "host.[2]",
                   },
                   {
                      hostip  => "host.[3]",
                   },
                   {
                      hostip  => "host.[4]",
                   },
               ],
            },
            'VerifyVirtualWire2ConnectionTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyConnectionTableOnController[?]contain_once" => [
                   {
                      hostip  => "host.[2]",
                   },
                   {
                      hostip  => "host.[3]",
                   },
                   {
                      hostip  => "host.[4]",
                   },
               ],
            },
            'VerifyVirtualWire3ConnectionTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyConnectionTableOnController[?]contain_once" => [
                   {
                      hostip  => "host.[2]",
                   },
                   {
                      hostip  => "host.[3]",
                   },
                   {
                      hostip  => "host.[4]",
                   },
               ],
            },
            'VerifyVirtualWire1VtepTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVtepTableOnController[?]contain_once" => [
                   {
                      vtepip  => "host.[2]",
                      cluster => "vc.[1].datacenter.[1].cluster.[2]",
                   },
                   {
                      vtepip  => "host.[3]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
                   {
                      vtepip  => "host.[4]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
               ],
            },
            'VerifyVirtualWire2VtepTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVtepTableOnController[?]contain_once" => [
                   {
                      vtepip  => "host.[2]",
                      cluster => "vc.[1].datacenter.[1].cluster.[2]",
                   },
                   {
                      vtepip  => "host.[3]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
                   {
                      vtepip  => "host.[4]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
               ],
            },
            'VerifyVirtualWire3VtepTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVtepTableOnController[?]contain_once" => [
                   {
                      vtepip  => "host.[2]",
                      cluster => "vc.[1].datacenter.[1].cluster.[2]",
                   },
                   {
                      vtepip  => "host.[3]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
                   {
                      vtepip  => "host.[4]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
               ],
            },
            'VerifyVM123ArpEntryNotOnVirtualwire2Controller' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]not_contains" => [
                   {
                      ip   => "vm.[1].vnic.[1]",
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      ip   => "vm.[2].vnic.[1]",
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      ip   => "vm.[3].vnic.[1]",
                      mac  => "vm.[3].vnic.[1]",
                   },
               ],
            },
            'VerifyVM123456ArpEntryNotOnVirtualwire3Controller' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]not_contains" => [
                   {
                      ip   => "vm.[1].vnic.[1]",
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      ip   => "vm.[2].vnic.[1]",
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      ip   => "vm.[3].vnic.[1]",
                      mac  => "vm.[3].vnic.[1]",
                   },
                   {
                      ip   => "vm.[4].vnic.[1]",
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      ip   => "vm.[5].vnic.[1]",
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      ip   => "vm.[6].vnic.[1]",
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
            },
            'VerifyVM123MacEntryNotOnVirtualwire2Controller' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]not_contains" => [
                   {
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      mac  => "vm.[3].vnic.[1]",
                   },
               ],
            },
            'VerifyVM123456MacEntryNotOnVirtualwire3Controller' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]not_contains" => [
                   {
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      mac  => "vm.[3].vnic.[1]",
                   },
                   {
                      mac  => "vm.[4].vnic.[1]",
                   },
                   {
                      mac  => "vm.[5].vnic.[1]",
                   },
                   {
                      mac  => "vm.[6].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire1NotExistOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVirtualWireOnController" => {
                  'vni[?]equal_to' => "NOT_EXIST",
               },
               sleepbetweenworkloads => '5',
               noofretries  => "3",
            },
            'VerifyVirtualWire23NotExistOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVirtualWireOnController" => {
                  'vni[?]equal_to' => "NOT_EXIST",
               },
               sleepbetweenworkloads => '5',
               noofretries  => "3",
            },
            'DeleteVirtualWire1InExitSeq' => {
               Type                  => "TransportZone",
               TestTransportZone     => "vsm.[1].networkscope.[1]",
               DeleteVirtualWire     => "vsm.[1].networkscope.[1].virtualwire.[1]",
               SkipPostProcess       => "1",
               ExpectedResult        => "ignore",
            },
            'DeleteVirtualWire23InExitSeq' => {
               Type                  => "TransportZone",
               TestTransportZone     => "vsm.[1].networkscope.[1]",
               DeleteVirtualWire     => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               SkipPostProcess       => "1",
               ExpectedResult        => "ignore",
            },
         },
      },
      'CheckControllerConnnectionOnHost' => {
         TestName         => 'CheckControllerConnnectionOnHost',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the scenarios list below: ' .
                             '1) whether netcpa establishes connections for VNI'.
                             ' with right controllers after the VNI-controller '.
                             ' mapping database is downloaded.'.
                             '2) the link between a host and the controller '.
                             ' goes down.',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
               ['Create3VirtualWires'],
               ['PlaceVMsOnVirtualWire1'],
               ['PlaceVMsOnVirtualWire2'],
               ['PlaceVMsOnVirtualWire3'],
               ['EnabledFirewallOnallHosts'],
               ['DisabledNetcpaServiceOnAllHost'],
               ['PoweronVM1','PoweronVM2','PoweronVM3'],
               ['PoweronVM4','PoweronVM5','PoweronVM6'],
               ['PoweronVM7','PoweronVM8','PoweronVM9'],
               ['IperfTestVirtualWire1'],
               ['CheckVirtualWireControllerInfo_Down'],
               ['IperfTestVirtualWire2UnicatFail'],
               ['EnabledNetcpaServiceOnAllHost'],
               ['CheckVirtualWireControllerInfo_UP'],
               ['IperfTestVirtualWire1'],
               ['IperfTestVirtualWire2'],
               ['IperfTestVirtualWire3'],
            ],
            ExitSequence => [
               ['DisabledFirewallOnAllHosts'],
               ['EnabledNetcpaServiceOnAllHost'],
               ['PoweroffVM'],
               ['DeleteVM1Vnic1'],
               ['DeleteVM2Vnic1'],
               ['DeleteVM3Vnic1'],
               ['DeleteVM4Vnic1'],
               ['DeleteVM5Vnic1'],
               ['DeleteVM6Vnic1'],
               ['DeleteVM7Vnic1'],
               ['DeleteVM8Vnic1'],
               ['DeleteVM9Vnic1'],
               ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,

            'Create3VirtualWires' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9],",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            "IperfTestVirtualWire1" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire2" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire3" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire2UnicatFail" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
               expectedresult => "Fail",
            },
            'CheckVirtualWireControllerInfo_UP' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               controllerstatusonhosts => 'up',
               hosts           => 'host.[2-4]',
               noofretries     => "10",
            },
            'CheckVirtualWireControllerInfo_Down' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               controllerstatusonhosts => 'down',
               hosts           => 'host.[2-4]',
               noofretries     => "10",
            },
            'EnabledFirewallOnallHosts' => {
               Type     => 'Host',
               TestHost => 'host.[2-4]',
               status   => 'enabled',
               firewall => 'setstatus'
            },
            'DisabledFirewallOnAllHosts' => {
              Type      => 'Host',
              TestHost  => 'host.[2-4]',
              status    => 'disabled',
              firewall  => 'setstatus'
            },
            'EnabledNetcpaServiceOnAllHost' => {
              Type        => 'Host',
              TestHost    => 'host.[2-4]',
              firewall    => 'setenabled',
              flag        => 'enabled',
              servicename => 'netCP'
            },
            'DisabledNetcpaServiceOnAllHost' => {
              Type        => 'Host',
              TestHost    => 'host.[2-4]',
              firewall    => 'setenabled',
              flag        => 'disabled',
              servicename => 'netCP'
            },
         },
      },
      'TSAM' => {
         TestName         => 'TSAM',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To test multicast group connectivity in a VXLAN' .
                             'virtual wire which include multicast and p2p',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
              ['CreateVirtualWire'],
              ['PlaceVMsOnVirtualWire1'],
              ['PlaceVMsOnVirtualWire2'],
              ['PlaceVMsOnVirtualWire3'],
              ['PoweronVM1','PoweronVM2','PoweronVM3'],
              ['PoweronVM4','PoweronVM5','PoweronVM6'],
              ['PoweronVM7','PoweronVM8','PoweronVM9'],
              ['TestMulticastConnectivity'],
              ['TestPingConnectivity'],
              ['NetperfTestVirtualWire1Unicat'],
              ['NetperfTestVirtualWire2Unicat'],
              ['NetperfTestVirtualWire3Unicat'],
           ],
           ExitSequence => [
              ['PoweroffVM'],
              ['DeleteVM1Vnic1'],
              ['DeleteVM2Vnic1'],
              ['DeleteVM3Vnic1'],
              ['DeleteVM4Vnic1'],
              ['DeleteVM5Vnic1'],
              ['DeleteVM6Vnic1'],
              ['DeleteVM7Vnic1'],
              ['DeleteVM8Vnic1'],
              ['DeleteVM9Vnic1'],
              ['DeleteAllVirtualWires'],
           ],
           'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
           'PoweroffVM' => POWEROFF_VM,
           'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
           'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
           'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
           'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
           'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
           'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
           'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
           'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
           'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,

           'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
           'PlaceVMsOnVirtualWire1' => {
              Type => "VM",
              TestVM => "vm.[1-3]",
              vnic => {
                 '[1]'   => {
                    driver     => VXLAN_VNIC_DRIVER,
                    portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                    connected => 1,
                    startconnected => 1,
                    allowguestcontrol => 1,
                 },
              },
           },
           'PlaceVMsOnVirtualWire2' => {
              Type => "VM",
              TestVM => "vm.[4-6]",
              vnic => {
                 '[1]'   => {
                    driver     => VXLAN_VNIC_DRIVER,
                    portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                    connected => 1,
                    startconnected => 1,
                    allowguestcontrol => 1,
                 },
              },
           },
           'PlaceVMsOnVirtualWire3' => {
              Type => "VM",
              TestVM => "vm.[7-9],",
              vnic => {
                 '[1]'   => {
                    driver     => VXLAN_VNIC_DRIVER,
                    portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                    connected => 1,
                    startconnected => 1,
                    allowguestcontrol => 1,
                 },
              },
           },
           'PoweronVM1' => POWERON_VM1,
           'PoweronVM2' => POWERON_VM2,
           'PoweronVM3' => POWERON_VM3,
           'PoweronVM4' => POWERON_VM4,
           'PoweronVM5' => POWERON_VM5,
           'PoweronVM6' => POWERON_VM6,
           'PoweronVM7' => POWERON_VM7,
           'PoweronVM8' => POWERON_VM8,
           'PoweronVM9' => POWERON_VM9,

           "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolName       => "netperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
           },
           "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolName       => "netperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "netperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
            'TestMulticastConnectivity' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               testgroupconnectivity  => VDNetLib::TestData::TestConstants::VXLAN_CONN_CHECK_MULTICAST,
               sourcehost => "host.[2]",
               destinationhost  => "host.[3]",
               sourceswitch => "vc.[1].vds.[1]",
               destinationswitch => "vc.[1].vds.[2]",
               packetsize => "1600",
               sourcevlanid => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_D,
               destinationvlanid => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_C,
            },
            'TestPingConnectivity' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1-3]",
               testgroupconnectivity  => VDNetLib::TestData::TestConstants::VXLAN_CONN_CHECK_PING,
               sourcehost => "host.[2]",
               destinationhost  => "host.[3]",
               sourceswitch => "vc.[1].vds.[1]",
               destinationswitch => "vc.[1].vds.[2]",
               packetsize => "1600",
               sourcevlanid => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_D,
               destinationvlanid => VDNetLib::Common::GlobalConfig::VDNET_VLAN_VDL2_C,
            },
         },
      },
      'DeleteOneAndAllController' => {
         TestName         => 'DeleteOneAndAllController',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the scenario where an existing ' .
                             'controller is deleted from the controller cluster',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
               ['Create3VirtualWires'],
               ['PlaceVMsOnVirtualWire1'],
               ['PlaceVMsOnVirtualWire2'],
               ['PlaceVMsOnVirtualWire3'],
               ['PoweronVM1','PoweronVM2','PoweronVM3'],
               ['PoweronVM4','PoweronVM5','PoweronVM6'],
               ['PoweronVM7','PoweronVM8','PoweronVM9'],
               ['IperfTestVirtualWire1','IperfTestVirtualWire2',
                'IperfTestVirtualWire3'],
               ['DeleteOneActiveController'],
               ['IperfTestVirtualWire1','IperfTestVirtualWire2',
                'IperfTestVirtualWire3'],
               ['DeleteAllControllers'],
               ['PowerOffVM456789'],
               ['PoweronVM4','PoweronVM5','PoweronVM6'],
               ['PoweronVM7','PoweronVM8','PoweronVM9'],
               ['IperfTestVirtualWire1','IperfTestVirtualWire2UnicatFail'],
               ['Deploy_Controller1'],
               ['Deploy_Controller2'],
               ['Deploy_Controller3'],

               #The Traffics workload named "IperfTestVirtualWire2" below
               #in Virtualwire2(Unicast mode) may failed due to PR-1097323
               ['IperfTestVirtualWire1','IperfTestVirtualWire2',
                'IperfTestVirtualWire3'],
            ],
           ExitSequence => [
               ['PoweroffVM'],
               ['DeleteVM1Vnic1'],
               ['DeleteVM2Vnic1'],
               ['DeleteVM3Vnic1'],
               ['DeleteVM4Vnic1'],
               ['DeleteVM5Vnic1'],
               ['DeleteVM6Vnic1'],
               ['DeleteVM7Vnic1'],
               ['DeleteVM8Vnic1'],
               ['DeleteVM9Vnic1'],
               ['DeleteAllVirtualWires'],
           ],

            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,

            'Create3VirtualWires' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            'Deploy_Controller1'  => {
               Type  => "NSX",
               testnsx  => "vsm.[1]",
               vxlancontroller  => {
                  '[1]' => {
                     name         => "AutoGenerate",
                     ippool       => "vsm.[1].ippool.[1]",
                     resourcepool  => "vc.[1].datacenter.[1].cluster.[1]",
                     host          => "host.[1]",
                     datastore     => "host.[1]",
                  },
               },
            },
            'Deploy_Controller2'  => {
               Type  => "NSX",
               testnsx  => "vsm.[1]",
               vxlancontroller  => {
                  '[2]' => {
                     name         => "AutoGenerate",
                     ippool       => "vsm.[1].ippool.[1]",
                     resourcepool  => "vc.[1].datacenter.[1].cluster.[1]",
                     host          => "host.[1]",
                     datastore     => "host.[1]",
                  },
               },
            },
            'Deploy_Controller3'  => {
               Type  => "NSX",
               testnsx  => "vsm.[1]",
               vxlancontroller  => {
                  '[3]' => {
                     name         => "AutoGenerate",
                     ippool       => "vsm.[1].ippool.[1]",
                     resourcepool  => "vc.[1].datacenter.[1].cluster.[1]",
                     host          => "host.[1]",
                     datastore     => "host.[1]",
                  },
               },
            },
            'PowerOffVM456789' => {
               Type => "VM",
               TestVM => "vm.[4-9]",
               vmstate  => "poweroff",
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9],",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            "IperfTestVirtualWire1" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire2" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire3" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire2UnicatFail" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
               expectedresult => "Fail",
            },
            "DeleteOneActiveController"   => {
               Type        => 'NSX',
               TestNSX     => "vsm.[1]",
               DeleteActiveController => "Y",
               controllers => "vsm.[1].vxlancontroller.[-1]",
               switches    => "vsm.[1].networkscope.[1].virtualwire.[2]",
            },
            "DeleteAllControllers"   => {
               Type       => 'NSX',
               TestNSX    => "vsm.[1]",
               deletevxlancontroller => "vsm.[1].vxlancontroller.[-1]",
            },
         },
      },
      'DuplicateVMMAC' => {
         TestName         => 'DuplicateVMMAC',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To test the scenario where VTEPs have VMs ' .
                             'having the same mac addresses in the same VNI.' .
                             'To get a full verification for an VNI related' .
                             'information on ESX host side and controller side',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire'],
               ['PlaceVMsOnVirtualWire2'],
               ['PlaceVMsOnVirtualWire3'],
               ['PoweronVM1','PoweronVM2','PoweronVM3','PoweronVM4'],
               ['PoweronVM7','PoweronVM8','PoweronVM9'],
               ['IperfTestVirtualWire2Unicat'],
               ['IperfTestVirtualWire3Unicat'],
               # step 1, verify ARP/MAC/VTEP/Connection table on all controllers
               ['ArpPingVM1','ArpPingVM2','ArpPingVM3','ArpPingVM4'],
               ['VerifyVirtualWire2VMsArpEntryOnControllers',
                'VerifyVirtualWire2VMsMacEntryOnControllers'],
               ['ArpPingVM7','ArpPingVM8','ArpPingVM9'],
               ['VerifyVirtualWire3VMsArpEntryOnControllers',
                'VerifyVirtualWire3VMsMacEntryOnControllers'],
               ['VerifyVirtualWireVtepTableOnControllers',
                'VerifyVirtualWireConnectionTableOnControllers'],
               # step 2, verify ARP/MAC/VTEP/Connection table on all hosts
               ['ClearArpEntryForVirtualWire2OnAllHosts'],
               # use "ArpPingVM1234_FAIL" to update the ARP-table records
               # on controller for VM-1/2/3/4
               ['ArpPingVM1234_FAIL'],
               ['ArpPingVM1','ArpPingVM2','ArpPingVM3','ArpPingVM4'],
               ['CheckVirtualWire2ArpEntryOnHost2',
                'CheckVirtualWire2ArpEntryOnHost3',
                'CheckVirtualWire2ArpEntryOnHost4'],
               ['CheckVirtualWire2MacEntryOnHost2',
                'CheckVirtualWire2MacEntryOnHost3',
                'CheckVirtualWire2MacEntryOnHost4'],
               ['ClearArpEntryForVirtualWire3OnAllHosts'],
               # use "ArpPingVM789_FAIL" to update the ARP-table records
               # on controller for VM-7/8/9
               ['ArpPingVM789_FAIL'],
               ['ArpPingVM7','ArpPingVM8','ArpPingVM9'],
               ['CheckVirtualWire3ArpEntryOnHost2',
                'CheckVirtualWire3ArpEntryOnHost3',
                'CheckVirtualWire3ArpEntryOnHost4'],
               ['CheckVirtualWire3MacEntryOnHost2',
                'CheckVirtualWire3MacEntryOnHost3',
                'CheckVirtualWire3MacEntryOnHost4'],
               ['CheckVirtualWire23ControllerInfo'],
               ['CheckVirtualWire23MTEPOnAllHost'],
               # step 3, Change vm1's mac address to the same as vm4's and
               #         the verify related traffics as below:
               #         1) vm1 and vm4's MAC should be updated to controller
               #         2) traffics should still works
               ['SetVDS12MacAddressChangeSecurityPolicyAccept2'],
               ['SetVDS12ForgedTransmitChangeSecurityPolicyAccept2'],
               ['ChangeVM1AndVM4Vnic1MacAddressTothesame'],
               ['VerifyVirtualWire2VMsMacEntryOnControllers'],
               ['IperfTestVirtualWire2Unicat'],
               ['ChangeVM1Vnic1MacAddress','ChangeVM4Vnic1MacAddress'],
               ['DownUpVM1234Vnic1'],
               ['IperfTestVirtualWire2Unicat'],
               # step 4, Change vm7 and vm8's MAC address to the same,and
               #         verify whether vm7 & vm8's MAC is updated to controller
               ['SetVDS12MacAddressChangeSecurityPolicyAccept3'],
               ['SetVDS12ForgedTransmitChangeSecurityPolicyAccept3'],
               ['ChangeVM7AndVM8Vnic1MacAddressTothesame'],
               ['VerifyVirtualWire3VMsMacEntryOnControllers'],
               ['ChangeVM7Vnic1MacAddress','ChangeVM8Vnic1MacAddress'],
               ['DownUpVM789Vnic1'],
               ['IperfTestVirtualWire3Unicat'],
               # step 5, Re-verify ARP/MAC/VTEP/Connection table on all
               #         controllers after everything returned to normal
               ['ArpPingVM1','ArpPingVM2','ArpPingVM3','ArpPingVM4'],
               ['VerifyVirtualWire2VMsArpEntryOnControllers',
                'VerifyVirtualWire2VMsMacEntryOnControllers'],
               ['ArpPingVM7','ArpPingVM8','ArpPingVM9'],
               ['VerifyVirtualWire3VMsArpEntryOnControllers',
                'VerifyVirtualWire3VMsMacEntryOnControllers'],
               ['VerifyVirtualWireVtepTableOnControllers',
                'VerifyVirtualWireConnectionTableOnControllers'],
               # step 6, Re-verify ARP/MAC/VTEP/Connection table on all hosts
               #         after everything returned to normal
               ['ClearArpEntryForVirtualWire2OnAllHosts'],
               ['ArpPingVM1234_FAIL'],
               ['ArpPingVM1','ArpPingVM2','ArpPingVM3','ArpPingVM4'],
               ['CheckVirtualWire2ArpEntryOnHost2',
                'CheckVirtualWire2ArpEntryOnHost3',
                'CheckVirtualWire2ArpEntryOnHost4'],
               ['CheckVirtualWire2MacEntryOnHost2',
                'CheckVirtualWire2MacEntryOnHost3',
                'CheckVirtualWire2MacEntryOnHost4'],
               ['ClearArpEntryForVirtualWire3OnAllHosts'],
               ['ArpPingVM789_FAIL'],
               ['ArpPingVM7','ArpPingVM8','ArpPingVM9'],
               ['CheckVirtualWire3ArpEntryOnHost2',
                'CheckVirtualWire3ArpEntryOnHost3',
                'CheckVirtualWire3ArpEntryOnHost4'],
               ['CheckVirtualWire3MacEntryOnHost2',
                'CheckVirtualWire3MacEntryOnHost3',
                'CheckVirtualWire3MacEntryOnHost4'],
               ['CheckVirtualWire23ControllerInfo'],
               ['CheckVirtualWire23MTEPOnAllHost'],
            ],
            ExitSequence => [
               ['PoweroffVM'],
               ['DeleteVM1Vnic1'],
               ['DeleteVM2Vnic1'],
               ['DeleteVM3Vnic1'],
               ['DeleteVM4Vnic1'],
               ['DeleteVM7Vnic1'],
               ['DeleteVM8Vnic1'],
               ['DeleteVM9Vnic1'],
               ['DeleteAllVirtualWires'],
            ],
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,
            'CreateVirtualWire'     => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'Deploy_Controller2' => DEPLOY_SECOND_CONTROLLER,
            'Deploy_Controller3' => DEPLOY_THIRD_CONTROLLER,
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[1-4]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            "DownUpVM1234Vnic1" => {
               Type            => "NetAdapter",
               TestAdapter     => "vm.[1-4].vnic.[1]",
               devicestatus    => "down,up",
            },
            "DownUpVM789Vnic1" => {
               Type            => "NetAdapter",
               TestAdapter     => "vm.[7-9].vnic.[1]",
               devicestatus    => "down,up",
            },
            "ArpPingVM1234_FAIL" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[1-4].vnic.[1]",
               SupportAdapter   => "vm.[7].vnic.[1]",
               TestDuration     => "10",
               ExpectedResult   => "Fail",
               connectivitytest => "0",
            },
            "ArpPingVM1" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[1].vnic.[1]",
               SupportAdapter   => "vm.[2-4].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM2" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1],vm.[3].vnic.[1],vm.[4].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM3" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[3].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1],vm.[2].vnic.[1],vm.[4].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM4" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[4].vnic.[1]",
               SupportAdapter   => "vm.[1-3].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM789_FAIL" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[7-9].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
               ExpectedResult   => "Fail",
            },
            "ArpPingVM7" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[7].vnic.[1]",
               SupportAdapter   => "vm.[8-9].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM8" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[8].vnic.[1]",
               SupportAdapter   => "vm.[7].vnic.[1],vm.[9].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM9" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[9].vnic.[1]",
               SupportAdapter   => "vm.[7-8].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            'VerifyVirtualWire2VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[1].vnic.[1]",
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      ip   => "vm.[2].vnic.[1]",
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      ip   => "vm.[3].vnic.[1]",
                      mac  => "vm.[3].vnic.[1]",
                   },
                   {
                      ip   => "vm.[4].vnic.[1]",
                      mac  => "vm.[4].vnic.[1]",
                   },
               ],
               noofretries  => "3",
            },
            'VerifyVirtualWire3VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[7].vnic.[1]",
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      ip   => "vm.[8].vnic.[1]",
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      ip   => "vm.[9].vnic.[1]",
                      mac  => "vm.[9].vnic.[1]",
                   }
               ],
               noofretries  => "3",
            },
            'VerifyVirtualWire2VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      mac  => "vm.[3].vnic.[1]",
                   },
                   {
                      mac  => "vm.[4].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire3VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
               noofretries  => "3",
            },
            'VerifyVirtualWireVtepTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVtepTableOnController[?]contain_once" => [
                   {
                      vtepip  => "host.[2]",
                      cluster => "vc.[1].datacenter.[1].cluster.[2]",
                   },
                   {
                      vtepip  => "host.[3]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
                   {
                      vtepip  => "host.[4]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
               ],
               noofretries  => "5",
            },
            'VerifyVirtualWireConnectionTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyConnectionTableOnController[?]contains" => [
                   {
                      hostip  => "host.[2]",
                   },
                   {
                      hostip  => "host.[3]",
                   },
                   {
                      hostip  => "host.[4]",
                   },
               ],
            },
            'SetVDS12MacAddressChangeSecurityPolicyAccept2' => {
              'Type'           => 'Switch',
              'TestSwitch'     => 'vc.[1].vds.[1-2]',
              'virtualwire'    => "vsm.[1].networkscope.[1].virtualwire.[2]",
              'policytype'     => "macChanges",
              'securitypolicy' => 'Enable'
            },
            'SetVDS12ForgedTransmitChangeSecurityPolicyAccept2' => {
              'Type'           => 'Switch',
              'TestSwitch'     => 'vc.[1].vds.[1-2]',
              'virtualwire'    => "vsm.[1].networkscope.[1].virtualwire.[2]",
              'policytype'     => "forgedTransmits",
              'securitypolicy' => 'Enable'
            },
            'SetVDS12MacAddressChangeSecurityPolicyAccept3' => {
              'Type'           => 'Switch',
              'TestSwitch'     => 'vc.[1].vds.[1-2]',
              'virtualwire'    => "vsm.[1].networkscope.[1].virtualwire.[3]",
              'policytype'     => "macChanges",
              'securitypolicy' => 'Enable'
            },
            'SetVDS12ForgedTransmitChangeSecurityPolicyAccept3' => {
              'Type'           => 'Switch',
              'TestSwitch'     => 'vc.[1].vds.[1-2]',
              'virtualwire'    => "vsm.[1].networkscope.[1].virtualwire.[3]",
              'policytype'     => "forgedTransmits",
              'securitypolicy' => 'Enable'
            },
            'ChangeVM1Vnic1MacAddress' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               setmacaddr     => '00:11:22:33:11:11',
            },
            'ChangeVM4Vnic1MacAddress' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[4].vnic.[1]",
               setmacaddr     => '00:11:22:33:44:44',
            },
            'ChangeVM1AndVM4Vnic1MacAddressTothesame' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1],vm.[4].vnic.[1]",
               setmacaddr     => '00:11:22:33:14:14',
            },
            'ChangeVM7Vnic1MacAddress' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[7].vnic.[1]",
               setmacaddr     => '00:11:22:33:44:77',
            },
            'ChangeVM8Vnic1MacAddress' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[8].vnic.[1]",
               setmacaddr     => '00:11:22:33:44:88',
            },
            'ChangeVM7AndVM8Vnic1MacAddressTothesame' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[7-8].vnic.[1]",
               setmacaddr     => '00:11:22:33:78:78',
            },
            "IperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[1-2].vnic.[1]",
               SupportAdapter => "vm.[3-4].vnic.[1]",
               TestDuration   => "30",
            },
            "IperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "30",
            },
            'CheckVirtualWire23ControllerInfo' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               controllerstatusonhosts => 'up',
               hosts           => 'host.[2-4]',
               noofretries     => "10",
            },
            'CheckVirtualWire23MTEPOnAllHost' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               checkmteponhost => 'host.[2-4]',
            },
            'CheckVirtualWire2ArpEntryOnHost2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[2]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[2].vnic.[1]",
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     ip   => "vm.[3].vnic.[1]",
                     mac  => "vm.[3].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire2ArpEntryOnHost3' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[3]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[1].vnic.[1]",
                     mac  => "vm.[1].vnic.[1]",
                  },
                  {
                     ip   => "vm.[3].vnic.[1]",
                     mac  => "vm.[3].vnic.[1]",
                  },
                  {
                     ip   => "vm.[4].vnic.[1]",
                     mac  => "vm.[4].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire2ArpEntryOnHost4' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[4]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[1].vnic.[1]",
                     mac  => "vm.[1].vnic.[1]",
                  },
                  {
                     ip   => "vm.[2].vnic.[1]",
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     ip   => "vm.[4].vnic.[1]",
                     mac  => "vm.[4].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire2MacEntryOnHost2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[2]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     mac  => "vm.[3].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire2MacEntryOnHost3' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[3]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[1].vnic.[1]",
                  },
                  {
                     mac  => "vm.[3].vnic.[1]",
                  },
                  {
                     mac  => "vm.[4].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire2MacEntryOnHost4' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[4]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[1].vnic.[1]",
                  },
                  {
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     mac  => "vm.[4].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3ArpEntryOnHost2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[2]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[8].vnic.[1]",
                     mac  => "vm.[8].vnic.[1]",
                  },
                  {
                     ip   => "vm.[9].vnic.[1]",
                     mac  => "vm.[9].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3ArpEntryOnHost3' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[3]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[7].vnic.[1]",
                     mac  => "vm.[7].vnic.[1]",
                  },
                  {
                     ip   => "vm.[9].vnic.[1]",
                     mac  => "vm.[9].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3ArpEntryOnHost4' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[4]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[7].vnic.[1]",
                     mac  => "vm.[7].vnic.[1]",
                  },
                  {
                     ip   => "vm.[8].vnic.[1]",
                     mac  => "vm.[8].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3MacEntryOnHost2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[2]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[8].vnic.[1]",
                  },
                  {
                     mac  => "vm.[9].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3MacEntryOnHost3' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[3]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[7].vnic.[1]",
                  },
                  {
                     mac  => "vm.[9].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3MacEntryOnHost4' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[4]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[7].vnic.[1]",
                  },
                  {
                     mac  => "vm.[8].vnic.[1]",
                  },
               ],
            },
            'ClearArpEntryForVirtualWire2OnAllHosts' => {
               Type       => "Switch",
               testswitch => "vsm.[1].networkscope.[1].virtualwire.[2]",
               clearvwireentryonhost => 'arp',
               hosts      => 'host.[2-4]',
            },
            'ClearArpEntryForVirtualWire3OnAllHosts' => {
               Type       => "Switch",
               testswitch => "vsm.[1].networkscope.[1].virtualwire.[3]",
               clearvwireentryonhost => 'arp',
               hosts      => 'host.[2-4]',
            },
         },
      },
      'VMMultipleOS' => {
         TestName         => 'VMMultipleOS',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the VTEP support mutiple different ' .
                             'Guest OS on host',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
               ['CreateVirtualWire'],
               ['PlaceVMsOnVirtualWire2'],
               ['PlaceVMsOnVirtualWire3'],
               ['PoweronVM1','PoweronVM2','PoweronVM3','PoweronVM4'],
               ['PoweronVM7','PoweronVM8','PoweronVM9'],
               ['IperfTestVirtualWire2Unicat'],
               ['IperfTestVirtualWire3Unicat'],
               # step 1, verify ARP/MAC/VTEP/Connection table on all controllers
               ['ArpPingVM1','ArpPingVM2','ArpPingVM3','ArpPingVM4'],
               ['VerifyVirtualWire2VMsArpEntryOnControllers',
                'VerifyVirtualWire2VMsMacEntryOnControllers'],
               ['ArpPingVM7','ArpPingVM8','ArpPingVM9'],
               ['VerifyVirtualWire3VMsArpEntryOnControllers',
                'VerifyVirtualWire3VMsMacEntryOnControllers'],
               ['VerifyVirtualWireVtepTableOnControllers',
                'VerifyVirtualWireConnectionTableOnControllers'],
               # step 2, verify ARP/MAC/VTEP/Connection table on all hosts
               ['ClearArpEntryForVirtualWire2OnAllHosts'],
               # use "ArpPingVM1234_FAIL" to update the ARP-table records
               # on controller for VM-1/2/3/4
               ['ArpPingVM1234_FAIL'],
               ['ArpPingVM1','ArpPingVM2','ArpPingVM3','ArpPingVM4'],
               ['CheckVirtualWire2ArpEntryOnHost2',
                'CheckVirtualWire2ArpEntryOnHost3',
                'CheckVirtualWire2ArpEntryOnHost4'],
               ['CheckVirtualWire2MacEntryOnHost2',
                'CheckVirtualWire2MacEntryOnHost3',
                'CheckVirtualWire2MacEntryOnHost4'],
               ['ClearArpEntryForVirtualWire3OnAllHosts'],
               # use "ArpPingVM789_FAIL" to update the ARP-table records
               # on controller for VM-7/8/9
               ['ArpPingVM789_FAIL'],
               ['ArpPingVM7','ArpPingVM8','ArpPingVM9'],
               ['CheckVirtualWire3ArpEntryOnHost2',
                'CheckVirtualWire3ArpEntryOnHost3',
                'CheckVirtualWire3ArpEntryOnHost4'],
               ['CheckVirtualWire3MacEntryOnHost2',
                'CheckVirtualWire3MacEntryOnHost3',
                'CheckVirtualWire3MacEntryOnHost4'],
               ['CheckVirtualWire23ControllerInfo'],
               ['CheckVirtualWire23MTEPOnAllHost'],
            ],
            ExitSequence => [
               ['PoweroffVM'],
               ['DeleteVM1Vnic1'],
               ['DeleteVM2Vnic1'],
               ['DeleteVM3Vnic1'],
               ['DeleteVM4Vnic1'],
               ['DeleteVM7Vnic1'],
               ['DeleteVM8Vnic1'],
               ['DeleteVM9Vnic1'],
               ['DeleteAllVirtualWires'],
            ],
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,
            'CreateVirtualWire'     => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'Deploy_Controller2' => DEPLOY_SECOND_CONTROLLER,
            'Deploy_Controller3' => DEPLOY_THIRD_CONTROLLER,
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[1-4]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            "ArpPingVM1234_FAIL" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[1-4].vnic.[1]",
               SupportAdapter   => "vm.[7].vnic.[1]",
               TestDuration     => "10",
               ExpectedResult   => "Fail",
               connectivitytest => "0",
            },
            "ArpPingVM1" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[1].vnic.[1]",
               SupportAdapter   => "vm.[2-4].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM2" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1],vm.[3-4].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM3" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[3].vnic.[1]",
               SupportAdapter   => "vm.[1-2].vnic.[1],vm.[4].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM4" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[4].vnic.[1]",
               SupportAdapter   => "vm.[1-3].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM789_FAIL" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[7-9].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
               ExpectedResult   => "Fail",
            },
            "ArpPingVM7" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[7].vnic.[1]",
               SupportAdapter   => "vm.[8-9].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM8" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[8].vnic.[1]",
               SupportAdapter   => "vm.[7].vnic.[1],vm.[9].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM9" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[9].vnic.[1]",
               SupportAdapter   => "vm.[7-8].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            'VerifyVirtualWire2VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[1].vnic.[1]",
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      ip   => "vm.[2].vnic.[1]",
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      ip   => "vm.[3].vnic.[1]",
                      mac  => "vm.[3].vnic.[1]",
                   },
                   {
                      ip   => "vm.[4].vnic.[1]",
                      mac  => "vm.[4].vnic.[1]",
                   },
               ],
               noofretries  => "3",
            },
            'VerifyVirtualWire3VMsArpEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[7].vnic.[1]",
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      ip   => "vm.[8].vnic.[1]",
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      ip   => "vm.[9].vnic.[1]",
                      mac  => "vm.[9].vnic.[1]",
                   }
               ],
               noofretries  => "3",
            },
            'VerifyVirtualWire2VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      mac  => "vm.[2].vnic.[1]",
                   },
                   {
                      mac  => "vm.[3].vnic.[1]",
                   },
                   {
                      mac  => "vm.[4].vnic.[1]",
                   },
               ],
            },
            'VerifyVirtualWire3VMsMacEntryOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyMacEntryOnController[?]contain_once" => [
                   {
                      mac  => "vm.[7].vnic.[1]",
                   },
                   {
                      mac  => "vm.[8].vnic.[1]",
                   },
                   {
                      mac  => "vm.[9].vnic.[1]",
                   },
               ],
               noofretries  => "3",
            },
            'VerifyVirtualWireVtepTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyVtepTableOnController[?]contain_once" => [
                   {
                      vtepip  => "host.[2]",
                      cluster => "vc.[1].datacenter.[1].cluster.[2]",
                   },
                   {
                      vtepip  => "host.[3]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
                   {
                      vtepip  => "host.[4]",
                      cluster => "vc.[1].datacenter.[1].cluster.[3]",
                   },
               ],
               noofretries  => "5",
            },
            'VerifyVirtualWireConnectionTableOnControllers' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyConnectionTableOnController[?]contains" => [
                   {
                      hostip  => "host.[2]",
                   },
                   {
                      hostip  => "host.[3]",
                   },
                   {
                      hostip  => "host.[4]",
                   },
               ],
            },
            "IperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[3-4].vnic.[1]",
               TestDuration   => "30",
            },
            "IperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "30",
            },
            'CheckVirtualWire23ControllerInfo' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               controllerstatusonhosts => 'up',
               hosts           => 'host.[2-4]',
               noofretries     => "10",
            },
            'CheckVirtualWire23MTEPOnAllHost' => {
               Type            => "Switch",
               TestSwitch      => "vsm.[1].networkscope.[1].virtualwire.[2-3]",
               checkmteponhost => 'host.[2-4]',
            },
            'CheckVirtualWire2ArpEntryOnHost2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[2]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[2].vnic.[1]",
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     ip   => "vm.[3].vnic.[1]",
                     mac  => "vm.[3].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire2ArpEntryOnHost3' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[3]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[1].vnic.[1]",
                     mac  => "vm.[1].vnic.[1]",
                  },
                  {
                     ip   => "vm.[3].vnic.[1]",
                     mac  => "vm.[3].vnic.[1]",
                  },
                  {
                     ip   => "vm.[4].vnic.[1]",
                     mac  => "vm.[4].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire2ArpEntryOnHost4' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[4]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[1].vnic.[1]",
                     mac  => "vm.[1].vnic.[1]",
                  },
                  {
                     ip   => "vm.[2].vnic.[1]",
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     ip   => "vm.[4].vnic.[1]",
                     mac  => "vm.[4].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire2MacEntryOnHost2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[2]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     mac  => "vm.[3].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire2MacEntryOnHost3' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[3]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[1].vnic.[1]",
                  },
                  {
                     mac  => "vm.[3].vnic.[1]",
                  },
                  {
                     mac  => "vm.[4].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire2MacEntryOnHost4' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[2]",
               host         => 'host.[4]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[1].vnic.[1]",
                  },
                  {
                     mac  => "vm.[2].vnic.[1]",
                  },
                  {
                     mac  => "vm.[4].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3ArpEntryOnHost2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[2]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[8].vnic.[1]",
                     mac  => "vm.[8].vnic.[1]",
                  },
                  {
                     ip   => "vm.[9].vnic.[1]",
                     mac  => "vm.[9].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3ArpEntryOnHost3' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[3]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[7].vnic.[1]",
                     mac  => "vm.[7].vnic.[1]",
                  },
                  {
                     ip   => "vm.[9].vnic.[1]",
                     mac  => "vm.[9].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3ArpEntryOnHost4' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[4]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[7].vnic.[1]",
                     mac  => "vm.[7].vnic.[1]",
                  },
                  {
                     ip   => "vm.[8].vnic.[1]",
                     mac  => "vm.[8].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3MacEntryOnHost2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[2]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[8].vnic.[1]",
                  },
                  {
                     mac  => "vm.[9].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3MacEntryOnHost3' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[3]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[7].vnic.[1]",
                  },
                  {
                     mac  => "vm.[9].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire3MacEntryOnHost4' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[3]",
               host         => 'host.[4]',
               'VerifyMacEntryOnHost[?]contains' => [
                  {
                     mac  => "vm.[7].vnic.[1]",
                  },
                  {
                     mac  => "vm.[8].vnic.[1]",
                  },
               ],
            },
            'ClearArpEntryForVirtualWire2OnAllHosts' => {
               Type       => "Switch",
               testswitch => "vsm.[1].networkscope.[1].virtualwire.[2]",
               clearvwireentryonhost => 'arp',
               hosts      => 'host.[2-4]',
            },
            'ClearArpEntryForVirtualWire3OnAllHosts' => {
               Type       => "Switch",
               testswitch => "vsm.[1].networkscope.[1].virtualwire.[3]",
               clearvwireentryonhost => 'arp',
               hosts      => 'host.[2-4]',
            },
         },
      },
#Before running the RebootStatelessHost testcase, we have to setup the environment first:
#1)Deploy a vcva with tftp support in Nimbus
# /mts/git/bin/nimbus-vcvadeploy --enableTftp --vcvaBuild 1312297
# shawntu-vcva-stateless-1312297-1
#2)Deploy vhost with vcva as deploy server:
#/mts/git/bin/nimbus-esxdeploy --useVHV --disk 32000000 --nics 3
#--network public --network isolated-15 --network isolated-15 --cpus 4
#--memory 16000 -u 10.144.139.108 stateless-1331820-1 ~/pxe/autodeploy
#3)Make datastore on the vhost;
#When vhost boots up statelessly, there is no datastore on the vhost,
#To deploy VM on the vhost, you have to format the disk on the vhost.
#4) Create image file and rule with PowerCLI:
#> Add-EsxSoftwareDepot C:\VMware-ESXi-5.5.0-1495853-vsip.zip
#> Add-EsxSoftwareDepot http://build-squid.eng.vmware.com/build/mts/release/
#bora-1331820/publish/CUR-depot/ESXi/index.xml
#> Get-ESXImageProfile
#> New-EsxImageProfile -Name NewImageProfile -CloneProfile
#ESXi-5.5.0-1331820-standard VMware -AcceptanceLevel PartnerSupported
#> Add-EsxSoftwarePackage -ImageProfile NewImageProfile -SoftwarePackage esx-vxlan
#> Get-EsxImageProfile NewImageProfile | Select -ExpandProperty VibList | sort
#5) Make new datacenter profile-test and cluster cluster-test
#Get-Folder -NoRecursion | New-Folder -Name Profile
#New-Datacenter -Location Profile -Name Profile-test
#New-Cluster -Location Profile-test -Name Profile-Cluster
#> $cluster = get-cluster -Location Profile-test
#> New-DeployRule VxlanRule -Item NewImageProfile,$cluster -AllHosts
#> Add-DeployRule VxlanRule
#get-deployruleset
#6) Reboot the two esx servers,after booting up, these two servers should be put under
#Profile-test/Profile/Profile-Cluster
      'RebootStatelessHost' => {
         TestName         => 'RebootStatelessHost',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the scenario when a stateless Host comes down'.
                             ' and comes back up',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity,stateless',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'N',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2',

         'TestbedSpec' => Functional_Topology_18,
         'WORKLOADS' => {
            Sequence => [
               ['Deploy_Controller2'],
               ['Deploy_Controller3'],
               ['CreateVirtualWire1'],
               ['PlaceVMsOnVirtualWire1'],
               ['PoweronVM1','PoweronVM2','PoweronVM3','PoweronVM4'],
               ['NetperfTestVirtualWire1Unicast'],
               ["CreateProfile"],
               ["AssociateProfile"],
               ["ComplianceCheck"],
               ['RebootHost2'],
               ['SleepToWaitProfile'],
               ['PoweronVM1'],
               ['NetperfTestVirtualWire1Unicast'],
            ],
            'Deploy_Controller2' => DEPLOY_SECOND_CONTROLLER,
            'Deploy_Controller3' => DEPLOY_THIRD_CONTROLLER,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-4]",
               vnic => {
                  '[1]'   => {
                     driver            => VXLAN_VNIC_DRIVER,
                     portgroup         => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected         => 1,
                     startconnected    => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            "NetperfTestVirtualWire1Unicast" => {
               Type           => "Traffic",
               toolname       => "netperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-4].vnic.[1]",
               TestDuration   => "60",
            },
            "CreateProfile" => {
               Type           => "VC",
               TestVC         => "vc.[1]",
               createprofile  => "profile",
               SrcHost        => "host.[2]",
               targetprofile  => "testprofile",
            },
            "AssociateProfile" => {
               Type             => "VC",
               TestVC           => "vc.[1]",
               associateprofile => "testprofile",
               SrcHost          => "host.[2]",
            },
            "ComplianceCheck" => {
               Type             => "VC",
               TestVC           => "vc.[1]",
               CheckCompliance  => "testprofile",
               SrcHost          => "host.[2]",
               compliancestatus => "Compliant",
            },
            'RebootHost2' => {
                Type           => "Host",
                TestHost       => "host.[2]",
                reboot         => "yes",
            },
            'SleepToWaitProfile' => {
               Type     => "Command",
               command  => "sleep 140",
               testhost => "host.[2]",
           },
         },
      },
      'RebootVSM' => {
         TestName         => 'RebootVSM',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify the scenario during and after' .
                             'VSM is rebooted',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,
         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
                ['CreateVirtualWire1'],
                ['PlaceVMsOnVirtualWire1'],
                ['PoweronVM1','PoweronVM2','PoweronVM3'],
                ['RestartVSM','NetperfTestVirtualWire1Unicat'],
                ['SetControllerSSLToFalse'],
                ['CheckController1SSLFalseOnHost'],
                ['CheckController2SSLFalseOnHost'],
                ['CheckController3SSLFalseOnHost'],
                ['CreateVirtualWire23'],
                ['PlaceVMsOnVirtualWire2'],
                ['PlaceVMsOnVirtualWire3'],
                ['PoweronVM4','PoweronVM5','PoweronVM6'],
                ['PoweronVM7','PoweronVM8','PoweronVM9'],
                ['NetperfTestVirtualWire2Unicat'],
                ['NetperfTestVirtualWire3Unicat'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM6Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteVM9Vnic1'],
                ['DeleteAllVirtualWires'],
            ],

            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,
            'CreateVirtualWire1' =>  {
                  Type  => "TransportZone",
                  TestTransportZone => "vsm.[1].networkscope.[1]",
                  VirtualWire       => {
                  "[1]" => {
                     name        => "AutoGenerate",
                     tenantid    => "AutoGenerate",
                     controlplanemode => "MULTICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolName       => "netperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "660",
            },
            'RestartVSM' => {
               Type      => "NSX",
               TestNSX    => "vsm.[1]",
               vmstate    => "restart",
               sleepbetweenworkloads => '60',
            },
            'CreateVirtualWire23' =>  {
                  Type  => "TransportZone",
                  TestTransportZone => "vsm.[1].networkscope.[1]",
                  VirtualWire       => {
                  "[2]" => {
                     name        => "AutoGenerate",
                     tenantid    => "AutoGenerate",
                     controlplanemode => "UNICAST_MODE",
                  },
                  "[3]" => {
                     name        => "AutoGenerate",
                     tenantid    => "AutoGenerate",
                     controlplanemode => "HYBRID_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,
            "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolname       => "netperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "5",
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "netperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "5",
            },
            'SetControllerSSLToFalse' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[1]",
               sslenabled => "false",
               sleepbetweenworkloads => "15",
            },
            'CheckController1SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[1]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'CheckController2SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[2]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
            'CheckController3SSLFalseOnHost' => {
               Type => "Host",
               testhost   => "host.[2-3]",
               "verifycontrollerinfoonhost[?]contain_once" => [
                  {
                     'sslenabled' => "false",
                     'port' => "1234",
                     'server' => "vsm.[1].vxlancontroller.[3]",
                  },
               ],
               sleepbetweenworkloads => "10",
            },
         },
      },
      'ConfigOrder' => {
         TestName         => 'ConfigOrder',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify VXLAN configuration order: ' .
                             '1.no controller deploy or vds versoin less than 5.5: ' .
                             'only can create multicast mode logical switch' .
                             '2.after deploy one or more controller, ' .
                             'upgrade vds version to 5.5: ' .
                             'can create 3 control plane(unicast' .
                             '/multicast/hybrid) mode logical switch',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_16,
          'WORKLOADS' => {
            Sequence => [
                ['CreateVirtualWireMulticast'],
                ['CreateVirtualWireUnicastFail'],
                ['CreateVirtualWireHybridFail'],
                ['PlaceVMsOnVirtualWire1'],
                ['PoweronVM1','PoweronVM4'],
                ['IperfTestVirtualWire1'],
                ['IperfTestVirtualWire1Multicast'],
                ['UpgradeVDS'],
                ['DeployController1'],
                ['DeployController2'],
                ['DeployController3'],
                ['CreateVirtualWireUnicast'],
                ['CreateVirtualWireHybrid'],
                ['PlaceVMsOnVirtualWire2'],
                ['PlaceVMsOnVirtualWire3'],
                ['PoweronVM2','PoweronVM5'],
                ['PoweronVM3','PoweronVM6'],
                ['IperfTestVirtualWire1'],
                ['NetperfTestVirtualWire2'],
                ['IperfTestVirtualWire3'],
                ['IperfTestVirtualWire1Multicast'],
                ['IperfTestVirtualWire2Multicast'],
                ['IperfTestVirtualWire3Multicast'],
               ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM6Vnic1'],
                ['DeleteAllVirtualWires'],
                ['DeleteAllController'],
            ],

            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'CreateVirtualWireMulticast' => CREATE_VIRTUALWIRE_MULTICAST,
            'CreateVirtualWireUnicast' => CREATE_VIRTUALWIRE_UNICAST,
            'CreateVirtualWireHybrid' => CREATE_VIRTUALWIRE_HYBRID,
            'CreateVirtualWireUnicastFail' => {
               Type              => "TransportZone",
               TestTransportZone => "vsm.[1].networkscope.[1]",
               VirtualWire       => {
                  "[2]" => {
                     name        => "AutoGenerate",
                     tenantid    => "AutoGenerate",
                     controlplanemode => "UNICAST_MODE",
                  },
               },
               expectedresult => "Fail",
            },
            'CreateVirtualWireHybridFail' => {
               Type              => "TransportZone",
               TestTransportZone => "vsm.[1].networkscope.[1]",
               VirtualWire       => {
                  "[3]" => {
                     name        => "AutoGenerate",
                     tenantid    => "AutoGenerate",
                     controlplanemode => "HYBRID_MODE",
                  },
               },
               expectedresult => "Fail",
            },
            'DeployController1' => DEPLOY_FIRST_CONTROLLER,
            'DeployController2' => DEPLOY_SECOND_CONTROLLER,
            'DeployController3' => DEPLOY_THIRD_CONTROLLER,
            'DeleteAllController' => DELETE_ALL_CONTROLLERS,
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1],vm.[4]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[2],vm.[5]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[3],vm.[6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,

            "IperfTestVirtualWire1" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[4].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2" => {
               Type           => "Traffic",
               toolName       => "netperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4",
               TestAdapter    => "vm.[2].vnic.[1]",
               SupportAdapter => "vm.[5].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire3" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[3].vnic.[1]",
               SupportAdapter => "vm.[6].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire1Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[4].vnic.[1]",
               TestDuration   => "60",
            },
             "IperfTestVirtualWire2Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[2].vnic.[1]",
               SupportAdapter => "vm.[5].vnic.[1]",
               TestDuration   => "60",
            },
            "IperfTestVirtualWire3Multicast" => {
               Type           => "Traffic",
               RoutingScheme  => "Multicast",
               L3Protocol     => "ipv4",
               udpbandwidth   => VDNetLib::TestData::TestConstants::VXLAN_MULTICAST_UDP_BANDWIDTH,
               TestAdapter    => "vm.[3].vnic.[1]",
               SupportAdapter => "vm.[6].vnic.[1]",
               TestDuration   => "60",
            },
            'UpgradeVDS' => {
               'Type' => 'Switch',
               'TestSwitch' => 'vc.[1].vds.[1-2]',
               'upgradevds' => '5.5.0',
            },
         },
      },
      'MacFlooding' => {
         TestName         => 'MacFlooding',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'MacFlooding: Verify that macflooding in a vdl2 network ' .
                             'will not cause traffic failures or system problems.' ,
         Procedure        => '1. Create virtual wire and send traffic, check connectivity. ' .
                             '2. Change the portgroup of security policies, ' .
                             'then generate mac flooding. Check mac count. ' .
                             '3. Send traffic again. Verify the mac flooding, ' .
                             'does not impact connectivity. ',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automatic',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
                ['CreateVirtualWire'],
                ['PlaceVMsOnVirtualWire3'],
                ['PoweronVM1','PoweronVM2','PoweronVM3'],
                ['NetperfTestVirtualWire3Unicat'],
                ['SetVDS12MacAddressChangeSecurityPolicyAccept'],
                ['SetVDS12ForgedTransmitChangeSecurityPolicyAccept'],
                ['MacFloodVM1'],
                ['VerifyVirtualWire1VMsMacCountOnHost'],
                ['NetperfTestVirtualWire3Unicat'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'CreateVirtualWire' => CREATE_VIRTUALWIRE_HYBRID,
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'SetVDS12MacAddressChangeSecurityPolicyAccept' => {
              'Type'           => 'Switch',
              'TestSwitch'     => 'vc.[1].vds.[1-2]',
              'virtualwire'    => "vsm.[1].networkscope.[1].virtualwire.[3]",
              'policytype'     => "macChanges",
              'securitypolicy' => 'Enable'
            },
            'SetVDS12ForgedTransmitChangeSecurityPolicyAccept' => {
              'Type'           => 'Switch',
              'TestSwitch'     => 'vc.[1].vds.[1-2]',
              'virtualwire'    => "vsm.[1].networkscope.[1].virtualwire.[3]",
              'policytype'     => "forgedTransmits",
              'securitypolicy' => 'Enable'
            },
            'MacFloodVM1' => {
              'Type' => 'Traffic',
              'testduration' => '100000',
              'toolname' => 'Macof',
              'testadapter' => 'vm.[1].vnic.[1]',
              'supportadapter' => 'vm.[2].vnic.[1]'
            },
            'VerifyVirtualWire1VMsMacCountOnHost' => {
              'Type'         => "Switch",
              'testswitch'   => "vsm.[1].networkscope.[1].virtualwire.[3]",
              'host'         => 'host.[2]',
              'querymacs' =>
                 {
                    'count[?]>'  => "1000",
                 },
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "5",
            },
         },
      },
      'DuplicateAddressDetection' => {
         TestName         => 'DuplicateAddressDetection',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'This case verify duplicate address detection,'.
                             ' when there is an arp cache on host,this case '.
                             ' come from PR '.
                             ' https://bugzilla.eng.vmware.com/show_bug.cgi?id=1296328',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2',

         'TestbedSpec' => Functional_Topology_15,
         'WORKLOADS' => {
            Sequence => [
                ['CreateVirtualWire1'],
                ['PlaceVMsOnVirtualWire1'],
                ['PoweronVM1','PoweronVM2','PoweronVM4'],
                ['SetIPv4VM1Vnic1'],
                ['SetIPv4VM2Vnic1'],
                ['SetIPv4VM4Vnic1'],
                ['ArpPingVM12to4'],
                ['VerifyVM12ArpEntryOnVirtualwire1Controller'],
                ['ArpPingVM2to1'],
                ['ArpPingVM1to2'],
                ['CheckVirtualWire1ArpEntryOnHost1'],
                ['CheckVirtualWire1ArpEntryOnHost2'],
                ['SetIVM2Vnic1EqualToVM1Vnic1'],
                ['ArpPingDADHasDuplicate'],
                ['PoweroffVM1'],
                ['ArpPingDADNoDuplicate'],
            ],
            ExitSequence => [
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteAllVirtualWires'],
            ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'PoweroffVM1' => POWEROFF_VM1,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'CreateVirtualWire1' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[1]",
               VirtualWire  => {
                  "[1]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1],vm.[2],vm.[4]",
               vnic => {
                  '[1]'   => {
                     driver            => VXLAN_VNIC_DRIVER,
                     portgroup         => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected         => 1,
                     startconnected    => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM4' => POWERON_VM4,

            "SetIPv4VM1Vnic1" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               IPv4           => "192.111.1.1",
               netmask        => "255.255.0.0",
            },
            "SetIPv4VM2Vnic1" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[2].vnic.[1]",
               IPv4           => "192.111.2.1",
               netmask        => "255.255.0.0",
            },
            "SetIPv4VM4Vnic1" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[4].vnic.[1]",
               IPv4           => "192.111.4.1",
               netmask        => "255.255.0.0",
            },
            "SetIVM2Vnic1EqualToVM1Vnic1" => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[2].vnic.[1]",
               IPv4           => "192.111.1.1",
               netmask        => "255.255.0.0",
            },
            "ArpPingVM12to4" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[1].vnic.[1],vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[4].vnic.[1]",
               TestDuration     => "5",
               connectivitytest => "0",
            },
            'VerifyVM12ArpEntryOnVirtualwire1Controller' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               controllers  => "vsm.[1].vxlancontroller.[-1]",
               "VerifyArpEntryOnController[?]contain_once" => [
                   {
                      ip   => "vm.[1].vnic.[1]",
                      mac  => "vm.[1].vnic.[1]",
                   },
                   {
                      ip   => "vm.[2].vnic.[1]",
                      mac  => "vm.[2].vnic.[1]",
                   },
               ],
            },
            "ArpPingVM2to1" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingVM1to2" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[1].vnic.[1]",
               SupportAdapter   => "vm.[2].vnic.[1]",
               TestDuration     => "10",
               connectivitytest => "0",
            },
            "ArpPingDADNoDuplicate" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[4].vnic.[1]",
               arpprobe         => "DAD",
               TestDuration     => "1",
               connectivitytest => "0",
               ExpectedResult => "FAIL",
               sleepbetweenworkloads => "15",
            },
            "ArpPingDADHasDuplicate" => {
               Type             => "Traffic",
               toolName         => "ArpPing",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               arpprobe         => "DAD",
               TestDuration     => "3",
               connectivitytest => "0",
               sleepbetweenworkloads => "15",
            },
            'CheckVirtualWire1ArpEntryOnHost1' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               host         => 'host.[2]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[2].vnic.[1]",
                     mac  => "vm.[2].vnic.[1]",
                  },
               ],
            },
            'CheckVirtualWire1ArpEntryOnHost2' => {
               Type         => "Switch",
               testswitch   => "vsm.[1].networkscope.[1].virtualwire.[1]",
               host         => 'host.[3]',
               'VerifyArpEntryOnHost[?]contain_once' => [
                  {
                     ip   => "vm.[1].vnic.[1]",
                     mac  => "vm.[1].vnic.[1]",
                  },
               ],
            },
         },
      },
      'ChangeControllerPassword' => {
         TestName         => 'ChangeControllerPassword',
         Category         => 'Networking',
         Component        => 'VXLAN',
         Product          => 'NSX',
         QCPath           => 'OP\Networking-FVT\VXLAN',
         Summary          => 'To verify product working well after password change,
                           https://bugzilla.eng.vmware.com/show_bug.cgi?id=1332303',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '5511',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Partnerfacing    => 'N',
         Duration         => '',
         Testbed          => '',
         Version          => '2' ,

         'TestbedSpec' => Functional_Topology_15,
          'WORKLOADS' => {
            Sequence => [
                # 1. Deploy VXLAN test bed with 3 controller.VXLAN traffic
                #    works well;
                ['CreateVirtualWire'],
                ['PlaceVMsOnVirtualWire1'],
                ['PlaceVMsOnVirtualWire2'],
                ['PlaceVMsOnVirtualWire3'],
                ['PoweronVM1','PoweronVM2','PoweronVM3'],
                ['PoweronVM4','PoweronVM5','PoweronVM6'],
                ['PoweronVM7','PoweronVM8','PoweronVM9'],
                ['NetperfTestVirtualWire1Unicat'],
                ['NetperfTestVirtualWire2Unicat'],
                ['NetperfTestVirtualWire3Unicat'],

                # 2. Change controller credential and run traffic test;
                ['ChangeControllerPassword'],
                ['NetperfTestVirtualWire1Unicat'],
                ['NetperfTestVirtualWire2Unicat'],
                ['NetperfTestVirtualWire3Unicat'],

                # 3. Poweroff & poweron one controller, run traffic test;
                #    and create new virtual wires;
                ['RebootFirstController'],
                ['CreateNetworkScope2'],
                ['CreateVirtualWire4'],
                ['CreateVirtualWire5'],
                ['CreateVirtualWire6'],
                ['NetperfTestVirtualWire1Unicat'],
                ['NetperfTestVirtualWire2Unicat'],
                ['NetperfTestVirtualWire3Unicat'],
               ],
            ExitSequence => [
                ['RestoreDefaultPassword'],
                ['PoweroffVM'],
                ['DeleteVM1Vnic1'],
                ['DeleteVM2Vnic1'],
                ['DeleteVM3Vnic1'],
                ['DeleteVM4Vnic1'],
                ['DeleteVM5Vnic1'],
                ['DeleteVM6Vnic1'],
                ['DeleteVM7Vnic1'],
                ['DeleteVM8Vnic1'],
                ['DeleteVM9Vnic1'],
                ['DeleteAllVirtualWires'],
                ['DeleteNetworkScope2'],
               ],
            'DeleteAllVirtualWires' => DELETE_ALL_VIRTUALWIRES,
            'PoweroffVM' => POWEROFF_VM,
            'DeleteVM1Vnic1' => DELETE_VM1_VNIC1,
            'DeleteVM2Vnic1' => DELETE_VM2_VNIC1,
            'DeleteVM3Vnic1' => DELETE_VM3_VNIC1,
            'DeleteVM4Vnic1' => DELETE_VM4_VNIC1,
            'DeleteVM5Vnic1' => DELETE_VM5_VNIC1,
            'DeleteVM6Vnic1' => DELETE_VM6_VNIC1,
            'DeleteVM7Vnic1' => DELETE_VM7_VNIC1,
            'DeleteVM8Vnic1' => DELETE_VM8_VNIC1,
            'DeleteVM9Vnic1' => DELETE_VM9_VNIC1,
            'CreateVirtualWire' => CREATE_VIRTUALWIRES_NETWORKSCOPE1,
            'ChangeControllerPassword' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[1]",
               controllerpassword => "NewPassword12!",
            },
            'RestoreDefaultPassword' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[1]",
               controllerpassword =>
               VDNetLib::Common::GlobalConfig::DEFAULT_NSX_CONTROLLER_PASSWORD,
            },
            'RebootFirstController' => {
               Type => "VM",
               TestVM => "vsm.[1].vxlancontroller.[1]",
               vmstate    => "reboot",
            },
            'CreateNetworkScope2' => {
               Type => 'NSX',
               testnsx => "vsm.[1]",
               networkscope => {
                  '[2]' => {
                     name         => "network-scope-2-$$",
                     clusters     => "vc.[1].datacenter.[1].cluster.[2-3]",
                  },
               },
               sleepbetweenworkloads => 300,
            },
            'DeleteNetworkScope2'  => {
               Type               => 'NSX',
               TestNSX            => "vsm.[1]",
               deletenetworkscope => "vsm.[1].networkscope.[2]",
               sleepbetweenworkloads => "10",
             },
            'CreateVirtualWire4' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[2]",
               VirtualWire  => {
                  "[4]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "MULTICAST_MODE",
                  },
               },
            },
            'CreateVirtualWire5' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[2]",
               VirtualWire  => {
                  "[5]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "UNICAST_MODE",
                  },
               },
            },
            'CreateVirtualWire6' => {
               Type  => "TransportZone",
               testtransportzone   => "vsm.[1].networkscope.[2]",
               VirtualWire  => {
                  "[6]" => {
                     name               => "AutoGenerate",
                     tenantid           => "AutoGenerate",
                     controlplanemode   => "HYBRID_MODE",
                  },
               },
            },
            'PlaceVMsOnVirtualWire1' => {
               Type => "VM",
               TestVM => "vm.[1-3]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[1]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire2' => {
               Type => "VM",
               TestVM => "vm.[4-6]",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[2]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PlaceVMsOnVirtualWire3' => {
               Type => "VM",
               TestVM => "vm.[7-9],",
               vnic => {
                  '[1]'   => {
                     driver     => VXLAN_VNIC_DRIVER,
                     portgroup  => "vsm.[1].networkscope.[1].virtualwire.[3]",
                     connected => 1,
                     startconnected => 1,
                     allowguestcontrol => 1,
                  },
               },
            },
            'PoweronVM1' => POWERON_VM1,
            'PoweronVM2' => POWERON_VM2,
            'PoweronVM3' => POWERON_VM3,
            'PoweronVM4' => POWERON_VM4,
            'PoweronVM5' => POWERON_VM5,
            'PoweronVM6' => POWERON_VM6,
            'PoweronVM7' => POWERON_VM7,
            'PoweronVM8' => POWERON_VM8,
            'PoweronVM9' => POWERON_VM9,

            "NetperfTestVirtualWire1Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[1].vnic.[1]",
               SupportAdapter => "vm.[2-3].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire2Unicat" => {
               Type           => "Traffic",
               toolName       => "iperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[4].vnic.[1]",
               SupportAdapter => "vm.[5-6].vnic.[1]",
               TestDuration   => "60",
            },
            "NetperfTestVirtualWire3Unicat" => {
               Type           => "Traffic",
               toolname       => "iperf",
               L4Protocol     => "tcp,udp",
               L3Protocol     => "ipv4,ipv6",
               TestAdapter    => "vm.[7].vnic.[1]",
               SupportAdapter => "vm.[8-9].vnic.[1]",
               TestDuration   => "60",
            },
         },
      },
   );
}


##########################################################################
# new --
#       This is the constructor for VXLAN TDS
#
# Input:
#       none
#
# Results:
#       An instance/object of VXLAN class
#
# Side effects:
#       None
#
########################################################################

sub new
{
   my ($proto) = @_;
   #
   # Below way of getting class name is to allow new class as well as
   # $class->new.  In new class, proto itself is class, and $class->new,
   # ref($class) return the class
   #
   my $class = ref($proto) || $proto;
   my $self = $class->SUPER::new(\%VXLAN);
   return (bless($self, $class));
}

1;


tds_template: &tds_template
    AutomationLevel: Draft
    Category: L3
    Component: Stress
    Duration: 3600
    ExpectedResult: PASS
    FullyAutomatable: Y
    PartnerFacing: N
    PMT: null
    Procedure: null
    Product: NSXTransformers
    QCPath: ESX
    Status: Not Automated
    SubRelease: Bumblebee
    Tags: nsxtransformers,l3,stress
    TCMSId: null
    TestcaseLevel: Stress
    TestcaseType: Stress
    Version: 2

p2_template: &p2_template
    <<: *tds_template
    Priority: P2

StressRestartSWITCHDaemon:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressRestartSWITCHDaemon
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following after ovs|vswitch??? is restarted
            - All traffic resumes after ovs|vswitch??? is restarted
        - Verify the following after ovs|vswitch??? is stopped and started back
            - All traffic resumes after ovs|vswitch??? is stopped and started back
        - Verify the following after ovs|vswitch??? is killed and restarted
            - All traffic resumes after ovs|vswitch??? is killed and restarted
    WORKLOADS: {}

StressRestartL3Daemon:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressRestartL3Daemon
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following after l3d|??? is restarted
            - All traffic resumes after l3d|??? is restarted
            - L2 traffic is not affected during the RESTART operation
        - Verify the following after l3d|??? is stopped and started back
            - All traffic resumes after l3d|??? is stopped and started back
            - L2 traffic is not affected during the STOP-START operation
        - Verify the following after l3d|??? is killed and restarted
            - All traffic resumes after l3d|??? is killed and restarted
            - L2 traffic is not affected during the KILL operation
    WORKLOADS: {}

StressRestartLCPDaemon:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressRestartLCPDaemon
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following after netcpa is restarted
            - All traffic resumes after netcpa is restarted
            - All traffic is not affected during the RESTART operation
        - Verify the following after netcpa is stopped and started back
            - All traffic resumes after netcpa is stopped and started back
            - All traffic is not affected during the STOP-START operation
        - Verify the following after netcpa is killed and restarted
            - All traffic resumes after netcpa is killed and restarted
            - All traffic is not affected during the KILL operation
    WORKLOADS: {}

StressRestartMPADaemon:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressRestartMPADaemon
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following after mpa is restarted
            - All traffic resumes after mpa is restarted
            - All traffic is not affected during the RESTART operation
        - Verify the following after mpa is stopped and started back
            - All traffic resumes after mpa is stopped and started back
            - All traffic is not affected during the STOP-START operation
        - Verify the following after mpa is killed and restarted
            - All traffic resumes after mpa is killed and restarted
            - All traffic is not affected during the KILL operation
    WORKLOADS: {}

StressRestartEDGEDaemon:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressRestartEDGEDaemon
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following after edged??? is restarted
            - All traffic resumes after edged??? is restarted
            - EW traffic is not affected during the RESTART operation
        - Verify the following after edged??? is stopped and started back
            - All traffic resumes after edged??? is stopped and started back
            - EW traffic is not affected during the STOP-START operation
        - Verify the following after edged??? is killed and restarted
            - All traffic resumes after edged??? is killed and restarted
            - EW traffic is not affected during the KILL operation
    WORKLOADS: {}

StressHeadlessCCP:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressHeadlessCCP
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following when all controller services are shutdown
            - All traffic resumes after all controller services are shutdown
            - Verify that traffic is not affected when all controller services are shutdown
    WORKLOADS: {}

StressHeadlessMP:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressHeadlessMP
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following when all manager services are shutdown
            - All traffic resumes after all manager services are shutdown
            - Verify that traffic is not affected when all manager services are shutdown
    WORKLOADS: {}

StressDisconnectCCP:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressDisconnectCCP
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following when all controllers are not reachable
            - All traffic resumes after all controllers are not reachable
            - Verify that traffic is not affected when all controllers are not reachable
    WORKLOADS: {}

StressDisconnectMP:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressDisconnectMP
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following when all managers are not reachable
            - All traffic resumes after all managers are not reachable
            - Verify that traffic is not affected when all managers are not reachable
    WORKLOADS: {}

StressRebootCCP:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressRebootCCP
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following when all controllers are rebooted one after the other
            - All traffic resumes after all controllers are rebooted one after the other
            - Verify that traffic is not affected when all controllers are rebooted one after the other
    WORKLOADS: {}

StressRebootMP:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressRebootMP
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following when all managers are rebooted one after the other
            - All traffic resumes after all managers are rebooted one after the other
            - Verify that traffic is not affected when all managers are rebooted one after the other
    WORKLOADS: {}

StressParallelRebootCCP:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressParallelRebootCCP
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following when all controllers are rebooted simultaneously
            - All traffic resumes after all controllers are rebooted simultaneously
            - Verify that traffic is not affected when all controllers are rebooted simultaneously
    WORKLOADS: {}

StressParallelRebootMP:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressParallelRebootMP
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following when all managers are rebooted simultaneously
            - All traffic resumes after all managers are rebooted simultaneously
            - Verify that traffic is not affected when all managers are rebooted simultaneously
    WORKLOADS: {}

StressNetworkPartionCCP:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressNetworkPartionCCP
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following when Partition the CCP using firewall into majority/minority
            - All traffic resumes after Partition the CCP using firewall into majority/minority
            - Verify that traffic is not affected when Partition the CCP using firewall into majority/minority
    WORKLOADS: {}

StressNetworkPartionMP:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressNetworkPartionMP
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify the following when Partition the MP using firewall into majority/minority
            - All traffic resumes after Partition the MP using firewall into majority/minority
            - Verify that traffic is not affected when Partition the MP using firewall into majority/minority
    WORKLOADS: {}

StressNetworkBroadcast:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressNetworkBroadcast
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify that the traffic works for all possible variations as follows,
            - broadcast pings to connected network
            - broadcast pings to other l3 networks
    WORKLOADS: {}

StressToRouterPort:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressToRouterPort
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify that the traffic works for all possible variations as follows,
            - ping with different packet sizes to router port
            - netperf tcp CRR traffic with short lived connection attempts
            - netperf with udp
    WORKLOADS: {}

StressTSOSet:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressTSOSet
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify that the traffic works for all possible variations as follows,
            - TSO Flag set on the tunnel pif/pnic for HVs
            - TSO Flag set on the tunnel pif/pnic for Edge
    WORKLOADS: {}

StressJumboFrames:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressJumboFrames
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify that the traffic works for all possible variations as follows,
            - <tbd>
    WORKLOADS: {}

StressDHCPStorm:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressDHCPStorm
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify that the traffic works for all possible variations as follows,
            - Run dhclients continuously on downlink VMs
            - Run dhclients continuous on uplink VMs
    WORKLOADS: {}

StressPortScan:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressPortScan
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify that the traffic works for all possible variations as follows,
            - Run port scan on EW VMs that span multiple TLRs
            - Run port scan on NS VMs between uplink/downlink
    WORKLOADS: {}

StressUnreachableIPStorm:
    <<: *p2_template
    Developer: miriyalak
    TestName: StressUnreachableIPStorm
    TestbedSpec: TestBed_L3All
    Summary: |
        - Verify that the traffic works for all possible variations as follows,
            - Run IP scan using hping on an unreachable network that hit uplink
            - Run IP scan using hping on an unreachable network that hit downlink
            - Run IP scan using hping a network with lot of unreachable/reachable IPs on uplink
            - Run IP scan using hping on a network with lot of unreachable/reachable IPs on downlink
    WORKLOADS: {}

StressAddDelLSPlr:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressAddDelLSPlr
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add LS directly connected to the PLR and VM on one of the existing HVs connected to this new lswitch
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressAddDelLSTlr:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressAddDelLSTlr
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add LS directly connected to one of the TLRs and VM on one of the existing HVs with a VIF connected to this new switch
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressAddDelHVPlrTlr:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressAddDelHVPlrTlr
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add Transport Node to the topology and VMs on this HV connected to PLR and TLRs
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressAddDelVMPlrTlr:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressAddDelVMPlrTlr
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add VM on one of the existing HV and connect it to PLR and TLRs
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressAddDelPlrUplinkAA:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressAddDelPlrUplinkAA
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add new PLR uplink in active-active mode
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressAddDelPlrUplinkAS:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressAddDelPlrUplinkAS
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add new PLR uplink in active-standby mode
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressAddDelTlrUplink:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressAddDelTlrUplink
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add TLR-PLR uplink
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressMoodifyUplinkEdge:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressMoodifyUplinkEdge
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add new edge node to the edge cluster and modify one of the PLR uplinks to use the new edge
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressAddDelTLR:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressAddDelTLR
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add a new TLR connected to the PLR with two downlinks and VMs on existing HV to the TLR
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressAddDelEdgeCluster:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressAddDelEdgeCluster
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add a new EdgeCluster and swap all existing uplinks to this new edge cluster
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressAddDelRouteAdvertisements:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressAddDelRouteAdvertisements
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add route advertisements for the unadvertised TLR routes
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressAddDelLRStaticRoutes:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressAddDelLRStaticRoutes
    TestbedSpec: TestBed_L3All
    Summary: |
        - Add static routes on TLR and PLR for new networks
            - Verify all existing traffic is uninterrupted and traffic from the new entity flows through correctly.
        - Delete the new entity and verify that there is no impact on traffic other than itself.
        - Repeat the operation 100 times
    WORKLOADS: {}

StressTunnelDownUp:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressTunnelDownUp
    TestbedSpec: TestBed_L3All
    Summary: |
        - Check that traffic converges after a temporary down/up tunnel using the pif/pnic on HV
        - Verify the status of all the daemons (status|CPU|Mem) on the affected HV after the down/up tunnel using the pif/pnic
        - Check that traffic converges after a temporary down/up tunnel using the pif/pnic on Edge
        - Verify the status of all the daemons (status|CPU|Mem) on the affected Edge after the down/up tunnel using the pif/pnic
    WORKLOADS: {}

StressTunnelFlap:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressTunnelFlap
    TestbedSpec: TestBed_L3All
    Summary: |
        - Check that traffic converges after a temporary flap continuously for <tbd> seconds using the pif/pnic on HV
        - Verify the status of all the daemons (status|CPU|Mem) on the affected HV after the flap continuously for <tbd> seconds using the pif/pnic
        - Check that traffic converges after a temporary flap continuously for <tbd> seconds using the pif/pnic on Edge
        - Verify the status of all the daemons (status|CPU|Mem) on the affected Edge after the flap continuously for <tbd> seconds using the pif/pnic
    WORKLOADS: {}

StressCPUHog:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressCPUHog
    TestbedSpec: TestBed_L3All
    Summary: |
        - Check that traffic converges after a temporary cpu hog for <tbd>% cpu usage using <tbd> tool on HV
        - Verify the status of all the daemons (status|CPU|Mem) on the affected HV after the cpu hog for <tbd>% cpu usage using <tbd> tool
        - Check that traffic converges after a temporary cpu hog for <tbd>% cpu usage using <tbd> tool on Edge
        - Verify the status of all the daemons (status|CPU|Mem) on the affected Edge after the cpu hog for <tbd>% cpu usage using <tbd> tool
    WORKLOADS: {}

StressMemoryHog:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressMemoryHog
    TestbedSpec: TestBed_L3All
    Summary: |
        - Check that traffic converges after a temporary memory hog for <tbd>% memory usage using <tbd> tool on HV
        - Verify the status of all the daemons (status|CPU|Mem) on the affected HV after the memory hog for <tbd>% memory usage using <tbd> tool
        - Check that traffic converges after a temporary memory hog for <tbd>% memory usage using <tbd> tool on Edge
        - Verify the status of all the daemons (status|CPU|Mem) on the affected Edge after the memory hog for <tbd>% memory usage using <tbd> tool
    WORKLOADS: {}

StressNetworkSpike:
    <<: *p2_template
    Developer: dbadiani
    TestName: StressNetworkSpike
    TestbedSpec: TestBed_L3All
    Summary: |
        - Check that traffic converges after a temporary network spike on tunnel pif/pnic for <tbd> seconds using netperf on HV
        - Verify the status of all the daemons (status|CPU|Mem) on the affected HV after the network spike on tunnel pif/pnic for <tbd> seconds using netperf
        - Check that traffic converges after a temporary network spike on tunnel pif/pnic for <tbd> seconds using netperf on Edge
        - Verify the status of all the daemons (status|CPU|Mem) on the affected Edge after the network spike on tunnel pif/pnic for <tbd> seconds using netperf
    WORKLOADS: {}
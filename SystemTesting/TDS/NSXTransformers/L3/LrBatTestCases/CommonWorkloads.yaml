WORKLOADS:
    000__AUTOGENERATED__: true
    CleanupBasicSetup: &CLEANUP_PLR_TLR_TESTBED
       - - 'DeleteUplinkLogicalRouterPortForEdge'
       - - 'DeleteDownlinkLogicalRouterPortForTier0'
       - - 'DeleteLogicalRouter'
       - - 'DeleteLogicalPort'
       - - 'DeleteLogicalSwitch'
       - - 'DeleteEdgeClusterWithEdgeNode'
       - - 'DeleteFabricProfile'

    DeleteUplinkLogicalRouterPortForEdge: &PLRTLR_DELETE_UPLINK_LOGICAL_ROUTER_PORT_01
        Type : "NSX"
        TestNSX : "nsxmanager.[1]"
        deletelogicalrouterport: "nsxmanager.[1].logicalrouteruplinkport.[-1]"

    DeleteEdgeClusterWithEdgeNode: &PLRTLR_DELETE_EDGE_CLUSTER
        Type : "NSX"
        TestNSX : "nsxmanager.[1]"
        deleteedgecluster : "nsxmanager.[1].edgecluster.[1]"

    DeleteFabricProfile: &PLRTLR_DELETE_FABRIC_PROFILE
        Type : "NSX"
        TestNSX : "nsxmanager.[1]"
        deletefabricprofile : "nsxmanager.[1].fabricprofile.[1]"

    DeleteLogicalRouter: &PLRTLR_DELETE_LOGICAL_ROUTER
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletelogicalrouter: "nsxmanager.[1].logicalrouter.[1]"

    DeleteLogicalSwitch: &PLRTLR_DELETE_LOGICAL_SWITCH
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletelogicalswitch: 'nsxmanager.[1].logicalswitch.[-1]'

    DeleteLogicalPort: &PLRTLR_DELETE_LOGICAL_PORT
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        sleepbetweenworkloads: "5"
        deletelogicalport: 'nsxmanager.[1].logicalport.[-1]'

    DeleteDownlinkLogicalRouterPortForTier0: &PLRTLR_DELETE_DOWNLINK_LRP_TIER0
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        deletelogicalrouterport: "nsxmanager.[1].logicalrouterport.[3]"


    DiscoverHostnodes: &PLRTLR_DISCOVER_HOST_NODES
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        hostnode:
            '[1-2]':
                discover: 'true'
                ip_addresses: 'esx.[x=hostnode_index]'

    CreateTransportZone: &PLRTLR_CREATE_TRANSPORT_ZONE_01
        Type: NSX
        TestNSX: nsxmanager.[1]
        transportzone:
            '[1]':
                name: autogenerate
                transport_zone_type: 'OVERLAY' # or VLAN, both case-senstive
                switch_name: 'nsxvswitch'

    CreateUplinkProfile:
        ESX: &PLRTLR_CREATE_UPLINK_PROFILE_01--ESX
           Type: 'NSX'
           TestNSX: 'nsxmanager.[1]'
           UplinkProfile:
               '[1]':
                   mtu: 1600
                   teaming:
                       active:
                           - adapter_name: 'uplink1'
                             adapter_type: 'PNIC'
                       policy: 'FAILOVER_ORDER'
                   vlan: '0'
                   resource_type: 'UplinkHostSwitchProfile'

    CreateTransportNodes:
        ESX: &PLRTLR_CREATE_TRANSPORT_NODE_01--ESX
            Type: NSX
            TestNSX: nsxmanager.[1]
            transportnode:
                '[1-2]':
                    node_id: 'nsxmanager.[1].hostnode.[x=transportnode_index]'
                    host_switches:
                          - switch_name: 'nsxvswitch'
                            host_switch_profile_ids:
                               - key: 'UplinkHostSwitchProfile'
                                 value: 'nsxmanager.[1].uplinkprofile.[1]->id'
                            uplinks:
                               - device_name: 'vmnic1'
                                 adapter_name: 'uplink1'
                            vteps:
                               - device_name: 'vmk10'
                                 ip:
                                    ip_address: ''
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateFabricProfile: &PLRTLR_CREATE_FABRIC_PROFILE
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        fabricprofile:
            '[1]':
                name: 'Fabric_Profile_1'
                summary: "Fabric Profile created through automation"
                resource_type: "FabricProfileClusterKeepAlive"
                hello_interval: 3000
                declare_dead_timer: 15000

    DiscoverEdgeNodeId: &PLRTLR_DISCOVER_EDGE_NODE_ID
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        edgenode:
            '[1]':
                discover: 'true'
                resource_type: "EdgeNode"
                ipaddresses:
                   - 'nsxedge.[1]->management_ip'
            '[2]':
                discover: 'true'
                resource_type: "EdgeNode"
                ipaddresses:
                   - 'nsxedge.[2]->management_ip'

    CreateEdgeClusterWithEdgeNode: &PLRTLR_CREATE_EDGE_CLUSTER
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        edgecluster:
            '[1]':
                name: 'Edge_Cluster_1'
                summary: "Edge Cluster created through automation"
                members:
                  - edge_node_id: 'nsxmanager.[1].edgenode.[1]'
                  - edge_node_id: 'nsxmanager.[1].edgenode.[2]'
                fabric_profile_bindings:
                  - resource_type: "FabricProfileClusterKeepAlive"
                    fabric_profile_id: 'nsxmanager.[1].fabricprofile.[1]'

    CreateLogicalPortForUplinkForTIER0: &PLRTLR_CREATE_LP_FOR_UPLINK_TIER0
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalport:
            '[1]':
                switch_id: nsxmanager.[1].logicalswitch.[1]
                name: 'TIER0-LogicalPort-1-For-uplink'
                admin_state: UP

            '[2]':
                switch_id: nsxmanager.[1].logicalswitch.[1]
                name: 'TIER0-LogicalPort-2-For-uplink'
                admin_state: UP


    CreateLogicalSwitchForTIER0: &PLRTLR_CREATE_LOGICAL_SWITCH_FOR_TIER0
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalswitch:
            '[1]':
                name: 'Tier0-Logical-Switch-1'
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                admin_state: UP
                replication_mode: MTEP
            '[2]':
                name: 'Tier0-Logical-Switch-2'
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                admin_state: UP
                replication_mode: MTEP # source

    CreateLogicalPortForDownlinkForTIER0: &PLRTLR_CREATE_LP_FOR_DOWNLINK_TIER0
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalport:
            '[3]':
                switch_id: nsxmanager.[1].logicalswitch.[2]
                name: 'TIER0-LogicalPort-3-For-downlink'
                admin_state: UP

    CreateTIER0LogicalRouterForEdge: &PLRTLR_CREATE_TIER0_LR
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: "10"
        logicalrouter:
            '[1]':
                name: 'lrouter-tier-0'
                summary: "LRouter TIER-0 router"
                router_type: "TIER0"
                cluster_id: 'nsxmanager.[1].edgecluster.[1]'

    CreateDownlinkLogicalRouterPortForEdge: &PLRTLR_CREATE_DOWNLINK_LRP_FOR_TIER0
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        logicalrouterport:
            '[3]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: 'TIER0-LRPort-2-Downlinkport'
                summary: "LRPort Downlink Port1 created through automation"
                linked_switch_port_id: nsxmanager.[1].logicalport.[3]->id
                resource_type: "LogicalRouterDownLinkPort"
                subnets:
                   - prefixlen: 24
                     ip_addresses:
                         - '192.168.60.1'

    CreateUplinkLogicalRouterPortForEdge: &PLRTLR_CREATE_UPLINK_LRP_FOR_TIER0
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        logicalrouteruplinkport:
            '[1]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: 'TIER0-LRPort-1-UPLINKPORT'
                summary: "TIER0 LRPort Uplink Port1 created through automation"
                linked_switch_port_id: nsxmanager.[1].logicalport.[1]->id
                resource_type: "LogicalRouterUpLinkPort"
                gateway_cluster_member_index: 'nsxmanager.[1].edgenode.[1]->member_index'
                subnets:
                   - prefixlen: 24
                     ip_addresses:
                         - '192.168.50.1'
            '[2]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: 'TIER0-LRPort-1-UPLINKPORT'
                summary: "TIER0 LRPort Uplink Port1 created through automation"
                linked_switch_port_id: nsxmanager.[1].logicalport.[2]->id
                resource_type: "LogicalRouterUpLinkPort"
                gateway_cluster_member_index: 'nsxmanager.[1].edgenode.[2]->member_index'
                subnets:
                   - prefixlen: 24
                     ip_addresses:
                         - '192.168.50.2'

    CreateLogicalSwitchForTIER1: &PLRTLR_CREATE_LS_FOR_TIER1
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalswitch:
            '[3]':
                name: 'Tier1-Logical-Switch-3'
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                admin_state: UP
                # replication_mode's value is case sensitive
                replication_mode: MTEP # source

    CreateLogicalPortForTIER1: &PLRTLR_CREATE_LP_FOR_TIER1
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalport:
            '[4]':
                switch_id: nsxmanager.[1].logicalswitch.[3]
                name: 'TIER1-LogicalPort-5'
                admin_state: UP

    CreateTIER1LogicalRouterForEdge: &PLRTLR_CREATE_TIER1_LR
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: "5"
        logicalrouter:
            '[2]':
                name: 'logical-router-tier-1'
                summary: "LRouter TIER-1 created through automation"
                router_type: "TIER1"

    CreateDownlinkTier1LogicalRouterPort: &PLRTLR_CREATE_DOWNLINK_FOR_TIER1_LR
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        logicalrouterport:
            '[5]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[2]"
                name: 'TIER1-LRPort-3-Downlinkport'
                summary: "Logical Router Port on TIER-1 Downlink"
                linked_switch_port_id: nsxmanager.[1].logicalport.[4]->id
                resource_type: "LogicalRouterDownLinkPort"
                subnets:
                   - prefixlen: 24
                     ip_addresses:
                         - '192.168.70.1'

    CreateRouterLinkPortOnTIER0Router: &PLRTLR_CREATE_ROUTER_LINK_PORT_ON_TIER0
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        logicalrouterlinkport:
            '[6]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: 'TIER0-RouterLinkPort'
                summary: "Create a Router Link port on TIER-0 Router"
                resource_type: "LogicalRouterLinkPort"

    CreateRouterLinkPortOnTIER1Router: &PLRTLR_CREATE_ROUTER_LINK_PORT_ON_TIER1
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        logicalrouterlinkport:
            '[7]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[2]"
                linked_router_port_id: nsxmanager.[1].logicalrouterlinkport.[6]->id
                name: 'TIER1-RouterLinkPort'
                summary: "Create a Router Link port on TIER-1 Router"
                resource_type: "LogicalRouterLinkPort"

    UpdateStaticRoutes: &PLRTLR_UPDATE_STATIC_ROUTES
        Type: "Router"
        TestRouter: "nsxmanager.[1].logicalrouter.[1]"
        lrstaticroutes:
            '[1]':
                staticroutes:
                    - name: 'static-route-1'
                      summary: 'Static route for 192.168.30.0/24'
                      next_hops:
                          - '192.168.50.253'
                      network: '192.168.200.0/24'
                      lr_port_id: "nsxmanager.[1].logicalrouteruplinkport.[1]->id_"
                    - name: 'static-route-2'
                      summary: 'Static route for 192.168.40.0/24'
                      next_hops:
                          - '192.168.50.253'
                      network: '192.168.200.0/24'
                      lr_port_id: "nsxmanager.[1].logicalrouteruplinkport.[2]->id_"

    DeleteRouterLinkPortOnTIER0Router: &PLRTLR_DELETE_ROUTER_LINK_PORT_ON_TIER0
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        deletelogicalrouterlinkport: "nsxmanager.[1].logicalrouterlinkport.[6]"

    DeleteRouterLinkPortOnTIER1Router: &PLRTLR_DELETE_ROUTER_LINK_PORT_ON_TIER1
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        deletelogicalrouterlinkport: "nsxmanager.[1].logicalrouterlinkport.[7]"

    DeleteDownlinkTier1LogicalRouterPort: &PLRTLR_DELETE_DOWNLINK_TIER1_LRP
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        deletelogicalrouterport: "nsxmanager.[1].logicalrouterport.[5]"

    DeleteTIER1LogicalRouterForEdge: &PLRTLR_DELETE_TIER1_LR
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletelogicalrouter: "nsxmanager.[1].logicalrouter.[2]"

    DeleteLogicalSwitchForTier1: &PLRTLR_DELETE_LS_FOR_TIER1
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletelogicalswitch: 'nsxmanager.[1].logicalswitch.[3]'

    DeleteLogicalPortForTier1: &PLRTLR_DELETE_LP_FOR_TIER1
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        deletelogicalport: 'nsxmanager.[1].logicalport.[4]'

    DeleteUplinkProfile: &PLRTLR_DELETE_UPLINK_PROFILE_01--ESX
       Type: NSX
       TestNSX: nsxmanager.[1]
       deleteuplinkprofile: 'nsxmanager.[1].uplinkprofile.[1]'

    DeleteTransportNode1: &PLRTLR_DELETE_TRANSPORT_NODE_01--ESX
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletetransportnode: 'nsxmanager.[1].transportnode.[1]'

    DeleteTransportNode2: &PLRTLR_DELETE_TRANSPORT_NODE_02--ESX
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletetransportnode: 'nsxmanager.[1].transportnode.[2]'

    DeleteTransportZone: &PLRTLR_DELETE_TRANSPORT_ZONE_01--ESX
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletetransportzone: 'nsxmanager.[1].transportzone.[1]'
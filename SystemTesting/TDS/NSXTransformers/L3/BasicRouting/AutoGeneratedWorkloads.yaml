AutoGeneratedWorkloads: &AutoGeneratedWorkloads
    __AUTOGENERATED__: true

    AddRouteVif-1_LRP-101_IP-192.168.0.0_NETMASK-255.255.0.0:
        TestAdapter: vm.[1].vif.[1]
        Type: NetAdapter
        gateway: nsxmanager.[1].logicalrouterport.[101]->ip
        netmask: 255.255.0.0
        network: 192.168.0.0
        route: add

    AddRouteVnic-1_LRP-101_IP-192.168.0.0_NETMASK-255.255.0.0:
        TestAdapter: vm.[1].vnic.[1]
        Type: NetAdapter
        gateway: nsxmanager.[1].logicalrouterport.[101]->ip
        netmask: 255.255.0.0
        network: 192.168.0.0
        route: add

    AddVM1Vif1ToKVM1Bridge1:
        TestVM: vm.[1]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[1].bridge.[1]

    AddVM1Vif1ToKVM2Bridge1:
        TestVM: vm.[1]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[2].bridge.[1]

    AddVM1Vnic1ToLS1:
        TestVM: vm.[1]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[1]
                startconnected: 1

    AddVM1Vnic1ToLS101:
        TestVM: vm.[1]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[101]
                startconnected: 1

    AddVM2Vif1ToKVM2Bridge1:
        TestVM: vm.[2]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[2].bridge.[1]

    AddVM2Vif1ToKVM3Bridge1:
        TestVM: vm.[2]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[3].bridge.[1]

    AddVM2Vnic1ToLS102:
        TestVM: vm.[2]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[102]
                startconnected: 1

    AddVM2Vnic1ToLS2:
        TestVM: vm.[2]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[2]
                startconnected: 1

    AddVM3Vnic1ToLS201:
        TestVM: vm.[3]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[201]
                startconnected: 1

    AttachLRP-101_LSP-101:
        TestPort: nsxmanager.[1].logicalrouterport.[101]
        Type: Port
        reconfigure:
            linked_switch_port_id: nsxmanager.[1].logicalport.[101]->id

    AttachLRP-101_LSP-999:
        TestPort: nsxmanager.[1].logicalrouterport.[101]
        Type: Port
        reconfigure:
            linked_switch_port_id: nsxmanager.[1].logicalport.[999]->id

    AttachULRP-1_LSP-201:
        TestPort: nsxmanager.[1].logicalrouteruplinkport.[1]
        Type: Port
        reconfigure:
            linked_switch_port_id: nsxmanager.[1].logicalport.[201]->id

    AttachULRP-1_LSP-999:
        TestPort: nsxmanager.[1].logicalrouteruplinkport.[1]
        Type: Port
        reconfigure:
            linked_switch_port_id: nsxmanager.[1].logicalport.[999]->id

    ConfigureVM1Vif1IP-192.168.1.10:
        TestAdapter: vm.[1].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.1.10
        netmask: 255.255.255.0

    ConfigureVM1Vif1IP-192.168.70.10:
        TestAdapter: vm.[1].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.70.10
        netmask: 255.255.255.0

    ConfigureVM1Vnic1IP-192.168.1.10:
        TestAdapter: vm.[1].vnic.[1]
        Type: NetAdapter
        ipv4: 192.168.1.10
        netmask: 255.255.255.0

    ConfigureVM1Vnic1IP-192.168.70.10:
        TestAdapter: vm.[1].vnic.[1]
        Type: NetAdapter
        ipv4: 192.168.70.10
        netmask: 255.255.255.0

    ConfigureVM2Vif1IP-192.168.2.10:
        TestAdapter: vm.[2].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.2.10
        netmask: 255.255.255.0

    ConfigureVM2Vnic1IP-192.168.2.10:
        TestAdapter: vm.[2].vnic.[1]
        Type: NetAdapter
        ipv4: 192.168.2.10
        netmask: 255.255.255.0

    ConfigureVM3Vnic1IP-192.168.50.10:
        TestAdapter: vm.[3].vnic.[1]
        Type: NetAdapter
        ipv4: 192.168.50.10
        netmask: 255.255.255.0

    CreateFPROF-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        fabricprofile:
            '[1]':
                declare_dead_timer: 60000
                hello_interval: 20000
                name: Fabric Profile - 1
                resource_type: FabricProfileClusterKeepAlive
                summary: Fabric Profile - 1 for PLR uplink edge cluster

    CreateLP1OnLS101ForVM1Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[1]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[101]->id

    CreateLP1OnLS1ForVM1Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[1]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLP2OnLS102ForVM2Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[2]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[2].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[102]->id

    CreateLP2OnLS2ForVM2Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[2]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[2].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[2]->id

    CreateLRP-101_LR-1_IP-192.168.1.1_LSP-101:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[101]':
                linked_switch_port_id: nsxmanager.[1].logicalport.[101]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[1]
                name: lrouterport-101
                resource_type: LogicalRouterDownLinkPort
                subnets:
                -   ip_addresses:
                    - 192.168.1.1
                    prefixlen: 24
                summary: LRPort101 created through automation

    CreateLRP-102_LR-1_IP-192.168.2.1_LSP-102:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[102]':
                linked_switch_port_id: nsxmanager.[1].logicalport.[102]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[1]
                name: lrouterport-102
                resource_type: LogicalRouterDownLinkPort
                subnets:
                -   ip_addresses:
                    - 192.168.2.1
                    prefixlen: 24
                summary: LRPort102 created through automation

    CreateLS-101:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[101]':
                admin_state: UP
                name: lswitch101
                replication_mode: MTEP
                summary: lswitch101 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS-102:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[102]':
                admin_state: UP
                name: lswitch102
                replication_mode: MTEP
                summary: lswitch102 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS-201:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[201]':
                admin_state: UP
                name: lswitch201
                replication_mode: MTEP
                summary: lswitch201 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS-999:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[999]':
                admin_state: UP
                name: lswitch999
                replication_mode: MTEP
                summary: lswitch999 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLSP-101_LS-101:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[101]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[101]->id

    CreateLSP-102_LS-102:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[102]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[102]->id

    CreateLSP-201_LS-201:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[201]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[201]->id

    CreateLSP-999_LS-999:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[999]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[999]->id

    CreatePLR-1_EDGECLUSTER-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouter:
            '[1]':
                cluster_id: nsxmanager.[1].edgecluster.[1]
                name: PLR-1
                router_type: TIER0
                summary: Provider Logical Router(Tier0) - 1

    CreateTN-1_HOSTNODE-1_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[1]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[1]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-1_HOSTNODE-1_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[1]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[1]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-2_HOSTNODE-2_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[2]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[2]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-2_HOSTNODE-2_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[2]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[2]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-3_HOSTNODE-3_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[3]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[3]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-3_HOSTNODE-3_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[3]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[3]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTZ-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportzone:
            '[1]':
                name: transportzone1
                summary: transportzone1 (created through automation)
                switch_name: nsxvswitch
                transport_zone_type: OVERLAY

    CreateULRP-1_LSP-201_GWMC-0_IP-192.168.50.1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouteruplinkport:
            '[1]':
                gateway_cluster_member_index:
                - 0
                linked_switch_port_id: nsxmanager.[1].logicalport.[201]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[1]
                name: PLR1 Uplink1
                resource_type: LogicalRouterUpLinkPort
                subnets:
                -   ip_addresses:
                    - 192.168.50.1
                    prefixlen: 24
                summary: Uplink port 1 for PLR 1

    CreateUPROF-1_MTU-1600:
        TestNSX: nsxmanager.[1]
        Type: NSX
        uplinkprofile:
            '[1]':
                mtu: 1600
                resource_type: UplinkHostSwitchProfile
                teaming:
                    active:
                    -   adapter_name: uplink1
                        adapter_type: PNIC
                    policy: FAILOVER_ORDER
                vlan: 0

    DeleteEdgeCluster-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteedgecluster: nsxmanager.[1].edgecluster.[1]

    DeleteEdgeNode-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteedgenode: nsxmanager.[1].edgenode.[1]

    DeleteFPROF-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletefabricprofile: nsxmanager.[1].fabricprofile.[1]

    DeleteLR-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouter: nsxmanager.[1].logicalrouter.[1]

    DeleteLRP-101:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouterport: nsxmanager.[1].logicalrouterport.[101]

    DeleteLRP-102:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouterport: nsxmanager.[1].logicalrouterport.[102]

    DeleteLS-101:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[101]

    DeleteLS-102:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[102]

    DeleteLS-201:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[201]

    DeleteLS-999:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[999]

    DeleteLSP-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[1]
        query_params:
            detach: 'true'

    DeleteLSP-1-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[1-2]
        query_params:
            detach: 'true'

    DeleteLSP-101-102:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[101-102]
        query_params:
            detach: 'true'

    DeleteLSP-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[2]
        query_params:
            detach: 'true'

    DeleteLSP-201:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[201]
        query_params:
            detach: 'true'

    DeleteLSP-999:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[999]
        query_params:
            detach: 'true'

    DeleteTN-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportnode: nsxmanager.[1].transportnode.[1]

    DeleteTN-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportnode: nsxmanager.[1].transportnode.[2]

    DeleteTN-3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportnode: nsxmanager.[1].transportnode.[3]

    DeleteTZ-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportzone: nsxmanager.[1].transportzone.[1]

    DeleteULRP-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouteruplinkport: nsxmanager.[1].logicalrouteruplinkport.[1]

    DeleteUPROF-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteuplinkprofile: nsxmanager.[1].uplinkprofile.[1]

    DeleteVif-1_VM-1:
        TestVM: vm.[1]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-2:
        TestVM: vm.[2]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVnic-1_VM-1:
        TestVM: vm.[1]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-2:
        TestVM: vm.[2]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-3:
        TestVM: vm.[3]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DiscoverESX1Vtep1FromDevice-vmk10:
        Testhost: esx.[1]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: vmk10

    DiscoverESX2Vtep1FromDevice-vmk10:
        Testhost: esx.[2]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: vmk10

    DiscoverESX3Vtep1FromDevice-vmk10:
        Testhost: esx.[3]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: vmk10

    DiscoverEdgeNode-1_EDGE-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        edgenode:
            '[1]':
                discover: 'true'
                ipaddresses:
                - nsxedge.[1]->management_ip
                resource_type: EdgeNode

    DiscoverHostNode1FromESX1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[1]':
                discover: 'true'
                ip_addresses: esx.[1]

    DiscoverHostNode1FromKVM1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[1]':
                discover: 'true'
                ip_addresses: kvm.[1]

    DiscoverHostNode2FromESX2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[2]':
                discover: 'true'
                ip_addresses: esx.[2]

    DiscoverHostNode2FromKVM2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[2]':
                discover: 'true'
                ip_addresses: kvm.[2]

    DiscoverHostNode3FromESX3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[3]':
                discover: 'true'
                ip_addresses: esx.[3]

    DiscoverHostNode3FromKVM3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[3]':
                discover: 'true'
                ip_addresses: kvm.[3]

    DiscoverKVM1Vtep1FromDevice-nsx-vtep0.0:
        Testhost: kvm.[1]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: nsx-vtep0.0

    DiscoverKVM2Vtep1FromDevice-nsx-vtep0.0:
        Testhost: kvm.[2]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: nsx-vtep0.0

    DiscoverKVM3Vtep1FromDevice-nsx-vtep0.0:
        Testhost: kvm.[3]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: nsx-vtep0.0

    DiscoverLport1FromVM1Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[1]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport2FromVM2Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[2]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[2].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport3FromVM3Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[3]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[3].vnic.[1]->uuid
                discover: 'true'

    DiscoverVnicsOnEdge-1_VNIC-1-3:
        TestVM: nsxedge.[1]
        Type: VM
        vnic:
            '[1-3]':
                discover: 'true'

    JoinCCPClusterNode-1_NSXC-1_ToNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        clusternode:
            '[1]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    JoinCCPClusterNode-2_NSXC-2_ToNSXC-1:
        TestController: nsxcontroller.[2]
        Type: Controller
        clusternode:
            '[2]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    JoinCCPClusterNode-3_NSXC-3_ToNSXC-1:
        TestController: nsxcontroller.[3]
        Type: Controller
        clusternode:
            '[3]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    NetPerfTCPFailFromVM1Vnic1ToVM2Vnic1:
        ExpectedResult: Fail
        L3Protocol: ipv4
        L4Protocol: tcp
        SupportAdapter: vm.[2].vnic.[1]
        TestAdapter: vm.[1].vnic.[1]
        TestDuration: 10
        ToolName: netperf
        Type: Traffic

    NetPerfTCPFailFromVM3Vnic1ToVM1Vnic1:
        ExpectedResult: Fail
        L3Protocol: ipv4
        L4Protocol: tcp
        SupportAdapter: vm.[1].vnic.[1]
        TestAdapter: vm.[3].vnic.[1]
        TestDuration: 10
        ToolName: netperf
        Type: Traffic

    NetPerfTCPFromVM1Vif1ToVM2Vif1:
        L3Protocol: ipv4
        L4Protocol: tcp
        SupportAdapter: vm.[2].vif.[1]
        TestAdapter: vm.[1].vif.[1]
        TestDuration: 10
        ToolName: netperf
        Type: Traffic

    NetPerfTCPFromVM1Vnic1ToVM2Vnic1:
        L3Protocol: ipv4
        L4Protocol: tcp
        SupportAdapter: vm.[2].vnic.[1]
        TestAdapter: vm.[1].vnic.[1]
        TestDuration: 10
        ToolName: netperf
        Type: Traffic

    NetPerfTCPFromVM3Vnic1ToVM1Vnic1:
        L3Protocol: ipv4
        L4Protocol: tcp
        SupportAdapter: vm.[1].vnic.[1]
        TestAdapter: vm.[3].vnic.[1]
        TestDuration: 10
        ToolName: netperf
        Type: Traffic

    PingFailFromVM1Vif1ToVM2Vif1:
        ExpectedResult: Fail
        SupportAdapter: vm.[2].vif.[1]
        TestAdapter: vm.[1].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFailFromVM1Vnic1ToVM2Vnic1:
        ExpectedResult: Fail
        SupportAdapter: vm.[2].vnic.[1]
        TestAdapter: vm.[1].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFailFromVM3Vnic1ToVM1Vif1:
        ExpectedResult: Fail
        SupportAdapter: vm.[1].vif.[1]
        TestAdapter: vm.[3].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFailFromVM3Vnic1ToVM1Vnic1:
        ExpectedResult: Fail
        SupportAdapter: vm.[1].vnic.[1]
        TestAdapter: vm.[3].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromESX1Vtep1ToESX2Vtep1:
        SupportAdapter: esx.[2].vtep.[1]
        TestAdapter: esx.[1].vtep.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromESX1Vtep1ToESX3Vtep1:
        SupportAdapter: esx.[3].vtep.[1]
        TestAdapter: esx.[1].vtep.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromESX1Vtep1ToKVM2Vtep1:
        SupportAdapter: kvm.[2].vtep.[1]
        TestAdapter: esx.[1].vtep.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromESX1Vtep1ToKVM3Vtep1:
        SupportAdapter: kvm.[3].vtep.[1]
        TestAdapter: esx.[1].vtep.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromESX2Vtep1ToESX3Vtep1:
        SupportAdapter: esx.[3].vtep.[1]
        TestAdapter: esx.[2].vtep.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromKVM1Vtep1ToKVM2Vtep1:
        SupportAdapter: kvm.[2].vtep.[1]
        TestAdapter: kvm.[1].vtep.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromKVM2Vtep1ToKVM3Vtep1:
        SupportAdapter: kvm.[3].vtep.[1]
        TestAdapter: kvm.[2].vtep.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromVM1Vif1ToVM2Vif1:
        SupportAdapter: vm.[2].vif.[1]
        TestAdapter: vm.[1].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromVM1Vnic1ToVM2Vnic1:
        SupportAdapter: vm.[2].vnic.[1]
        TestAdapter: vm.[1].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromVM3Vif1ToVM1Vif1:
        SupportAdapter: vm.[1].vif.[1]
        TestAdapter: vm.[3].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromVM3Vnic1ToVM1Vif1:
        SupportAdapter: vm.[1].vif.[1]
        TestAdapter: vm.[3].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromVM3Vnic1ToVM1Vnic1:
        SupportAdapter: vm.[1].vnic.[1]
        TestAdapter: vm.[3].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PowerOffVM-1:
        TestVM: vm.[1]
        Type: VM
        vmstate: poweroff

    PowerOnVM-1:
        TestVM: vm.[1]
        Type: VM
        vmstate: poweron

    RebootESX-2:
        TestHost: esx.[2]
        Type: Host
        reboot: 'yes'

    RebootKVM-2:
        TestHost: kvm.[2]
        Type: Host
        reboot: 'yes'

    RebootNSXC-1:
        TestNSX: nsxcontroller.[1]
        Type: NSX
        reboot:
            execution_type: cli

    RebootNSXC-2:
        TestNSX: nsxcontroller.[2]
        Type: NSX
        reboot:
            execution_type: cli

    RebootNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        reboot:
            execution_type: cli

    ReconfigureLRP-101_IP-192.168.70.1:
        TestPort: nsxmanager.[1].logicalrouterport.[101]
        Type: Port
        reconfigure:
            subnets:
            -   ip_addresses:
                - 192.168.70.1
                prefixlen: 24

    ReconfigureLRP-101_LR-1_IP-192.168.1.254_Prefix-24:
        TestPort: nsxmanager.[1].logicalrouterport.[101]
        Type: Port
        reconfigure:
            subnets:
            -   ip_addresses:
                - 192.168.1.254
                prefixlen: 24

    RegisterEdge:
        TestGateway: nsxedge.[1]
        Type: Gateway
        register_nsx_edge_node:
            execution_type: cli
            manager_ip: nsxmanager.[1]->manager_ip
            manager_password: default
            manager_thumbprint: nsxmanager.[1]->manager_thumbprint
            manager_username: admin

    RemoveManagerOnESX-1:
        TestHost: esx.[1]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnESX-2:
        TestHost: esx.[2]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnESX-3:
        TestHost: esx.[3]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnKVM-1:
        TestHost: kvm.[1]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnKVM-2:
        TestHost: kvm.[2]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnKVM-3:
        TestHost: kvm.[3]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnESX-1:
        TestHost: esx.[1]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnESX-2:
        TestHost: esx.[2]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnESX-3:
        TestHost: esx.[3]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-1:
        TestHost: kvm.[1]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-2:
        TestHost: kvm.[2]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-3:
        TestHost: kvm.[3]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnNSXC-2:
        TestController: nsxcontroller.[2]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnNSXC-3:
        TestController: nsxcontroller.[3]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    UndiscoverHostNode-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[1]
        skipmethod: 1

    UndiscoverHostNode-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[2]
        skipmethod: 1

    UndiscoverHostNode-3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[3]
        skipmethod: 1

    UndiscoverLSP-1-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[1-2]
        skipmethod: 1

    UndiscoverLSP-3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[3]
        skipmethod: 1

    VerifyAttachmentLRP-101_LSP-101:
        TestPort: nsxmanager.[1].logicalrouterport.[101]
        Type: Port
        read:
            linked_switch_port_id[?]equal_to: nsxmanager.[1].logicalport.[101]->id

    VerifyAttachmentLRP-101_LSP-999:
        TestPort: nsxmanager.[1].logicalrouterport.[101]
        Type: Port
        read:
            linked_switch_port_id[?]equal_to: nsxmanager.[1].logicalport.[999]->id

    VerifyAttachmentULRP-1_LSP-201:
        TestPort: nsxmanager.[1].logicalrouteruplinkport.[1]
        Type: Port
        read:
            linked_switch_port_id[?]equal_to: nsxmanager.[1].logicalport.[201]->id

    VerifyAttachmentULRP-1_LSP-999:
        TestPort: nsxmanager.[1].logicalrouteruplinkport.[1]
        Type: Port
        read:
            linked_switch_port_id[?]equal_to: nsxmanager.[1].logicalport.[999]->id

    JoinMPClusterNode-1_NSXM-1_ToNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        clusternode:
            '[1]':
                mgr_role_config:
                    manager_ip: nsxmanager.[1]
                    manager_thumbprint: nsxmanager.[1]
                    node_type: AddManagementNodeSpec
                    password: default
                    username: admin

    MapNSXManager-1_CLUSTER-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        cluster:
            '[1]':
                id_: 1
                map_object: true

    VerifyMPClusterStatus-1_NSXM-1:
        TestCluster: nsxmanager.[1].cluster.[1]
        Type: Cluster
        cluster_status:
            control_cluster_status:
                status[?]equal_to: STABLE
            mgmt_cluster_status:
                status[?]equal_to: STABLE

    ConfigureServiceOnNSXC-1_NAME-controller_STATE-stop:
        TestController: nsxcontroller.[1]
        Type: Controller
        configure_service_state:
            service_name: controller
            state: stop

    ConfigureServiceOnNSXC-2_NAME-controller_STATE-stop:
        TestController: nsxcontroller.[2]
        Type: Controller
        configure_service_state:
            service_name: controller
            state: stop

    ConfigureServiceOnNSXC-3_NAME-controller_STATE-stop:
        TestController: nsxcontroller.[3]
        Type: Controller
        configure_service_state:
            service_name: controller
            state: stop

    DeleteBootstrapFileOnNSXC-1:
        TestNSX: nsxcontroller.[1]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: bootstrap-config
            path: /opt/vmware/etc

    DeleteBootstrapFileOnNSXC-2:
        TestNSX: nsxcontroller.[2]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: bootstrap-config
            path: /opt/vmware/etc

    DeleteBootstrapFileOnNSXC-3:
        TestNSX: nsxcontroller.[3]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: bootstrap-config
            path: /opt/vmware/etc

    DeleteCCPClusterNode-1_NSXC-1_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxcontroller.[1].clusternode.[1]

    DeleteCCPClusterNode-2_NSXC-2_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxcontroller.[2].clusternode.[2]

    DeleteCCPClusterNode-3_NSXC-3_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxcontroller.[3].clusternode.[3]

    DeleteNodeUUIDFileOnNSXC-1:
        TestNSX: nsxcontroller.[1]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: node-uuid
            path: /opt/vmware/etc

    DeleteNodeUUIDFileOnNSXC-2:
        TestNSX: nsxcontroller.[2]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: node-uuid
            path: /opt/vmware/etc

    DeleteNodeUUIDFileOnNSXC-3:
        TestNSX: nsxcontroller.[3]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: node-uuid
            path: /opt/vmware/etc

    RemoveCCPClusterNode-1_FromNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        remove_ccp_cluster_node:
            controller_ip: nsxcontroller.[1]
            execution_type: cli
            force: 'yes'

    RemoveCCPClusterNode-2_FromNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        remove_ccp_cluster_node:
            controller_ip: nsxcontroller.[2]
            execution_type: cli
            force: 'yes'

    RemoveCCPClusterNode-3_FromNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        remove_ccp_cluster_node:
            controller_ip: nsxcontroller.[3]
            execution_type: cli
            force: 'yes'

    WaitForMPClusterStable-1_NSXM-1:
        TestCluster: nsxmanager.[1].cluster.[1]
        Type: Cluster
        wait_for_required_cluster_status:
            required_status: STABLE
            time_to_monitor: 300

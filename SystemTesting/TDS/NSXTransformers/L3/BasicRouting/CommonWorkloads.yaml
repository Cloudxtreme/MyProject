{% include 'TDS/NSXTransformers/L3/BasicRouting/AutoGeneratedWorkloads.yaml' %}

WORKLOADS:
    <<: *AutoGeneratedWorkloads
    DiscoverHostnodes--ESX:
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        hostnode:
            '[1-2]':
                discover: 'true'
                ip_addresses: 'esx.[x=hostnode_index]'
    DiscoverHostnodes--KVM:
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        hostnode:
            '[1-2]':
                discover: 'true'
                ip_addresses: 'kvm.[x=hostnode_index]'

    CreateTransportZone1: &CreateTransportZone1
        Type: NSX
        TestNSX: nsxmanager.[1]
        transportzone:
            '[1]':
                name: autogenerate
                transport_zone_type: OVERLAY
                switch_name: 'nsxvswitch'

    CreateUplinkProfile: &CREATE_UPLINK_PROFILE_01
        Type: NSX
        TestNSX: nsxmanager.[1]
        UplinkProfile:
            '[1]':
                mtu: 1600
                teaming:
                    active:
                        - adapter_name: 'uplink1'
                          adapter_type: 'PNIC'
                    policy: 'FAILOVER_ORDER'
                vlan: '0'
                resource_type: 'UplinkHostSwitchProfile'

    AttachVM1Nic1ToLS1P1--KVM:
        - - AddVM1Vif1ToKVM1Bridge1
        - - CreateLP1OnLS1ForVM1Vif1
    AttachVM1Nic1ToLS1P1--ESX:
        - - AddVM1Vnic1ToLS1
        - - DiscoverLport1FromVM1Vnic1

    AttachVM2Nic1ToLS2P1--KVM:
        - - AddVM2Vif1ToKVM2Bridge1
        - - CreateLP1OnLS2ForVM2Vif1
    AttachVM2Nic1ToLS2P1--ESX:
        - - AddVM2Vnic1ToLS2
        - - DiscoverLport2FromVM2Vnic1

    AttachVM3Nic1ToUplinkLS--KVM:
        - - AddVM3Vif1ToKVM1Bridge1
        - - CreateLP3OnLS201ForVM3Vif1
    AttachVM3Nic1ToUplinkLS--ESX:
        - - AddVM3Vnic1ToLS201
        - - DiscoverLport3FromVM3Vnic1

    AttachVM1Nic1ToDownlinkLS--KVM:
        - - AddVM1Vif1ToKVM1Bridge1
        - - CreateLP1OnLS101ForVM1Vif1
    AttachVM1Nic1ToDownlinkLS--ESX:
        - - AddVM1Vnic1ToLS101
        - - DiscoverLport1FromVM1Vnic1

    AttachVM2Nic1ToDownlinkLS--KVM:
        - - AddVM2Vif1ToKVM2Bridge1
        - - CreateLP2OnLS102ForVM2Vif1
    AttachVM2Nic1ToDownlinkLS--ESX:
        - - AddVM2Vnic1ToLS102
        - - DiscoverLport2FromVM2Vnic1

    ConnectVM1Nic1ToLP1--ESX:
        - - AddVM1Vnic1ToLS101
    ConnectVM1Nic1ToLP1--KVM:
        - - CreateLP1OnLS101ForVM1Vif1

    ConnectVM2Nic1ToLP2--ESX:
        - - AddVM2Vnic1ToLS102
    ConnectVM2Nic1ToLP2--KVM:
        - - CreateLP2OnLS102ForVM2Vif1

    ConnectVM3Nic1ToLP3--ESX:
        - - AddVM3Vnic1ToLS201
    ConnectVM3Nic1ToLP3--KVM:
        - - CreateLP3OnLS201ForVM3Vif1

    DisconnectVM1Nic1FromLP1--ESX:
        Type:  NetAdapter
        TestAdapter: 'vm.[1].vnic.[1]'
        reconfigure: 'true'
        connected:         0
        startconnected:    0
    DisconnectVM1Nic1FromLP1--KVM:
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        deletelogicalport: 'nsxmanager.[1].logicalport.[1]'

    DisconnectVM2Nic1FromLP2--ESX:
        Type:  NetAdapter
        TestAdapter: 'vm.[2].vnic.[1]'
        reconfigure: 'true'
        connected:         0
        startconnected:    0
    DisconnectVM2Nic1FromLP2--KVM:
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        deletelogicalport: 'nsxmanager.[1].logicalport.[2]'

    DisconnectVM3Nic1FromLP3--ESX:
        Type:  NetAdapter
        TestAdapter: 'vm.[3].vnic.[1]'
        reconfigure: 'true'
        connected:         0
        startconnected:    0
    DisconnectVM3Nic1FromLP3--KVM:
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        deletelogicalport: 'nsxmanager.[1].logicalport.[3]'

    ReconnectVM1Nic1ToLP1--ESX:
        Type:  NetAdapter
        TestAdapter: 'vm.[1].vnic.[1]'
        reconfigure: 'true'
        connected:         1
        startconnected:    1

    ReconnectVM2Nic1ToLP2--ESX:
        Type:  NetAdapter
        TestAdapter: 'vm.[2].vnic.[1]'
        reconfigure: 'true'
        connected:         1
        startconnected:    1

    ReconnectVM3Nic1ToLP3--ESX:
        Type:  NetAdapter
        TestAdapter: 'vm.[3].vnic.[1]'
        reconfigure: 'true'
        connected:         1
        startconnected:    1

    ConfigureVM1Nic1IP--ESX: &ConfigureVM1Nic1IP--ESX
        Type: NetAdapter
        TestAdapter: vm.[1].vnic.[1]
        ipv4:       192.168.1.10
        netmask:    255.255.255.0
    ConfigureVM1Nic1IP--KVM:
        <<: *ConfigureVM1Nic1IP--ESX
        TestAdapter: vm.[1].vif.[1]

    ConfigureVM2Nic1IP--ESX: &ConfigureVM2Nic1IP--ESX
        Type: NetAdapter
        TestAdapter: vm.[2].vnic.[1]
        ipv4:       192.168.2.10
        netmask:    255.255.255.0
    ConfigureVM2Nic1IP--KVM:
        <<: *ConfigureVM2Nic1IP--ESX
        TestAdapter: vm.[2].vif.[1]

    ConfigureVM3Nic1IP--ESX: &ConfigureVM3Nic1IP--ESX
        Type: NetAdapter
        TestAdapter: vm.[3].vnic.[1]
        ipv4:       192.168.50.10
        netmask:    255.255.255.0
    ConfigureVM3Nic1IP--KVM:
        <<: *ConfigureVM3Nic1IP--ESX
        TestAdapter: vm.[3].vif.[1]

    AddRouteVM1ToVM2--ESX: &AddRouteVM1ToVM2--ESX
        Type:        NetAdapter
        Testadapter: vm.[1].vnic.[1]
        netmask:     255.255.255.0
        route:       add
        network:     192.168.2.0
        gateway:     192.168.1.1
    AddRouteVM1ToVM2--KVM:
        <<: *AddRouteVM1ToVM2--ESX
        Testadapter: vm.[1].vif.[1]

    AddRouteVM2ToVM1--ESX: &AddRouteVM2ToVM1--ESX
        Type:        NetAdapter
        Testadapter: vm.[2].vnic.[1]
        netmask:     255.255.255.0
        route:       add
        network:     192.168.1.0
        gateway:     192.168.2.1

    AddRouteVM2ToVM1--KVM:
        <<: *AddRouteVM2ToVM1--ESX
        Testadapter: vm.[2].vif.[1]

    DeleteVM1Nic1--ESX:
        Type: VM
        TestVM: 'vm.[1]'
        deletevnic: 'vm.[1].vnic.[1]'
    DeleteVM1Nic1--KVM:
        Type: VM
        TestVM: 'vm.[1]'
        deletevif: 'vm.[1].vif.[1]'

    DeleteVM2Nic1--ESX:
        Type: VM
        TestVM: 'vm.[2]'
        deletevnic: 'vm.[2].vnic.[1]'
    DeleteVM2Nic1--KVM:
        Type: VM
        TestVM: 'vm.[2]'
        deletevif: 'vm.[2].vif.[1]'

    PingVM1ToVM2--ESX: &PingVM1ToVM2--ESX
        Type          : Traffic
        ToolName      : ping
        TestAdapter   : vm.[1].vnic.[1]
        SupportAdapter: vm.[2].vnic.[1]
        TestDuration  : 10
    PingVM1ToVM2--KVM:
        <<: *PingVM1ToVM2--ESX
        TestAdapter   : vm.[1].vif.[1]
        SupportAdapter: vm.[2].vif.[1]

    PingVM2ToVM1--ESX: &PingVM2ToVM1--ESX
        Type          : Traffic
        ToolName      : ping
        TestAdapter   : vm.[2].vnic.[1]
        SupportAdapter: vm.[1].vnic.[1]
        TestDuration  : 10
    PingVM2ToVM1--KVM:
        <<: *PingVM2ToVM1--ESX
        TestAdapter   : vm.[2].vif.[1]
        SupportAdapter: vm.[1].vif.[1]

    ArpingCommon: &ArpingCommon
        Type: Traffic
        ToolName: arpping
        TestDuration: 10
        connectivitytest: 0
    #TODO swalls: don't hard-code router IP once router ports work here
    ArpingVM1ToRouter--ESX: &ArpingVM1ToRouter--ESX
        <<: *ArpingCommon
        TestAdapter   : vm.[1].vnic.[1]
        SupportAdapter: 192.168.1.1
    ArpingVM1ToRouter--KVM:
        <<: *ArpingVM1ToRouter--ESX
        TestAdapter   : vm.[1].vif.[1]

    ArpingVM2ToRouter--ESX: &ArpingVM2ToRouter--ESX
        <<: *ArpingCommon
        TestAdapter   : vm.[2].vnic.[1]
        SupportAdapter: 192.168.2.1
    ArpingVM2ToRouter--KVM:
        <<: *ArpingVM2ToRouter--ESX
        TestAdapter   : vm.[2].vif.[1]

    TransitLSRoute--Common: &TransitLSRoute--Common
        destination: '169.0.0.0'
        mask: '255.255.255.240'
        next_hop: '0.0.0.0'
    TransitLSRoute--ESX: &TransitLSRoute--ESX
        <<: *TransitLSRoute--Common
        dr_flags: 'UCI'
        origin: 'MANUAL'
    TransitLSRoute--KVM: &TransitLSRoute--KVM
        <<: *TransitLSRoute--Common

    VerifyHost1LRHas3ConnectedRoutes--ESX: &VerifyHost1LRHas3ConnectedRoutes--ESX
        Type: 'Router'
        TestRouter: 'nsxmanager.[1].logicalrouter.[1]'
        endpoints: "esx.[1]"
        logical_router_id: nsxmanager.[1].logicalrouter.[1]->logical_router_id
        execution_type: 'cli'
        'get_route_table[?]equal_to':
            table:
                - *TransitLSRoute--ESX
                - destination: '192.168.1.0'
                  mask: '255.255.255.0'
                  next_hop: '0.0.0.0'
                  dr_flags: 'UCI'
                  origin: 'MANUAL'
                - destination: '192.168.2.0'
                  mask: '255.255.255.0'
                  next_hop: '0.0.0.0'
                  dr_flags: 'UCI'
                  origin: 'MANUAL'
    VerifyHost1LRHas3ConnectedRoutes--KVM:
        <<: *VerifyHost1LRHas3ConnectedRoutes--ESX
        endpoints: "kvm.[1]"
        'get_route_table[?]equal_to':
            table:
                - *TransitLSRoute--KVM
                - destination: '192.168.1.0'
                  mask: '255.255.255.0'
                  next_hop: '0.0.0.0'
                # FIXME(Krishna): Add missing fields once Bug 1376840 is fixed.
                #  dr_flags: 'UCI'
                #  origin: 'MANUAL'
                - destination: '192.168.2.0'
                  mask: '255.255.255.0'
                  next_hop: '0.0.0.0'
                # FIXME(Krishna): Add missing fields once Bug 1376840 is fixed.
                #  dr_flags: 'UCI'
                #  origin: 'MANUAL'

    VerifyHost1LRHas2ConnectedRoutes--ESX: &VerifyHost1LRHas2ConnectedRoutes--ESX
        Type: 'Router'
        TestRouter: 'nsxmanager.[1].logicalrouter.[1]'
        endpoints: "esx.[1]"
        logical_router_id: nsxmanager.[1].logicalrouter.[1]->logical_router_id
        execution_type: 'cli'
        'get_route_table[?]equal_to':
            table:
                - *TransitLSRoute--ESX
                - destination: '192.168.1.0'
                  mask: '255.255.255.0'
                  next_hop: '0.0.0.0'
                  dr_flags: 'UCI'
                  origin: 'MANUAL'
    VerifyHost1LRHas2ConnectedRoutes--KVM:
        <<: *VerifyHost1LRHas2ConnectedRoutes--ESX
        endpoints: "kvm.[1]"
        'get_route_table[?]equal_to':
            table:
                - *TransitLSRoute--KVM
                - destination: '192.168.1.0'
                  mask: '255.255.255.0'
                  next_hop: '0.0.0.0'
                # FIXME(Krishna): Add missing fields once Bug 1376840 is fixed.
                #  dr_flags: 'UCI'
                #  origin: 'MANUAL'

    VerifyHost1LRHas4ConnectedRoutes--ESX: &VerifyHost1LRHas4ConnectedRoutes--ESX
        Type: 'Router'
        TestRouter: 'nsxmanager.[1].logicalrouter.[1]'
        endpoints: "esx.[1]"
        logical_router_id: nsxmanager.[1].logicalrouter.[1]->logical_router_id
        execution_type: 'cli'
        'get_route_table[?]contains':
            table:
                - *TransitLSRoute--ESX
                - destination: '192.168.1.0'
                  mask: '255.255.255.0'
                  next_hop: '0.0.0.0'
                  dr_flags: 'UCI'
                  origin: 'MANUAL'
                - destination: '192.168.2.0'
                  mask: '255.255.255.0'
                  next_hop: '0.0.0.0'
                  dr_flags: 'UCI'
                  origin: 'MANUAL'
                - destination: '192.168.50.0'
                  mask: '255.255.255.0'
                  dr_flags: 'UG'
                  origin: 'AUTO'
    VerifyHost1LRHas4ConnectedRoutes--KVM:
        <<: *VerifyHost1LRHas4ConnectedRoutes--ESX
        endpoints: "kvm.[1]"
        'get_route_table[?]contains':
            table:
                - *TransitLSRoute--KVM
                - destination: '192.168.1.0'
                  mask: '255.255.255.0'
                  next_hop: '0.0.0.0'
                # FIXME(Krishna): Add missing fields once Bug 1376840 is fixed.
                #  dr_flags: 'UCI'
                #  origin: 'MANUAL'
                - destination: '192.168.2.0'
                  mask: '255.255.255.0'
                  next_hop: '0.0.0.0'
                # FIXME(Krishna): Add missing fields once Bug 1376840 is fixed.
                #  dr_flags: 'UCI'
                #  origin: 'MANUAL'
                - destination: '192.168.50.0'
                  mask: '255.255.255.0'
                # FIXME(Krishna): Add missing fields once Bug 1376840 is fixed.
                #  dr_flags: 'UG'
                #  origin: 'AUTO'

    PktcapVerifCommon: &PktcapVerifCommon
        "verificationtype": "pktcap"
        "pktcount": "1-10"
    TimeExceededVerif--ESX: &TimeExceededVerif--ESX
        <<: *PktcapVerifCommon
        target: "vm.[1].vnic.[1]"
        pktcapfilter: 'count 5,icmptype == 11,src host ipv4/nsxmanager.[1].logicalrouterport.[1],dst host ipv4/vm.[1].vnic.[1]'
    TimeExceededVerif--KVM: &TimeExceededVerif--KVM
        <<: *PktcapVerifCommon
        target: "vm.[1].vif.[1]"
        pktcapfilter: 'count 5,icmptype == 11,src host ipv4/nsxmanager.[1].logicalrouterport.[1],dst host ipv4/vm.[1].vif.[1]'
    SendTrafficVM1toVM2VerifyTimeExceededReceived--Common: &SendTrafficVM1toVM2VerifyTimeExceededReceived--Common
        Type: 'Traffic'
        toolName: 'scapy'
        protocol: 'udp'
        IpTTL: 1
        connectivitytest: '0'

    SendTrafficVM1toVM2VerifyTimeExceededReceived--ESX:
        <<: *SendTrafficVM1toVM2VerifyTimeExceededReceived--Common
        TestAdapter:    'vm.[1].vnic.[1]'
        SupportAdapter: 'vm.[2].vnic.[1]'
        Verification:
           'PktCapVerificaton': *TimeExceededVerif--ESX
    SendTrafficVM1toVM2VerifyTimeExceededReceived--KVM:
        <<: *SendTrafficVM1toVM2VerifyTimeExceededReceived--Common
        TestAdapter:    'vm.[1].vif.[1]'
        SupportAdapter: 'vm.[2].vif.[1]'
        Verification:
           'PktCapVerificaton': *TimeExceededVerif--KVM

    RouteVM2ToUnreachableNetwork--ESX: &RouteVM2ToUnreachableNetwork--ESX
        Type:        NetAdapter
        Testadapter: vm.[2].vnic.[1]
        # 192.168.5.0/24 will not be in the LR's routing table
        netmask:     255.255.255.0
        network:     192.168.5.0
        gateway:     192.168.2.1

    AddRouteVM2ToUnreachableNetwork--ESX: &AddRouteVM2ToUnreachableNetwork--ESX
        <<: *RouteVM2ToUnreachableNetwork--ESX
        route:       add
    AddRouteVM2ToUnreachableNetwork--KVM:
        <<: *AddRouteVM2ToUnreachableNetwork--ESX
        Testadapter: vm.[2].vif.[1]

    DeleteRouteVM2ToUnreachableNetwork--ESX: &DeleteRouteVM2ToUnreachableNetwork--ESX
        <<: *RouteVM2ToUnreachableNetwork--ESX
        route:       delete
    DeleteRouteVM2ToUnreachableNetwork--KVM:
        <<: *DeleteRouteVM2ToUnreachableNetwork--ESX
        Testadapter: vm.[2].vif.[1]

    NetworkUnknownVerif--ESX: &NetworkUnknownVerif--ESX
        <<: *PktcapVerifCommon
        target: 'vm.[2].vnic.[1]'
        pktcapfilter: 'count 5,icmptype == icmp-unreach,icmpcode == 0,src host ipv4/nsxmanager.[1].logicalrouterport.[2],dst host ipv4/vm.[2].vnic.[1]'
    NetworkUnknownVerif--KVM: &NetworkUnknownVerif--KVM
        <<: *PktcapVerifCommon
        target: 'vm.[2].vif.[1]'
        pktcapfilter: 'count 5,icmptype == icmp-unreach,icmpcode == 0,src host ipv4/nsxmanager.[1].logicalrouterport.[2],dst host ipv4/vm.[2].vif.[1]'

    SendTrafficVM2toUnreachableNetworkVerifyNetworkUnknown--ESX: &SendTrafficVM2toUnreachableNetworkVerifyNetworkUnknown--ESX
        Type: 'Traffic'
        toolName: 'scapy'
        TestAdapter:    'vm.[2].vnic.[1]'
        # A made-up host on the unreachable network
        SupportAdapter: '192.168.5.10'
        protocol: 'udp'
        connectivitytest: '0'
        Verification:
           'PktCapVerificaton': *NetworkUnknownVerif--ESX
    SendTrafficVM2toUnreachableNetworkVerifyNetworkUnknown--KVM: &SendTrafficVM2toUnreachableNetworkVerifyNetworkUnknown--KVM
        <<: *SendTrafficVM2toUnreachableNetworkVerifyNetworkUnknown--ESX
        TestAdapter:    'vm.[2].vif.[1]'
        Verification:
           'PktCapVerificaton': *NetworkUnknownVerif--KVM

    HostUnknownVerif--ESX: &HostUnknownVerif--ESX
        <<: *PktcapVerifCommon
        target: 'vm.[1].vnic.[1]'
        pktcapfilter: 'count 5,icmptype == icmp-unreach,icmpcode == 1,src host ipv4/nsxmanager.[1].logicalrouterport.[1],dst host ipv4/vm.[1].vnic.[1]'
    HostUnknownVerif--KVM: &HostUnknownVerif--KVM
        <<: *PktcapVerifCommon
        target: 'vm.[1].vif.[1]'
        pktcapfilter: 'count 5,icmptype == icmp-unreach,icmpcode == 1,src host ipv4/nsxmanager.[1].logicalrouterport.[1],dst host ipv4/vm.[1].vif.[1]'

    SendTrafficVM1toNonexistentHostVerifyHostUnknown--ESX: &SendTrafficVM1toNonexistentHostVerifyHostUnknown--ESX
        Type: 'Traffic'
        toolName: 'scapy'
        TestAdapter:    'vm.[1].vnic.[1]'
        # A made-up host on the (reachable) 192.168.2.0/24 network
        SupportAdapter: '192.168.2.11'
        protocol: 'udp'
        connectivitytest: '0'
        Verification:
            'PktCapVerificaton': *HostUnknownVerif--ESX
    SendTrafficVM1toNonexistentHostVerifyHostUnknown--KVM: &SendTrafficVM1toNonexistentHostVerifyHostUnknown--KVM
        <<: *SendTrafficVM1toNonexistentHostVerifyHostUnknown--ESX
        TestAdapter:    'vm.[1].vif.[1]'
        Verification:
            'PktCapVerificaton': *HostUnknownVerif--KVM

    CreateLR1: &CreateLR1
        Type: NSX
        TestNSX: nsxmanager.[1]
        sleepbetweenworkloads: 10   # Ripped from Sample
        logicalrouter:
            '[1]':
                name: lrouter-1
                router_type: TIER0
                summary: LRouter1 created through automation

    CreateLR1P1: &CreateLR1P1
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[1]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: 'lrouterport-1'
                summary: "LRPort1 created through automation"
                linked_switch_port_id: nsxmanager.[1].logicalport.[3]->id
                resource_type: "LogicalRouterDownLinkPort"
                subnets:
                    - prefixlen: 24
                      ip_addresses:
                          - '192.168.1.1'

    CreateLR1P2: &CreateLR1P2
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[2]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: 'lrouterport-2'
                summary: "LRPort2 created through automation"
                linked_switch_port_id: nsxmanager.[1].logicalport.[4]->id
                resource_type: "LogicalRouterDownLinkPort"
                subnets:
                   - prefixlen: 24
                     ip_addresses:
                         - '192.168.2.1'

    CreateLS1: &CreateLS1
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[1]':
                admin_state: UP
                name: lswitch1
                replication_mode: MTEP
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS2: &CreateLS2
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[2]':
                admin_state: UP
                name: lswitch2
                replication_mode: MTEP
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    # These two create the ports that will be connected to the LRouter.
    # On ESX, the ports that attach to the VMs will be automatically created
    # during Vif Attachment. That's why these are ports 3 and 4.
    CreateLS1Port: &CreateLS1Port
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[3]':
                switch_id: nsxmanager.[1].logicalswitch.[1]
                name: lport-3
                admin_state: UP
                attachment:
                   attachment_type: LOGICALROUTER
                   id: ''

    CreateLS2Port: &CreateLS2Port
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[4]':
                switch_id: nsxmanager.[1].logicalswitch.[2]
                name: lport-4
                admin_state: UP
                attachment:
                   attachment_type: LOGICALROUTER
                   id: ''

    DiscoverEdgeVnics: &DiscoverEdgeVnics
        Type:  VM
        TestVM: 'nsxedge.[1]'
        vnic:
           '[1-3]':
              discover: 'true'

    AttachEdgeVnic2ToUplinkLS: &AttachEdgeVnic2ToUplinkLS
        Type: NetAdapter
        TestAdapter: 'nsxedge.[1].vnic.[2]'
        reconfigure: 'true'
        portgroup: nsxmanager.[1].logicalswitch.[201]

    ReconnectEdgeVnic2ToVMNetwork: &ReconnectEdgeVnic2ToVMNetwork
        Type: NetAdapter
        TestAdapter: 'nsxedge.[1].vnic.[2]'
        reconfigure: 'true'
        network: 'VM Network'

    DiscoverTransitLS: &DiscoverTransitLS
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        logicalswitch:
            '[500]':
                discover: 'true'
                logical_router_id: 'nsxmanager.[1].logicalrouter.[1]'

    AttachEdgeVnic3ToTransitLS: &AttachEdgeVnic3ToTransitLS
        Type: NetAdapter
        TestAdapter: 'nsxedge.[1].vnic.[3]'
        reconfigure: 'true'
        portgroup: nsxmanager.[1].logicalswitch.[500]

    ReconnectEdgeVnic3ToVMNetwork: &ReconnectEdgeVnic3ToVMNetwork
        Type: NetAdapter
        TestAdapter: 'nsxedge.[1].vnic.[3]'
        reconfigure: 'true'
        network: 'VM Network'

    CreateUplinkLS: &CreateUplinkLS
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        logicalswitch:
            '[201]':
                name: 'autogenerate'
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                admin_state: UP
                replication_mode: MTEP

    CreateUplinkLSPort: &CreateUplinkLSPort
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        logicalport:
            '[201]':
                switch_id: nsxmanager.[1].logicalswitch.[201]
                name: 'lsport on uplink LS'

    CreateDownlinkLS: &CreateDownlinkLS
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        logicalswitch:
            '[101-102]':
                name: 'autogenerate'
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                admin_state: UP
                replication_mode: MTEP

    CreateDownlinkLSPort: &CreateDownlinkLSPort
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        logicalport:
            '[101-102]':
                switch_id: nsxmanager.[1].logicalswitch.[x=logicalport_index]
                name: 'lport for PLR downlink'

    RegisterEdgeNode01: &RegisterEdgeNode01
        Type: Gateway
        TestGateway: 'nsxedge.[1]'
        register_nsx_edge_node:
            manager_username: 'admin'
            manager_password: 'default'
            manager_ip: 'nsxmanager.[1]'
            manager_thumbprint: 'nsxmanager.[1]'
            execution_type: 'cli'

    DiscoverEdgeNodeIds: &DiscoverEdgeNodeIds
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        edgenode:
            '[1]':
                discover: 'true'
                resource_type: 'EdgeNode'
                ipaddresses:
                   - 'nsxedge.[1]->management_ip'

    CreateFabricProfile: &CreateFabricProfile
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        fabricprofile:
            '[1]':
                name: 'Fabric_Profile_PLR_uplink_cluster'
                summary: "Fabric Profile for PLR uplink edge cluster"
                resource_type: "FabricProfileClusterKeepAlive"
                hello_interval: 20000
                declare_dead_timer: 60000

    CreateEdgeCluster: &CreateEdgeCluster
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        edgecluster:
            '[1]':
                name: 'edge_cluster_plr1'
                summary: 'Edge cluster for PLR1 uplinks'
                members:
                  - edge_node_id: 'nsxmanager.[1].edgenode.[1]'
                fabric_profile_bindings:
                  - resource_type: "FabricProfileClusterKeepAlive"
                    fabric_profile_id: 'nsxmanager.[1].fabricprofile.[1]->id'

    CreatePLR1WithConfig: &CreatePLR1WithConfig
         Type: NSX
         TestNSX: 'nsxmanager.[1]'
         logicalrouter:
             '[1]':
                 name: 'Tier0-LR-1'
                 summary: 'Tier0 Logical Router (PLR) with config - 01'
                 router_type: 'TIER0'
                 cluster_id: 'nsxmanager.[1].edgecluster.[1]'

    CreateUplinkPortsPLR1: &CreateUplinkPortsPLR1
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        logicalrouteruplinkport:
            '[1]':
                logical_router_id: 'nsxmanager.[1].logicalrouter.[1]'
                name: 'plr1_uplink_201'
                summary: 'Uplinkport 1 for PLR 01'
                linked_switch_port_id: 'nsxmanager.[1].logicalport.[201]->id'
                gateway_cluster_member_index: [0]
                resource_type: "LogicalRouterUpLinkPort"
                subnets:
                    - prefixlen: 24
                      ip_addresses:
                        - '192.168.50.1'

    CreateDownlinkPortsPLR1: &CreateDownlinkPortsPLR1
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        logicalrouterport:
            '[101]':
                logical_router_id: 'nsxmanager.[1].logicalrouter.[1]'
                name: 'plr1_downlink_101'
                summary: 'Downlinkport 101 for PLR 01'
                linked_switch_port_id: 'nsxmanager.[1].logicalport.[101]->id'
                resource_type: "LogicalRouterDownLinkPort"
                subnets:
                   - prefixlen: 24
                     ip_addresses:
                         - '192.168.1.1'
            '[102]':
                logical_router_id: 'nsxmanager.[1].logicalrouter.[1]'
                name: 'plr1_downlink_102'
                summary: 'Downlinkport 102 for PLR 01'
                linked_switch_port_id: 'nsxmanager.[1].logicalport.[102]->id'
                resource_type: "LogicalRouterDownLinkPort"
                subnets:
                   - prefixlen: 24
                     ip_addresses:
                         - '192.168.2.1'

    AddVM1Route--ESX: &AddVM1Route--ESX
        Type:        NetAdapter
        Testadapter: 'vm.[1].vnic.[1]'
        netmask:     '255.255.0.0'
        route:       'add'
        network:     '192.168.0.0'
        gateway:     '192.168.1.1'
    AddVM1Route--KVM:
        <<: *AddVM1Route--ESX
        Testadapter: 'vm.[1].vif.[1]'

    AddVM2Route--ESX: &AddVM2Route--ESX
        Type:        NetAdapter
        Testadapter: 'vm.[2].vnic.[1]'
        netmask:     '255.255.0.0'
        route:       'add'
        network:     '192.168.0.0'
        gateway:     '192.168.2.1'
    AddVM2Route--KVM:
        <<: *AddVM2Route--ESX
        Testadapter: 'vm.[2].vif.[1]'

    AddVM3Route--ESX: &AddVM3Route--ESX
        Type:        NetAdapter
        Testadapter: 'vm.[3].vnic.[1]'
        netmask:     '255.255.0.0'
        route:       'add'
        network:     '192.168.0.0'
        gateway:     '192.168.50.1'
    AddVM3Route--KVM:
        <<: *AddVM3Route--ESX
        Testadapter: 'vm.[3].vif.[1]'

    PowerOnVM3: &PowerOnVM3
        Type: VM
        TestVM: vm.[3]
        vmstate: poweron

    PowerOffVM3: &PowerOffVM3
        Type: VM
        TestVM: vm.[3]
        vmstate: poweron

    DeleteVM3Nic1--ESX: &DeleteVM3Nic1--ESX
        Type: VM
        TestVM: 'vm.[3]'
        deletevnic: 'vm.[3].vnic.[1]'
    DeleteVM3Nic1--KVM: &DeleteVM3Nic1--KVM
        <<: *DeleteVM3Nic1--ESX
        deletevif: 'vm.[3].vif.[1]'

    NetperfUDPTrafficVM1VM2--ESX: &NetperfUDPTrafficVM1VM2--ESX
        Type          : "Traffic"
        ToolName      : "netperf"
        L3Protocol    : "ipv4"
        TestAdapter   : "vm.[1].vnic.[1]"
        SupportAdapter: "vm.[2].vnic.[1]"
        TestDuration  : "10"
        L4Protocol    : "udp"
    NetperfUDPTrafficVM1VM2--KVM: &NetperfUDPTrafficVM1VM2--KVM
        <<: *NetperfUDPTrafficVM1VM2--ESX
        TestAdapter   : "vm.[1].vif.[1]"
        SupportAdapter: "vm.[2].vif.[1]"

    DeleteTransitLSNode: &DeleteTransitLSNode
        TestNSX: nsxmanager.[1]
        Type: NSX
        skipmethod: 1
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[500]

    DisconnectEdgeUplinkLIF: &DisconnectEdgeUplinkLIF
        Type:  NetAdapter
        TestAdapter: 'nsxedge.[1].vnic.[2]'
        reconfigure: 'true'
        connected:         0
        startconnected:    0

    UndiscoverLportCommon: &UndiscoverLportCommon
        TestNSX: nsxmanager.[1]
        Type: NSX
        skipmethod: 1

    UndiscoverLport1FromVM1Vnic1: &UndiscoverLport1FromVM1Vnic1
        <<: *UndiscoverLportCommon
        deletelogicalport: nsxmanager.[1].logicalport.[1]

    UndiscoverLport2FromVM2Vnic1: &UndiscoverLport2FromVM2Vnic1
        <<: *UndiscoverLportCommon
        deletelogicalport: nsxmanager.[1].logicalport.[2]

    ConnectEdgeUplinkLIF: &ConnectEdgeUplinkLIF
        Type:  NetAdapter
        TestAdapter: 'nsxedge.[1].vnic.[2]'
        reconfigure: 'true'
        connected:         1
        startconnected:    1

    CleanupLRNSX: &CleanupLRNSX
        Type : NSX
        TestNSX : 'nsxmanager.[1]'
        DeleteListOfComponents:
            - 'logicalrouteruplinkport'
            - 'logicalrouterport'
            - 'logicalrouter'
            - 'fabricprofile'
            - 'edgecluster'
            - 'edgenode'
            - 'logicalport'
            - 'logicalswitch'
            - 'transportnode'
            - 'uplinkprofile'
            - 'transportzone'

    DeleteLR1: &DeleteLR1
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouter: nsxmanager.[1].logicalrouter.[1]

    DeleteLR1P1: &DeleteLR1P1
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouterport: nsxmanager.[1].logicalrouterport.[1]

    DeleteLR1P2: &DeleteLR1P2
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouterport: nsxmanager.[1].logicalrouterport.[2]

    DeleteLS1: &DeleteLS1
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[1]
    DeleteLS2: &DeleteLS2
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[2]

    RebootAllCCPNodes: &RebootAllCCPNodes
        Type: NSX
        TestNSX: nsxcontroller.[-1]
        reboot:
            execution_type: cli

    CleanupTemplate: &CLEANUP_TEMPLATE
        Type : NSX
        TestNSX : 'nsxmanager.[1]'

    CleanupLRUplinkPort:
        <<: *CLEANUP_TEMPLATE
        deletelogicalrouteruplinkport: 'nsxmanager.[1].logicalrouteruplinkport.[-1]'

    CleanupLRPort:
        <<: *CLEANUP_TEMPLATE
        deletelogicalrouterport: 'nsxmanager.[1].logicalrouterport.[-1]'

    CleanupLR:
        <<: *CLEANUP_TEMPLATE
        deletelogicalrouter: 'nsxmanager.[1].logicalrouter.[-1]'

    CleanupFabricProfile:
        <<: *CLEANUP_TEMPLATE
        deletefabricprofile: 'nsxmanager.[1].fabricprofile.[-1]'

    CleanupEdgeCluster:
        <<: *CLEANUP_TEMPLATE
        deleteedgecluster: 'nsxmanager.[1].edgecluster.[-1]'

    CleanupEdgeNode:
        <<: *CLEANUP_TEMPLATE
        deleteedgenode: 'nsxmanager.[1].edgenode.[-1]'

    CleanupLogicalPort:
        <<: *CLEANUP_TEMPLATE
        deletelogicalport: 'nsxmanager.[1].logicalport.[-1]'

    CleanupVnicLogicalPort1-3:
        <<: *CLEANUP_TEMPLATE
        deletelogicalport: 'nsxmanager.[1].logicalport.[1-3]'
        skipmethod: 1

    CleanupUplinkPLRLogicalPort201:
        <<: *CLEANUP_TEMPLATE
        deletelogicalport: 'nsxmanager.[1].logicalport.[201]'

    CleanupDownlinkPLRLogicalPort101-102:
        <<: *CLEANUP_TEMPLATE
        deletelogicalport: 'nsxmanager.[1].logicalport.[101-102]'

    CleanupLogicalSwitch:
        <<: *CLEANUP_TEMPLATE
        deletelogicalswitch: 'nsxmanager.[1].logicalswitch.[-1]'

    CleanupTransportNode:
        <<: *CLEANUP_TEMPLATE
        deletetransportnode: 'nsxmanager.[1].transportnode.[-1]'

    CleanupUplinkProfile:
        <<: *CLEANUP_TEMPLATE
        deleteuplinkprofile: 'nsxmanager.[1].uplinkprofile.[-1]'

    CleanupTransportZone:
        <<: *CLEANUP_TEMPLATE
        deletetransportzone: 'nsxmanager.[1].transportzone.[-1]'


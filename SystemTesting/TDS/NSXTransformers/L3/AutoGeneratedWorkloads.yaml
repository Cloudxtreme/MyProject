WORKLOADS:
    __AUTOGENERATED__: true

    AddRouteOnVM1Vif1_VM2Vif1viaLRP1:
        TestAdapter: vm.[1].vif.[1]
        Type: NetAdapter
        destination: vm.[2].vif.[1]->network
        gateway: nsxmanager.[1].logicalrouterport.[1]->ip
        netmask: vm.[2].vif.[1]->netmask
        route: add

    AddRouteOnVM2Vif1_VM1Vif1viaLRP2:
        TestAdapter: vm.[2].vif.[1]
        Type: NetAdapter
        destination: vm.[1].vif.[1]->network
        gateway: nsxmanager.[1].logicalrouterport.[2]->ip
        netmask: vm.[1].vif.[1]->netmask
        route: add

    AddRouteOnVM3Vif1_VM2Vif1viaLRP1:
        TestAdapter: vm.[3].vif.[1]
        Type: NetAdapter
        destination: vm.[2].vif.[1]->network
        gateway: nsxmanager.[1].logicalrouterport.[1]->ip
        netmask: vm.[2].vif.[1]->netmask
        route: add

    AddRouteOnVM4Vif1_VM1Vif1viaLRP2:
        TestAdapter: vm.[4].vif.[1]
        Type: NetAdapter
        destination: vm.[1].vif.[1]->network
        gateway: nsxmanager.[1].logicalrouterport.[2]->ip
        netmask: vm.[1].vif.[1]->netmask
        route: add

    AddVM1Vif1ToKVM1Bridge1:
        TestVM: vm.[1]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[1].bridge.[1]

    AddVM2Vif1ToKVM2Bridge1:
        TestVM: vm.[2]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[2].bridge.[1]

    AddVM3Vif1ToKVM1Bridge1:
        TestVM: vm.[3]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[1].bridge.[1]

    AddVM4Vif1ToKVM2Bridge1:
        TestVM: vm.[4]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[2].bridge.[1]

    ConfigureServiceOnNSXC-1_NAME-controller_STATE-stop:
        TestController: nsxcontroller.[1]
        Type: Controller
        configure_service_state:
            service_name: controller
            state: stop

    ConfigureServiceOnNSXC-2_NAME-controller_STATE-stop:
        TestController: nsxcontroller.[2]
        Type: Controller
        configure_service_state:
            service_name: controller
            state: stop

    ConfigureServiceOnNSXC-3_NAME-controller_STATE-stop:
        TestController: nsxcontroller.[3]
        Type: Controller
        configure_service_state:
            service_name: controller
            state: stop

    ConfigureServiceOnNSXM-2_NAME-proton_STATE-start:
        TestService: nsxmanager.[2].nsxservice.[1]
        Type: Service
        configure_service_state:
            service_name: proton
            state: start

    ConfigureServiceOnNSXM-2_NAME-proton_STATE-stop:
        TestService: nsxmanager.[2].nsxservice.[1]
        Type: Service
        configure_service_state:
            service_name: proton
            state: stop

    ConfigureServiceOnNSXM-3_NAME-proton_STATE-start:
        TestService: nsxmanager.[3].nsxservice.[1]
        Type: Service
        configure_service_state:
            service_name: proton
            state: start

    ConfigureServiceOnNSXM-3_NAME-proton_STATE-stop:
        TestService: nsxmanager.[3].nsxservice.[1]
        Type: Service
        configure_service_state:
            service_name: proton
            state: stop

    ConfigureVM1Vif1IP-192.168.1.10:
        TestAdapter: vm.[1].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.1.10
        netmask: 255.255.255.0

    ConfigureVM2Vif1IP-192.168.2.10:
        TestAdapter: vm.[2].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.2.10
        netmask: 255.255.255.0

    ConfigureVM3Vif1IP-192.168.1.11:
        TestAdapter: vm.[3].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.1.11
        netmask: 255.255.255.0

    ConfigureVM4Vif1IP-192.168.2.11:
        TestAdapter: vm.[4].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.2.11
        netmask: 255.255.255.0

    CreateLP1OnLS1ForVM1Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[1]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLP2OnLS2ForVM2Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[2]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[2].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[2]->id

    CreateLP3OnLS1ForVM3Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[3]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[3].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLP4OnLS2ForVM4Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[4]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[4].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[2]->id

    CreateLR-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouter:
            '[1]':
                name: lrouter-1
                router_type: TIER0
                summary: LRouter1 created through automation

    CreateLRP-1_IP-192.168.1.1_LSP-101:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[1]':
                linked_switch_port_id: nsxmanager.[1].logicalport.[101]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[1]
                name: lrouterport-1
                resource_type: LogicalRouterDownLinkPort
                subnets:
                -   ip_addresses:
                    - 192.168.1.1
                    prefixlen: 24
                summary: LRPort1 created through automation

    CreateLRP-2_IP-192.168.2.1_LSP-102:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[2]':
                linked_switch_port_id: nsxmanager.[1].logicalport.[102]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[1]
                name: lrouterport-2
                resource_type: LogicalRouterDownLinkPort
                subnets:
                -   ip_addresses:
                    - 192.168.2.1
                    prefixlen: 24
                summary: LRPort2 created through automation

    CreateLS-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[1]':
                admin_state: UP
                name: lswitch1
                replication_mode: MTEP
                summary: lswitch1 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[2]':
                admin_state: UP
                name: lswitch2
                replication_mode: MTEP
                summary: lswitch2 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLSP-101_LS-1_ATYPE-logicalrouter:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[101]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLSP-102_LS-2_ATYPE-logicalrouter:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[102]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[2]->id

    CreateTN-1_HOSTNODE-1_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[1]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[1]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-2_HOSTNODE-2_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[2]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[2]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTZ-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportzone:
            '[1]':
                name: transportzone1
                summary: transportzone1 (created through automation)
                switch_name: nsxvswitch
                transport_zone_type: OVERLAY

    CreateUPROF-1_MTU-1600:
        TestNSX: nsxmanager.[1]
        Type: NSX
        uplinkprofile:
            '[1]':
                mtu: 1600
                resource_type: UplinkHostSwitchProfile
                teaming:
                    active:
                    -   adapter_name: uplink1
                        adapter_type: PNIC
                    policy: FAILOVER_ORDER
                vlan: 0

    DeleteBootstrapFileOnNSXC-1:
        TestNSX: nsxcontroller.[1]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: bootstrap-config
            path: /opt/vmware/etc

    DeleteBootstrapFileOnNSXC-2:
        TestNSX: nsxcontroller.[2]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: bootstrap-config
            path: /opt/vmware/etc

    DeleteBootstrapFileOnNSXC-3:
        TestNSX: nsxcontroller.[3]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: bootstrap-config
            path: /opt/vmware/etc

    DeleteCCPClusterNode-1_NSXC-1_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxcontroller.[1].clusternode.[1]

    DeleteCCPClusterNode-2_NSXC-2_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxcontroller.[2].clusternode.[2]

    DeleteCCPClusterNode-3_NSXC-3_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxcontroller.[3].clusternode.[3]

    DeleteConfigFilesOnNSXM-2:
        TestNSX: nsxmanager.[2]
        Type: NSX
        delete_backend_file:
            execution_type: cli
            file_name: '*'
            path: /home/secureall/secureall/nsxapi/config/self

    DeleteConfigFilesOnNSXM-3:
        TestNSX: nsxmanager.[3]
        Type: NSX
        delete_backend_file:
            execution_type: cli
            file_name: '*'
            path: /home/secureall/secureall/nsxapi/config/self

    DeleteDataFilesOnNSXM-2:
        TestNSX: nsxmanager.[2]
        Type: NSX
        delete_backend_file:
            execution_type: cli
            file_name: '*'
            path: /common/nsxapi/data/self

    DeleteDataFilesOnNSXM-3:
        TestNSX: nsxmanager.[3]
        Type: NSX
        delete_backend_file:
            execution_type: cli
            file_name: '*'
            path: /common/nsxapi/data/self

    DeleteHostNode-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[1]

    DeleteHostNode-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[2]

    DeleteLR-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouter: nsxmanager.[1].logicalrouter.[1]

    DeleteLRP-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouterport: nsxmanager.[1].logicalrouterport.[1]

    DeleteLRP-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouterport: nsxmanager.[1].logicalrouterport.[2]

    DeleteLS-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[1]

    DeleteLS-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[2]

    DeleteLSP-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[1]
        query_params:
            detach: 'true'

    DeleteLSP-101:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[101]
        query_params:
            detach: 'true'

    DeleteLSP-102:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[102]
        query_params:
            detach: 'true'

    DeleteLSP-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[2]
        query_params:
            detach: 'true'

    DeleteLSP-3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[3]
        query_params:
            detach: 'true'

    DeleteLSP-4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[4]
        query_params:
            detach: 'true'

    DeleteMPClusterNode-2_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxmanager.[1].clusternode.[2]

    DeleteMPClusterNode-3_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxmanager.[1].clusternode.[3]

    DeleteNodeUUIDFileOnNSXC-1:
        TestNSX: nsxcontroller.[1]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: node-uuid
            path: /opt/vmware/etc

    DeleteNodeUUIDFileOnNSXC-2:
        TestNSX: nsxcontroller.[2]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: node-uuid
            path: /opt/vmware/etc

    DeleteNodeUUIDFileOnNSXC-3:
        TestNSX: nsxcontroller.[3]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: node-uuid
            path: /opt/vmware/etc

    DeleteTN-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportnode: nsxmanager.[1].transportnode.[1]

    DeleteTN-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportnode: nsxmanager.[1].transportnode.[2]

    DeleteTZ-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportzone: nsxmanager.[1].transportzone.[1]

    DeleteUPROF-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteuplinkprofile: nsxmanager.[1].uplinkprofile.[1]

    DeleteVif-1_VM-1:
        TestVM: vm.[1]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-2:
        TestVM: vm.[2]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-3:
        TestVM: vm.[3]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-4:
        TestVM: vm.[4]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DiscoverHostNode1FromKVM1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[1]':
                discover: 'true'
                ip_addresses: kvm.[1]

    DiscoverHostNode2FromKVM2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[2]':
                discover: 'true'
                ip_addresses: kvm.[2]

    JoinCCPClusterNode-1_NSXC-1_ToNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        clusternode:
            '[1]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    JoinCCPClusterNode-2_NSXC-2_ToNSXC-1:
        TestController: nsxcontroller.[2]
        Type: Controller
        clusternode:
            '[2]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    JoinCCPClusterNode-3_NSXC-3_ToNSXC-1:
        TestController: nsxcontroller.[3]
        Type: Controller
        clusternode:
            '[3]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    JoinMPClusterNode-1_NSXM-1_ToNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        clusternode:
            '[1]':
                mgr_role_config:
                    manager_ip: nsxmanager.[1]
                    manager_thumbprint: nsxmanager.[1]
                    node_type: AddManagementNodeSpec
                    password: default
                    username: admin

    JoinMPClusterNode-2_NSXM-2_ToNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        clusternode:
            '[2]':
                mgr_role_config:
                    manager_ip: nsxmanager.[2]
                    manager_thumbprint: nsxmanager.[2]
                    node_type: AddManagementNodeSpec
                    password: default
                    username: admin

    JoinMPClusterNode-3_NSXM-3_ToNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        clusternode:
            '[3]':
                mgr_role_config:
                    manager_ip: nsxmanager.[3]
                    manager_thumbprint: nsxmanager.[3]
                    node_type: AddManagementNodeSpec
                    password: default
                    username: admin

    MapNSXManager-1_CLUSTER-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        cluster:
            '[1]':
                id_: 1
                map_object: true

    MapNSXManager-2_CLUSTER-1:
        TestNSX: nsxmanager.[2]
        Type: NSX
        cluster:
            '[1]':
                id_: 1
                map_object: true

    MapNSXManager-3_CLUSTER-1:
        TestNSX: nsxmanager.[3]
        Type: NSX
        cluster:
            '[1]':
                id_: 1
                map_object: true

    PingFromVM1Vif1ToVM2Vif1:
        SupportAdapter: vm.[2].vif.[1]
        TestAdapter: vm.[1].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromVM1Vif1ToVM3Vif1:
        SupportAdapter: vm.[3].vif.[1]
        TestAdapter: vm.[1].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromVM2Vif1ToVM4Vif1:
        SupportAdapter: vm.[4].vif.[1]
        TestAdapter: vm.[2].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromVM3Vif1ToVM4Vif1:
        SupportAdapter: vm.[4].vif.[1]
        TestAdapter: vm.[3].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    RemoveCCPClusterNode-1_FromNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        remove_ccp_cluster_node:
            controller_ip: nsxcontroller.[1]
            execution_type: cli
            force: 'yes'

    RemoveCCPClusterNode-2_FromNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        remove_ccp_cluster_node:
            controller_ip: nsxcontroller.[2]
            execution_type: cli
            force: 'yes'

    RemoveCCPClusterNode-3_FromNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        remove_ccp_cluster_node:
            controller_ip: nsxcontroller.[3]
            execution_type: cli
            force: 'yes'

    SetManagerOnKVM-1:
        TestHost: kvm.[1]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-2:
        TestHost: kvm.[2]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnNSXC-2:
        TestController: nsxcontroller.[2]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnNSXC-3:
        TestController: nsxcontroller.[3]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetProtonServiceIdForNSXM-2:
        TestNSX: nsxmanager.[2]
        Type: NSX
        nsxservice:
            '[1]':
                id_: proton
                map_object: true

    SetProtonServiceIdForNSXM-3:
        TestNSX: nsxmanager.[3]
        Type: NSX
        nsxservice:
            '[1]':
                id_: proton
                map_object: true

    VerifyMPClusterStatus-1_NSXM-1:
        TestCluster: nsxmanager.[1].cluster.[1]
        Type: Cluster
        cluster_status:
            control_cluster_status:
                status[?]equal_to: STABLE
            mgmt_cluster_status:
                status[?]equal_to: STABLE

    VerifyMPClusterStatus-1_NSXM-2:
        TestCluster: nsxmanager.[2].cluster.[1]
        Type: Cluster
        cluster_status:
            control_cluster_status:
                status[?]equal_to: STABLE
            mgmt_cluster_status:
                status[?]equal_to: STABLE

    VerifyMPClusterStatus-1_NSXM-3:
        TestCluster: nsxmanager.[3].cluster.[1]
        Type: Cluster
        cluster_status:
            control_cluster_status:
                status[?]equal_to: STABLE
            mgmt_cluster_status:
                status[?]equal_to: STABLE

    VerifyServiceOnNSXM-2_NAME-proton_STATE-running:
        TestService: nsxmanager.[2].nsxservice.[1]
        Type: Service
        get_service_state:
            runtime_state[?]equal_to: running

    VerifyServiceOnNSXM-2_NAME-proton_STATE-stopped:
        TestService: nsxmanager.[2].nsxservice.[1]
        Type: Service
        get_service_state:
            runtime_state[?]equal_to: stopped

    VerifyServiceOnNSXM-3_NAME-proton_STATE-running:
        TestService: nsxmanager.[3].nsxservice.[1]
        Type: Service
        get_service_state:
            runtime_state[?]equal_to: running

    VerifyServiceOnNSXM-3_NAME-proton_STATE-stopped:
        TestService: nsxmanager.[3].nsxservice.[1]
        Type: Service
        get_service_state:
            runtime_state[?]equal_to: stopped

    WaitForMPClusterStable-1_NSXM-1:
        TestCluster: nsxmanager.[1].cluster.[1]
        Type: Cluster
        wait_for_required_cluster_status:
            required_status: STABLE
            time_to_monitor: 300

    WaitForMPClusterStable-1_NSXM-2:
        TestCluster: nsxmanager.[2].cluster.[1]
        Type: Cluster
        wait_for_required_cluster_status:
            required_status: STABLE
            time_to_monitor: 300

    WaitForMPClusterStable-1_NSXM-3:
        TestCluster: nsxmanager.[3].cluster.[1]
        Type: Cluster
        wait_for_required_cluster_status:
            required_status: STABLE
            time_to_monitor: 300

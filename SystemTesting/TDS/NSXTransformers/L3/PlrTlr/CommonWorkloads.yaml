WORKLOADS:
    000__AUTOGENERATED__: true

    JoinCCPClusterNode-1_NSXC-1_ToNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        clusternode:
            '[1]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    JoinCCPClusterNode-2_NSXC-2_ToNSXC-1:
        TestController: nsxcontroller.[2]
        Type: Controller
        clusternode:
            '[2]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    JoinCCPClusterNode-3_NSXC-3_ToNSXC-1:
        TestController: nsxcontroller.[3]
        Type: Controller
        clusternode:
            '[3]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    AddVM10Vnic1ToLS10:
        TestVM: vm.[10]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[10]
                startconnected: 1

    AddVM1Vnic1ToLS1:
        TestVM: vm.[1]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[1]
                startconnected: 1

    AddVM2Vnic1ToLS2:
        TestVM: vm.[2]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[2]
                startconnected: 1

    AddVM3Vnic1ToLS3:
        TestVM: vm.[3]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[3]
                startconnected: 1

    AddVM4Vnic1ToLS4:
        TestVM: vm.[4]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[4]
                startconnected: 1

    AddVM5Vnic1ToLS5:
        TestVM: vm.[5]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[5]
                startconnected: 1

    ConfigureVM10Vnic1IP-192.168.50.2:
        TestAdapter: vm.[10].vnic.[1]
        Type: NetAdapter
        ipv4: 192.168.50.2
        netmask: 255.255.255.0

    ConfigureVM1Vnic1IP-10.1.1.10:
        TestAdapter: vm.[1].vnic.[1]
        Type: NetAdapter
        ipv4: 10.1.1.10
        netmask: 255.255.255.0

    ConfigureVM2Vnic1IP-10.1.2.10:
        TestAdapter: vm.[2].vnic.[1]
        Type: NetAdapter
        ipv4: 10.1.2.10
        netmask: 255.255.255.0

    ConfigureVM3Vnic1IP-20.1.1.10:
        TestAdapter: vm.[3].vnic.[1]
        Type: NetAdapter
        ipv4: 20.1.1.10
        netmask: 255.255.255.0

    ConfigureVM4Vnic1IP-20.1.2.10:
        TestAdapter: vm.[4].vnic.[1]
        Type: NetAdapter
        ipv4: 20.1.2.10
        netmask: 255.255.255.0

    ConfigureVM5Vnic1IP-30.1.1.10:
        TestAdapter: vm.[5].vnic.[1]
        Type: NetAdapter
        ipv4: 30.1.1.10
        netmask: 255.255.255.0

    CreateFPROF-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        fabricprofile:
            '[1]':
                declare_dead_timer: 60000
                hello_interval: 20000
                name: Fabric Profile - 1
                resource_type: FabricProfileClusterKeepAlive
                summary: Fabric Profile - 1 for PLR uplink edge cluster

    CreateLR-2_TIER-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouter:
            '[2]':
                name: lrouter-2
                router_type: TIER1
                summary: LRouter2 created through automation

    CreateLR-3_TIER-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouter:
            '[3]':
                name: lrouter-3
                router_type: TIER1
                summary: LRouter3 created through automation

    CreateLR-4_TIER-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouter:
            '[4]':
                name: lrouter-4
                router_type: TIER1
                summary: LRouter4 created through automation

    CreateLRP-1_LR-2_IP-10.1.1.1_LSP-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[1]':
                linked_switch_port_id: nsxmanager.[1].logicalport.[11]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[2]
                name: lrouterport-1
                resource_type: LogicalRouterDownLinkPort
                subnets:
                -   ip_addresses:
                    - 10.1.1.1
                    prefixlen: 24
                summary: LRPort1 created through automation

    CreateLRP-2_LR-2_IP-10.1.2.1_LSP-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[2]':
                linked_switch_port_id: nsxmanager.[1].logicalport.[12]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[2]
                name: lrouterport-2
                resource_type: LogicalRouterDownLinkPort
                subnets:
                -   ip_addresses:
                    - 10.1.2.1
                    prefixlen: 24
                summary: LRPort2 created through automation

    CreateLRP-3_LR-3_IP-20.1.1.1_LSP-3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[3]':
                linked_switch_port_id: nsxmanager.[1].logicalport.[13]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[3]
                name: lrouterport-3
                resource_type: LogicalRouterDownLinkPort
                subnets:
                -   ip_addresses:
                    - 20.1.1.1
                    prefixlen: 24
                summary: LRPort3 created through automation

    CreateLRP-4_LR-3_IP-20.1.2.1_LSP-4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[4]':
                linked_switch_port_id: nsxmanager.[1].logicalport.[14]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[3]
                name: lrouterport-4
                resource_type: LogicalRouterDownLinkPort
                subnets:
                -   ip_addresses:
                    - 20.1.2.1
                    prefixlen: 24
                summary: LRPort4 created through automation

    CreateLRP-5_LR-4_IP-30.1.1.1_LSP-5:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[5]':
                linked_switch_port_id: nsxmanager.[1].logicalport.[16]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[4]
                name: lrouterport-5
                resource_type: LogicalRouterDownLinkPort
                subnets:
                -   ip_addresses:
                    - 30.1.1.1
                    prefixlen: 24
                summary: LRPort5 created through automation

    CreateLS-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[1]':
                admin_state: UP
                name: lswitch1
                replication_mode: MTEP
                summary: lswitch1 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS-10:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[10]':
                admin_state: UP
                name: lswitch10
                replication_mode: MTEP
                summary: lswitch10 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[2]':
                admin_state: UP
                name: lswitch2
                replication_mode: MTEP
                summary: lswitch2 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS-3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[3]':
                admin_state: UP
                name: lswitch3
                replication_mode: MTEP
                summary: lswitch3 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS-4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[4]':
                admin_state: UP
                name: lswitch4
                replication_mode: MTEP
                summary: lswitch4 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS-5:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[5]':
                admin_state: UP
                name: lswitch5
                replication_mode: MTEP
                summary: lswitch5 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLSP-11_LS-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[11]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLSP-12_LS-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[12]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[2]->id

    CreateLSP-13_LS-3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[13]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[3]->id

    CreateLSP-14_LS-4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[14]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[4]->id

    CreateLSP-16_LS-5:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[16]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[5]->id

    CreateLSP-15_LS-10:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[15]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[10]->id

    CreatePLR-1_EDGECLUSTER-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouter:
            '[1]':
                cluster_id: nsxmanager.[1].edgecluster.[1]
                name: PLR-1
                router_type: TIER0
                summary: Provider Logical Router(Tier0) - 1

    CreatePlrLLRP-1_PLR-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterlinkport:
            '[1]':
                logical_router_id: nsxmanager.[1].logicalrouter.[1]
                name: PLR1 Linkport
                resource_type: LogicalRouterLinkPort
                summary: Link port on PLR1

    CreatePlrLLRP-3_PLR-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterlinkport:
            '[3]':
                logical_router_id: nsxmanager.[1].logicalrouter.[1]
                name: PLR1 Linkport
                resource_type: LogicalRouterLinkPort
                summary: Link port on PLR1

    CreatePlrLLRP-5_PLR-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterlinkport:
            '[5]':
                logical_router_id: nsxmanager.[1].logicalrouter.[1]
                name: PLR1 Linkport
                resource_type: LogicalRouterLinkPort
                summary: Link port on PLR1

    CreateTN-1_HOSTNODE-1_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[1]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[1]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-2_HOSTNODE-2_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[2]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[2]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-3_HOSTNODE-3_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[3]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[3]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTZ-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportzone:
            '[1]':
                name: transportzone1
                summary: transportzone1 (created through automation)
                switch_name: nsxvswitch
                transport_zone_type: OVERLAY

    CreateTlrLLRP-2_TLR-2_PLRP-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterlinkport:
            '[2]':
                linked_router_port_id: nsxmanager.[1].logicalrouterlinkport.[1]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[2]
                name: TLR2 Linkport
                resource_type: LogicalRouterLinkPort
                summary: Link port on TLR2 to PLR1

    CreateTlrLLRP-4_TLR-3_PLRP-3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterlinkport:
            '[4]':
                linked_router_port_id: nsxmanager.[1].logicalrouterlinkport.[3]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[3]
                name: TLR3 Linkport
                resource_type: LogicalRouterLinkPort
                summary: Link port on TLR3 to PLR1

    CreateTlrLLRP-6_TLR-4_PLRP-5:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterlinkport:
            '[6]':
                linked_router_port_id: nsxmanager.[1].logicalrouterlinkport.[5]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[4]
                name: TLR4 Linkport
                resource_type: LogicalRouterLinkPort
                summary: Link port on TLR4 to PLR1

    CreateULRP-1_LSP-15_GWMC-0_IP-192.168.50.1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouteruplinkport:
            '[1]':
                gateway_cluster_member_index:
                - 0
                linked_switch_port_id: nsxmanager.[1].logicalport.[15]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[1]
                name: PLR1 Uplink1
                resource_type: LogicalRouterUpLinkPort
                subnets:
                -   ip_addresses:
                    - 192.168.50.1
                    prefixlen: 24
                summary: Uplink port 1 for PLR 1

    CreateUPROF-1_MTU-1600:
        TestNSX: nsxmanager.[1]
        Type: NSX
        uplinkprofile:
            '[1]':
                mtu: 1600
                resource_type: UplinkHostSwitchProfile
                teaming:
                    active:
                    -   adapter_name: uplink1
                        adapter_type: PNIC
                    policy: FAILOVER_ORDER
                vlan: 0

    DeleteLR-4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouter: nsxmanager.[1].logicalrouter.[4]

    DeleteLRP-5:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouterport: nsxmanager.[1].logicalrouterport.[5]

    DeleteLS-5:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[5]

    DeleteLSP-16:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[16]
        query_params:
            detach: 'true'

    DiscoverEdgeNode-1_EDGE-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        edgenode:
            '[1]':
                discover: 'true'
                ipaddresses:
                - nsxedge.[1]->management_ip
                resource_type: EdgeNode

    DiscoverHostNode1FromESX1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[1]':
                discover: 'true'
                ip_addresses: esx.[1]

    DiscoverHostNode2FromESX2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[2]':
                discover: 'true'
                ip_addresses: esx.[2]

    DiscoverHostNode3FromESX3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[3]':
                discover: 'true'
                ip_addresses: esx.[3]

    DiscoverTransitLS-500_LR-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[500]':
                discover: 'true'
                logical_router_id: nsxmanager.[1].logicalrouter.[1]

    DiscoverVnicsOnEdge-1_VNIC-1-3:
        TestVM: nsxedge.[1]
        Type: VM
        vnic:
            '[1-3]':
                discover: 'true'

    PowerOffVM-1:
        TestVM: vm.[1]
        Type: VM
        vmstate: poweroff

    PowerOnVM-1:
        TestVM: vm.[1]
        Type: VM
        vmstate: poweron

    ReconfigureEdge1Vnic2ToLS10:
        TestAdapter: nsxedge.[1].vnic.[2]
        Type: NetAdapter
        reconfigure:
            portgroup: nsxmanager.[1].logicalswitch.[10]

    ReconfigureEdge1Vnic3ToLS500:
        TestAdapter: nsxedge.[1].vnic.[3]
        Type: NetAdapter
        reconfigure:
            portgroup: nsxmanager.[1].logicalswitch.[500]

    RegisterEdge:
        TestGateway: nsxedge.[1]
        Type: Gateway
        register_nsx_edge_node:
            execution_type: cli
            manager_ip: nsxmanager.[1]->manager_ip
            manager_password: default
            manager_thumbprint: nsxmanager.[1]->manager_thumbprint
            manager_username: admin

    SetManagerOnESX-1:
        TestHost: esx.[1]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnESX-2:
        TestHost: esx.[2]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnESX-3:
        TestHost: esx.[3]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    UndiscoverHostNode-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[1]
        skipmethod: 1

    UndiscoverHostNode-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[2]
        skipmethod: 1

    UndiscoverHostNode-3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[3]
        skipmethod: 1

    SetManagerOnNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnNSXC-2:
        TestController: nsxcontroller.[2]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnNSXC-3:
        TestController: nsxcontroller.[3]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    UndiscoverTransitLS-500:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[500]
        skipmethod: 1

    DiscoverLport1FromVM1Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[1]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport2FromVM2Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[2]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[2].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport3FromVM3Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[3]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[3].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport4FromVM4Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[4]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[4].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport5FromVM5Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[5]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[5].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport10FromVM10Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[10]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[10].vnic.[1]->uuid
                discover: 'true'

    UndiscoverLSP-1-4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[1-4]
        skipmethod: 1

    UndiscoverLSP-10:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[10]
        skipmethod: 1

    AddVM10Vif1ToKVM3Bridge1:
        TestVM: vm.[10]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[3].bridge.[1]

    AddVM1Vif1ToKVM1Bridge1:
        TestVM: vm.[1]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[1].bridge.[1]

    AddVM2Vif1ToKVM2Bridge1:
        TestVM: vm.[2]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[2].bridge.[1]

    AddVM3Vif1ToKVM1Bridge1:
        TestVM: vm.[3]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[1].bridge.[1]

    AddVM4Vif1ToKVM2Bridge1:
        TestVM: vm.[4]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[2].bridge.[1]

    ConfigureVM10Vif1IP-192.168.50.2:
        TestAdapter: vm.[10].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.50.2
        netmask: 255.255.255.0

    ConfigureVM1Vif1IP-10.1.1.10:
        TestAdapter: vm.[1].vif.[1]
        Type: NetAdapter
        ipv4: 10.1.1.10
        netmask: 255.255.255.0

    ConfigureVM2Vif1IP-10.1.2.10:
        TestAdapter: vm.[2].vif.[1]
        Type: NetAdapter
        ipv4: 10.1.2.10
        netmask: 255.255.255.0

    ConfigureVM3Vif1IP-20.1.1.10:
        TestAdapter: vm.[3].vif.[1]
        Type: NetAdapter
        ipv4: 20.1.1.10
        netmask: 255.255.255.0

    ConfigureVM4Vif1IP-20.1.2.10:
        TestAdapter: vm.[4].vif.[1]
        Type: NetAdapter
        ipv4: 20.1.2.10
        netmask: 255.255.255.0

    CreateLP11OnLS1ForVM1Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[11]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLP12OnLS2ForVM2Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[12]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[2].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[2]->id

    CreateLP13OnLS3ForVM3Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[13]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[3].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[3]->id

    CreateLP14OnLS4ForVM4Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[14]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[4].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[4]->id

    CreateLP20OnLS10ForVM10Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[20]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[10].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[10]->id

    CreateTN-1_HOSTNODE-1_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[1]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[1]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-2_HOSTNODE-2_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[2]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[2]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-3_HOSTNODE-3_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[3]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[3]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    DiscoverHostNode1FromKVM1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[1]':
                discover: 'true'
                ip_addresses: kvm.[1]

    DiscoverHostNode2FromKVM2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[2]':
                discover: 'true'
                ip_addresses: kvm.[2]

    DiscoverHostNode3FromKVM3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[3]':
                discover: 'true'
                ip_addresses: kvm.[3]

    SetManagerOnKVM-1:
        TestHost: kvm.[1]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-2:
        TestHost: kvm.[2]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-3:
        TestHost: kvm.[3]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    DiscoverLport11FromVM1Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[11]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport12FromVM2Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[12]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[2].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport13FromVM3Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[13]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[3].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport14FromVM4Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[14]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[4].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport5FromVM5Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[5]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[5].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport20FromVM10Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[20]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[10].vnic.[1]->uuid
                discover: 'true'

    UndiscoverLSP-11-14:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[11-14]
        skipmethod: 1

    UndiscoverLSP-20:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[20]
        skipmethod: 1

    DeleteVnic-1_VM-1:
        TestVM: vm.[1]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-10:
        TestVM: vm.[10]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-2:
        TestVM: vm.[2]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-3:
        TestVM: vm.[3]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-4:
        TestVM: vm.[4]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    AddVM5Vif1ToKVM1Bridge1:
        TestVM: vm.[5]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[1].bridge.[1]

    ConfigureVM5Vif1IP-30.1.1.10:
        TestAdapter: vm.[5].vif.[1]
        Type: NetAdapter
        ipv4: 30.1.1.10
        netmask: 255.255.255.0

    CreateLP15OnLS5ForVM5Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[15]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[5].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[5]->id

    DeleteLSP-11-15:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[11-15]
        query_params:
            detach: 'true'

    DeleteVif-1_VM-1:
        TestVM: vm.[1]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-2:
        TestVM: vm.[2]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-3:
        TestVM: vm.[3]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-4:
        TestVM: vm.[4]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    CreatePLRPorts: &CREATE_PLR_PORTS
        Type: 'NSX'
        TestNSX: 'nsxmanager.[1]'
        logicalrouterport:
            '[1]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: "plr1-to-tlr1"
                #linked_logical_router_port_id: 'nsxmanager.[1].logicalrouterport.[3]'
                #port_id: "nsxmanager.[1].logicalrouterport.[3]"
            '[2]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: "plr1-to-tlr2"
                #linked_logical_router_port_id: 'nsxmanager.[1].logicalrouterport.[6]'
                #port_id: "nsxmanager.[1].logicalrouterport.[6]"
            #uncomment once edge is ready
            #'[10]':
            #    logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
            #    name: "plr1-to-uplink-ls"
            #    linked_switch_port_id: "nsxmanager.[1].logicalport.[10]"

    CreateTLRPorts: &CREATE_TLR_PORTS
        Type: 'NSX'
        TestNSX: 'nsxmanager.[1]'
        logicalrouterport:
            '[11]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[2]"
                name: "tlr1-to-plr1"
                #linked_logical_router_port_id: 'nsxmanager.[1].logicalrouterport.[1]'
                #port_id: "nsxmanager.[1].logicalrouterport.[1]"
            '[12]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[2]"
                name: "tlr1-to-ls1"
                linked_switch_port_id: "nsxmanager.[1].logicalport.[1]"
                subnets:
                       - prefixlen: 24
                         ipaddresses:
                           - '10.1.1.1'
            '[13]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[2]"
                name: "tlr1-to-ls2"
                linked_switch_port_id: "nsxmanager.[1].logicalport.[2]"
                subnets:
                       - prefixlen: 24
                         ipaddresses:
                           - '10.1.2.1'
            '[14]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[3]"
                name: "tlr2-to-plr1"
                #linked_logical_router_port_id: 'nsxmanager.[1].logicalrouterport.[2]'
                #port_id: "nsxmanager.[1].logicalrouterport.[2]"
            '[15]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[3]"
                name: "tlr2-to-ls3"
                linked_switch_port_id: "nsxmanager.[1].logicalport.[3]"
                subnets:
                       - prefixlen: 24
                         ipaddresses:
                           - '20.1.1.1'
            '[16]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[3]"
                name: "tlr2-to-ls4"
                linked_switch_port_id: "nsxmanager.[1].logicalport.[4]"
                subnets:
                       - prefixlen: 24
                         ipaddresses:
                           - '20.1.2.1'


    CreateLR-1_TIER-0:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouter:
            '[1]':
                name: lrouter-1
                router_type: TIER0
                summary: LRouter1 created through automation

    DeleteLSP-10-14:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[10-14]

    CleanupBasicSetup: &CLEANUP_PLR_TLR_TESTBED
       - - 'DeleteUplinkLogicalRouterPortForEdge'
       - - 'DeleteDownlinkTier1LogicalRouterPortForTier0'
       - - 'DeleteLogicalRouter'
       - - 'DeleteLogicalPort'
       - - 'DeleteLogicalSwitch'
       - - 'DeleteEdgeClusterWithEdgeNode'
       - - 'DeleteFabricProfile'

    DeleteUplinkLogicalRouterPortForEdge: &DELETE_UPLINK_LOGICAL_ROUTER_PORT_01
        Type : "NSX"
        TestNSX : "nsxmanager.[1]"
        deletelogicalrouterport: "nsxmanager.[1].logicalrouteruplinkport.[-1]"

    DeleteEdgeClusterWithEdgeNode: &DELETE_EDGE_CLUSTER
        Type : "NSX"
        TestNSX : "nsxmanager.[1]"
        deleteedgecluster : "nsxmanager.[1].edgecluster.[1]"

    DeleteFabricProfile: &DELETE_FABRIC_PROFILE
        Type : "NSX"
        TestNSX : "nsxmanager.[1]"
        deletefabricprofile : "nsxmanager.[1].fabricprofile.[1]"

    DeleteLogicalRouter: &DELETE_LOGICAL_ROUTER
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletelogicalrouter: "nsxmanager.[1].logicalrouter.[1]"

    DeleteLogicalSwitch: &DELETE_LOGICAL_SWITCH
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletelogicalswitch: 'nsxmanager.[1].logicalswitch.[-1]'

    DeleteLogicalPort: &DELETE_LOGICAL_PORT
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        sleepbetweenworkloads: "5"
        deletelogicalport: 'nsxmanager.[1].logicalport.[-1]'

    DeleteDownlinkTier1LogicalRouterPortForTier0:
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        deletelogicalrouterport: "nsxmanager.[1].logicalrouterport.[3]"


    DiscoverHostnodes: &DISCOVER_HOST_NODES
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        hostnode:
            '[1-2]':
                discover: 'true'
                ip_addresses: 'esx.[x=hostnode_index]'

    CreateTransportZone: &CREATE_TRANSPORT_ZONE_01
        Type: NSX
        TestNSX: nsxmanager.[1]
        transportzone:
            '[1]':
                name: autogenerate
                transport_zone_type: 'OVERLAY' # or VLAN, both case-senstive
                switch_name: 'nsxvswitch'

    CreateUplinkProfile:
        ESX: &CREATE_UPLINK_PROFILE_01--ESX
           Type: 'NSX'
           TestNSX: 'nsxmanager.[1]'
           UplinkProfile:
               '[1]':
                   mtu: 1600
                   teaming:
                       active:
                           - adapter_name: 'uplink1'
                             adapter_type: 'PNIC'
                       policy: 'FAILOVER_ORDER'
                   vlan: '0'
                   resource_type: 'UplinkHostSwitchProfile'

    CreateTransportNodes:
        ESX: &CREATE_TRANSPORT_NODE_01--ESX
            Type: NSX
            TestNSX: nsxmanager.[1]
            transportnode:
                '[1-2]':
                    node_id: 'nsxmanager.[1].hostnode.[x=transportnode_index]'
                    host_switches:
                          - switch_name: 'nsxvswitch'
                            host_switch_profile_ids:
                               - key: 'UplinkHostSwitchProfile'
                                 value: 'nsxmanager.[1].uplinkprofile.[1]->id'
                            uplinks:
                               - device_name: 'vmnic1'
                                 adapter_name: 'uplink1'
                            vteps:
                               - device_name: 'vmk10'
                                 ip:
                                    ip_address: ''
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateFabricProfile: &CREATE_FABRIC_PROFILE
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        fabricprofile:
            '[1]':
                name: 'Fabric_Profile_1'
                summary: "Fabric Profile created through automation"
                resource_type: "FabricProfileClusterKeepAlive"
                hello_interval: 3000
                declare_dead_timer: 15000

    DiscoverEdgeNodeId: &DISCOVER_EDGE_NODE_ID
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        edgenode:
            '[1]':
                discover: 'true'
                resource_type: "EdgeNode"
                ipaddresses:
                   - 'nsxedge.[1]->management_ip'
            '[2]':
                discover: 'true'
                resource_type: "EdgeNode"
                ipaddresses:
                   - 'nsxedge.[2]->management_ip'

    CreateEdgeClusterWithEdgeNode: &CREATE_EDGE_CLUSTER
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        edgecluster:
            '[1]':
                name: 'Edge_Cluster_1'
                summary: "Edge Cluster created through automation"
                members:
                  - edge_node_id: 'nsxmanager.[1].edgenode.[1]'
                  - edge_node_id: 'nsxmanager.[1].edgenode.[2]'
                fabric_profile_bindings:
                  - resource_type: "FabricProfileClusterKeepAlive"
                    fabric_profile_id: 'nsxmanager.[1].fabricprofile.[1]'

    CreateLogicalPortForUplinkForTIER0: &CREATE_LP_FOR_UPLINK_TIER0
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalport:
            '[1]':
                switch_id: nsxmanager.[1].logicalswitch.[1]
                name: 'TIER0-LogicalPort-1-For-uplink'
                admin_state: UP

            '[2]':
                switch_id: nsxmanager.[1].logicalswitch.[1]
                name: 'TIER0-LogicalPort-2-For-uplink'
                admin_state: UP


    CreateLogicalSwitchForTIER0: &CREATE_LOGICAL_SWITCH_FOR_TIER0
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalswitch:
            '[1]':
                name: 'Tier0-Logical-Switch-1'
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                admin_state: UP
                replication_mode: MTEP
            '[2]':
                name: 'Tier0-Logical-Switch-2'
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                admin_state: UP
                replication_mode: MTEP # source

    CreateLogicalPortForDownlinkForTIER0: &CREATE_LP_FOR_DOWNLINK_TIER0
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalport:
            '[3]':
                switch_id: nsxmanager.[1].logicalswitch.[2]
                name: 'TIER0-LogicalPort-3-For-downlink'
                admin_state: UP

    CreateTIER0LogicalRouterForEdge: &CREATE_TIER0_LR
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: "10"
        logicalrouter:
            '[1]':
                name: 'lrouter-tier-0'
                summary: "LRouter TIER-0 router"
                router_type: "TIER0"
                cluster_id: 'nsxmanager.[1].edgecluster.[1]'

    CreateDownlinkLogicalRouterPortForEdge: &CREATE_DOWNLINK_LRP_FOR_TIER0
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        logicalrouterport:
            '[3]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: 'TIER0-LRPort-2-Downlinkport'
                summary: "LRPort Downlink Port1 created through automation"
                linked_switch_port_id: nsxmanager.[1].logicalport.[3]->id
                resource_type: "LogicalRouterDownLinkPort"
                subnets:
                   - prefixlen: 24
                     ip_addresses:
                         - '192.168.60.1'

    CreateUplinkLogicalRouterPortForEdge: &CREATE_UPLINK_LRP_FOR_TIER0
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        logicalrouteruplinkport:
            '[1]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: 'TIER0-LRPort-1-UPLINKPORT'
                summary: "TIER0 LRPort Uplink Port1 created through automation"
                linked_switch_port_id: nsxmanager.[1].logicalport.[1]->id
                resource_type: "LogicalRouterUpLinkPort"
                gateway_cluster_member_index: 'nsxmanager.[1].edgenode.[1]->member_index'
                subnets:
                   - prefixlen: 24
                     ip_addresses:
                         - '192.168.50.1'
            '[2]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: 'TIER0-LRPort-1-UPLINKPORT'
                summary: "TIER0 LRPort Uplink Port1 created through automation"
                linked_switch_port_id: nsxmanager.[1].logicalport.[2]->id
                resource_type: "LogicalRouterUpLinkPort"
                gateway_cluster_member_index: 'nsxmanager.[1].edgenode.[2]->member_index'
                subnets:
                   - prefixlen: 24
                     ip_addresses:
                         - '192.168.50.2'

    CreateLogicalSwitchForTIER1: &CREATE_LS_FOR_TIER1
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalswitch:
            '[3]':
                name: 'Tier1-Logical-Switch-3'
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                admin_state: UP
                # replication_mode's value is case sensitive
                replication_mode: MTEP # source

    CreateLogicalPortForTIER1: &CREATE_LP_FOR_TIER1
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalport:
            '[4]':
                switch_id: nsxmanager.[1].logicalswitch.[3]
                name: 'TIER1-LogicalPort-5'
                admin_state: UP

    CreateTIER1LogicalRouterForEdge: &CREATE_TIER1_LR
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: "5"
        logicalrouter:
            '[2]':
                name: 'logical-router-tier-1'
                summary: "LRouter TIER-1 created through automation"
                router_type: "TIER1"

    CreateDownlinkTier1LogicalRouterPort: &CREATE_DOWNLINK_FOR_TIER1_LR
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        logicalrouterport:
            '[5]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[2]"
                name: 'TIER1-LRPort-3-Downlinkport'
                summary: "Logical Router Port on TIER-1 Downlink"
                linked_switch_port_id: nsxmanager.[1].logicalport.[4]->id
                resource_type: "LogicalRouterDownLinkPort"
                subnets:
                   - prefixlen: 24
                     ip_addresses:
                         - '192.168.70.1'

    CreateRouterLinkPortOnTIER0Router: &CREATE_ROUTER_LINK_PORT_ON_TIER0
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        logicalrouterlinkport:
            '[6]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[1]"
                name: 'TIER0-RouterLinkPort'
                summary: "Create a Router Link port on TIER-0 Router"
                resource_type: "LogicalRouterLinkPort"

    CreateRouterLinkPortOnTIER1Router: &CREATE_ROUTER_LINK_PORT_ON_TIER1
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        logicalrouterlinkport:
            '[7]':
                logical_router_id: "nsxmanager.[1].logicalrouter.[2]"
                linked_router_port_id: nsxmanager.[1].logicalrouterlinkport.[6]->id
                name: 'TIER1-RouterLinkPort'
                summary: "Create a Router Link port on TIER-1 Router"
                resource_type: "LogicalRouterLinkPort"

    UpdateStaticRoutes: &UPDATE_STATIC_ROUTES
        Type: "Router"
        TestRouter: "nsxmanager.[1].logicalrouter.[1]"
        lrstaticroutes:
            '[1]':
                staticroutes:
                    - name: 'static-route-1'
                      summary: 'Static route for 192.168.30.0/24'
                      next_hops:
                          - '192.168.50.253'
                      network: '192.168.200.0/24'
                      lr_port_id: "nsxmanager.[1].logicalrouteruplinkport.[1]->id_"
                    - name: 'static-route-2'
                      summary: 'Static route for 192.168.40.0/24'
                      next_hops:
                          - '192.168.50.253'
                      network: '192.168.200.0/24'
                      lr_port_id: "nsxmanager.[1].logicalrouteruplinkport.[2]->id_"

    DeleteRouterLinkPortOnTIER0Router: &DELETE_ROUTER_LINK_PORT_ON_TIER0
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        deletelogicalrouterlinkport: "nsxmanager.[1].logicalrouterlinkport.[6]"

    DeleteRouterLinkPortOnTIER1Router: &DELETE_ROUTER_LINK_PORT_ON_TIER1
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        deletelogicalrouterlinkport: "nsxmanager.[1].logicalrouterlinkport.[7]"

    DeleteDownlinkTier1LogicalRouterPort: &DELETE_DOWNLINK_TIER1_LRP
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        deletelogicalrouterport: "nsxmanager.[1].logicalrouterport.[5]"

    DeleteTIER1LogicalRouterForEdge: &DELETE_TIER1_LR
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletelogicalrouter: "nsxmanager.[1].logicalrouter.[2]"

    DeleteLogicalSwitchForTier1: &DELETE_LS_FOR_TIER1
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletelogicalswitch: 'nsxmanager.[1].logicalswitch.[3]'

    DeleteLogicalPortForTier1: &DELETE_LP_FOR_TIER1
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        deletelogicalport: 'nsxmanager.[1].logicalport.[4]'

    DeleteUplinkProfile: &DELETE_UPLINK_PROFILE_01--ESX
       Type: NSX
       TestNSX: nsxmanager.[1]
       deleteuplinkprofile: 'nsxmanager.[1].uplinkprofile.[1]'

    DeleteTransportNode1: &DELETE_TRANSPORT_NODE_01--ESX
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletetransportnode: 'nsxmanager.[1].transportnode.[1]'

    DeleteTransportNode2: &DELETE_TRANSPORT_NODE_02--ESX
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletetransportnode: 'nsxmanager.[1].transportnode.[2]'

    DeleteTransportZone: &DELETE_TRANSPORT_ZONE_01--ESX
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletetransportzone: 'nsxmanager.[1].transportzone.[1]'

    JoinMPClusterNode-1_NSXM-1_ToNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        clusternode:
            '[1]':
                mgr_role_config:
                    manager_ip: nsxmanager.[1]
                    manager_thumbprint: nsxmanager.[1]
                    node_type: AddManagementNodeSpec
                    password: default
                    username: admin

    MapNSXManager-1_CLUSTER-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        cluster:
            '[1]':
                id_: 1
                map_object: true

    VerifyMPClusterStatus-1_NSXM-1:
        TestCluster: nsxmanager.[1].cluster.[1]
        Type: Cluster
        cluster_status:
            control_cluster_status:
                status[?]equal_to: STABLE
            mgmt_cluster_status:
                status[?]equal_to: STABLE

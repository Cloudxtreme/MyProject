ConfiguringVTEPwithoutIPs:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "Negative Tests"
    TestName: "ConfiguringVTEPwithoutIPs"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify that nothing works when there is no IP assigned to VTEP
              (The MP should inform the user about no IP configuration isn't a
              supported config)"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "mqing"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers']
            - ['VerifyLS2VtepEntryOnControllers']
            - ['LogicalSwitch1Traffic']
            - ['LogicalSwitch2Traffic']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']
            - ['ReadVtep4IP']
            - ['RemoveVtep4IP']
            - ['ArpPingLS1_135_To_7_Fail']
            - ['ArpPingLS2_246_To_8_Fail']
            - ['VerifyLS1VtepEntry4NotOnControllers']
            - ['VerifyLS2VtepEntry4NotOnControllers']
            - ['ConfigureVtep4IPDhcp']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']
            - ['VerifyLS1VtepEntryOnControllers']
            - ['VerifyLS2VtepEntryOnControllers']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['ConfigureVtep4IPDhcp']
            - ['NSXCleanup']
            - ['Unregister4Hosts']

        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM
        ARPPING_LS2_CCP_Verification: *ARPPING_LS2_CCP_VERIFICATION--KVM

        LogicalSwitch1Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]"
            SupportAdapter: "vm.[7].vif.[1]"
            TestDuration  : "10"

        LogicalSwitch2Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]"
            SupportAdapter: "vm.[8].vif.[1]"
            TestDuration  : "10"

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        ArpPingLS1_135_To_7_Fail:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]'
            SupportAdapter: 'vm.[7].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            connectivitytest: '0'
            ExpectedResult: 'Fail'
            sleepbetweenworkloads:  "30"

        ArpPingLS2_246_To_8_Fail:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]'
            SupportAdapter: 'vm.[8].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            connectivitytest: '0'
            ExpectedResult: 'Fail'

        # expecte result as 'fail' as this workload will fail when it checks
        # the vtep ip has changed to 0.0.0.0, but actually it becomes 'NA'.
        # But this workload will still remove the vtep ip
        RemoveVtep4IP: *REMOVE_VTEP4_IP_ADDRESS--KVM

        ConfigureVtep4IPDhcp:
            Type: NetAdapter
            TestAdapter: kvm.[4].vtep.[1]
            IPv4: dhcp

        ReadVtep4IP:
            Type: "NetAdapter"
            TestAdapter: "kvm.[4].vtep.[1]"
            PersistData: "Yes"
            read:
                'ip[?]defined': ''

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntry4NotOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[4].vtep.[1]->read->ip"

        VerifyLS2VtepEntry4NotOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[4].vtep.[1]->read->ip"

NegativeDuplicateTNCerts:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "Negative Tests"
    TestName: "NegativeDuplicateTNCerts"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "Verify that two TNs with the same certificates and in the same
              TZ does not bring down controller."
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "mqing"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['BackupTN1Cert']
            - ['CopyTN1CertFromTN4']
            - ['UnregisterHost']
            - ['Register1Host']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLSReplicationModeNotOnHost1']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers']
            - ['VerifyLS1Vtep1EntryNotOnControllers',
               'VerifyLS2Vtep1EntryNotOnControllers']
            - ['LogicalSwitch1Traffic']
            - ['LogicalSwitch2Traffic']
            - ['LogicalSwitch1VM1TrafficFail']
            - ['LogicalSwitch2VM2TrafficFail']
            - ['ARPPING_LS1_VM357_CCP_Verification']
            - ['ARPPING_LS2_VM468_CCP_Verification']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['RestoreTN1Cert']
            - ['UnregisterHost']
            - ['Register1Host']
            - ['DiscoverHostnodes']
            - ['Unregister4Hosts']

        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Register1Host: *REGISTER_1_HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        UnregisterHost: *UNREGISTER_HOST1--KVM
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        ARPPING_LS1_VM357_CCP_Verification: *ARPPING_LS1_VM357_CCP_VERIFICATION--KVM
        ARPPING_LS2_VM468_CCP_Verification: *ARPPING_LS2_VM468_CCP_VERIFICATION--KVM

        BackupTN1Cert:
            Type:  "Host"
            TestHost: "kvm.[1]"
            copy_file:
                source_file_name: "/etc/vmware/nsx/host-cert.pem"
                dest_host: "kvm.[1]"
                dest_file_name: "/etc/vmware/nsx/host-cert.pem.bak"

        CopyTN1CertFromTN4:
            Type:  "Host"
            TestHost: "kvm.[4]"
            copy_file:
                source_file_name: "/etc/vmware/nsx/host-cert.pem"
                dest_host: "kvm.[1]"
                dest_file_name: "/etc/vmware/nsx/host-cert.pem"

        RestoreTN1Cert:
            Type:  "Host"
            TestHost: "kvm.[1]"
            copy_file:
                source_file_name: "/etc/vmware/nsx/host-cert.pem.bak"
                dest_host: "kvm.[1]"
                dest_file_name: "/etc/vmware/nsx/host-cert.pem"

        LogicalSwitch1Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[3].vif.[1],vm.[5].vif.[1]"
            SupportAdapter: "vm.[7].vif.[1]"
            TestDuration  : "10"

        LogicalSwitch1VM1TrafficFail:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: "vm.[3].vif.[1]"
            TestDuration  : "10"
            connectivitytest: '0'
            expectedresult: "Ignore"
            # vdnet PR: 1269735, after this PR fixed, we can set expectedresult
            # to 'FAIL'
            # expectedresult: "Failure"

        LogicalSwitch2Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[4].vif.[1],vm.[6].vif.[1]"
            SupportAdapter: "vm.[8].vif.[1]"
            TestDuration  : "10"

        LogicalSwitch2VM2TrafficFail:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[2].vif.[1]"
            SupportAdapter: "vm.[4].vif.[1]"
            TestDuration  : "10"
            connectivitytest: '0'
            expectedresult: "Ignore"
            # vdnet PR: 1269735, after this PR fixed, we can set expectedresult
            # to 'FAIL'
            # expectedresult: "Failure"

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[2-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLSReplicationModeNotOnHost1:
            Type: "Host"
            testHost: "kvm.[1]"
            execution_type: 'cli'
            expectedresult: 'Fail'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1Vtep1EntryNotOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2Vtep1EntryNotOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"

RemoveAddTNfromTZAfterMPConfigChange:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "Negative Tests"
    TestName: "RemoveAddTNfromTZAfterMPConfigChange"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "Verify when TN is not connected to the TZ, verify that TN will
              establish tunnel with other TNs with same VNI when TN is back
              to the TZ."
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "mqing"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch1']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['ConfigureLS1VnicIP']
            - ['VerifyLS1ReplicationModeOnHost']
            - ['LogicalSwitch1Traffic']
            - ['ARPPING_LS1_CCP_Verification']
            # remove TN4 from TZ, verify traffic not works on Host4
            - ['DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteTransportNode4']
            - ['LogicalSwitch1Host4TrafficWithFail']
            # create logical switch 2 after delete TN4
            - ['CreateLogicalSwitch2']
            # add TN4 back to TZ, verfiy logical switch 2 info can sync to host4
            - ['CreateTransportNode_4']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVtep4']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureLS2VnicIP']
            - ['VerifyLSReplicationModeOn3Host',
               'VerifyLSReplicationModeOn3Host']
            - ['ARPPING_LS1_VM_1_3_5_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']
            - ['LogicalSwitch1TrafficVM_1_3_to_5']
            - ['LogicalSwitch2Traffic']

        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1Ignore']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        CreateTransportNode_4: *CREATE_TRANSPORTNODE_4--KVM
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        DiscoverVtep4: *DISCOVER_VTEP_4--KVM
        CreateLogicalSwitch1: *CREATE_LOGICALSWITCH_1
        CreateLogicalSwitch2: *CREATE_LOGICALSWITCH_2
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureLS1VnicIP:  *CONFIGURE_LS1_4VMS_IP--KVM
        ConfigureLS2VnicIP:  *CONFIGURE_LS2_4VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM7Vnic1FromLSwitch1Ignore:  *DELETE_VM7_VNIC1_LSWITCH1_IGNORE--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM
        ARPPING_LS1_VM_1_3_5_CCP_Verification: *ARPPING_LS1_VM_1_3_5_CCP_VERIFICATION--KVM
        ARPPING_LS2_CCP_Verification: *ARPPING_LS2_CCP_VERIFICATION--KVM

        LogicalSwitch1Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]"
            SupportAdapter: "vm.[7].vif.[1]"
            TestDuration  : "10"

        LogicalSwitch1TrafficVM_1_3_to_5:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[1].vif.[1],vm.[3].vif.[1]"
            SupportAdapter: "vm.[5].vif.[1]"
            TestDuration  : "10"

        LogicalSwitch2Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]"
            SupportAdapter: "vm.[8].vif.[1]"
            TestDuration  : "10"

        LogicalSwitch1Host4TrafficWithFail:
            Type: 'Traffic'
            ToolName      : "netperf"
            TestAdapter:    'vm.[7].vif.[1]'
            SupportAdapter: 'vm.[1].vif.[1]'
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestDuration: '10'
            connectivitytest: '0'
            expectedresult: "Ignore"
            # vdnet PR: 1269735, after this PR fixed, we can set expectedresult
            # to 'FAIL'
            # expectedresult: "FAIL"

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLSReplicationModeOn3Host:
            Type: "Host"
            testHost: "kvm.[1-3]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLSReplicationModeOnHost4AfterRejoin:
            Type: "Host"
            testHost: "kvm.[1-3]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'


        VerifyLS1ReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1Vtep4EntryNotOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2Vtep4EntryNotOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[4].vtep.[1]"

        DeleteTransportNode4:
            Type: NSX
            TestNSX: nsxmanager.[1]
            deletetransportnode: 'nsxmanager.[1].transportnode.[4]'

NegativeControllerIPDuplicatesATNIP:
    Product: "NSXTransformers"
    Component: "Negative Tests"
    Category: "L2"
    TestName: "NegativeControllerIPDuplicatesATNIP"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify that CCP/MP don't go down when a TN takes on the IP
              address of one of the controller nodes."
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "mqing"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['LogicalSwitch1Traffic', 'LogicalSwitch2Traffic']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']
            - ['DiscoverHost4ManagementInterface']
            - ['ReadNsxControlerMgtIP']
            - ['ConfigureHost4ManagementInterface']
            - ['ArpPingLS1_135_To_7_Dup_Scenario',
               'ArpPingLS1_7_To_135_Dup_Scenario']
            - ['ArpPingLS2_246_To_8_Dup_Scenario',
               'ArpPingLS2_8_To_246_Dup_Scenario']
            - ['RemoveHost4ManagementInterface']
            # use traffic workload to wait for recover
            - ['LogicalSwitch1Traffic']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']

        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['RemoveHost4ManagementInterfaceLenient']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM
        ARPPING_LS2_CCP_Verification: *ARPPING_LS2_CCP_VERIFICATION--KVM

        LogicalSwitch1Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]"
            SupportAdapter: "vm.[7].vif.[1]"
            NoofOutbound  : "1"
            NoofInbound   : "1"
            TestDuration  : "90"

        LogicalSwitch2Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]"
            SupportAdapter: "vm.[8].vif.[1]"
            NoofOutbound  : "1"
            NoofInbound   : "1"
            TestDuration  : "90"

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        ArpPingLS1_135_To_7_Dup_Scenario:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]'
            SupportAdapter: 'vm.[7].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            connectivitytest: '0'
            expectedresult: 'ignore'

        ArpPingLS1_7_To_135_Dup_Scenario:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[7].vif.[1]'
            SupportAdapter: 'vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            connectivitytest: '0'
            expectedresult: 'ignore'

        ArpPingLS2_246_To_8_Dup_Scenario:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]'
            SupportAdapter: 'vm.[8].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            connectivitytest: '0'
            expectedresult: 'ignore'

        ArpPingLS2_8_To_246_Dup_Scenario:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[8].vif.[1]'
            SupportAdapter: 'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            connectivitytest: '0'
            expectedresult: 'ignore'

        DiscoverHost4ManagementInterface: *DISCOVER_HOST4_MANAGEMENT_INTERFACE--KVM

        ConfigureHost4ManagementInterface: *CONFIGURE_HOST4_MANAGEMENT_INTERFACE_WITH_CONTROLLER_IP--KVM

        RemoveHost4ManagementInterface: *REMOVE_HOST4_MANAGEMENT_INTERFACE--KVM

        RemoveHost4ManagementInterfaceLenient: *REMOVE_HOST4_MANAGEMENT_INTERFACE_LENIENT--KVM

        ReadNsxControlerMgtIP:
            Type: Controller
            TestController: 'nsxcontroller.[1]'
            PersistData: "Yes"
            read_ip:
                'ip[?]defined': ''

NegativeMPIPDuplicatesATNIP:
    Product: "NSXTransformers"
    Component: "Negative Tests"
    Category: "L2"
    TestName: "NegativeMPIPDuplicatesATNIP"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify that CCP/MP don't go down when a TN takes on the IP
              address of one of the MP nodes."
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "mqing"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['LogicalSwitch1Traffic', 'LogicalSwitch2Traffic']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']
            - ['DiscoverHost4ManagementInterface']
            - ['ReadNsxManagerMgtIP']
            - ['ConfigureHost4ManagementInterface']
            - ['ArpPingLS1_135_To_7_Dup_Scenario',
               'ArpPingLS1_7_To_135_Dup_Scenario']
            - ['ArpPingLS2_246_To_8_Dup_Scenario',
               'ArpPingLS2_8_To_246_Dup_Scenario']
            - ['RemoveHost4ManagementInterface']
            - ['LogicalSwitch1Traffic']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']

        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['RemoveHost4ManagementInterfaceLenient']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM
        ARPPING_LS2_CCP_Verification: *ARPPING_LS2_CCP_VERIFICATION--KVM

        LogicalSwitch1Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]"
            SupportAdapter: "vm.[7].vif.[1]"
            NoofOutbound  : "1"
            NoofInbound   : "1"
            TestDuration  : "90"

        LogicalSwitch2Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]"
            SupportAdapter: "vm.[8].vif.[1]"
            NoofOutbound  : "1"
            NoofInbound   : "1"
            TestDuration  : "90"

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        ArpPingLS1_135_To_7_Dup_Scenario:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]'
            SupportAdapter: 'vm.[7].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            connectivitytest: '0'
            expectedresult: 'ignore'

        ArpPingLS1_7_To_135_Dup_Scenario:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[7].vif.[1]'
            SupportAdapter: 'vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            connectivitytest: '0'
            expectedresult: 'ignore'

        ArpPingLS2_246_To_8_Dup_Scenario:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]'
            SupportAdapter: 'vm.[8].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            connectivitytest: '0'
            expectedresult: 'ignore'

        ArpPingLS2_8_To_246_Dup_Scenario:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[8].vif.[1]'
            SupportAdapter: 'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            connectivitytest: '0'
            expectedresult: 'ignore'

        DiscoverHost4ManagementInterface: *DISCOVER_HOST4_MANAGEMENT_INTERFACE--KVM

        ConfigureHost4ManagementInterface: *CONFIGURE_HOST4_MANAGEMENT_INTERFACE_WITH_NSM_IP--KVM

        RemoveHost4ManagementInterface: *REMOVE_HOST4_MANAGEMENT_INTERFACE--KVM

        RemoveHost4ManagementInterfaceLenient: *REMOVE_HOST4_MANAGEMENT_INTERFACE_LENIENT--KVM

        ReadNsxManagerMgtIP:
            Type: NSX
            TestNSX: 'nsxmanager.[1]'
            PersistData: "Yes"
            read_ip:
                'ip[?]defined': ''

VTEPRebootinHeadlessMode:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "Reboot Scenarios"
    TestName: "VTEPRebootinHeadlessMode"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify the functionality when VTEP are rebooted in headless
              mode, VM is not able to communicate."
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "mqing"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers']
            - ['VerifyLS2VtepEntryOnControllers']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']
            - ['VerifyLS1VtepEntryOnHost4',
               'VerifyLS2VtepEntryOnHost4']
            - ['EnableFirewallOnHost4']
            - ['BlockConnectionBetweenTN4andCCP']
            - ['RebootTN4']
            - ['PoweronVM7', 'PoweronVM8']
            - ['VerifyLS1VtepEntryNotOnHost4',
               'VerifyLS2VtepEntryNotOnHost4']
            - ['RestoreConnectionBetweenTN4andCCP']
            - ['DisableFirewallOnHost4']
            - ['VerifyLS1VtepEntryOnHost4',
               'VerifyLS2VtepEntryOnHost4']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']

        ExitSequence:
            - ['RestoreConnectionBetweenTN4andCCP']
            - ['DisableFirewallOnHost4']
            - ['PoweronVM7', 'PoweronVM8']
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        PoweronVM7: *POWER_ON_VM_7
        PoweronVM8: *POWER_ON_VM_8
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM
        ARPPING_LS2_CCP_Verification: *ARPPING_LS2_CCP_VERIFICATION--KVM

        EnableFirewallOnHost4:
            Type: Host
            TestHost: kvm.[4]
            execution_type: *FIREWALL_EXECUTION_TYPE--KVM
            firewall_status: enable

        DisableFirewallOnHost4:
            <<: *DISABLE_FIREWALL_ON_HOST
            TestHost: kvm.[4]
            execution_type: *FIREWALL_EXECUTION_TYPE--KVM

        BlockConnectionBetweenTN4andCCP: *DISABLE_NETCP_ON_HOST4_AND_SAVE--KVM
        RestoreConnectionBetweenTN4andCCP: *ENABLE_NETCP_ON_HOST4_AND_SAVE--KVM

        RebootTN4:
            Type: "Host"
            TestHost: "kvm.[4]"
            reboot: "yes"

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[4]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[4]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS1VtepEntryNotOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[4]'
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2VtepEntryNotOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[4]'
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

MTEPFuncEmptySegment:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "Replication Methods"
    TestName: "MTEPFuncEmptySegment"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify the functionality when the last MTEP of a segment is
              brought down. Whole segment list should be removed from all TNs
              in the VNIs."
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "mqing"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers']
            - ['VerifyLS2VtepEntryOnControllers']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']
            - ['VerifyLS1TN12VtepEntryOnHost4',
               'VerifyLS2TN12VtepEntryOnHost3']
            - ['PoweroffVM1', 'PoweroffVM2']
            - ['VerifyLS1TN1VtepEntryNotOnHost2',
               'VerifyLS2TN1VtepEntryNotOnHost4']
            - ['PoweroffVM3', 'PoweroffVM4']
            - ['VerifyLS1TN12VtepEntryNotOnHost3',
               'VerifyLS2TN12VtepEntryNotOnHost4']
            - ['PoweronVM1', 'PoweronVM2', 'PoweronVM3', 'PoweronVM4']
            - ['VerifyLS1TN12VtepEntryOnHost4',
               'VerifyLS2TN12VtepEntryOnHost3']

        ExitSequence:
            - ['PoweronVM1', 'PoweronVM3']
            - ['PoweronVM2', 'PoweronVM4']
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        PoweronVM1: *POWER_ON_VM_1
        PoweronVM2: *POWER_ON_VM_2
        PoweronVM3: *POWER_ON_VM_3
        PoweronVM4: *POWER_ON_VM_4
        PoweroffVM1: *POWER_OFF_VM_1
        PoweroffVM2: *POWER_OFF_VM_2
        PoweroffVM3: *POWER_OFF_VM_3
        PoweroffVM4: *POWER_OFF_VM_4
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM
        ARPPING_LS2_CCP_Verification: *ARPPING_LS2_CCP_VERIFICATION--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1TN12VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[4]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2TN12VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[3]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1TN1VtepEntryNotOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[2]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"

        VerifyLS2TN1VtepEntryNotOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[4]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"

        VerifyLS1TN12VtepEntryNotOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[3]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"

        VerifyLS2TN12VtepEntryNotOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[4]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_vtep_table[?]not_contains':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"

UnknownDestinationIPScan:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "VM to VM Communication"
    TestName: "UnknownDestinationIPScan"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify that the broadcast storm (in the logical space) when
              rogue VMs scan destination IPs unknown to controller, doesn't
              bring down the controller or the infrastructure. Should verify
              the exponential backup mechanism"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "mqing"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']
            - ['ArpPingLS1_UNKOWN_DEST_SCAN', 'ArpPingLS2_UNKOWN_DEST_SCAN']
            # check controller status again to  make sure controller not down
            # after IP Scan
            - ['VerifyLSReplicationModeOnHost']
            - ['LogicalSwitch1Traffic']
            - ['LogicalSwitch2Traffic']

        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM
        ARPPING_LS2_CCP_Verification: *ARPPING_LS2_CCP_VERIFICATION--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        ArpPingLS1_UNKOWN_DEST_SCAN:
            Type: 'Traffic'
            toolName: 'scapy'
            TestAdapter:    'vm.[1].vif.[1]'
            SupportAdapter: 'vm.[5].vif.[1]'
            protocol: 'arp'
            DestinationAddress: '192.168.1.1-192.168.1.255'
            interval: *SCAPY_INTERVAL
            pktcount: 1
            connectivitytest: '0'

        ArpPingLS2_UNKOWN_DEST_SCAN:
            Type: 'Traffic'
            toolName: 'scapy'
            TestAdapter:    'vm.[8].vif.[1]'
            SupportAdapter: 'vm.[6].vif.[1]'
            protocol: 'arp'
            DestinationAddress: '192.168.2.1-192.168.2.255'
            interval: *SCAPY_INTERVAL
            pktcount: 1
            connectivitytest: '0'

        LogicalSwitch1Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "udp,tcp"
            sendmessagesize : "1000"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: "vm.[3].vif.[1],vm.[5].vif.[1],vm.[7].vif.[1]"
            TestDuration  : "20"

        LogicalSwitch2Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "udp,tcp"
            sendmessagesize : "1000"
            TestAdapter   : "vm.[2].vif.[1]"
            SupportAdapter: "vm.[4].vif.[1],vm.[6].vif.[1],vm.[8].vif.[1]"
            TestDuration  : "20"

UnknownSourceIPScan:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "VM to VM Communication"
    TestName: "UnknownSourceIPScan"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "to verify that source vm send batch of source ip changed arp
              message will not make controller work abnormal"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "mqing"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']
            - ['ArpPingLS1_SOURCE_IP_SCAN']
            - ['ArpPingLS2_SOURCE_IP_SCAN']
            # check controller status again to  make sure controller not down
            # after source IP Scan
            - ['VerifyLSReplicationModeOnHost']
            - ['LogicalSwitch1Traffic']
            - ['LogicalSwitch2Traffic']

        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM
        ARPPING_LS2_CCP_Verification: *ARPPING_LS2_CCP_VERIFICATION--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        ArpPingLS1_SOURCE_IP_SCAN:
            Type: 'Traffic'
            toolName: 'scapy'
            TestAdapter:    'vm.[1].vif.[1]'
            SupportAdapter: 'vm.[3].vif.[1]'
            protocol: 'arp'
            SourceAddress: '192.168.1.1-192.168.1.255'
            interval: *SCAPY_INTERVAL
            pktcount: 1
            connectivitytest: '0'

        ArpPingLS2_SOURCE_IP_SCAN:
            Type: 'Traffic'
            toolName: 'scapy'
            TestAdapter:    'vm.[8].vif.[1]'
            SupportAdapter: 'vm.[6].vif.[1]'
            protocol: 'arp'
            SourceAddress: '192.168.2.1-192.168.2.255'
            interval: *SCAPY_INTERVAL
            pktcount: 1
            connectivitytest: '0'

        LogicalSwitch1Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "udp,tcp"
            sendmessagesize : "1000"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: "vm.[3].vif.[1],vm.[5].vif.[1],vm.[7].vif.[1]"
            TestDuration  : "20"

        LogicalSwitch2Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "udp,tcp"
            sendmessagesize : "1000"
            TestAdapter   : "vm.[2].vif.[1]"
            SupportAdapter: "vm.[4].vif.[1],vm.[6].vif.[1],vm.[8].vif.[1]"
            TestDuration  : "20"

NegativeMTEPTrafficDrop:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "Replication Methods"
    TestName: "NegativeMTEPTrafficDrop"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To determine the behavior of the source HV, when the MTEP it
              choses in the other L2 segments is rogue and drops the traffic
              that has RL bit set."
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "mqing"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ArpPingLS1_Segment1']
            - ['ArpPingLS1_Segment2']
            - ['LogicalSwitch1Traffic']

        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        # send unknown arp request to simulate MTEP not return arp request
        ArpPingLS1_Segment1:
            Type: 'Traffic'
            toolName: 'scapy'
            TestAdapter:  'vm.[1].vif.[1]'
            SupportAdapter: 'vm.[5].vif.[1]'
            protocol: 'arp'
            DestinationAddress: '192.168.1.10'
            interval: *SCAPY_INTERVAL
            connectivitytest: '0'
            pktcount: 5
            verification  : 'Verification_0'

        # if mtep not reply broadcast packets,verify source node not retransmit
        # packets, so the packets with replicationbit=0x1 must be no more than 5
        Verification_0:
            PktCapVerification:
                target: 'kvm.[1].pif.[1]'
                pktcapfilter: *PKTCAP_LS1_TX_FILTER--KVM
                verificationtype: *PKT_VERIFICATION_TYPE--KVM
                vni: "nsxmanager.[1].logicalswitch.[1]"
                pktcount: '5'
                replicationbit: '0x1'
                pkttype:  'unicast'
                tos:  '0x0'
                innerpkttype: 'broadcast'

        # send unknown arp request to simulate MTEP not return arp request
        ArpPingLS1_Segment2:
            Type: 'Traffic'
            toolName: 'scapy'
            TestAdapter:    'vm.[5].vif.[1]'
            SupportAdapter: 'vm.[1].vif.[1]'
            DestinationAddress: '192.168.6.10'
            interval: *SCAPY_INTERVAL
            protocol: 'arp'
            pktcount: 5
            connectivitytest: '0'
            verification  : 'Verification_1'

        # if mtep not reply broadcast packets,verify source node not retransmit
        # packets, so the packets with replicationbit=0x1 must be no more than 5
        Verification_1:
            PktCapVerification:
                target: 'kvm.[3].pif.[1]'
                pktcapfilter: *PKTCAP_LS1_TX_FILTER--KVM
                verificationtype: *PKT_VERIFICATION_TYPE--KVM
                vni: "nsxmanager.[1].logicalswitch.[1]"
                pktcount: '5'
                replicationbit: '0x1'
                pkttype:  'unicast'
                tos:  '0x0'
                innerpkttype: 'broadcast'

        LogicalSwitch1Traffic:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "udp,tcp"
            sendmessagesize : "1000"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: "vm.[3].vif.[1],vm.[5].vif.[1],vm.[7].vif.[1]"
            TestDuration  : "20"

VTEPARPRefresh:
    Product: "NSXTransformer"
    Component: "ARP proxy"
    Category: "L2"
    TestName: "VTEPARPRefresh"
    Version: 2
    Tags: "Nsx,Avalanche,arp"
    QCPath: *QCPATH--KVM
    Summary: "To verify that (VM-IP, VM-MAC) table in controller will be kept
              alive by querying CCP before it times out, if there is traffic
              from new VM-IP/VM-MAC is observed"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "leng"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM

    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['ConfigureVnicIP']
            - ['ARPPING_LS1_CCP_Verification']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1',  'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1',  'DeleteVM7Vnic1FromLSwitch1']
            - ['NSXCleanup']
            - ['Unregister4Hosts']

        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        ConfigureVnicIP: *CONFIGURE_LS1_4VMS_IP--KVM
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM

# XXX(salmanm): This test case needs the ESX hosts to be connected to
# different L2 segments that can reach each other via a router.
VTEPDefaultGatewayChange:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "VTEPDefaultGatewayChange"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: 'This test case verifies that flapping the default gateway of the
              transport nodes does not affect the connectivity between the VMs'
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "salmanm"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['VerifyVTEPConnectivity']
            - ['CreateLogicalSwitch']
            # Use DHCP to make sure that the routes are learnt on the fly.
            - ['ConfigureVtep1IpDhcp', 'ConfigureVtep3IpDhcp']
            - ['StoreTwoDefaultGateways']
            - ['AttachVM1toSwitch1', 'AttachVM5toSwitch1']
            - ['AttachVM3toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM6toSwitch2']
            - ['AttachVM4toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost1',
               'VerifyLSReplicationModeOnHost3',
               'VerifyLS1ConnTableOnControllers',
               'VerifyLS2ConnTableOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers',
               'VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers',
               'VerifyLS1VtepEntryOnHost1',
               'VerifyLS2VtepEntryOnHost1',
               'VerifyLS1VtepEntryOnHost3',
               'VerifyLS2VtepEntryOnHost3']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']
            - ['PingVM1And5', 'PingVM2And6',
               'VerifyLS1MacEntryOnHost1',
               'VerifyLS2MacEntryOnHost1',
               'VerifyLS1MacEntryOnHost3',
               'VerifyLS2MacEntryOnHost3']
            - ['SetTwoDifferentGateways']
            - ['FailedPingVM1And5', 'FailedPingVM2And6']
            - ['RestoreTwoDefaultGateways']
            - ['PingVM1And5', 'PingVM2And6']
        ExitSequence:
            - ['RestoreTwoDefaultGateways']
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM5Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM6Vnic1FromLSwitch2']
            - ['DeleteVM3Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM4Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        StoreTwoDefaultGateways: *STORE_DEFAULT_GATEWAYS_HOST1_3--KVM
        SetTwoDifferentGateways: *SET_DIFFERENT_GATEWAYS_HOST1_3--KVM
        RestoreTwoDefaultGateways: *RESTORE_DEFAULT_GATEWAYS_HOST1_3--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        DeleteVM1Vnic1FromLSwitch1: *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM5Vnic1FromLSwitch1: *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2: *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM6Vnic1FromLSwitch2: *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1: *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM7Vnic1FromLSwitch1: *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2: *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM8Vnic1FromLSwitch2: *DELETE_VM8_VNIC1_LSWITCH2--KVM
        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM
        ARPPING_LS2_CCP_Verification: *ARPPING_LS2_CCP_VERIFICATION--KVM

        VerifyVTEPConnectivity:
            Type          : "Traffic"
            ToolName      : "ping"
            TestAdapter   : "kvm.[3].vtep.[1]"
            TestAdapterNetStack: 'vxlan'
            SupportAdapter: "kvm.[1].vtep.[1]"
            SupportAdapterNetStack: 'vxlan'
            TestDuration  : "10"
            NoofInbound   : "1"
            NoofOutbound  : "1"

        ConfigureVtep1IpDhcp:
            Type: NetAdapter
            TestAdapter: kvm.[1].vtep.[1]
            IPv4: dhcp

        ConfigureVtep3IpDhcp:
            Type: NetAdapter
            TestAdapter: kvm.[3].vtep.[1]
            IPv4: dhcp

        VerifyLSReplicationModeOnHost1:
            Type: "Host"
            TestHost: "kvm.[1]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
               table:
                   - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                     replication_mode: 'mtep'
                     controller_status: 'up'
                   - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                     replication_mode: 'source'
                     controller_status: 'up'

        VerifyLSReplicationModeOnHost3:
            Type: "Host"
            TestHost: "kvm.[3]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
               table:
                   - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                     replication_mode: 'mtep'
                     controller_status: 'up'
                   - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                     replication_mode: 'source'
                     controller_status: 'up'

        VerifyLS1ConnTableOnControllers:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"

        VerifyLS2ConnTableOnControllers:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"

        PingVM1And5:
            Type          : "Traffic"
            ToolName      : "ping"
            TestAdapter   : "vm.[5].vif.[1]"
            SupportAdapter: "vm.[1].vif.[1]"
            TestDuration  : "10"
            NoofInbound   : "1"
            NoofOutbound  : "1"

        PingVM2And6:
            Type          : "Traffic"
            ToolName      : "ping"
            TestAdapter   : "vm.[2].vif.[1]"
            SupportAdapter: "vm.[6].vif.[1]"
            TestDuration  : "10"
            NoofInbound   : "1"
            NoofOutbound  : "1"

        FailedPingVM1And5:
            Type          : "Traffic"
            ToolName      : "ping"
            TestAdapter   : "vm.[5].vif.[1]"
            SupportAdapter: "vm.[1].vif.[1]"
            TestDuration  : "10"
            NoofInbound   : "1"
            NoofOutbound  : "1"
            ExpectedResult: FAIL

        FailedPingVM2And6:
            Type          : "Traffic"
            ToolName      : "ping"
            TestAdapter   : "vm.[2].vif.[1]"
            SupportAdapter: "vm.[6].vif.[1]"
            TestDuration  : "10"
            NoofInbound   : "1"
            NoofOutbound  : "1"
            ExpectedResult: FAIL

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS1VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS1VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"

        VerifyLS2VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"

        VerifyLS1MacEntryOnHost1:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once':
                table:
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2MacEntryOnHost1:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once':
                table:
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS1MacEntryOnHost3:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once':
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"

        VerifyLS2MacEntryOnHost3:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once':
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"

AdministrativelyScopedIPv4Multicast:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "AdministrativelyScopedIPv4Multicast"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify that all other uplink ports receive multicast traffic
              sent to an administratively scoped (239.x.x.x) IPv4 multicast IP"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "gangarm"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1', 'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3', 'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1', 'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3', 'VerifyLS2VtepEntryOnHost4']
            - ['AdminScopedMulticastTraffic_LS1_VM1_To_3']
            - ['AdminScopedMulticastTraffic_LS2_VM2_To_4']

        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost1: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS1VtepEntryOnHost2: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS1VtepEntryOnHost3: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS1VtepEntryOnHost4: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--KVM
        VerifyLS2VtepEntryOnHost1: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS2VtepEntryOnHost2: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS2VtepEntryOnHost3: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS2VtepEntryOnHost4: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_4--KVM

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        AdminScopedMulticastTraffic_LS1_VM1_To_3: &ADMIN_SCOPED_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            Type          : 'Traffic'
            Toolname      : 'scapy'
            Protocol      : 'udp'
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: 'vm.[5].vif.[1]'
            TestDuration  : "10"
            verification  : 'VerificationAdminScopedMulticast_LS1'
            connectivitytest: "0"
            DestinationAddress: '239.1.1.1'
            DestinationMac: '01:00:5e:01:01:01'
            interval: *SCAPY_INTERVAL

        AdminScopedMulticastTraffic_LS2_VM2_To_4:
            <<: *ADMIN_SCOPED_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            TestAdapter   : "vm.[2].vif.[1]"
            verification  : 'VerificationAdminScopedMulticast_LS2'

        VerificationAdminScopedMulticast_LS1: *VERIFICATION_ADMIN_SCOPED_MULTICAST_LS1--KVM
        VerificationAdminScopedMulticast_LS2: *VERIFICATION_ADMIN_SCOPED_MULTICAST_LS2--KVM

LocalNetworkControlBlockIPv4Multicast:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "LocalNetworkControlBlockIPv4Multicast"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify that all other uplink ports receive multicast traffic
              sent to Local Network Control Block (224.0.0.x) IPv4 multicast IP"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "gangarm"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1', 'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3', 'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1', 'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3', 'VerifyLS2VtepEntryOnHost4']
            - ['AllHostsMulticastTraffic_LS1_VM1_To_3']
            - ['AllHostsMulticastTraffic_LS2_VM2_To_4']
            - ['AllRoutersMulticastTraffic_LS1_VM1_To_3']
            - ['AllRoutersMulticastTraffic_LS2_VM2_To_4']
            - ['OSPFAllRoutersMulticastTraffic_LS1_VM1_To_3']
            - ['OSPFAllRoutersMulticastTraffic_LS2_VM2_To_4']
            - ['OSPFDesignatedRoutersMulticastTraffic_LS1_VM1_To_3']
            - ['OSPFDesignatedRoutersMulticastTraffic_LS2_VM2_To_4']
            - ['AllSBMSMulticastTraffic_LS1_VM1_To_3']
            - ['AllSBMSMulticastTraffic_LS2_VM2_To_4']

        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost1: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS1VtepEntryOnHost2: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS1VtepEntryOnHost3: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS1VtepEntryOnHost4: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--KVM
        VerifyLS2VtepEntryOnHost1: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS2VtepEntryOnHost2: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS2VtepEntryOnHost3: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS2VtepEntryOnHost4: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_4--KVM

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        # All Hosts group multicast traffic/verification.

        AllHostsMulticastTraffic_LS1_VM1_To_3: &ALL_HOSTS_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            Type          : 'Traffic'
            ToolName      : 'scapy'
            Protocol      : 'udp'
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: 'vm.[3].vif.[1]'
            TestDuration  : "10"
            connectivitytest: "0"
            verification  : 'VerificationAllHostsMulticast_LS1'
            DestinationAddress: '224.0.0.1'
            DestinationMac: '01:00:5e:00:00:01'
            interval: *SCAPY_INTERVAL


        AllHostsMulticastTraffic_LS2_VM2_To_4: &ALL_HOSTS_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            <<: *ALL_HOSTS_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            TestAdapter   : "vm.[2].vif.[1]"
            SupportAdapter: "vm.[4].vif.[1]"
            verification  : 'VerificationAllHostsMulticast_LS2'

        VerificationAllHostsMulticast_LS1: *VERIFICATION_ALL_HOSTS_MULTICAST_LS1--KVM
        VerificationAllHostsMulticast_LS2: *VERIFICATION_ALL_HOSTS_MULTICAST_LS2--KVM

        # All Routers group multicast traffic/verification.
        AllRoutersMulticastTraffic_LS1_VM1_To_3:
            <<: *ALL_HOSTS_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            verification  : 'VerificationAllRoutersMulticast_LS1'
            DestinationAddress: '224.0.0.2'
            DestinationMac: '01:00:5e:00:00:02'

        AllRoutersMulticastTraffic_LS2_VM2_To_4:
            <<: *ALL_HOSTS_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            verification  : 'VerificationAllRoutersMulticast_LS2'
            DestinationAddress: '224.0.0.2'
            DestinationMac: '01:00:5e:00:00:02'

        VerificationAllRoutersMulticast_LS1: *VERIFICATION_ALL_ROUTERS_MULTICAST_LS1--KVM
        VerificationAllRoutersMulticast_LS2: *VERIFICATION_ALL_ROUTERS_MULTICAST_LS2--KVM

        # OSPF-All-Routers group multicast traffic/verification.
        OSPFAllRoutersMulticastTraffic_LS1_VM1_To_3:
            <<: *ALL_HOSTS_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            verification  : 'VerificationOSPFAllRouterMulticast_LS1'
            DestinationAddress: '224.0.0.5'
            DestinationMac: '01:00:5e:00:00:05'

        OSPFAllRoutersMulticastTraffic_LS2_VM2_To_4:
            <<: *ALL_HOSTS_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            verification  : 'VerificationOSPFAllRouterMulticast_LS2'
            DestinationAddress: '224.0.0.5'
            DestinationMac: '01:00:5e:00:00:05'

        VerificationOSPFAllRouterMulticast_LS1: *VERIFICATION_OSPF_ALL_ROUTERS_MULTICAST_LS1--KVM
        VerificationOSPFAllRouterMulticast_LS2: *VERIFICATION_OSPF_ALL_ROUTERS_MULTICAST_LS2--KVM

        # OSPF-Designated-Routers group multicast traffic/verification.
        OSPFDesignatedRoutersMulticastTraffic_LS1_VM1_To_3:
            <<: *ALL_HOSTS_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            verification  : 'VerificationDesignatedRoutersMulticast_LS1'
            DestinationAddress: '224.0.0.6'
            DestinationMac: '01:00:5e:00:00:06'

        OSPFDesignatedRoutersMulticastTraffic_LS2_VM2_To_4:
            <<: *ALL_HOSTS_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            verification  : 'VerificationDesignatedRoutersMulticast_LS2'
            DestinationAddress: '224.0.0.6'
            DestinationMac: '01:00:5e:00:00:06'

        VerificationDesignatedRoutersMulticast_LS1: *VERIFICATION_DESIGNATED_ROUTERS_MULTICAST_LS1--KVM
        VerificationDesignatedRoutersMulticast_LS2: *VERIFICATION_DESIGNATED_ROUTERS_MULTICAST_LS2--KVM

        # All-sbms group multicast traffic/verification.
        AllSBMSMulticastTraffic_LS1_VM1_To_3:
            <<: *ALL_HOSTS_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            verification  : 'VerificationAllSBMSMulticast_LS1'
            DestinationAddress: '224.0.0.17'
            DestinationMac: '01:00:5e:00:00:17'

        AllSBMSMulticastTraffic_LS2_VM2_To_4:
            <<: *ALL_HOSTS_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            verification  : 'VerificationAllSBMSMulticast_LS2'
            DestinationAddress: '224.0.0.17'
            DestinationMac: '01:00:5e:00:00:17'

        VerificationAllSBMSMulticast_LS1: *VERIFICATION_ALL_SMB_MULTICAST_LS1--KVM
        VerificationAllSBMSMulticast_LS2: *VERIFICATION_ALL_SMB_MULTICAST_LS2--KVM


OverlayBroadcastTraffic:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "OverlayBroadcastTraffic"
    Tags: *REPLICATION_TAG--KVM
    QCPath: *QCPATH--KVM
    Version: "2"
    Summary: "To verify that traffic broadcasted by a VM is seen by other VTEPs"
    ExpectedResult: 'PASS'
    Status: 'Execution Ready'
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "salmanm"
    Partnerfacing: 'N'
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIPs']
            - ['VerifyLSReplicationModeOnHosts']
            - ['VerifyLS1ConnTableOnController',
               'VerifyLS2ConnTableOnController']
            - ['VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1',
               'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3',
               'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1',
               'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3',
               'VerifyLS2VtepEntryOnHost4']
            - ['VM1BroadcastTrafficVerifyOnHosts']
            # TODO(salmanm): Add support for verifying packet's source MAC/IP
            # and destination MAC/IP so that these verifciations can be run in
            # parallel. BZ #1365346
            - ['VM2BroadcastTrafficVerifyOnHosts']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        ConfigureVnicIPs: *CONFIGURE_8VMS_IP--KVM
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        DeleteVM1Vnic1FromLSwitch1: *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2: *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1: *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2: *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1: *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2: *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1: *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2: *DELETE_VM8_VNIC1_LSWITCH2--KVM

        BroadcastMacAddress: &BROADCAST_MAC_ADDRESS
            'ff:ff:ff:ff:ff:ff'

        VM1BroadcastTrafficVerifyOnHosts:
            Type: 'Traffic'
            toolname: 'scapy'
            TestAdapter: "vm.[1].vif.[1]"
            SupportAdapter: 'vm.[5].vif.[1]'
            DestinationMac: *BROADCAST_MAC_ADDRESS
            Protocol: 'icmp'
            connectivitytest: "0"
            interval: *SCAPY_INTERVAL
            pktcount: 5
            verification: 'VerificationOnHostsLS1'

        VerificationOnHostsLS1:
            PktCapVerification:
                target: *PIF1_OF_HOST_2_3_4--KVM
                # TODO(salmanm/mqing): Why filtering based on logical switch
                # vxlan does not capture the ping packets.
                pktcapfilter: *PKTCAP_RX_FILTER--KVM
                verificationtype: *PKT_VERIFICATION_TYPE--KVM
                pktcount: '5+'
                # TODO(salmanm): What is the following parameter used for ? Does
                # it have any effect at all?
                vni: 'nsxmanager.[1].logicalswitch.[1]'
                pkttype: 'unicast'
                innerpkttype: 'broadcast'

        VerificationOnHostsLS2:
            PktCapVerification:
                target: *PIF1_OF_HOST_2_3_4--KVM
                # TODO(salmanm/mqing): Why filtering based on logical switch
                # vxlan does not capture the ping packets.
                pktcapfilter: *PKTCAP_RX_FILTER--KVM
                verificationtype: *PKT_VERIFICATION_TYPE--KVM
                pktcount: '5+'
                # TODO(salmanm): What is the following parameter used for ? Does
                # it have any effect at all?
                vni: 'nsxmanager.[1].logicalswitch.[2]'
                pkttype: 'unicast'
                innerpkttype: 'broadcast'

        VM2BroadcastTrafficVerifyOnHosts:
            Type: 'Traffic'
            toolname: 'scapy'
            TestAdapter: "vm.[2].vif.[1]"
            SupportAdapter: 'vm.[4].vif.[1]'
            connectivitytest: "0"
            DestinationMac: *BROADCAST_MAC_ADDRESS
            Protocol: 'icmp'
            interval: *SCAPY_INTERVAL
            pktcount: 5
            verification  : 'VerificationOnHostsLS2'

        VerifyLSReplicationModeOnHosts:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyMacTableLS2OnHost2:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: 'cli'
            endpoints: 'kvm.[2]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_mac_table[?]contain_once':
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"

        VerifyLS1ConnTableOnController:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[2]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"
                - adapter_ip: "kvm.[4]->mgmt_ip"

        VerifyLS2ConnTableOnController:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[2]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"
                - adapter_ip: "kvm.[4]->mgmt_ip"

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

UnknownUnicastHandling:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "UnknownUnicastHandling"
    Tags: *REPLICATION_TAG--KVM
    QCPath: *QCPATH--KVM
    Version: "2"
    Summary: "To verify that traffic to an IP unknown to controller is
              replicated to all the hosts in all the segments."
    ExpectedResult: 'PASS'
    Status: 'Execution Ready'
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "salmanm"
    Partnerfacing: 'N'
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureLS1VM1StaticIP', 'ConfigureLS2VM2StaticIP']
            - ['VerifyLSReplicationModeOnHosts']
            - ['VerifyLS1ConnTableOnController',
               'VerifyLS2ConnTableOnController']
            - ['VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1',
               'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3',
               'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1',
               'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3',
               'VerifyLS2VtepEntryOnHost4']
            - ['VM1PingUnknownIPVerifyOnHosts234']
            # TODO(salmanm): Add support for verifying packet's source MAC/IP
            # and destination MAC/IP so that these verifciations can be run in
            # parallel. BZ #1365346
            - ['VM2PingUnknownIPVerifyOnHost234']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1',
               'DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        DeleteVM1Vnic1FromLSwitch1: *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2: *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1: *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2: *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1: *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2: *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1: *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2: *DELETE_VM8_VNIC1_LSWITCH2--KVM

        ConfigureLS1VM1StaticIP:
            Type: NetAdapter
            TestAdapter: 'vm.[1].vif.[1]'
            IPv4: *LS1_VM1_STATIC_IP
            netmask: *24_BIT_NETMASK

        ConfigureLS2VM2StaticIP:
            Type: NetAdapter
            TestAdapter: 'vm.[2].vif.[1]'
            IPv4: *LS2_VM2_STATIC_IP
            netmask: *24_BIT_NETMASK

        VM1PingUnknownIPVerifyOnHosts234:
            Type: 'Traffic'
            toolname: 'scapy'
            protocol: 'icmp'
            TestAdapter: "vm.[1].vif.[1]"
            SupportAdapter: 'vm.[2].vif.[1]'
            connectivitytest: "0"
            DestinationAddress: *LS1_UNASSIGNED_IP
            DestinationMAC: *RANDOM_MAC_ADDRESS
            interval: *SCAPY_INTERVAL
            pktcount: *UNKNOWN_PING_COUNT
            verification: 'VerificationOnHostsLS1'

        VerificationOnHostsLS1:
            PktCapVerification:
                target: *PIF1_OF_HOST_2_3_4--KVM
                # TODO(salmanm/mqing): Why filtering based on logical switch
                # vxlan does not capture the ping packets.
                pktcapfilter: *PKTCAP_RX_FILTER--KVM
                verificationtype: *PKT_VERIFICATION_TYPE--KVM
                pktcount: *UNKNOWN_PING_COUNT
                vni: 'nsxmanager.[1].logicalswitch.[1]'
                pkttype: 'unicast'
                innerpkttype: 'unicast'
                innerl4protocol: 'icmp'

        VerificationOnHostsLS2:
            PktCapVerification:
                target: *PIF1_OF_HOST_2_3_4--KVM
                # TODO(salmanm/mqing): Why filtering based on logical switch
                # vxlan does not capture the ping packets.
                pktcapfilter: *PKTCAP_RX_FILTER--KVM
                verificationtype: *PKT_VERIFICATION_TYPE--KVM
                pktcount: *UNKNOWN_PING_COUNT
                vni: 'nsxmanager.[1].logicalswitch.[2]'
                pkttype: 'unicast'
                innerpkttype: 'unicast'
                replicationbit: '0x0'
                innerl4protocol: 'icmp'

        VM2PingUnknownIPVerifyOnHost234:
            Type: 'Traffic'
            toolname: 'scapy'
            protocol: 'icmp'
            TestAdapter: "vm.[2].vif.[1]"
            SupportAdapter: 'vm.[4].vif.[1]'
            connectivitytest: "0"
            DestinationAddress: *LS2_UNASSIGNED_IP
            DestinationMAC: *RANDOM_MAC_ADDRESS
            interval: *SCAPY_INTERVAL
            pktcount: *UNKNOWN_PING_COUNT
            verification  : 'VerificationOnHostsLS2'

        VerifyLSReplicationModeOnHosts:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyMacTableLS2OnHost2:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: 'cli'
            endpoints: 'kvm.[2]'
            noofretries: "3"
            sleepbetweenworkloads:  "30"
            'get_mac_table[?]contain_once':
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"

        VerifyLS1ConnTableOnController:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[2]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"
                - adapter_ip: "kvm.[4]->mgmt_ip"

        VerifyLS2ConnTableOnController:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[2]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"
                - adapter_ip: "kvm.[4]->mgmt_ip"

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

VTEPARPFlushing:
    Product: "NSXTransformers"
    Component: "ARP proxy"
    Category: "L2"
    TestName: "VTEPARPFlushing"
    Version: "2"
    Tags: "nsxmanager"
    QCPath: *QCPATH--KVM
    Summary: 'To verify that {VM-IP, VM-MAC} table in VTEP
              will flush out if there is no traffic for 3 minutes'
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "jialiangl"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost',
               'VerifyLS1ConnTableOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS1VtepEntryOnHost1',
               'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3',
               'VerifyLS1VtepEntryOnHost4',
               'VerifyLS2ConnTableOnControllers',
               'VerifyLS2MacEntryOnControllers',
               'VerifyLS2VtepEntryOnHost1',
               'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3',
               'VerifyLS2VtepEntryOnHost4']
            - ['ARPPING_LS1_VM157_Host2_Verification']
            - ['ARPPING_LS2_VM246_Host4_Verification']
            - ['VerifyLS1NoArpEntryOnHost2', 'VerifyLS2NoArpEntryOnHost4']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1',  'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1',  'DeleteVM7Vnic1FromLSwitch1',
               'DeleteVM2Vnic1FromLSwitch2',  'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2',  'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        ARPPING_LS1_VM157_Host2_Verification: *ARPPING_LS1_VM157_HOST2_VERIFICATION--KVM
        ARPPING_LS2_VM246_Host4_Verification: *ARPPING_LS2_VM246_HOST4_VERIFICATION--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1ConnTableOnControllers:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[2]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"
                - adapter_ip: "kvm.[4]->mgmt_ip"

        VerifyLS2ConnTableOnControllers:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[2]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"
                - adapter_ip: "kvm.[4]->mgmt_ip"

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS1NoArpEntryOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_ARP_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *ARP_ENTRY_EXPIRATION
            'get_arp_table[?]not_contains':
                table:
                    - adapter_ip: "vm.[1].vif.[1]"
                      adapter_mac: "vm.[1].vif.[1]"

        VerifyLS2NoArpEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_ARP_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *ARP_ENTRY_EXPIRATION
            'get_arp_table[?]not_contains':
                table:
                    - adapter_ip: "vm.[6].vif.[1]"
                      adapter_mac: "vm.[6].vif.[1]"

NodeLocalIPv6Multicast:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "NodeLocalIPv6Multicast"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify that all other uplink ports receive multicast traffic
              sent to a Node Local scoped IPv6 multicast IP"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "gangarm"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1', 'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3', 'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1', 'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3', 'VerifyLS2VtepEntryOnHost4']
            - ['NodeLocalAllNodesMulticastTraffic_LS1_VM1_To_3']
            - ['NodeLocalAllNodesMulticastTraffic_LS2_VM2_To_4']
            - ['NodeLocalAllRoutersMulticastTraffic_LS1_VM1_To_3']
            - ['NodeLocalAllRoutersMulticastTraffic_LS2_VM2_To_4']
            - ['NodeLocalmDNSv6MulticastTraffic_LS1_VM1_To_3']
            - ['NodeLocalmDNSv6MulticastTraffic_LS2_VM2_To_4']
            - ['NodeLocalVariableScopeAllocationMulticastTraffic_LS1_VM1_To_3']
            - ['NodeLocalVariableScopeAllocationMulticastTraffic_LS2_VM2_To_4']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost1: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS1VtepEntryOnHost2: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS1VtepEntryOnHost3: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS1VtepEntryOnHost4: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--KVM
        VerifyLS2VtepEntryOnHost1: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS2VtepEntryOnHost2: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS2VtepEntryOnHost3: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS2VtepEntryOnHost4: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_4--KVM

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        # Node-Local All-Nodes group multicast traffic/verification.

        NodeLocalAllNodesMulticastTraffic_LS1_VM1_To_3: &NODE_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            Type          : 'Traffic'
            ToolName      : "scapy"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: 'vm.[3].vif.[1]'
            TestDuration  : "10"
            connectivitytest: "0"
            verification  : 'VerificationNodeLocalAllNodes_LS1'
            DestinationAddress: 'FF01:0:0:0:0:0:0:1'
            DestinationMac: '33:33:00:00:00:01'
            Protocol      : "icmp"
            L3Protocol    : "ipv6"
            interval: *SCAPY_INTERVAL

        VerificationNodeLocalAllNodes_LS1: *VERIFICATION_NODE_LOCAL_ALL_NODES_LS1--KVM

        NodeLocalAllNodesMulticastTraffic_LS2_VM2_To_4: &NODE_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            <<: *NODE_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            TestAdapter   : "vm.[2].vif.[1]"
            verification  : 'VerificationNodeLocalAllNodes_LS2'

        VerificationNodeLocalAllNodes_LS2: *VERIFICATION_NODE_LOCAL_ALL_NODES_LS2--KVM

        # Node-Local All-Routers group multicast traffic/verification.

        NodeLocalAllRoutersMulticastTraffic_LS1_VM1_To_3:
            <<: *NODE_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            verification : 'VerificationNodeLocalAllRoutersIPv6_LS1'
            DestinationAddress: 'FF01:0:0:0:0:0:0:2'
            DestinationMac: '33:33:00:00:00:02'

        VerificationNodeLocalAllRoutersIPv6_LS1: *VERIFICATION_NODE_LOCAL_ALL_ROUTERS_IPV6_LS1--KVM

        NodeLocalAllRoutersMulticastTraffic_LS2_VM2_To_4:
            <<: *NODE_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            verification : 'VerificationNodeLocalAllRoutersIPv6_LS2'
            DestinationAddress: 'FF01:0:0:0:0:0:0:2'
            DestinationMac: '33:33:00:00:00:02'

        VerificationNodeLocalAllRoutersIPv6_LS2: *VERIFICATION_NODE_LOCAL_ALL_ROUTERS_IPV6_LS2--KVM

        # Node-Local mDNSv6 group multicast traffic/verification.

        NodeLocalmDNSv6MulticastTraffic_LS1_VM1_To_3:
            <<: *NODE_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            verification : 'VerificationNodeLocalmDNSv6_LS1'
            DestinationAddress: 'FF01:0:0:0:0:0:0:FB'
            DestinationMac: '33:33:00:00:00:FB'

        VerificationNodeLocalmDNSv6_LS1: *VERIFICATION_NODE_LOCAL_DNSv6_LS1--KVM

        NodeLocalmDNSv6MulticastTraffic_LS2_VM2_To_4:
            <<: *NODE_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            verification : 'VerificationNodeLocalmDNSv6_LS2'
            DestinationAddress: 'FF01:0:0:0:0:0:0:FB'
            DestinationMac: '33:33:00:00:00:FB'

        VerificationNodeLocalmDNSv6_LS2: *VERIFICATION_NODE_LOCAL_DNSv6_LS2--KVM

        # Node-Local Variable scope allocation group multicast traffic/verification.

        NodeLocalVariableScopeAllocationMulticastTraffic_LS1_VM1_To_3:
            <<: *NODE_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            verification : 'VerificationNodeLocalVariableScopeAllocation_LS1'
            DestinationAddress: 'FF01:0:0:0:0:0:0:C'
            DestinationMac: '33:33:00:00:00:0C'

        VerificationNodeLocalVariableScopeAllocation_LS1: *VERIFICATION_NODE_LOCAL_VARIABLE_SCOPE_LS1--KVM

        NodeLocalVariableScopeAllocationMulticastTraffic_LS2_VM2_To_4:
            <<: *NODE_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            verification : 'VerificationNodeLocalVariableScopeAllocation_LS2'
            DestinationAddress: 'FF01:0:0:0:0:0:0:C'
            DestinationMac: '33:33:00:00:00:0C'

        VerificationNodeLocalVariableScopeAllocation_LS2: *VERIFICATION_NODE_LOCAL_VARIABLE_SCOPE_LS2--KVM


LinkLocalIPv6Multicast:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "LinkLocalIPv6Multicast"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify that all other uplink ports receive multicast traffic
              sent to a Link Local scoped IPv6 multicast IP."
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "gangarm"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1', 'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3', 'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1', 'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3', 'VerifyLS2VtepEntryOnHost4']
            - ['LinkLocalAllNodesMulticastTraffic_LS1_VM1_To_3']
            - ['LinkLocalAllNodesMulticastTraffic_LS2_VM2_To_4']
            - ['LinkLocalAllRoutersMulticastTraffic_LS1_VM1_To_3']
            - ['LinkLocalAllRoutersMulticastTraffic_LS2_VM2_To_4']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost1: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS1VtepEntryOnHost2: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS1VtepEntryOnHost3: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS1VtepEntryOnHost4: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--KVM
        VerifyLS2VtepEntryOnHost1: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS2VtepEntryOnHost2: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS2VtepEntryOnHost3: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS2VtepEntryOnHost4: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_4--KVM

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        # Link-Local All-Nodes group multicast traffic/verification.

        LinkLocalAllNodesMulticastTraffic_LS1_VM1_To_3: &LINK_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            Type          : 'Traffic'
            ToolName      : "scapy"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: 'vm.[3].vif.[1]'
            TestDuration  : "10"
            connectivitytest: "0"
            Protocol      : "icmp"
            L3Protocol    : "ipv6"
            verification : 'VerificationLinkLocalAllNodesIPv6_LS1'
            DestinationAddress: 'FF02:0:0:0:0:0:0:1'
            DestinationMac: '33:33:00:00:00:01'
            interval: *SCAPY_INTERVAL

        VerificationLinkLocalAllNodesIPv6_LS1: *VERIFICATION_NODE_LOCAL_ALL_NODES_LS1--KVM

        LinkLocalAllNodesMulticastTraffic_LS2_VM2_To_4: &LINK_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            <<: *LINK_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            TestAdapter   : "vm.[2].vif.[1]"
            verification : 'VerificationLinkLocalAllNodesIPv6_LS2'

        VerificationLinkLocalAllNodesIPv6_LS2: *VERIFICATION_NODE_LOCAL_ALL_NODES_LS2--KVM

        # Link-Local All-Routers group multicast traffic/verification.

        LinkLocalAllRoutersMulticastTraffic_LS1_VM1_To_3:
            <<: *LINK_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            verification : 'VerificationLinkLocalAllRoutersIPv6_LS1'
            DestinationAddress: 'FF02:0:0:0:0:0:0:2'
            DestinationMac: '33:33:00:00:00:02'

        VerificationLinkLocalAllRoutersIPv6_LS1: *VERIFICATION_NODE_LOCAL_ALL_ROUTERS_IPV6_LS1--KVM

        LinkLocalAllRoutersMulticastTraffic_LS2_VM2_To_4:
            <<: *LINK_LOCAL_ALL_NODES_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            verification : 'VerificationLinkLocalAllRoutersIPv6_LS2'
            DestinationAddress: 'FF02:0:0:0:0:0:0:2'
            DestinationMac: '33:33:00:00:00:02'

        VerificationLinkLocalAllRoutersIPv6_LS2: *VERIFICATION_NODE_LOCAL_ALL_ROUTERS_IPV6_LS2--KVM


SiteLocalIPv6Multicast:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "SiteLocalIPv6Multicast"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify that all other uplink ports receive multicast traffic
              sent to a Site Local scoped IPv6 multicast IP"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "gangarm"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1', 'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3', 'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1', 'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3', 'VerifyLS2VtepEntryOnHost4']
            - ['SiteLocalAllDHCPServersMulticastTraffic_LS1_VM1_To_3']
            - ['SiteLocalAllDHCPServersMulticastTraffic_LS2_VM2_To_4']
            - ['SiteLocalSL_MANET_RoutersMulticastTraffic_LS1_VM1_To_3']
            - ['SiteLocalSL_MANET_RoutersMulticastTraffic_LS2_VM2_To_4']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost1: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS1VtepEntryOnHost2: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS1VtepEntryOnHost3: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS1VtepEntryOnHost4: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--KVM
        VerifyLS2VtepEntryOnHost1: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS2VtepEntryOnHost2: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS2VtepEntryOnHost3: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS2VtepEntryOnHost4: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_4--KVM

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        # Site-Local All-DHCP servers group multicast traffic/verification.

        SiteLocalAllDHCPServersMulticastTraffic_LS1_VM1_To_3: &SITE_LOCAL_ALL_DHCP_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            Type          : 'Traffic'
            ToolName      : "scapy"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: 'vm.[3].vif.[1]'
            TestDuration  : "10"
            connectivitytest: "0"
            Protocol      :   "icmp"
            L3Protocol    : "ipv6"
            verification : 'VerificationSiteLocalAllDHCPServersIPv6_LS1'
            DestinationAddress: 'FF05:0:0:0:0:0:1:3'
            DestinationMac: '33:33:00:01:00:03'
            interval: *SCAPY_INTERVAL

        VerificationSiteLocalAllDHCPServersIPv6_LS1: *VERIFICATION_SITE_LOCAL_ALL_DHCP_LS1--KVM

        SiteLocalAllDHCPServersMulticastTraffic_LS2_VM2_To_4: &SITE_LOCAL_ALL_DHCP_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            <<: *SITE_LOCAL_ALL_DHCP_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            TestAdapter   : "vm.[2].vif.[1]"
            verification : 'VerificationSiteLocalAllDHCPServersIPv6_LS2'

        VerificationSiteLocalAllDHCPServersIPv6_LS2: *VERIFICATION_SITE_LOCAL_ALL_DHCP_LS2--KVM

        # Site-Local SL-MANET-Routers group multicast traffic/verification.

        SiteLocalSL_MANET_RoutersMulticastTraffic_LS1_VM1_To_3:
            <<: *SITE_LOCAL_ALL_DHCP_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            verification : 'VerificationSiteLocalSL_MANET_RoutersIPv6_LS1'
            DestinationAddress: 'FF05:0:0:0:0:0:1:5'
            DestinationMac: '33:33:00:01:00:05'

        VerificationSiteLocalSL_MANET_RoutersIPv6_LS1: *VERIFICATION_SITE_MANET_ROUTERS_IPV6_LS1--KVM

        SiteLocalSL_MANET_RoutersMulticastTraffic_LS2_VM2_To_4:
            <<: *SITE_LOCAL_ALL_DHCP_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            verification : 'VerificationSiteLocalSL_MANET_RoutersIPv6_LS2'
            DestinationAddress: 'FF05:0:0:0:0:0:1:5'
            DestinationMac: '33:33:00:01:00:05'

        VerificationSiteLocalSL_MANET_RoutersIPv6_LS2: *VERIFICATION_SITE_MANET_ROUTERS_IPV6_LS2--KVM

VariableScopeIPv6Multicast:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "VariableScopeIPv6Multicast"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify that all other uplink ports receive multicast traffic
              sent to a Variable Scoped IPv6 multicast IP"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "gangarm"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1', 'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3', 'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1', 'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3', 'VerifyLS2VtepEntryOnHost4']
            - ['VariableScopeSSDPMulticastTraffic_LS1_VM1_To_3']
            - ['VariableScopeSSDPMulticastTraffic_LS2_VM2_To_4']
            - ['VariableScopeNTPMulticastTraffic_LS1_VM1_To_3']
            - ['VariableScopeNTPMulticastTraffic_LS2_VM2_To_4']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost1: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS1VtepEntryOnHost2: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS1VtepEntryOnHost3: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS1VtepEntryOnHost4: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--KVM
        VerifyLS2VtepEntryOnHost1: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS2VtepEntryOnHost2: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS2VtepEntryOnHost3: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS2VtepEntryOnHost4: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_4--KVM

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        # Variable Scope SSDP group multicast traffic/verification.

        VariableScopeSSDPMulticastTraffic_LS1_VM1_To_3: &VARIABLE_SCOPE_SSDP_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            Type          : 'Traffic'
            ToolName      : "scapy"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: 'vm.[3].vif.[1]'
            TestDuration  : "10"
            connectivitytest: "0"
            Protocol      : "icmp"
            L3Protocol    : "ipv6"
            verification : 'VerificationVariableScopeSSDPIPv6_LS1'
            DestinationAddress: 'FF05:0:0:0:0:0:0:C'
            DestinationMac: "33:33:00:00:00:0C"
            interval: *SCAPY_INTERVAL

        VerificationVariableScopeSSDPIPv6_LS1: *VERIFICATION_NODE_LOCAL_VARIABLE_SCOPE_LS1--KVM

        VariableScopeSSDPMulticastTraffic_LS2_VM2_To_4: &VARIABLE_SCOPE_SSDP_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            <<: *VARIABLE_SCOPE_SSDP_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            TestAdapter   : "vm.[2].vif.[1]"
            verification : 'VerificationVariableScopeSSDPIPv6_LS2'

        VerificationVariableScopeSSDPIPv6_LS2: *VERIFICATION_NODE_LOCAL_VARIABLE_SCOPE_LS2--KVM

        # Variable Scope NTP group multicast traffic/verification.

        VariableScopeNTPMulticastTraffic_LS1_VM1_To_3:
            <<: *VARIABLE_SCOPE_SSDP_MULTICAST_TRAFFIC_LS1_VM1_TO_3
            verification : 'VerificationVariableScopeNTPIPv6_LS1'
            DestinationAddress: 'FF05:0:0:0:0:0:0:101'
            DestinationMac: '33:33:00:00:01:01'

        VerificationVariableScopeNTPIPv6_LS1: *VERIFICATION_VARIABLE_SCOPE_NTP_IPV6_LS1--KVM

        VariableScopeNTPMulticastTraffic_LS2_VM2_To_4:
            <<: *VARIABLE_SCOPE_SSDP_MULTICAST_TRAFFIC_LS2_VM2_TO_4
            verification : 'VerificationVariableScopeNTPIPv6_LS2'
            DestinationAddress: 'FF05:0:0:0:0:0:0:101'
            DestinationMac: '33:33:00:00:01:01'

        VerificationVariableScopeNTPIPv6_LS2: *VERIFICATION_VARIABLE_SCOPE_NTP_IPV6_LS2--KVM

IPv6Unicast:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "IPv6Unicast"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To verify VM-VM IPv6 unicast traffic."
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "gangarm"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1', 'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3', 'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1', 'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3', 'VerifyLS2VtepEntryOnHost4']
            - ['IPv6UnicastTrafficLS1', 'IPv6UnicastTrafficLS2']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        VerifyLS1VtepEntryOnHost1: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS1VtepEntryOnHost2: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS1VtepEntryOnHost3: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS1VtepEntryOnHost4: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--KVM
        VerifyLS2VtepEntryOnHost1: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS2VtepEntryOnHost2: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS2VtepEntryOnHost3: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS2VtepEntryOnHost4: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_4--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        IPv6UnicastTrafficLS1:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv6"
            L4Protocol    : "tcp, udp"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: "vm.[3].vif.[1]"
            NoofOutbound  : "1"
            NoofInbound   : "1"
            TestDuration  : "10"
            MinExpResult  : "1"

        IPv6UnicastTrafficLS2:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv6"
            L4Protocol    : "tcp, udp"
            TestAdapter   : "vm.[2].vif.[1]"
            SupportAdapter: "vm.[4].vif.[1]"
            NoofOutbound  : "1"
            NoofInbound   : "1"
            TestDuration  : "10"
            MinExpResult  : "1"

ARPFloodWithCCPDown:
    Product: "NSXTransformers"
    Component: "ARP proxy"
    Category: "L2"
    TestName: "ARPFloodWithCCPDown"
    Version: "2"
    Tags: "ARP, CCP"
    QCPath: *QCPATH--KVM
    Summary: 'To verify that dataplane continues to work in face of large
              ARP traffic in CCP headless mode. (both replication modes)'
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "jialiangl"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost',
               'VerifyLS1ConnTableOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS1VtepEntryOnHost1',
               'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3',
               'VerifyLS1VtepEntryOnHost4',
               'VerifyLS2ConnTableOnControllers',
               'VerifyLS2MacEntryOnControllers',
               'VerifyLS2VtepEntryOnHost1',
               'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3',
               'VerifyLS2VtepEntryOnHost4']
            - ['NetperfTrafficLS1', 'NetperfTrafficLS2']
            - ['EnableFirewallOnHosts']
            - ['BlockConnectionBetweenTNandCCP']
            - ['PingTrafficLS1_1_to_5',
               'ArpFloodLS1_VM3', 'ArpFloodLS1_VM7']
            - ['PingTrafficLS2_2_to_6',
               'ArpFloodLS2_VM4', 'ArpFloodLS2_VM8']
            - ['RestoreConnectionBetweenTNandCCP']
            - ['DisableFirewallOnHosts']
        ExitSequence:
            - ['RestoreConnectionBetweenTNandCCP']
            - ['DisableFirewallOnHosts']
            - ['DeleteVM1Vnic1FromLSwitch1',  'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1',  'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2',  'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2',  'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1ConnTableOnControllers:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[2]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"
                - adapter_ip: "kvm.[4]->mgmt_ip"

        VerifyLS2ConnTableOnControllers:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[2]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"
                - adapter_ip: "kvm.[4]->mgmt_ip"

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        NetperfTrafficLS1:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "udp"
            sendmessagesize : "1000"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: "vm.[7].vif.[1]"
            NoofOutbound  : "1"
            NoofInbound   : "1"
            TestDuration  : "5"

        NetperfTrafficLS2:
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "udp"
            sendmessagesize : "1000"
            TestAdapter   : "vm.[2].vif.[1]"
            SupportAdapter: "vm.[8].vif.[1]"
            NoofOutbound  : "1"
            NoofInbound   : "1"
            TestDuration  : "5"

        EnableFirewallOnHosts:
            Type: Host
            TestHost: kvm.[1-4]
            execution_type: *FIREWALL_EXECUTION_TYPE--KVM
            firewall_status: enable

        BlockConnectionBetweenTNandCCP: *DISABLE_NETCP_ON_HOST1_TO_4--KVM
        RestoreConnectionBetweenTNandCCP: *ENABLE_NETCP_ON_HOST1_TO_4--KVM

        PingTrafficLS1_1_to_5:
            Type: 'Traffic'
            toolName: 'Ping'
            TestAdapter:    'vm.[1].vif.[1]'
            SupportAdapter: 'vm.[5].vif.[1]'
            TestDuration: '60'
            connectivitytest: '0'

        ArpFloodLS1_VM3:
            Type: 'Traffic'
            toolName: 'scapy'
            protocol: 'arp'
            TestAdapter: "vm.[3].vif.[1]"
            SupportAdapter: 'vm.[1].vif.[1]'
            connectivitytest: "0"
            DestinationAddress: "8.8.8.8-8.9.8.8"
            pktcount: 1
            interval: 0
            ExpectedResult: 'Ignore'

        ArpFloodLS1_VM7:
            Type: 'Traffic'
            toolName: 'scapy'
            protocol: 'arp'
            TestAdapter: "vm.[7].vif.[1]"
            SupportAdapter: 'vm.[1].vif.[1]'
            connectivitytest: "0"
            DestinationAddress: "9.9.9.9-9.10.9.9"
            pktcount: 1
            interval: 0
            ExpectedResult: 'Ignore'

        PingTrafficLS2_2_to_6:
            Type: 'Traffic'
            toolName: 'Ping'
            TestAdapter:    'vm.[2].vif.[1]'
            SupportAdapter: 'vm.[6].vif.[1]'
            TestDuration: '60'
            connectivitytest: '0'

        ArpFloodLS2_VM4:
            Type: 'Traffic'
            toolName: 'scapy'
            protocol: 'arp'
            TestAdapter: "vm.[4].vif.[1]"
            SupportAdapter: 'vm.[2].vif.[1]'
            connectivitytest: "0"
            DestinationAddress: "8.8.8.8-8.9.8.8"
            pktcount: 1
            interval: 0
            ExpectedResult: 'Ignore'

        ArpFloodLS2_VM8:
            Type: 'Traffic'
            toolName: 'scapy'
            protocol: 'arp'
            TestAdapter: "vm.[8].vif.[1]"
            SupportAdapter: 'vm.[2].vif.[1]'
            connectivitytest: "0"
            DestinationAddress: "8.8.8.8-8.9.8.8"
            pktcount: 1
            interval: 0
            ExpectedResult: 'Ignore'

        DisableFirewallOnHosts:
            <<: *DISABLE_FIREWALL_ON_HOST
            TestHost: kvm.[1-4]
            execution_type: *FIREWALL_EXECUTION_TYPE--KVM

SameVMMACDifferentLS:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "SameVMMACDifferentLS"
    Version: "2"
    Tags: "Avalanche"
    QCPath: *QCPATH--KVM
    Summary: "To test scenario where VMs in different LS have same MAC addresses."
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    Developer: "gangarm"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1', 'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3', 'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1', 'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3', 'VerifyLS2VtepEntryOnHost4']
            - ['ReadVM1Vnic1MacAddress']
            - ['ReadVM2Vnic1MacAddress']
            - ['ReadVM3Vnic1MacAddress']
            - ['ReadVM4Vnic1MacAddress']
            - ['ChangeVM1Vnic1MacToDuplicateMac1',
               'ChangeVM2Vnic1MacToDuplicateMac1']
            - ['ChangeVM3Vnic1MacToDuplicateMac2',
               'ChangeVM4Vnic1MacToDuplicateMac2']
            - ['ConfigureVnicIP']
            - ['PingVM1toVM3AfterMacChange',
               'PingVM3toVM1AfterMacChange',
               # Comment out arp verification workload until KVM is ready
               # 'VerifyLS1ArpEntryOnControllersAfterMacChange',
               'VerifyLS1MacEntryOnControllersAfterMacChange']
            - ['PingVM2toVM4AfterMacChange',
               'PingVM4toVM2AfterMacChange',
               # Comment out arp verification workload until KVM is ready
               # 'VerifyLS2ArpEntryOnControllersAfterMacChange',
               'VerifyLS2MacEntryOnControllersAfterMacChange']
            - ['RestoreVM1Vnic1MacAddress', 'RestoreVM2Vnic1MacAddress',
               'RestoreVM3Vnic1MacAddress', 'RestoreVM4Vnic1MacAddress']
        ExitSequence:
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']


        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        VerifyLS1VtepEntryOnHost1: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS1VtepEntryOnHost2: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS1VtepEntryOnHost3: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS1VtepEntryOnHost4: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--KVM
        VerifyLS2VtepEntryOnHost1: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS2VtepEntryOnHost2: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS2VtepEntryOnHost3: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS2VtepEntryOnHost4: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_4--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                      controller_status: 'up'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
                      controller_status: 'up'

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        ReadVM1Vnic1MacAddress:
            Type: 'NetAdapter'
            TestAdapter: 'vm.[1].vif.[1]'
            PersistData: "Yes"
            read_adapter_info:
               'macaddress[?]defined': ''

        ReadVM2Vnic1MacAddress:
            Type: 'NetAdapter'
            TestAdapter: 'vm.[2].vif.[1]'
            PersistData: "Yes"
            read_adapter_info:
               'macaddress[?]defined': ''

        ReadVM3Vnic1MacAddress:
            Type: 'NetAdapter'
            TestAdapter: 'vm.[3].vif.[1]'
            PersistData: "Yes"
            read_adapter_info:
               'macaddress[?]defined': ''

        ReadVM4Vnic1MacAddress:
            Type: 'NetAdapter'
            TestAdapter: 'vm.[4].vif.[1]'
            PersistData: "Yes"
            read_adapter_info:
               'macaddress[?]defined': ''

        ChangeVM1Vnic1MacToDuplicateMac1: *CHANGE_VM1_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC1--KVM
        ChangeVM2Vnic1MacToDuplicateMac1: *CHANGE_VM2_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC1--KVM
        ChangeVM3Vnic1MacToDuplicateMac2: *CHANGE_VM3_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC2--KVM
        ChangeVM4Vnic1MacToDuplicateMac2: *CHANGE_VM4_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC2--KVM

        RestoreVM1Vnic1MacAddress: *RESTORE_VM1_VNIC1_MAC_ADDRESS--KVM
        RestoreVM2Vnic1MacAddress: *RESTORE_VM2_VNIC1_MAC_ADDRESS--KVM
        RestoreVM3Vnic1MacAddress: *RESTORE_VM3_VNIC1_MAC_ADDRESS--KVM
        RestoreVM4Vnic1MacAddress: *RESTORE_VM4_VNIC1_MAC_ADDRESS--KVM

        # (XXX) Combine VM1-VM3 traffic workloads into one after Bug 1370845 is
        # resolved. Add (NoofOutbound: 1, NoofInbound: 1) for 2 way traffic.
        # Change pktcap filter to capture from either VM1 OR VM3 at same time.
        # pktcapfilter: 'src host vm.[1].vif.[1] or src host vm.[3].vif.[1]'
        # Same follows for VM2-VM4 trafic workload.
        PingVM1toVM3AfterMacChange:
            Type: 'Traffic'
            toolName: 'ping'
            TestAdapter:    'vm.[1].vif.[1]'
            SupportAdapter: 'vm.[3].vif.[1]'
            TestDuration: '60'
            connectivitytest: '0'
            verification  : 'Verification_0'
            sleepbetweenworkloads: *SLEEP_FIRST_VM_ARP--KVM

        Verification_0:
          PktCapVerification:
            target:       'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1],vm.[8].vif.[1]'
            pktcapfilter: 'count 100,src host vm.[1].vif.[1]'
            verificationtype: 'pktcap'
            pktcount: '0'

        PingVM3toVM1AfterMacChange:
            Type: 'Traffic'
            toolName: 'ping'
            TestAdapter:    'vm.[3].vif.[1]'
            SupportAdapter: 'vm.[1].vif.[1]'
            TestDuration: '60'
            connectivitytest: '0'
            verification  : 'Verification_1'
            sleepbetweenworkloads: *SLEEP_FIRST_VM_ARP--KVM

        Verification_1:
          PktCapVerification:
            target:       'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1],vm.[8].vif.[1]'
            pktcapfilter: 'count 100,src host vm.[3].vif.[1]'
            verificationtype: 'pktcap'
            pktcount: '0'

        PingVM2toVM4AfterMacChange:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[2].vif.[1]'
            SupportAdapter: 'vm.[4].vif.[1]'
            TestDuration: '60'
            connectivitytest: '0'
            verification  : 'Verification_2'
            sleepbetweenworkloads: *SLEEP_FIRST_VM_ARP--KVM

        Verification_2:
          PktCapVerification:
            target:       'vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1],vm.[7].vif.[1]'
            pktcapfilter: 'count 100,src host vm.[2].vif.[1]'
            verificationtype: 'pktcap'
            pktcount: '0'

        PingVM4toVM2AfterMacChange:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter:    'vm.[4].vif.[1]'
            SupportAdapter: 'vm.[2].vif.[1]'
            TestDuration: '60'
            connectivitytest: '0'
            verification  : 'Verification_3'
            sleepbetweenworkloads: *SLEEP_FIRST_VM_ARP--KVM

        Verification_3:
          PktCapVerification:
            target:       'vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1],vm.[7].vif.[1]'
            pktcapfilter: 'count 100,src host vm.[4].vif.[1]'
            verificationtype: 'pktcap'
            pktcount: '0'

        VerifyLS1ArpEntryOnControllersAfterMacChange:
            Type: 'Switch'
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_ARP_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
            'get_arp_table[?]contain_once':
                table:
                    - adapter_ip:  "vm.[1].vif.[1]"
                      adapter_mac: *DUPLICATE_MAC_1
                    - adapter_ip:  "vm.[3].vif.[1]"
                      adapter_mac: *DUPLICATE_MAC_2

        VerifyLS1MacEntryOnControllersAfterMacChange:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: *DUPLICATE_MAC_1
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: *DUPLICATE_MAC_2
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2ArpEntryOnControllersAfterMacChange:
            Type: 'Switch'
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_ARP_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
            'get_arp_table[?]contain_once':
                table:
                    - adapter_ip:  "vm.[2].vif.[1]"
                      adapter_mac: *DUPLICATE_MAC_1
                    - adapter_ip:  "vm.[4].vif.[1]"
                      adapter_mac: *DUPLICATE_MAC_2

        VerifyLS2MacEntryOnControllersAfterMacChange:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: *DUPLICATE_MAC_1
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: *DUPLICATE_MAC_2
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

NewVTEPBringUpCCPDown:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "NewVTEPBringUpCCPDown"
    Version: "2"
    Tags: "Avalanche, CCP, VTEP"
    QCPath: *QCPATH--KVM
    Summary: "Verifies that when new logical ports are added when CCP is down,
              the connectivity between such logical ports/vifs does not work.
              Once the CCP is brought up, it verifies that the connectivity
              between newly added logical ports go through due to CCP/MP sync
              and CCP pushing down state to TNs."
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    Developer: "gangarm"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostNodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['BlockConnectionBetweenTNandCCP']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLS1ConnTableOnControllers']
            - ['VerifyLS2ConnTableOnControllers']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['PingLS1VM1toVM7WhenCCPDown']
            - ['PingLS1VM3toVM7WhenCCPDown']
            - ['PingLS1VM5toVM7WhenCCPDown']
            - ['PingLS2VM2toVM8WhenCCPDown']
            - ['PingLS2VM4toVM8WhenCCPDown']
            - ['PingLS2VM6toVM8WhenCCPDown']
            - ['RestoreConnectionBetweenTNandCCP']
            - ['PingLS1WhenCCPUp']
            - ['PingLS2WhenCCPUp']
        ExitSequence:
            - ['RestoreConnectionBetweenTNandCCP']
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']

        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        DiscoverHostNodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM
        BlockConnectionBetweenTNandCCP: *BLOCK_CONNECTION_TO_4_HOST_ON_CCP
        RestoreConnectionBetweenTNandCCP: *UNBLOCK_CONNECTION_TO_4_HOST_ON_CCP

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table: []

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table: []

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table: []

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table: []

        EnableFirewallOnHosts:
            Type: Host
            TestHost: kvm.[1-4]
            execution_type: *FIREWALL_EXECUTION_TYPE--KVM
            firewall_status: enable

        DisableFirewallOnHosts:
            <<: *DISABLE_FIREWALL_ON_HOST
            TestHost: kvm.[1-4]
            execution_type: *FIREWALL_EXECUTION_TYPE--KVM

        VerifyLS1ConnTableOnControllers:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: "nsxmanager.[1].logicalswitch.[1]"
            get_connection_table[?]contain_once:
              table: []

        VerifyLS2ConnTableOnControllers:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: "nsxmanager.[1].logicalswitch.[2]"
            get_connection_table[?]contain_once:
              table: []

        PingLS1VM1toVM7WhenCCPDown: &PING_LS1_VM1_TO_VM7_WHEN_CCP_DOWN
            Type: 'Traffic'
            toolName: 'ping'
            TestAdapter:    'vm.[1].vif.[1]'
            SupportAdapter: 'vm.[7].vif.[1]'
            TestDuration: '10'
            connectivitytest: '0'
            ExpectedResult: "Fail"
            verification  : 'Verification_0'

        PingLS1VM3toVM7WhenCCPDown:
            <<: *PING_LS1_VM1_TO_VM7_WHEN_CCP_DOWN
            TestAdapter:    'vm.[3].vif.[1]'

        PingLS1VM5toVM7WhenCCPDown:
            <<: *PING_LS1_VM1_TO_VM7_WHEN_CCP_DOWN
            TestAdapter:    'vm.[5].vif.[1]'

        PingLS2VM2toVM8WhenCCPDown: &PING_LS2_VM2_TO_VM8_WHEN_CCP_DOWN
            <<: *PING_LS1_VM1_TO_VM7_WHEN_CCP_DOWN
            TestAdapter:    'vm.[2].vif.[1]'
            SupportAdapter: 'vm.[8].vif.[1]'

        PingLS2VM4toVM8WhenCCPDown:
            <<: *PING_LS2_VM2_TO_VM8_WHEN_CCP_DOWN
            TestAdapter:    'vm.[4].vif.[1]'

        PingLS2VM6toVM8WhenCCPDown:
            <<: *PING_LS2_VM2_TO_VM8_WHEN_CCP_DOWN
            TestAdapter:    'vm.[6].vif.[1]'

        Verification_0:
          PktCapVerification: &VERIFICATION_0
            target: *PIF1_OF_HOST_1_2_3_4--KVM
            pktcapfilter: *PKTCAP_LS1_RX_FILTER--KVM
            verificationtype: *PKT_VERIFICATION_TYPE--KVM
            pktcount: '0'
            expectencapsulatedtraffic: "yes"

        PingLS1WhenCCPUp:
            <<: *PING_LS1_VM1_TO_VM7_WHEN_CCP_DOWN
            TestAdapter:    'vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]'
            verification  : 'Verification_1'
            ExpectedResult: "Pass"

        PingLS2WhenCCPUp:
            <<: *PING_LS2_VM2_TO_VM8_WHEN_CCP_DOWN
            TestAdapter:    'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]'
            verification  : 'Verification_1'
            ExpectedResult: "Pass"

        Verification_1:
            PktCapVerification:
                <<: *VERIFICATION_0
                pktcount: '5+'

NegativeModConfigAddDeleteController:
    Product: "NSXTransformers"
    Category: *LCP--KVM
    Component: "L2"
    TestName: 'NegativeModConfigAddDeleteController'
    Version: '2'
    Tags: 'L2, VTEP, CCP'
    QCPath: *QCPATH--KVM
    Summary: "Change host configuration after disconnect
              with CCP cluster and verify CCP should have
              updated host information after reconnect."
    ExpectedResult: 'PASS'
    Status: 'Execution Ready'
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "sshu"
    Partnerfacing: 'N'
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1ConnTableOnController',
               'VerifyLS2ConnTableOnController']
            - ['VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1',
               'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3',
               'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1',
               'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3',
               'VerifyLS2VtepEntryOnHost4']
            - ['ARPPING_LS1_CCP_Verification']
            - ['ARPPING_LS2_CCP_Verification']
            - ['BlockConnectionBetweenTNandCCP']
            - ['ConfigureHost1VtepIP', 'ConfigureHost2VtepIP']
            - ['DiscoverVteps']
            - ['AttachVM1Nic2toSwitch1']
            - ['AttachVM1Nic3toSwitch1']
            - ['ConfigureVnic2IP', 'ConfigureVnic3IP']
            - ['RestoreConnectionBetweenTNandCCP']
            - ['VerifyLS1ConnTableOnController',
               'VerifyLS2ConnTableOnController']
            - ['VerifyLS1MacEntryOnControllersAfterReconnect',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1',
               'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3',
               'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1',
               'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3',
               'VerifyLS2VtepEntryOnHost4']
            - ['ArpPingVM1And3', 'ArpPingVM2And4',
               'ArpPingVm12_To_3', 'ArpPingVm13_To_3']
               # Comment out ARP verification until KVM is ready
               # 'VerifyLS1AllArpEntryOnControllers',
               # 'VerifyLS2ArpEntryOnControllers']

        ExitSequence:
            - ['UnblockConnectionTo4HostOnCCPLenient']
            - ['ConfigureVtepIPAuto']
            - ['DeleteVM1Vnic2FromSwitch1']
            - ['DeleteVM1Vnic3FromSwitch1']
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']

        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        DiscoverHostnodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM1Nic2toSwitch1: *ATTACH_VM1_NIC2_TO_SWITCH_1--KVM
        AttachVM1Nic3toSwitch1: *ATTACH_VM1_NIC3_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        DeleteVM1Vnic1FromLSwitch1: *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM1Vnic2FromSwitch1: *DELETE_VM1_VNIC2_LSWITCH1--KVM
        DeleteVM1Vnic3FromSwitch1: *DELETE_VM1_VNIC3_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2: *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1: *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2: *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1: *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2: *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1: *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2: *DELETE_VM8_VNIC1_LSWITCH2--KVM
        ARPPING_LS1_CCP_Verification: *ARPPING_LS1_CCP_VERIFICATION--KVM
        ARPPING_LS2_CCP_Verification: *ARPPING_LS2_CCP_VERIFICATION--KVM

        ConfigureVnic2IP:
            Type: NetAdapter
            TestAdapter: vm.[1].vif.[2]
            IPv4: auto

        ConfigureVnic3IP:
            Type: NetAdapter
            TestAdapter: vm.[1].vif.[3]
            IPv4: auto

        LogicalSwitch1Traffic:
            Type          : "Traffic"
            toolName      : "Ping"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: "vm.[3].vif.[1],vm.[5].vif.[1],vm.[7].vif.[1]"
            TestDuration  : "10"
            connectivitytest: '0'

        LogicalSwitch2Traffic:
            Type          : "Traffic"
            toolName      : "Ping"
            TestAdapter   : "vm.[2].vif.[1]"
            SupportAdapter: "vm.[4].vif.[1],vm.[6].vif.[1],vm.[8].vif.[1]"
            TestDuration  : "10"
            connectivitytest: '0'

        BlockConnectionBetweenTNandCCP: *BLOCK_CONNECTION_TO_4_HOST_ON_CCP

        RestoreConnectionBetweenTNandCCP: *UNBLOCK_CONNECTION_TO_4_HOST_ON_CCP

        UnblockConnectionTo4HostOnCCPLenient: *UNBLOCK_CONNECTION_TO_4_HOST_ON_CCP_LENIENT

        ArpPingVM1And3:
            Type: "Traffic"
            toolName: "ArpPing"
            TestAdapter: "vm.[1].vif.[1]"
            SupportAdapter: "vm.[3].vif.[1]"
            TestDuration: *ARP_PING_DURATION
            NoofInbound     : "1"
            NoofOutbound    : "1"
            connectivitytest: "0"

        ArpPingVM2And4:
            Type: "Traffic"
            toolName: "ArpPing"
            TestAdapter: "vm.[2].vif.[1]"
            SupportAdapter: "vm.[4].vif.[1]"
            TestDuration: *ARP_PING_DURATION
            NoofInbound     : "1"
            NoofOutbound    : "1"
            connectivitytest: "0"

        ArpPingVm12_To_3:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter: 'vm.[1].vif.[2]'
            SupportAdapter: 'vm.[3].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            NoofInbound     : "1"
            NoofOutbound    : "1"
            connectivitytest: '0'

        ArpPingVm13_To_3:
            Type: 'Traffic'
            toolName: 'ArpPing'
            TestAdapter: 'vm.[1].vif.[3]'
            SupportAdapter: 'vm.[3].vif.[1]'
            TestDuration: *ARP_PING_DURATION
            NoofInbound     : "1"
            NoofOutbound    : "1"
            connectivitytest: '0'

        ConfigureHost1VtepIP:
            Type: NetAdapter
            TestAdapter: kvm.[1].vtep.[1]
            IPv4: *NETWORK1_VTEP_IP1--KVM

        ConfigureHost2VtepIP:
            Type: NetAdapter
            TestAdapter: kvm.[2].vtep.[1]
            IPv4: *NETWORK1_VTEP_IP2--KVM

        ConfigureVtepIPAuto:
            Type: NetAdapter
            TestAdapter: kvm.[1-2].vtep.[1]
            IPv4: auto

        VerifyLS1ArpEntryOnControllers:
            Type: 'Switch'
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_ARP_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
            'get_arp_table[?]contain_once':
                table:
                    - adapter_ip:  "vm.[1].vif.[1]"
                      adapter_mac: "vm.[1].vif.[1]"
                    - adapter_ip:  "vm.[3].vif.[1]"
                      adapter_mac: "vm.[3].vif.[1]"

        VerifyLS1AllArpEntryOnControllers:
            Type: 'Switch'
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
            noofretries: *NUM_ARP_ENTRY_CHECK_RETRIES
            'get_arp_table[?]contain_once':
                table:
                    - adapter_ip: "vm.[1].vif.[1]"
                      adapter_mac: "vm.[1].vif.[1]"
                    - adapter_ip: "vm.[1].vif.[2]"
                      adapter_mac: "vm.[1].vif.[2]"
                    - adapter_ip: "vm.[1].vif.[3]"
                      adapter_mac: "vm.[1].vif.[3]"
                    - adapter_ip:  "vm.[3].vif.[1]"
                      adapter_mac: "vm.[3].vif.[1]"

        VerifyLS2ArpEntryOnControllers:
            Type: 'Switch'
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_ARP_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
            'get_arp_table[?]contain_once':
                table:
                    - adapter_ip:  "vm.[2].vif.[1]"
                      adapter_mac: "vm.[2].vif.[1]"
                    - adapter_ip:  "vm.[4].vif.[1]"
                      adapter_mac: "vm.[4].vif.[1]"

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'

        VerifyLS1ConnTableOnController:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[2]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"
                - adapter_ip: "kvm.[4]->mgmt_ip"

        VerifyLS2ConnTableOnController:
            Type: Switch
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: *CONTROLLER_EXECUTION_TYPE
            get_connection_table[?]contain_once:
            table:
                - adapter_ip: "kvm.[1]->mgmt_ip"
                - adapter_ip: "kvm.[2]->mgmt_ip"
                - adapter_ip: "kvm.[3]->mgmt_ip"
                - adapter_ip: "kvm.[4]->mgmt_ip"

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1MacEntryOnControllersAfterReconnect:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[1].vif.[2]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[1].vif.[3]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS2VtepEntryOnHost1:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost2:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost3:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[3]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnHost4:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

        VerifyLS1MacEntryOnHost1:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once':
                table:
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"

        VerifyLS2MacEntryOnHost1:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once':
                table:
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"

        VerifyLS1MacEntryOnHost2:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once':
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"

        VerifyLS2MacEntryOnHost2:
            Type: "Switch"
            TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[2]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once':
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"

VerifyCCPtoLCPTimers:
    Product: "NSXTransformers"
    Component: *LCP--KVM
    Category: "L2"
    TestName: "VerifyCCPtoLCPTimers"
    Version: "2"
    Tags: "Avalanche, LCP, CCP"
    QCPath: *QCPATH--KVM
    Summary: "To verify the keepalive timer and dead timer between CCP and LCP"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    Developer: "gangarm"
    Partnerfacing: "N"
    TestbedSpec: *FUNCTIONAL_TOPOLOGY_2--KVM
    WORKLOADS:
        Sequence:
            - ['Register4Hosts']
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['DiscoverHostNodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1',
               'AttachVM5toSwitch1', 'AttachVM7toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2',
               'AttachVM6toSwitch2', 'AttachVM8toSwitch2']
            - ['ConfigureVnicIP']
            - ['VerifyLSReplicationModeOnHost']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers',
               'VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnHost1', 'VerifyLS1VtepEntryOnHost2',
               'VerifyLS1VtepEntryOnHost3', 'VerifyLS1VtepEntryOnHost4']
            - ['VerifyLS2VtepEntryOnHost1', 'VerifyLS2VtepEntryOnHost2',
               'VerifyLS2VtepEntryOnHost3', 'VerifyLS2VtepEntryOnHost4']
            # TODO: Verify LCP send hello message to CCP periodically.
            # - ['VerifyLCPtoCCPHelloMessages']

            # (XXX): These time based workloads might not be 100% robust.
            # The workloads may start at the right time, but due to latency,
            # there is no guarantee that the actual call also occurs at the
            # right time.
            - ['BlockConnectionBetweenTNandCCP',
               'VerifyLS1VtepEntryOnControllersWithin15Seconds',
               'VerifyLS2VtepEntryOnControllersWithin15Seconds']
            - ['VerifyLS1VtepEntryOnControllersAfter15Seconds',
               'VerifyLS2VtepEntryOnControllersAfter15Seconds']
        ExitSequence:
            - ['RestoreConnectionBetweenTNandCCP']
            - ['DeleteVM1Vnic1FromLSwitch1', 'DeleteVM3Vnic1FromLSwitch1',
               'DeleteVM5Vnic1FromLSwitch1', 'DeleteVM7Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2', 'DeleteVM4Vnic1FromLSwitch2',
               'DeleteVM6Vnic1FromLSwitch2', 'DeleteVM8Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']

        NSXCleanup: *NSX_CLEANUP--KVM
        Register4Hosts: *REGISTER_4_HOSTS--KVM
        Unregister4Hosts: *UNREGISTER_4HOSTS--KVM
        Create3NodeMPAnd3NodeCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        Verify3NodeMPAnd3NodeCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CreateTransportZone: *CREATE_1_TRANSPORTZONE
        CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
        CreateTransportNodes: *CREATE_4_TRANSPORTNODES--KVM
        DiscoverHostNodes: *DISCOVER_4_HOST_NODES--KVM
        DiscoverVteps: *DISCOVER_VERIFY_VTEPS--KVM
        CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM5toSwitch1: *ATTACH_VM5_TO_SWITCH_1--KVM
        AttachVM7toSwitch1: *ATTACH_VM7_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        AttachVM6toSwitch2: *ATTACH_VM6_TO_SWITCH_2--KVM
        AttachVM8toSwitch2: *ATTACH_VM8_TO_SWITCH_2--KVM
        ConfigureVnicIP:  *CONFIGURE_8VMS_IP--KVM
        VerifyLS1VtepEntryOnHost1: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS1VtepEntryOnHost2: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS1VtepEntryOnHost3: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS1VtepEntryOnHost4: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--KVM
        VerifyLS2VtepEntryOnHost1: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_1--KVM
        VerifyLS2VtepEntryOnHost2: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_2--KVM
        VerifyLS2VtepEntryOnHost3: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_3--KVM
        VerifyLS2VtepEntryOnHost4: *VERIFY_LS2_VTEP_ENTRY_ON_HOST_4--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2:  *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2:  *DELETE_VM4_VNIC1_LSWITCH2--KVM
        DeleteVM5Vnic1FromLSwitch1:  *DELETE_VM5_VNIC1_LSWITCH1--KVM
        DeleteVM6Vnic1FromLSwitch2:  *DELETE_VM6_VNIC1_LSWITCH2--KVM
        DeleteVM7Vnic1FromLSwitch1:  *DELETE_VM7_VNIC1_LSWITCH1--KVM
        DeleteVM8Vnic1FromLSwitch2:  *DELETE_VM8_VNIC1_LSWITCH2--KVM

        VerifyLSReplicationModeOnHost:
            Type: "Host"
            testHost: "kvm.[1-4]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'

        VerifyLS1VtepEntryOnControllers: &VERIFY_LS1_VTEP_ENTRY_ON_CONTROLLERS
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2VtepEntryOnControllers: &VERIFY_LS2_VTEP_ENTRY_ON_CONTROLLERS
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS1MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[5].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[7].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        VerifyLS2MacEntryOnControllers:
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_mac: "vm.[6].vif.[1]"
                      adapter_ip: "kvm.[3].vtep.[1]"
                    - adapter_mac: "vm.[8].vif.[1]"
                      adapter_ip: "kvm.[4].vtep.[1]"

        BlockConnectionBetweenTNandCCP: *BLOCK_CONNECTION_TO_4_HOST_ON_CCP
        RestoreConnectionBetweenTNandCCP: *UNBLOCK_CONNECTION_TO_4_HOST_ON_CCP

        VerifyLS1VtepEntryOnControllersWithin15Seconds:
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_CONTROLLERS
            sleepbetweenworkloads:  "3"

        VerifyLS2VtepEntryOnControllersWithin15Seconds:
            <<: *VERIFY_LS2_VTEP_ENTRY_ON_CONTROLLERS
            sleepbetweenworkloads:  "3"

        VerifyLS1VtepEntryOnControllersAfter15Seconds:
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_CONTROLLERS
            sleepbetweenworkloads: "30"
            'get_vtep_table[?]contain_once':
                table: []

        VerifyLS2VtepEntryOnControllersAfter15Seconds:
            <<: *VERIFY_LS2_VTEP_ENTRY_ON_CONTROLLERS
            sleepbetweenworkloads: "30"
            'get_vtep_table[?]contain_once':
                table: []

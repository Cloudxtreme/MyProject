TAGS:
    COMMON_TAGS: &COMMON_TAGS
        Product: "NSXTransformers"
        SubRelease: "Bumblebee"
        Category: "L2"
        Version: "2"
        ExpectedResult: "PASS"
        Status: "Draft"
        AutomationLevel: "Automated"
        FullyAutomatable: "Y"
        TestcaseLevel: "Functional"
        TestcaseType: "Functional"
        Partnerfacing: "N"
        Procedure: ""
        WORKLOADS: {}

    P0_TAGS: &P0_TAGS
        <<: *COMMON_TAGS
        Priority: "P0"

    P1_TAGS: &P1_TAGS
        <<: *COMMON_TAGS
        Priority: "P1"

    P2_TAGS: &P2_TAGS
        <<: *COMMON_TAGS
        Priority: "P2"


COMPONENTS:
    - &MPA--ESX "MP-Agent-ESX"
    - &MPA--KVM "MP-Agent-KVM"
    - &LCP--ESX "LCP-ESX"
    - &LCP--KVM "LCP-KVM"
    # XXX(salmanm): This is a placeholder component for ESX until bugzilla
    # shows async/VSS for ESX.
    - &DATAPATH--ESX "vxstt"
    - &DATAPATH--KVM "OVS"
    - &MP "MP"
    - &CCP "CCP"


WORKLOADS:
    BlockConnectionToMPOnHosts:
        ESX: &BLOCK_CONNECTION_TO_MP_HOSTS--ESX
            Type: Host
            TestHost: "esx.[1-4]"
            name: 'nsx-mpa'
            service: 'stop'
        KVM: &BLOCK_CONNECTION_TO_MP_HOSTS--KVM
            Type: Host
            TestHost: "kvm.[1-4]"
            stop_service:
                execution_type: "cmd"
                service_name: "nsx-mpa"

    UnblockConnectionToMPOnHosts:
        ESX: &UNBLOCK_CONNECTION_TO_MP_HOSTS--ESX
            Type: Host
            TestHost: "esx.[1-4]"
            name: 'nsx-mpa'
            service: 'start'
        KVM: &UNBLOCK_CONNECTION_TO_MP_HOSTS--KVM
            Type: Host
            TestHost: "kvm.[1-4]"
            start_service:
                execution_type: "cmd"
                service_name: "nsx-mpa"

    VerifyVTEPConnectivity:
        KVM: &VERIFY_4_VTEP_CONNECTIVITY--KVM
            Type : "Traffic"
            ToolName : "ping"
            TestAdapter : "kvm.[1-4].vtep.[1]"
            SupportAdapter: "kvm.[1-4].vtep.[1]"
            ParallelSession: "yes"
            TestDuration : "5"
            connectivitytest: 0
        ESX: &VERIFY_4_VTEP_CONNECTIVITY--ESX
            Type : "Traffic"
            ToolName : "ping"
            TestAdapter : "esx.[1-4].vtep.[1]"
            SupportAdapter: "esx.[1-4].vtep.[1]"
            ParallelSession: "yes"
            TestDuration : "5"
            connectivitytest: 0

    IPDiscoveryProfileResoruce: &IPDISCOVERY_RPOFILE_RESOURCE
        "IpDiscoverySwitchingProfile"

    ESX_QCPath: &QCPATH--ESX
        "ESX"
    KVM_QCPATH: &QCPATH--KVM
        "KVM"

    CreateIPDiscoveryProfileOverlay: &CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        ipdiscovery_profile:
            '[1]': &IP_DISCOVERY_PROFILE
                name: "autogenerate"
                arp_snooping_enabled: "true"
                dhcp_snooping_enabled: "true"
                resource_type: *IPDISCOVERY_RPOFILE_RESOURCE

    CreateIPDiscoveryProfileVLAN: &CREATE_IP_DISCOVERY_PROFILE_VLAN
        <<: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        ipdiscovery_profile:
            '[1]':
                <<: *IP_DISCOVERY_PROFILE
                arp_snooping_enabled: "false"
                dhcp_snooping_enabled: "false"

    CreateIPDiscoveryProfileOverlayandVLAN: &CREATE_IP_DISCOVERY_PROFILE_OVERLAY_VLAN
        <<: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
        ipdiscovery_profile:
            '[1]':
                <<: *IP_DISCOVERY_PROFILE
            '[2]':
                <<: *IP_DISCOVERY_PROFILE
                arp_snooping_enabled: "false"
                dhcp_snooping_enabled: "false"

    DeleteAllIPDiscoveryProfiles: &DELETE_ALL_IPDISCOVERY_PROFILES
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        deleteipdiscovery_profile: "nsxmanager.[1].ipdiscovery_profile.[-1]"

    ARP_PING_DURATION: &ARP_PING_DURATION
        '30'

    # ARP pkts captured in source node should = (number of
    # hosts - 1) x ARP_PING_DURATION. Since YAML does not
    # support arithmatic operation, the number has to be hardcoded here.
    ARP_PING_COUNT_SOURCE_NODE: &ARP_PING_COUNT_SOURCE_NODE
        '90'

    SLEEP_BEFORE_SENDING_SECOND_ARP: &SLEEP_BEFORE_SENDING_SECOND_ARP
        '5'

    ScapyInterval: &SCAPY_INTERVAL
        '300'

    ARP_PING_DURATION: &ARP_PING_DURATION_FOR_CAPTURE
        '5'

    PING_DURATION: &PING_DURATION
        '10'

    SLEEP_FIRST_VM_ARP:
        ESX: &SLEEP_FIRST_VM_ARP--ESX
            '0'
        KVM: &SLEEP_FIRST_VM_ARP--KVM
            '0'

    SLEEP_SECOND_VM_ARP:
        ESX: &SLEEP_SECOND_VM_ARP--ESX
            '45'
        KVM: &SLEEP_SECOND_VM_ARP--KVM
            '10'

    SLEEP_BEFORE_ARP__ENTRY_CHECK:
        ESX: &SLEEP_BEFORE_ARP_ENTRY_CHECK--ESX
            '50'
        KVM: &SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
            '5'

    SLEEP_BEFORE_MAC_ENTRY_CHECK: &SLEEP_BEFORE_MAC_ENTRY_CHECK
        '5'

    NUM_MAC_ENTRY_CHECK_RETRIES: &NUM_MAC_ENTRY_CHECK_RETRIES
        '3'

    NUM_VTEP_ENTRY_CHECK_RETRIES: &NUM_VTEP_ENTRY_CHECK_RETRIES
        '1'

    NUM_ARP_ENTRY_CHECK_RETRIES: &NUM_ARP_ENTRY_CHECK_RETRIES
        '3'

    ARP_ENTRY_EXPIRATION: &ARP_ENTRY_EXPIRATION
        '180'

    MAC_ENTRY_EXPIRATION: &MAC_ENTRY_EXPIRATION
        '240'

    UNKNOWN_PING_COUNT: &UNKNOWN_PING_COUNT
        '5'

    iperf_udp_bandwidth: &IPERF_UDP_BANDWIDTH
        '10M'

    ip_100_1_1_1: &IP_100_1_1_1
        '100.1.1.1'

    ip_100_1_1_2: &IP_100_1_1_2
        '100.1.1.2'


    #This IP address should change according to the dhcp server
    #for the network that vtep is connected to. For WDC pod
    #isolated-06 and isolated-07, its IP address range is
    #172.21.xx.xx and 172.22.xx.xx. And isolated-01/02 has
    #IP address range as 172.16.xx.xx and 172.17.xx.xx.
    #In different network, this ip address should be changed.
    network1_vtep_ip1:
        ESX: &NETWORK1_VTEP_IP1--ESX
            #isolated-06 network
            '172.21.255.253'
        KVM: &NETWORK1_VTEP_IP1--KVM
            #isolated-01 network
            '172.16.255.253'

    network1_vtep_ip2:
        ESX: &NETWORK1_VTEP_IP2--ESX
            #isolated-06 network
            '172.21.255.254'
        KVM: &NETWORK1_VTEP_IP2--KVM
            #isolated-01 network
            '172.16.255.254'

    network2_vtep_ip1:
        ESX: &NETWORK2_VTEP_IP1--ESX
            #isolated-07 network
            '172.22.255.253'
        KVM: &NETWORK2_VTEP_IP1--KVM
            #isolated-02 network
            '172.17.255.253'

    network2_vtep_ip2:
        ESX: &NETWORK2_VTEP_IP2--ESX
            #isolated-07 network
            '172.22.255.254'
        KVM: &NETWORK2_VTEP_IP2--KVM
            #isolated-02 network
            '172.17.255.254'

    DUPLICATE_MAC1: &DUPLICATE_MAC_1
        '00:11:22:33:44:66'

    DUPLICATE_MAC2: &DUPLICATE_MAC_2
        '00:11:22:33:44:77'

    replication_tag:
        ESX: &REPLICATION_TAG--ESX
            'NSX, Avalanche, L2, ESXOnly, Replication, VxSTT'
        KVM: &REPLICATION_TAG--KVM
            'NSX, Avalanche, L2, KVMOnly, Replication, VxSTT'

    reboot_tag:
        ESX: &REBOOT_TAG--ESX
            'NSX, Avalanche, L2, ESXOnly, Reboot, VxSTT'
        KVM: &REBOOT_TAG--KVM
            'NSX, Avalanche, L2, KVMOnly, Reboot, VxSTT'

    firewall_execution_type:
        ESX: &FIREWALL_EXECUTION_TYPE--ESX
            cli
        KVM: &FIREWALL_EXECUTION_TYPE--KVM
            cmd

    RegisterController: &REGISTER_1_CONTROLLER
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        set_nsx_registration:
            manager_ip: 'nsxmanager.[1]'
            manager_thumbprint: 'nsxmanager.[1]'
            execution_type: 'cli'

    SetControllerOnHost1: &SET_CONTROLLER_ON_HOST1
        Type: Host
        TestHost: 'esx.[1]'
        set_nsx_controller:
            controller_ip: 'nsxcontroller.[1]'
            node_id: 'nsxmanager.[1].transportnode.[1]'
            execution_type: 'cli'

    SetControllerOnHost2: &SET_CONTROLLER_ON_HOST2
        Type: Host
        TestHost: 'esx.[2]'
        set_nsx_controller:
            controller_ip: 'nsxcontroller.[1]'
            node_id: 'nsxmanager.[1].transportnode.[2]'
            execution_type: 'cli'

    SetControllerOnHost3: &SET_CONTROLLER_ON_HOST3
        Type: Host
        TestHost: 'esx.[3]'
        set_nsx_controller:
            controller_ip: 'nsxcontroller.[1]'
            node_id: 'nsxmanager.[1].transportnode.[3]'
            execution_type: 'cli'

    SetControllerOnHost4: &SET_CONTROLLER_ON_HOST4
        Type: Host
        TestHost: 'esx.[4]'
        set_nsx_controller:
            controller_ip: 'nsxcontroller.[1]'
            node_id: 'nsxmanager.[1].transportnode.[4]'
            execution_type: 'cli'


    SetControllerOnHost1:
        ESX: &SET_CONTROLLER_ON_HOST1--ESX
            Type: Host
            TestHost: 'esx.[1]'
            set_nsx_controller:
                controller_ip: 'nsxcontroller.[1]'
                node_id: 'nsxmanager.[1].transportnode.[1]'
                execution_type: 'cli'
        KVM: &SET_CONTROLLER_ON_HOST1--KVM
            Type: Host
            TestHost: 'kvm.[1]'
            set_nsx_controller:
                controller_ip: 'nsxcontroller.[1]'
                node_id: 'nsxmanager.[1].transportnode.[1]'
                execution_type: 'cmd'

    SetControllerOnHost2:
        ESX: &SET_CONTROLLER_ON_HOST2--ESX
            Type: Host
            TestHost: 'esx.[2]'
            set_nsx_controller:
                controller_ip: 'nsxcontroller.[1]'
                node_id: 'nsxmanager.[1].transportnode.[2]'
                execution_type: 'cli'
        KVM: &SET_CONTROLLER_ON_HOST2--KVM
            Type: Host
            TestHost: 'kvm.[2]'
            set_nsx_controller:
                controller_ip: 'nsxcontroller.[1]'
                node_id: 'nsxmanager.[1].transportnode.[2]'
                execution_type: 'cmd'

    SetControllerOnHost3:
        ESX: &SET_CONTROLLER_ON_HOST3--ESX
            Type: Host
            TestHost: 'esx.[3]'
            set_nsx_controller:
                controller_ip: 'nsxcontroller.[1]'
                node_id: 'nsxmanager.[1].transportnode.[3]'
                execution_type: 'cli'
        KVM: &SET_CONTROLLER_ON_HOST3--KVM
            Type: Host
            TestHost: 'kvm.[3]'
            set_nsx_controller:
                controller_ip: 'nsxcontroller.[1]'
                node_id: 'nsxmanager.[1].transportnode.[3]'
                execution_type: 'cmd'

    SetControllerOnHost4:
        ESX: &SET_CONTROLLER_ON_HOST4--ESX
            Type: Host
            TestHost: 'esx.[4]'
            set_nsx_controller:
                controller_ip: 'nsxcontroller.[1]'
                node_id: 'nsxmanager.[1].transportnode.[4]'
                execution_type: 'cli'
        KVM: &SET_CONTROLLER_ON_HOST4--KVM
            Type: Host
            TestHost: 'kvm.[4]'
            set_nsx_controller:
                controller_ip: 'nsxcontroller.[1]'
                node_id: 'nsxmanager.[1].transportnode.[4]'
                execution_type: 'cmd'

    DiscoverHostnodes:
        ESX: &DISCOVER_4_HOST_NODES--ESX
            Type: NSX
            TestNSX: 'nsxmanager.[1]'
            hostnode:
                '[1-4]':
                    discover: 'true'
                    ip_addresses: 'esx.[x=hostnode_index]'
        KVM: &DISCOVER_4_HOST_NODES--KVM
            Type: NSX
            TestNSX: 'nsxmanager.[1]'
            hostnode:
                '[1-4]':
                    discover: 'true'
                    ip_addresses: 'kvm.[x=hostnode_index]'

    DiscoverTwoHostnodes:
        ESX: &DISCOVER_2_HOST_NODES--ESX
            Type: NSX
            TestNSX: 'nsxmanager.[1]'
            hostnode:
                '[1-2]':
                    discover: 'true'
                    ip_addresses: 'esx.[x=hostnode_index]'
        KVM: &DISCOVER_2_HOST_NODES--KVM
            Type: NSX
            TestNSX: 'nsxmanager.[1]'
            hostnode:
                '[1-2]':
                    discover: 'true'
                    ip_addresses: 'kvm.[x=hostnode_index]'

    DiscoverOneHostnode:
        ESX: &DISCOVER_1_HOST_NODE--ESX
            Type: NSX
            TestNSX: 'nsxmanager.[1]'
            hostnode:
                '[1]':
                    discover: 'true'
                    ip_addresses: 'esx.[x=hostnode_index]'
        KVM: &DISCOVER_1_HOST_NODE--KVM
            Type: NSX
            TestNSX: 'nsxmanager.[1]'
            hostnode:
                '[1]':
                    discover: 'true'
                    ip_addresses: 'kvm.[x=hostnode_index]'

    DiscoverNetstackOnHost1: &DISCOVER_NETSTACK_HOST1
        Type: Host
        TestHost: 'esx.[1]'
        netstack:
            '[1]':
                discover: 'true'
                name: esx.[1].vtep.[1]->adapter_netstack

    DiscoverNetstackOnHost2: &DISCOVER_NETSTACK_HOST2
        Type: Host
        TestHost: 'esx.[2]'
        netstack:
            '[1]':
                discover: 'true'
                name: esx.[2].vtep.[1]->adapter_netstack

    DiscoverNetstackOnHost3: &DISCOVER_NETSTACK_HOST3
        Type: Host
        TestHost: 'esx.[3]'
        netstack:
            '[1]':
                discover: 'true'
                name: esx.[3].vtep.[1]->adapter_netstack

    DiscoverLogicalPorts: &DISCOVER_8_LOGICAL_PORTS
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        logicalport:
            '[1-8]':
                discover: 'true'
                attachment:
                   attachment_type : VIF
                   id_: 'vm.[x=logicalport_index].vnic.[1]->uuid'

    DiscoverLogicalPorts: &DISCOVER_4_LOGICAL_PORTS
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        logicalport:
            '[1-4]':
                discover: 'true'
                attachment:
                   attachment_type : VIF
                   id_: 'vm.[x=logicalport_index].vnic.[1]->uuid'

    DeleteLogicalPort: &DELETE_LOGICAL_PORTS
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        deletelogicalport: 'nsxmanager.[1].logicalport.[-1]'
        query_params:
            detach: "true"

    execution_type:
        CONTROLLER: &CONTROLLER_EXECUTION_TYPE
            cli

    driver: &AVALANCHE_L2_VNIC_DRIVER
        vmxnet3

    PoweronVM1: &POWER_ON_VM_1
        Type: VM
        TestVM: vm.[1]
        vmstate: poweron

    PoweronVM2: &POWER_ON_VM_2
        Type: VM
        TestVM: vm.[2]
        vmstate: poweron

    PoweronVM3: &POWER_ON_VM_3
        Type: VM
        TestVM: vm.[3]
        vmstate: poweron

    PoweronVM4: &POWER_ON_VM_4
        Type: VM
        TestVM: vm.[4]
        vmstate: poweron

    PoweronVM5: &POWER_ON_VM_5
        Type: VM
        TestVM: vm.[5]
        vmstate: poweron

    PoweronVM6: &POWER_ON_VM_6
        Type: VM
        TestVM: vm.[6]
        vmstate: poweron

    PoweronVM7: &POWER_ON_VM_7
        Type: VM
        TestVM: vm.[7]
        vmstate: poweron

    PoweronVM8: &POWER_ON_VM_8
        Type: VM
        TestVM: vm.[8]
        vmstate: poweron

    PoweronVM9: &POWER_ON_VM_9
        Type: VM
        TestVM: vm.[9]
        vmstate: poweron

    PoweronVM10: &POWER_ON_VM_10
        Type: VM
        TestVM: vm.[10]
        vmstate: poweron

    PoweronVM11: &POWER_ON_VM_11
        Type: VM
        TestVM: vm.[11]
        vmstate: poweron

    PoweronVM12: &POWER_ON_VM_12
        Type: VM
        TestVM: vm.[12]
        vmstate: poweron

    PoweronVM13: &POWER_ON_VM_13
        Type: VM
        TestVM: vm.[13]
        vmstate: poweron

    PoweronVM14: &POWER_ON_VM_14
        Type: VM
        TestVM: vm.[14]
        vmstate: poweron

    PoweronVM15: &POWER_ON_VM_15
        Type: VM
        TestVM: vm.[15]
        vmstate: poweron

    PoweronVM16: &POWER_ON_VM_16
        Type: VM
        TestVM: vm.[16]
        vmstate: poweron

    PoweronVM17: &POWER_ON_VM_17
        Type: VM
        TestVM: vm.[17]
        vmstate: poweron

    PoweronVM18: &POWER_ON_VM_18
        Type: VM
        TestVM: vm.[18]
        vmstate: poweron

    PoweronVM19: &POWER_ON_VM_19
        Type: VM
        TestVM: vm.[19]
        vmstate: poweron

    PoweronVM20: &POWER_ON_VM_20
        Type: VM
        TestVM: vm.[20]
        vmstate: poweron

    PoweroffVM1: &POWER_OFF_VM_1
        Type: VM
        TestVM: vm.[1]
        vmstate: poweroff

    PoweroffVM2: &POWER_OFF_VM_2
        Type: VM
        TestVM: vm.[2]
        vmstate: poweroff

    PoweroffVM3: &POWER_OFF_VM_3
        Type: VM
        TestVM: vm.[3]
        vmstate: poweroff

    PoweroffVM4: &POWER_OFF_VM_4
        Type: VM
        TestVM: vm.[4]
        vmstate: poweroff

    PoweroffVM5: &POWER_OFF_VM_5
        Type: VM
        TestVM: vm.[5]
        vmstate: poweroff

    PoweroffVM6: &POWER_OFF_VM_6
        Type: VM
        TestVM: vm.[6]
        vmstate: poweroff

    PoweroffVM7: &POWER_OFF_VM_7
        Type: VM
        TestVM: vm.[7]
        vmstate: poweroff

    PoweroffVM8: &POWER_OFF_VM_8
        Type: VM
        TestVM: vm.[8]
        vmstate: poweroff

    PoweroffAllVMs: &POWER_OFF_ALL_VM
        Type: VM
        TestVM: vm.[-1]
        vmstate: poweroff

    CreateTransportZone: &CREATE_1_TRANSPORTZONE
        Type: NSX
        TestNSX: nsxmanager.[1]
        transportzone:
            '[1]': &TRANSPORTZONE_1
                name: autogenerate
                transport_zone_type: 'OVERLAY' # or VLAN, both case-senstive
                switch_name: 'nsxvswitch'

    CreateTransportZone: &CREATE_1_TRANSPORTZONE_VLAN_BACKED
        <<: *CREATE_1_TRANSPORTZONE
        transportzone:
            '[1]':
                <<: *TRANSPORTZONE_1
                transport_zone_type: 'VLAN'

    CreateTransportZone: &CREATE_2_TRANSPORTZONE_SAME_NVS
        <<: *CREATE_1_TRANSPORTZONE
        transportzone:
            '[1-2]':
                <<: *TRANSPORTZONE_1

    CreateTransportZone: &CREATE_2_TRANSPORTZONE_DIFFERENT_NVS
        <<: *CREATE_1_TRANSPORTZONE
        transportzone:
            '[1]':
                <<: *TRANSPORTZONE_1
                switch_name: 'nsxvswitch1'
            '[2]':
                <<: *TRANSPORTZONE_1
                transport_zone_type: 'VLAN'
                switch_name: 'nsxvswitch2'

    UplinkVlan: &UPLINK_NO_VLAN
           vlan: 0

    # VLAN backed switches require that the transport uplink be attached to a
    # trunk port that allows the passage of VLAN tags used by the VLAN backed
    # switches.
    # Isolated networks available in WDC are as follows. (VLAN 21 and 22 can be
    # used with trunked VLAN network of isolated-15)
    # https://wiki.eng.vmware.com/WDC_Test_Lab#WDC_LAB_.40_POD3_UCS_Cloud_VLAN_mappings
    UplinkVlan: &UPLINK_VLAN_01
           vlan: 21

    UplinkVlan: &UPLINK_VLAN_02
           vlan: 22

    CreateUplinkProfile: &CREATE_UPLINK_PROFILE_01
            Type: NSX
            TestNSX: nsxmanager.[1]
            UplinkProfile:
                '[1]': &UPLINK_PROFILE_01
                    mtu: 1600
                    teaming:
                        active:
                            - adapter_name: 'uplink1'
                              adapter_type: 'PNIC'
                        policy: 'FAILOVER_ORDER'
                    <<: *UPLINK_NO_VLAN
                    resource_type: 'UplinkHostSwitchProfile'

    CreateUplinkProfile: &CREATE_UPLINK_PROFILE_02
            Type: NSX
            TestNSX: nsxmanager.[1]
            UplinkProfile:
                '[1]':
                    <<: *UPLINK_PROFILE_01
                    <<: *UPLINK_VLAN_01
                '[2]':
                    <<: *UPLINK_PROFILE_01
                    <<: *UPLINK_VLAN_02

    CreateUplinkProfile: &CREATE_UPLINK_PROFILE_03
            Type: NSX
            TestNSX: nsxmanager.[1]
            UplinkProfile:
                '[1]':
                    <<: *UPLINK_PROFILE_01
                    <<: *UPLINK_VLAN_01
                '[2]':
                    <<: *UPLINK_PROFILE_01
                    <<: *UPLINK_NO_VLAN

    CreateJumboFrameUplinkProfile: &CREATE_JUMBO_FRAME_UPLINK_PROFILE_01
            Type: NSX
            TestNSX: nsxmanager.[1]
            UplinkProfile:
                '[1]':
                    mtu: 9000
                    teaming:
                        active:
                            - adapter_name: 'uplink1'
                              adapter_type: 'PNIC'
                        policy: 'FAILOVER_ORDER'
                    <<: *UPLINK_NO_VLAN
                    resource_type: 'UplinkHostSwitchProfile'

    DeleteUplinkProfile: &DELETE_UPLINK_PROFILE
       Type: NSX
       TestNSX: nsxmanager.[1]
       deleteuplinkprofile: nsxmanager.[1].uplinkprofile.[-1]

    CreateTransportNodes:
        ESX: &CREATE_4_TRANSPORTNODES--ESX
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1-4]': &TRANSPORTNODES_1_4--ESX
                    node_id: 'nsxmanager.[1].hostnode.[x=transportnode_index]'
                    host_switches:
                          - switch_name: 'nsxvswitch'
                            host_switch_profile_ids:
                               - key: 'UplinkHostSwitchProfile'
                                 value: 'nsxmanager.[1].uplinkprofile.[1]->id'
                            uplinks:
                               - device_name: 'vmnic1'
                                 adapter_name: 'uplink1'
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]

        KVM: &CREATE_4_TRANSPORTNODES--KVM
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1-4]': &TRANSPORTNODES_1_4--KVM
                    node_id: 'nsxmanager.[1].hostnode.[x=transportnode_index]'
                    host_switches:
                          - switch_name: 'nsxvswitch'
                            host_switch_profile_ids:
                                - key: 'UplinkHostSwitchProfile'
                                  value: 'nsxmanager.[1].uplinkprofile.[1]->id'
                            uplinks:
                               - device_name: "eth1"
                                 adapter_name: "uplink1"
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTransportNodes:
        ESX: &CREATE_4_TRANSPORTNODES_2_DIFFERENT_UPLINK_PROFILES--ESX
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1-2]':
                    node_id: 'nsxmanager.[1].hostnode.[x=transportnode_index]'
                    host_switches:
                          - switch_name: 'nsxvswitch'
                            host_switch_profile_ids:
                               - key: 'UplinkHostSwitchProfile'
                                 value: 'nsxmanager.[1].uplinkprofile.[1]->id'
                            uplinks:
                               - device_name: 'vmnic1'
                                 adapter_name: 'uplink1'
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]
                '[3-4]':
                    node_id: 'nsxmanager.[1].hostnode.[x=transportnode_index]'
                    host_switches:
                          - switch_name: 'nsxvswitch'
                            host_switch_profile_ids:
                               - key: 'UplinkHostSwitchProfile'
                                 value: 'nsxmanager.[1].uplinkprofile.[2]->id'
                            uplinks:
                               - device_name: 'vmnic1'
                                 adapter_name: 'uplink1'
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]

        KVM: &CREATE_4_TRANSPORTNODES_2_DIFFERENT_UPLINK_PROFILES--KVM
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1-2]':
                    node_id: 'nsxmanager.[1].hostnode.[x=transportnode_index]'
                    host_switches:
                          - switch_name: 'nsxvswitch'
                            host_switch_profile_ids:
                                - key: 'UplinkHostSwitchProfile'
                                  value: 'nsxmanager.[1].uplinkprofile.[1]->id'
                            uplinks:
                               - device_name: "eth1"
                                 adapter_name: "uplink1"
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]
                '[3-4]':
                    node_id: 'nsxmanager.[1].hostnode.[x=transportnode_index]'
                    host_switches:
                          - switch_name: 'nsxvswitch'
                            host_switch_profile_ids:
                                - key: 'UplinkHostSwitchProfile'
                                  value: 'nsxmanager.[1].uplinkprofile.[2]->id'
                            uplinks:
                               - device_name: "eth1"
                                 adapter_name: "uplink1"
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTransportNodes:
        ESX: &CREATE_4_TRANSPORTNODES_VLAN_BACKED--ESX
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1-4]':
                    node_id: 'nsxmanager.[1].hostnode.[x=transportnode_index]'
                    host_switches:
                          - switch_name: 'nsxvswitch'
                            host_switch_profile_ids:
                               - key: 'UplinkHostSwitchProfile'
                                 value: 'nsxmanager.[1].uplinkprofile.[1]->id'
                            uplinks:
                               - device_name: 'vmnic1'
                                 adapter_name: 'uplink1'
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]

        KVM: &CREATE_4_TRANSPORTNODES_VLAN_BACKED--KVM
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1-4]':
                    node_id: 'nsxmanager.[1].hostnode.[x=transportnode_index]'
                    host_switches:
                          - switch_name: 'nsxvswitch'
                            host_switch_profile_ids:
                               - key: 'UplinkHostSwitchProfile'
                                 value: 'nsxmanager.[1].uplinkprofile.[1]->id'
                            uplinks:
                               - device_name: 'eth1'
                                 adapter_name: 'uplink1'
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]

    Create3TransportNodes:
        ESX: &CREATE_3_TRANSPORTNODES--ESX
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1-3]':
                        <<: *TRANSPORTNODES_1_4--ESX
        KVM: &CREATE_3_TRANSPORTNODES--KVM
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1-3]':
                        <<: *TRANSPORTNODES_1_4--KVM

    Create2TransportNodes:
        ESX: &CREATE_2_TRANSPORTNODES--ESX
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1-2]':
                    <<: *TRANSPORTNODES_1_4--ESX

        KVM: &CREATE_2_TRANSPORTNODES--KVM
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1-2]':
                    node_id: 'nsxmanager.[1].hostnode.[x=transportnode_index]'
                    host_switches:
                          - switch_name: 'nsxvswitch'
                            host_switch_profile_ids:
                                - key: 'UplinkHostSwitchProfile'
                                  value: 'nsxmanager.[1].uplinkprofile.[1]->id'
                            uplinks:
                               - device_name: "eth1"
                                 adapter_name: "uplink1"
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTransportNode_4:
        ESX: &CREATE_TRANSPORTNODE_4--ESX
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[4]':
                    <<: *TRANSPORTNODES_1_4--ESX

        KVM: &CREATE_TRANSPORTNODE_4--KVM
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[4]':
                    <<: *TRANSPORTNODES_1_4--KVM

    CreateTransportNode_1:
        ESX: &CREATE_TRANSPORTNODE_1--ESX
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1]':
                    <<: *TRANSPORTNODES_1_4--ESX

        KVM: &CREATE_TRANSPORTNODE_1--KVM
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            transportnode:
                '[1]':
                    <<: *TRANSPORTNODES_1_4--KVM

    CreateTransportNodes:
        ESX: &CREATE_4_TRANSPORTNODES_SPAN_2_TZ_SAME_NVS--ESX
            <<: *CREATE_4_TRANSPORTNODES--ESX
            transportnode:
                '[1-4]':
                    <<: *TRANSPORTNODES_1_4--ESX
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]
                        - transport_zone_id: nsxmanager.[1].transportzone.[2]
        KVM: &CREATE_4_TRANSPORTNODES_SPAN_2_TZ_SAME_NVS--KVM
            <<: *CREATE_4_TRANSPORTNODES--KVM
            transportnode:
                '[1-4]':
                    <<: *TRANSPORTNODES_1_4--KVM
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]
                        - transport_zone_id: nsxmanager.[1].transportzone.[2]

    CreateTransportNodes:
        ESX: &CREATE_4_TRANSPORTNODES_SPAN_2_TZ_DIFF_NVS--ESX
            <<: *CREATE_4_TRANSPORTNODES--ESX
            transportnode:
                '[1-4]':
                    <<: *TRANSPORTNODES_1_4--ESX
                    host_switches:
                          - switch_name: 'nsxvswitch1'
                            host_switch_profile_ids:
                               - key: 'UplinkHostSwitchProfile'
                                 value: 'nsxmanager.[1].uplinkprofile.[1]->id'
                            uplinks:
                               - device_name: 'vmnic1'
                                 adapter_name: 'uplink1'
                          - switch_name: 'nsxvswitch2'
                            host_switch_profile_ids:
                               - key: 'UplinkHostSwitchProfile'
                                 value: 'nsxmanager.[1].uplinkprofile.[2]->id'
                            uplinks:
                               - device_name: 'vmnic2'
                                 adapter_name: 'uplink1'
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]
                        - transport_zone_id: nsxmanager.[1].transportzone.[2]

        KVM: &CREATE_4_TRANSPORTNODES_SPAN_2_TZ_DIFF_NVS--KVM
            <<: *CREATE_4_TRANSPORTNODES--KVM
            transportnode:
                '[1-4]':
                    <<: *TRANSPORTNODES_1_4--KVM
                    host_switches:
                          - switch_name: 'nsxvswitch1'
                            host_switch_profile_ids:
                               - key: 'UplinkHostSwitchProfile'
                                 value: 'nsxmanager.[1].uplinkprofile.[1]->id'
                            uplinks:
                               - device_name: 'eth1'
                                 adapter_name: 'uplink1'
                          - switch_name: 'nsxvswitch2'
                            host_switch_profile_ids:
                               - key: 'UplinkHostSwitchProfile'
                                 value: 'nsxmanager.[1].uplinkprofile.[2]->id'
                            uplinks:
                               - device_name: 'eth2'
                                 adapter_name: 'uplink1'
                    transport_zone_endpoint:
                        - transport_zone_id: nsxmanager.[1].transportzone.[1]
                        - transport_zone_id: nsxmanager.[1].transportzone.[2]

    CreateLogicalSwitch: &CREATE_LOGICALSWITCH_1
        Type: NSX
        TestNSX: nsxmanager.[1]
        sync: true
        logicalswitch:
            '[1]': &LOGICAL_SWITCH_1
                name: autogenerate
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                admin_state: UP
                # replication_mode's value is case sensitive
                replication_mode: MTEP
                switching_profile_ids:
                    - switching_profile_value: nsxmanager.[1].ipdiscovery_profile.[1]->id
                      switching_profile_key: *IPDISCOVERY_RPOFILE_RESOURCE

    CreateLogicalSwitch: &CREATE_LOGICALSWITCH_2
        <<: *CREATE_LOGICALSWITCH_1
        logicalswitch:
            '[2]':
                <<: *LOGICAL_SWITCH_1
                replication_mode: SOURCE

    CreateLogicalSwitch: &CREATE_2_LOGICALSWITCHES
        <<: *CREATE_LOGICALSWITCH_1
        logicalswitch:
            '[1]':
                <<: *LOGICAL_SWITCH_1
                replication_mode: MTEP
            '[2]':
                <<: *LOGICAL_SWITCH_1
                replication_mode: SOURCE

    CreateLogicalSwitch: &CREATE_LOGICALSWITCH_1_VLAN_BACKED
        Type: NSX
        TestNSX: nsxmanager.[1]
        sync: true
        logicalswitch:
            '[1]': &LOGICAL_SWITCH_1_VLAN_BACKED
                name: autogenerate
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                # replication mode is useless for vlan backing LS
                # remove this when PR1391047 has been fixed
                replication_mode: SOURCE
                admin_state: UP
                switching_profile_ids:
                    - switching_profile_value: nsxmanager.[1].ipdiscovery_profile.[1]->id
                      switching_profile_key: *IPDISCOVERY_RPOFILE_RESOURCE

    CreateLogicalSwitch: &CREATE_2_LOGICALSWITCHES_VLAN_BACKED
        <<: *CREATE_LOGICALSWITCH_1_VLAN_BACKED
        logicalswitch:
            '[1]':
                <<: *LOGICAL_SWITCH_1_VLAN_BACKED
                <<: *UPLINK_VLAN_01
            '[2]':
                <<: *LOGICAL_SWITCH_1_VLAN_BACKED
                <<: *UPLINK_VLAN_02

    CreateLogicalSwitch: &CREATE_2_LOGICALSWITCHES_SPAN_2_TZ
        <<: *CREATE_LOGICALSWITCH_1
        logicalswitch:
            '[1]':
                <<: *LOGICAL_SWITCH_1
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                replication_mode: MTEP
            '[2]':
                <<: *LOGICAL_SWITCH_1
                transport_zone_id: nsxmanager.[1].transportzone.[2]
                replication_mode: SOURCE

    CreateLogicalSwitch: &CREATE_1_VLAN_1_OVERLAY_LOGICALSWITCHES_SPAN_2_TZ
        <<: *CREATE_LOGICALSWITCH_1
        logicalswitch:
            '[1]':
                <<: *LOGICAL_SWITCH_1
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                replication_mode: MTEP
            '[2]':
                <<: *LOGICAL_SWITCH_1_VLAN_BACKED
                transport_zone_id: nsxmanager.[1].transportzone.[2]
                <<: *UPLINK_VLAN_01
                switching_profile_ids:
                    - switching_profile_value: nsxmanager.[1].ipdiscovery_profile.[2]->id
                      switching_profile_key: *IPDISCOVERY_RPOFILE_RESOURCE

    VerifyLSReplicationModeOnHost:
        ESX: &VERIFY_2_LS_REP_MODE--ESX
            Type: "Host"
            testHost: "esx.[1-2]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'
        KVM: &VERIFY_2_LS_REP_MODE--KVM
            Type: "Host"
            testHost: "kvm.[1-2]"
            execution_type: 'cli'
            'get_logical_switch[?]contain_once':
                table:
                    - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                      replication_mode: 'mtep'
                    - switch_vni: "nsxmanager.[1].logicalswitch.[2]"
                      replication_mode: 'source'

    VerifyVTEPConnectivity_ESX:
            Type : "Traffic"
            ToolName : "ping"
            TestAdapter : "esx.[1-4].vtep.[1]"
            SupportAdapter: "esx.[1-4].vtep.[1]"
            ParallelSession: "yes"
            TestDuration : "5"
            connectivitytest: 0

    VerifyVTEPConnectivity_KVM:
            Type : "Traffic"
            ToolName : "ping"
            TestAdapter : "kvm.[1-4].vtep.[1]"
            SupportAdapter: "kvm.[1-4].vtep.[1]"
            ParallelSession: "yes"
            TestDuration : "5"
            connectivitytest: 0

    DiscoverVteps_ESX:
            Type: Host
            TestHost: 'esx.[1-4]'
            vtep:
                '[1]':
                    execution_type: 'cli'
                    discover: 'true'
                    name: 'vmk10'

    DiscoverVteps_KVM:
            Type: Host
            TestHost: 'kvm.[1-4]'
            vtep:
                '[1]':
                    execution_type: 'cli'
                    discover: 'true'
                    name: 'nsx-vtep0.0'

    DiscoverVteps:
        ESX: &DISCOVER_VERIFY_VTEPS--ESX
            - ['DiscoverVteps_ESX']
            - ['VerifyVTEPConnectivity_ESX']
        KVM: &DISCOVER_VERIFY_VTEPS--KVM
            - ['DiscoverVteps_KVM']
            - ['VerifyVTEPConnectivity_KVM']

    DiscoverVteps:
        ESX: &DISCOVER_VTEPS--ESX
            Type: Host
            TestHost: 'esx.[1-4]'
            vtep:
                '[1]': &VTEP_1
                    execution_type: 'cli'
                    discover: 'true'
                    name: 'vmk10'
        KVM: &DISCOVER_VTEPS--KVM
            Type: Host
            TestHost: 'kvm.[1-4]'
            vtep:
                '[1]':
                    execution_type: 'cli'
                    discover: 'true'
                    name: 'nsx-vtep0.0'

    Discover3Vteps:
        ESX: &DISCOVER_3_VTEPS--ESX
            <<: *DISCOVER_VTEPS--ESX
            TestHost: 'esx.[1-3]'
        KVM: &DISCOVER_3_VTEPS--KVM
            <<: *DISCOVER_VTEPS--KVM
            TestHost: 'kvm.[1-3]'

    DiscoverVtep4:
        ESX: &DISCOVER_VTEP_4--ESX
            <<: *DISCOVER_VTEPS--ESX
            TestHost: 'esx.[4]'
        KVM: &DISCOVER_VTEP_4--KVM
            <<: *DISCOVER_VTEPS--KVM
            TestHost: 'kvm.[4]'

    DiscoverVteps:
        ESX: &DISCOVER_8_VTEPS--ESX
            <<: *DISCOVER_VTEPS--ESX
            TestHost: 'esx.[1-4]'
            vtep:
                '[1]':
                    <<: *VTEP_1
                    name: 'vmk10'
                '[2]':
                    <<: *VTEP_1
                    name: 'vmk11'
        KVM: &DISCOVER_8_VTEPS--KVM
            <<: *DISCOVER_VTEPS--KVM
            TestHost: 'kvm.[1-4]'
            vtep:
                '[1]':
                    <<: *VTEP_1
                    name: 'nsx-vtep0.0'
                '[2]':
                    <<: *VTEP_1
                    name: 'nsx-vtep0.1'

    CreateVif1VM1: &CREATE_VIF1_VM1
        Type: VM
        TestVM: 'vm.[1]'
        vif:
           '[1]':
               backing: "kvm.[x=(int(vm_index/2 + 1/2))].bridge.[1]"

    CreateVif2VM1: &CREATE_VIF2_VM1
        Type: VM
        TestVM: 'vm.[1]'
        vif:
           '[2]':
               backing: "kvm.[x=(int(vm_index/2 + 1/2))].bridge.[1]"

    CreateVif3VM1: &CREATE_VIF3_VM1
        Type: VM
        TestVM: 'vm.[1]'
        vif:
           '[3]':
               backing: "kvm.[x=(int(vm_index/2 + 1/2))].bridge.[1]"

    CreateVif1VM2:
        <<: *CREATE_VIF1_VM1
        TestVM: 'vm.[2]'

    CreateVif1VM3:
        <<: *CREATE_VIF1_VM1
        TestVM: 'vm.[3]'

    CreateVif1VM4:
        <<: *CREATE_VIF1_VM1
        TestVM: 'vm.[4]'

    CreateVif1VM5:
        <<: *CREATE_VIF1_VM1
        TestVM: 'vm.[5]'

    CreateVif1VM6:
        <<: *CREATE_VIF1_VM1
        TestVM: 'vm.[6]'

    CreateVif1VM7:
        <<: *CREATE_VIF1_VM1
        TestVM: 'vm.[7]'

    CreateVif1VM8:
        <<: *CREATE_VIF1_VM1
        TestVM: 'vm.[8]'


    VIF_ATTACHMENT_01_KVM: &VIF_ATTACHMENT_01--KVM
        # In Transformers, logical port is not under logicalswitch.
        # This design is driven by Vmware API (vAPI) team
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalport:
            '[1]': &LPORT_VM1_VIF1_LS1--KVM
                switch_id: nsxmanager.[1].logicalswitch.[1]
                attachment: &LPORT_ATTACHMENT
                    attachment_type: 'VIF'
                    id_: vm.[1].vif.[1]->uuid
                admin_state: UP

    VIF_MULTI_ATTACHMENT_01_2_KVM: &VIF_MULTI_ATTACHMENT_01_2--KVM
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalport:
            '[102]': &LPORT_VM1_VIF2_LS1--KVM
                switch_id: nsxmanager.[1].logicalswitch.[1]
                attachment: &LPORT_ATTACHMENT_VIF2
                    attachment_type: 'VIF'
                    id_: vm.[1].vif.[2]->uuid
                admin_state: UP

    VIF_MULTI_ATTACHMENT_01_3_KVM: &VIF_MULTI_ATTACHMENT_01_3--KVM
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalport:
            '[103]': &LPORT_VM1_VIF3_LS1--KVM
                switch_id: nsxmanager.[1].logicalswitch.[1]
                attachment: &LPORT_ATTACHMENT_VIF3
                    attachment_type: 'VIF'
                    id_: vm.[1].vif.[3]->uuid
                admin_state: UP

    VIF_ATTACHMENT_01_ESX: &VIF_ATTACHMENT_01--ESX
        # There are 2 types of workflow for creating logical ports in MP
        # w.r.t ESX.
        # 1. Automatic logical port creation
        #    When a logical switch is created on MP, it would automatically
        #    create nsxnetwork (opaque network) on ESX using message bus,
        #    hostd. When vnic backing is changed to this nsxnetwork,
        #    hostd will make ipc call to nsx agent which will dial out
        #    to MP via message bus and create a logical port and
        #    do vif attachment automatically.
        # 2. Manually creating logical port
        #    When vnic is added, a special property called external_vif_id
        #    can be set (openstack does this too).
        #    When a logical switch is created on MP, nsxnetwork would be
        #    automatically created. A logical port can be created explicitly
        #    on MP using the same external_vif_id for vif.
        #    Now, when vnic on ESX is reconfigured to use nsxnetwork, MP would
        #    look up if there is already a port with external_vif_id.
        #    In this case, it would find one and skip another logical port
        #    creation.
        #
        Type: VM
        TestVM: 'vm.[1]'
        vnic:
            '[1]': &VNIC_1_LS1--ESX
                driver: "e1000"
                portgroup: "nsxmanager.[1].logicalswitch.[1]"
                connected: 1
                startconnected: 1

    #the following may use inheritance
    VIF_MULTI_ATTACHMENT_01_2_ESX: &VIF_MULTI_ATTACHMENT_01_2--ESX
        Type: VM
        TestVM: 'vm.[1]'
        vnic:
            '[2]': &VNIC_2_LS1--ESX
                driver: "e1000"
                portgroup: "nsxmanager.[1].logicalswitch.[1]"
                connected: 1
                startconnected: 1

    VIF_MULTI_ATTACHMENT_01_3_ESX: &VIF_MULTI_ATTACHMENT_01_3--ESX
        Type: VM
        TestVM: 'vm.[1]'
        vnic:
            '[3]': &VNIC_3_LS1--ESX
                driver: "e1000"
                portgroup: "nsxmanager.[1].logicalswitch.[1]"
                connected: 1
                startconnected: 1

    VIF_ATTACHMENT_02_KVM: &VIF_ATTACHMENT_02--KVM
        # In Transformers, logical port is not under logicalswitch.
        # This design is driven by Vmware API (vAPI) team
        #
        Type: NSX
        TestNSX: nsxmanager.[1]
        logicalport:
            '[2]': &LPORT_VM1_VIF1_LS2--KVM
                switch_id: nsxmanager.[1].logicalswitch.[2]
                attachment:
                    <<: *LPORT_ATTACHMENT
                admin_state: UP

    VIF_ATTACHMENT_02_ESX: &VIF_ATTACHMENT_02--ESX
        Type: VM
        TestVM: 'vm.[1]'
        vnic:
            '[1]':
                <<: *VNIC_1_LS1--ESX
                portgroup: "nsxmanager.[1].logicalswitch.[2]"

    DiscoverLogicalPortVM1Vnic1LSwitch1: &DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        noofretries: 10
        logicalport:
            '[1]': &DISCOVER_LOGICAL_PORT_VNIC1
                discover: 'true'
                attachment: &LOGICAL_PORT_ATTACHMENT
                   attachment_type : 'VIF'
                   id_: 'vm.[x=logicalport_index].vnic.[1]->uuid'

    Discover2Vteps:
        ESX: &DISCOVER_2_VTEPS--ESX
            Type: Host
            TestHost: 'esx.[1-2]'
            vtep:
                '[1]':
                    execution_type: 'cli'
                    discover: 'true'
                    name: 'vmk10'
        KVM: &DISCOVER_2_VTEPS--KVM
            Type: Host
            TestHost: 'kvm.[1-2]'
            vtep:
                '[1]':
                    execution_type: 'cli'
                    discover: 'true'
                    name: 'nsx-vtep0.0'

    DiscoverLogicalPortVM2Vnic1LSwitch1: &DISCOVER_LOGICAL_PORT_VM2_VNIC1_LSWITCH1
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[2]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[2].vnic.[1]->uuid'

    DiscoverLogicalPortVM1Vnic2LSwitch1: &DISCOVER_LOGICAL_PORT_VM1_VNIC2_LSWITCH1
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        noofretries: 10
        logicalport:
            '[102]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[1].vnic.[2]->uuid'

    DiscoverLogicalPortVM1Vnic3LSwitch1: &DISCOVER_LOGICAL_PORT_VM1_VNIC3_LSWITCH1
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[103]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[1].vnic.[3]->uuid'

    DiscoverLogicalPortVM3Vnic1LSwitch1: &DISCOVER_LOGICAL_PORT_VM3_VNIC1_LSWITCH1
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[3]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[3].vnic.[1]->uuid'

    DiscoverLogicalPortVM4Vnic1LSwitch1: &DISCOVER_LOGICAL_PORT_VM4_VNIC1_LSWITCH1
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[4]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[4].vnic.[1]->uuid'

    DiscoverLogicalPortVM5Vnic1LSwitch1: &DISCOVER_LOGICAL_PORT_VM5_VNIC1_LSWITCH1
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[5]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[5].vnic.[1]->uuid'

    DiscoverLogicalPortVM6Vnic1LSwitch1: &DISCOVER_LOGICAL_PORT_VM6_VNIC1_LSWITCH1
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[6]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[6].vnic.[1]->uuid'

    DiscoverLogicalPortVM7Vnic1LSwitch1: &DISCOVER_LOGICAL_PORT_VM7_VNIC1_LSWITCH1
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[7]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[7].vnic.[1]->uuid'

    DiscoverLogicalPortVM8Vnic1LSwitch1: &DISCOVER_LOGICAL_PORT_VM8_VNIC1_LSWITCH1
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[8]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[8].vnic.[1]->uuid'

    DiscoverLogicalPortVM1Vnic1LSwitch2: &DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH2
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[9]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[1].vnic.[1]->uuid'

    DiscoverLogicalPortVM2Vnic1LSwitch2: &DISCOVER_LOGICAL_PORT_VM2_VNIC1_LSWITCH2
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[10]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[2].vnic.[1]->uuid'

    DiscoverLogicalPortVM3Vnic1LSwitch2: &DISCOVER_LOGICAL_PORT_VM3_VNIC1_LSWITCH2
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[11]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[3].vnic.[1]->uuid'

    DiscoverLogicalPortVM4Vnic1LSwitch2: &DISCOVER_LOGICAL_PORT_VM4_VNIC1_LSWITCH2
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[12]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[4].vnic.[1]->uuid'

    DiscoverLogicalPortVM5Vnic1LSwitch2: &DISCOVER_LOGICAL_PORT_VM5_VNIC1_LSWITCH2
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[13]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[5].vnic.[1]->uuid'

    DiscoverLogicalPortVM6Vnic1LSwitch2: &DISCOVER_LOGICAL_PORT_VM6_VNIC1_LSWITCH2
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[14]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[6].vnic.[1]->uuid'

    DiscoverLogicalPortVM7Vnic1LSwitch2: &DISCOVER_LOGICAL_PORT_VM7_VNIC1_LSWITCH2
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[15]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[7].vnic.[1]->uuid'

    DiscoverLogicalPortVM8Vnic1LSwitch2: &DISCOVER_LOGICAL_PORT_VM8_VNIC1_LSWITCH2
        <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
        logicalport:
            '[16]':
                <<: *DISCOVER_LOGICAL_PORT_VNIC1
                attachment:
                    <<: *LOGICAL_PORT_ATTACHMENT
                    id_: 'vm.[8].vnic.[1]->uuid'

    AttachVM1toSwitch1_ESX:
        <<: *VIF_ATTACHMENT_01--ESX
        TestVM: 'vm.[1]'

    AttachVM1_Nic2_toSwitch1_ESX:
        <<: *VIF_MULTI_ATTACHMENT_01_2--ESX
        TestVM: 'vm.[1]'

    AttachVM1_Nic3_toSwitch1_ESX:
        <<: *VIF_MULTI_ATTACHMENT_01_3--ESX
        TestVM: 'vm.[1]'

    AttachVM2toSwitch1_ESX:
        <<: *VIF_ATTACHMENT_01--ESX
        TestVM: 'vm.[2]'

    AttachVM3toSwitch1_ESX:
        <<: *VIF_ATTACHMENT_01--ESX
        TestVM: 'vm.[3]'

    AttachVM4toSwitch1_ESX:
        <<: *VIF_ATTACHMENT_01--ESX
        TestVM: 'vm.[4]'

    AttachVM5toSwitch1_ESX:
        <<: *VIF_ATTACHMENT_01--ESX
        TestVM: 'vm.[5]'

    AttachVM6toSwitch1_ESX:
        <<: *VIF_ATTACHMENT_01--ESX
        TestVM: 'vm.[6]'

    AttachVM7toSwitch1_ESX:
        <<: *VIF_ATTACHMENT_01--ESX
        TestVM: 'vm.[7]'

    AttachVM8toSwitch1_ESX:
        <<: *VIF_ATTACHMENT_01--ESX
        TestVM: 'vm.[8]'

    AttachVM1toSwitch2_ESX:
        <<: *VIF_ATTACHMENT_02--ESX
        TestVM: 'vm.[1]'

    AttachVM2toSwitch2_ESX:
        <<: *VIF_ATTACHMENT_02--ESX
        TestVM: 'vm.[2]'

    AttachVM3toSwitch2_ESX:
        <<: *VIF_ATTACHMENT_02--ESX
        TestVM: 'vm.[3]'

    AttachVM4toSwitch2_ESX:
        <<: *VIF_ATTACHMENT_02--ESX
        TestVM: 'vm.[4]'

    AttachVM5toSwitch2_ESX:
        <<: *VIF_ATTACHMENT_02--ESX
        TestVM: 'vm.[5]'

    AttachVM6toSwitch2_ESX:
        <<: *VIF_ATTACHMENT_02--ESX
        TestVM: 'vm.[6]'

    AttachVM7toSwitch2_ESX:
        <<: *VIF_ATTACHMENT_02--ESX
        TestVM: 'vm.[7]'

    AttachVM8toSwitch2_ESX:
        <<: *VIF_ATTACHMENT_02--ESX
        TestVM: 'vm.[8]'

    AttachVM1toSwitch1_KVM: &ATTACH_VM1_TO_SWITCH1_KVM
        <<: *VIF_ATTACHMENT_01--KVM
        logicalport:
            '[1]':
                <<: *LPORT_VM1_VIF1_LS1--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[1].vif.[1]->uuid

    AttachVM1_Vif2_toSwitch1_KVM:
        <<: *VIF_MULTI_ATTACHMENT_01_2--KVM
        logicalport:
            '[102]':
                <<: *LPORT_VM1_VIF2_LS1--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT_VIF2
                    id_: vm.[1].vif.[2]->uuid

    AttachVM1_Vif3_toSwitch1_KVM:
        <<: *VIF_MULTI_ATTACHMENT_01_3--KVM
        logicalport:
            '[103]':
                <<: *LPORT_VM1_VIF3_LS1--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT_VIF2
                    id_: vm.[1].vif.[3]->uuid

    AttachVM2toSwitch1_KVM:
        <<: *VIF_ATTACHMENT_01--KVM
        logicalport:
            '[2]':
                <<: *LPORT_VM1_VIF1_LS1--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[2].vif.[1]->uuid

    AttachVM3toSwitch1_KVM:
        <<: *VIF_ATTACHMENT_01--KVM
        logicalport:
            '[3]':
                <<: *LPORT_VM1_VIF1_LS1--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[3].vif.[1]->uuid

    AttachVM4toSwitch1_KVM:
        <<: *VIF_ATTACHMENT_01--KVM
        logicalport:
            '[4]':
                <<: *LPORT_VM1_VIF1_LS1--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[4].vif.[1]->uuid

    AttachVM5toSwitch1_KVM:
        <<: *VIF_ATTACHMENT_01--KVM
        logicalport:
            '[5]':
                <<: *LPORT_VM1_VIF1_LS1--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[5].vif.[1]->uuid

    AttachVM6toSwitch1_KVM:
        <<: *VIF_ATTACHMENT_01--KVM
        logicalport:
            '[6]':
                <<: *LPORT_VM1_VIF1_LS1--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[6].vif.[1]->uuid

    AttachVM7toSwitch1_KVM:
        <<: *VIF_ATTACHMENT_01--KVM
        logicalport:
            '[7]':
                <<: *LPORT_VM1_VIF1_LS1--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[7].vif.[1]->uuid

    ConfigureVnicIP:
        ESX: &CONFIGURE_4VMS_IP--ESX
            Type: NetAdapter
            TestAdapter: 'vm.[1-4].vnic.[1]'
            IPv4: auto
        KVM: &CONFIGURE_4VMS_IP--KVM
            Type: NetAdapter
            TestAdapter: 'vm.[1-4].vif.[1]'
            IPv4: auto

    AttachVM8toSwitch1_KVM:
        <<: *VIF_ATTACHMENT_01--KVM
        logicalport:
            '[8]':
                <<: *LPORT_VM1_VIF1_LS1--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[8].vif.[1]->uuid

    AttachVM1toSwitch2_KVM:
        <<: *VIF_ATTACHMENT_02--KVM
        logicalport:
            '[9]':
                <<: *LPORT_VM1_VIF1_LS2--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[1].vif.[1]->uuid

    AttachVM2toSwitch2_KVM:
        <<: *VIF_ATTACHMENT_02--KVM
        logicalport:
            '[10]':
                <<: *LPORT_VM1_VIF1_LS2--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[2].vif.[1]->uuid

    AttachVM3toSwitch2_KVM:
        <<: *VIF_ATTACHMENT_02--KVM
        logicalport:
            '[11]':
                <<: *LPORT_VM1_VIF1_LS2--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[3].vif.[1]->uuid

    AttachVM4toSwitch2_KVM:
        <<: *VIF_ATTACHMENT_02--KVM
        logicalport:
            '[12]':
                <<: *LPORT_VM1_VIF1_LS2--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[4].vif.[1]->uuid

    AttachVM5toSwitch2_KVM:
        <<: *VIF_ATTACHMENT_02--KVM
        logicalport:
            '[13]':
                <<: *LPORT_VM1_VIF1_LS2--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[5].vif.[1]->uuid

    AttachVM6toSwitch2_KVM:
        <<: *VIF_ATTACHMENT_02--KVM
        logicalport:
            '[14]':
                <<: *LPORT_VM1_VIF1_LS2--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[6].vif.[1]->uuid

    AttachVM7toSwitch2_KVM:
        <<: *VIF_ATTACHMENT_02--KVM
        logicalport:
            '[15]':
                <<: *LPORT_VM1_VIF1_LS2--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[7].vif.[1]->uuid

    AttachVM8toSwitch2_KVM:
        <<: *VIF_ATTACHMENT_02--KVM
        logicalport:
            '[16]':
                <<: *LPORT_VM1_VIF1_LS2--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: vm.[8].vif.[1]->uuid


    PlugVM1Vnic1ToLSwitch2_ESX: &PLUG_VM1_VNIC1_TO_LSWITCH2_ESX
        Type: NetAdapter
        TestAdapter: 'vm.[1].vnic.[1]'
        portgroup: "nsxmanager.[1].logicalswitch.[2]"
        reconfigure: "true"
        connected: 1
        startconnected: 1

    PlugVM3Vnic1ToLSwitch2_ESX:
        <<: *PLUG_VM1_VNIC1_TO_LSWITCH2_ESX
        TestAdapter: 'vm.[3].vnic.[1]'

    PlugVM6Vnic1ToLSwitch1_ESX:
        <<: *PLUG_VM1_VNIC1_TO_LSWITCH2_ESX
        TestAdapter: 'vm.[6].vnic.[1]'
        portgroup: "nsxmanager.[1].logicalswitch.[1]"

    PlugVM7Vnic1ToLSwitch2_ESX:
        <<: *PLUG_VM1_VNIC1_TO_LSWITCH2_ESX
        TestAdapter: 'vm.[7].vnic.[1]'

    PlugVM7Vnic1ToLSwitch1_ESX:
        <<: *PLUG_VM1_VNIC1_TO_LSWITCH2_ESX
        TestAdapter: 'vm.[7].vnic.[1]'
        portgroup: "nsxmanager.[1].logicalswitch.[1]"

    PlugVM8Vnic1ToLSwitch1_ESX:
        <<: *PLUG_VM1_VNIC1_TO_LSWITCH2_ESX
        TestAdapter: 'vm.[8].vnic.[1]'
        portgroup: "nsxmanager.[1].logicalswitch.[1]"

    PlugVM1Vnic1ToLSwitch2:
        ESX: &PLUG_VM1_VNIC1_TO_LSWITCH2--ESX
            - ['PlugVM1Vnic1ToLSwitch2_ESX']
            - ['DiscoverLogicalPortVM1Vnic1LSwitch2']
        KVM: &PLUG_VM1_VNIC1_TO_LSWITCH2--KVM
            - ['AttachVM1toSwitch2_KVM']

    PlugVM3Vnic1ToLSwitch2:
        ESX: &PLUG_VM3_VNIC1_TO_LSWITCH2--ESX
            - ['PlugVM3Vnic1ToLSwitch2_ESX']
            - ['DiscoverLogicalPortVM3Vnic1LSwitch2']
        KVM: &PLUG_VM3_VNIC1_TO_LSWITCH2--KVM
            - ['AttachVM3toSwitch2_KVM']

    PlugVM6Vnic1ToLSwitch1:
        ESX: &PLUG_VM6_VNIC1_TO_LSWITCH1--ESX
            - ['PlugVM6Vnic1ToLSwitch1_ESX']
            - ['DiscoverLogicalPortVM6Vnic1LSwitch1']
        KVM: &PLUG_VM6_VNIC1_TO_LSWITCH1--KVM
            - ['AttachVM6toSwitch1_KVM']

    PlugVM7Vnic1ToLSwitch2:
        ESX: &PLUG_VM7_VNIC1_TO_LSWITCH2--ESX
            - ['PlugVM7Vnic1ToLSwitch2_ESX']
            - ['DiscoverLogicalPortVM7Vnic1LSwitch2']
        KVM: &PLUG_VM7_VNIC1_TO_LSWITCH2--KVM
            - ['AttachVM7toSwitch2_KVM']

    PlugVM7Vnic1ToLSwitch1:
        ESX: &PLUG_VM7_VNIC1_TO_LSWITCH1--ESX
            - ['PlugVM7Vnic1ToLSwitch1_ESX']
            - ['DiscoverLogicalPortVM7Vnic1LSwitch1']
        KVM: &PLUG_VM7_VNIC1_TO_LSWITCH1--KVM
            - ['AttachVM7toSwitch1_KVM']

    PlugVM8Vnic1ToLSwitch1:
        ESX: &PLUG_VM8_VNIC1_TO_LSWITCH1--ESX
            - ['PlugVM8Vnic1ToLSwitch1_ESX']
            - ['DiscoverLogicalPortVM8Vnic1LSwitch1']
        KVM: &PLUG_VM8_VNIC1_TO_LSWITCH1--KVM
            - ['AttachVM8toSwitch1_KVM']

    AttachVM1toSwitch1:
        ESX: &ATTACH_VM1_TO_SWITCH_1--ESX
            - ['AttachVM1toSwitch1_ESX']
            - ['DiscoverLogicalPortVM1Vnic1LSwitch1']
        KVM: &ATTACH_VM1_TO_SWITCH_1--KVM
            - ['CreateVif1VM1']
            - ['AttachVM1toSwitch1_KVM']

    AttachVM1_2toSwitch1:
        ESX: &ATTACH_VM1_NIC2_TO_SWITCH_1--ESX
            - ['AttachVM1_Nic2_toSwitch1_ESX']
            - ['DiscoverLogicalPortVM1Vnic2LSwitch1']
        KVM: &ATTACH_VM1_NIC2_TO_SWITCH_1--KVM
            - ['CreateVif2VM1']
            - ['AttachVM1_Vif2_toSwitch1_KVM']

    AttachVM1_3toSwitch1:
        ESX: &ATTACH_VM1_NIC3_TO_SWITCH_1--ESX
            - ['AttachVM1_Nic3_toSwitch1_ESX']
            - ['DiscoverLogicalPortVM1Vnic3LSwitch1']
        KVM: &ATTACH_VM1_NIC3_TO_SWITCH_1--KVM
            - ['CreateVif3VM1']
            - ['AttachVM1_Vif3_toSwitch1_KVM']

    AttachVM2toSwitch1:
        ESX: &ATTACH_VM2_TO_SWITCH_1--ESX
            - ['AttachVM2toSwitch1_ESX']
            - ['DiscoverLogicalPortVM2Vnic1LSwitch1']
        KVM: &ATTACH_VM2_TO_SWITCH_1--KVM
            - ['CreateVif1VM2']
            - ['AttachVM2toSwitch1_KVM']

    AttachVM3toSwitch1:
        ESX: &ATTACH_VM3_TO_SWITCH_1--ESX
            - ['AttachVM3toSwitch1_ESX']
            - ['DiscoverLogicalPortVM3Vnic1LSwitch1']
        KVM: &ATTACH_VM3_TO_SWITCH_1--KVM
            - ['CreateVif1VM3']
            - ['AttachVM3toSwitch1_KVM']

    AttachVM4toSwitch1:
        ESX: &ATTACH_VM4_TO_SWITCH_1--ESX
            - ['AttachVM4toSwitch1_ESX']
            - ['DiscoverLogicalPortVM4Vnic1LSwitch1']
        KVM: &ATTACH_VM4_TO_SWITCH_1--KVM
            - ['CreateVif1VM4']
            - ['AttachVM4toSwitch1_KVM']

    AttachVM5toSwitch1:
        ESX: &ATTACH_VM5_TO_SWITCH_1--ESX
            - ['AttachVM5toSwitch1_ESX']
            - ['DiscoverLogicalPortVM5Vnic1LSwitch1']
        KVM: &ATTACH_VM5_TO_SWITCH_1--KVM
            - ['CreateVif1VM5']
            - ['AttachVM5toSwitch1_KVM']

    AttachVM6toSwitch1:
        ESX: &ATTACH_VM6_TO_SWITCH_1--ESX
            - ['AttachVM6toSwitch1_ESX']
            - ['DiscoverLogicalPortVM6Vnic1LSwitch1']
        KVM: &ATTACH_VM6_TO_SWITCH_1--KVM
            - ['CreateVif1VM6']
            - ['AttachVM6toSwitch1_KVM']

    AttachVM7toSwitch1:
        ESX: &ATTACH_VM7_TO_SWITCH_1--ESX
            - ['AttachVM7toSwitch1_ESX']
            - ['DiscoverLogicalPortVM7Vnic1LSwitch1']
        KVM: &ATTACH_VM7_TO_SWITCH_1--KVM
            - ['CreateVif1VM7']
            - ['AttachVM7toSwitch1_KVM']

    AttachVM8toSwitch1:
        ESX: &ATTACH_VM8_TO_SWITCH_1--ESX
            - ['AttachVM8toSwitch1_ESX']
            - ['DiscoverLogicalPortVM8Vnic1LSwitch1']
        KVM: &ATTACH_VM8_TO_SWITCH_1--KVM
            - ['CreateVif1VM8']
            - ['AttachVM8toSwitch1_KVM']

    AttachVM1toSwitch2:
        ESX: &ATTACH_VM1_TO_SWITCH_2--ESX
            - ['AttachVM1toSwitch2_ESX']
            - ['DiscoverLogicalPortVM1Vnic1LSwitch2']
        KVM: &ATTACH_VM1_TO_SWITCH_2--KVM
            - ['CreateVif1VM1']
            - ['AttachVM1toSwitch2_KVM']

    AttachVM2toSwitch2:
        ESX: &ATTACH_VM2_TO_SWITCH_2--ESX
            - ['AttachVM2toSwitch2_ESX']
            - ['DiscoverLogicalPortVM2Vnic1LSwitch2']
        KVM: &ATTACH_VM2_TO_SWITCH_2--KVM
            - ['CreateVif1VM2']
            - ['AttachVM2toSwitch2_KVM']

    AttachVM3toSwitch2:
        ESX: &ATTACH_VM3_TO_SWITCH_2--ESX
            - ['AttachVM3toSwitch2_ESX']
            - ['DiscoverLogicalPortVM3Vnic1LSwitch2']
        KVM: &ATTACH_VM3_TO_SWITCH_2--KVM
            - ['CreateVif1VM3']
            - ['AttachVM3toSwitch2_KVM']

    AttachVM4toSwitch2:
        ESX: &ATTACH_VM4_TO_SWITCH_2--ESX
            - ['AttachVM4toSwitch2_ESX']
            - ['DiscoverLogicalPortVM4Vnic1LSwitch2']
        KVM: &ATTACH_VM4_TO_SWITCH_2--KVM
            - ['CreateVif1VM4']
            - ['AttachVM4toSwitch2_KVM']

    AttachVM5toSwitch2:
        ESX: &ATTACH_VM5_TO_SWITCH_2--ESX
            - ['AttachVM5toSwitch2_ESX']
            - ['DiscoverLogicalPortVM5Vnic1LSwitch2']
        KVM: &ATTACH_VM5_TO_SWITCH_2--KVM
            - ['CreateVif1VM5']
            - ['AttachVM5toSwitch2_KVM']

    AttachVM6toSwitch2:
        ESX: &ATTACH_VM6_TO_SWITCH_2--ESX
            - ['AttachVM6toSwitch2_ESX']
            - ['DiscoverLogicalPortVM6Vnic1LSwitch2']
        KVM: &ATTACH_VM6_TO_SWITCH_2--KVM
            - ['CreateVif1VM6']
            - ['AttachVM6toSwitch2_KVM']

    AttachVM7toSwitch2:
        ESX: &ATTACH_VM7_TO_SWITCH_2--ESX
            - ['AttachVM7toSwitch2_ESX']
            - ['DiscoverLogicalPortVM7Vnic1LSwitch2']
        KVM: &ATTACH_VM7_TO_SWITCH_2--KVM
            - ['CreateVif1VM7']
            - ['AttachVM7toSwitch2_KVM']

    AttachVM8toSwitch2:
        ESX: &ATTACH_VM8_TO_SWITCH_2--ESX
            - ['AttachVM8toSwitch2_ESX']
            - ['DiscoverLogicalPortVM8Vnic1LSwitch2']
        KVM: &ATTACH_VM8_TO_SWITCH_2--KVM
            - ['CreateVif1VM8']
            - ['AttachVM8toSwitch2_KVM']

    ConfigureVnicIP:
        ESX: &CONFIGURE_8VMS_IP--ESX
            Type: NetAdapter
            TestAdapter: 'vm.[1-8].vnic.[1]'
            IPv4: auto
        KVM: &CONFIGURE_8VMS_IP--KVM
            Type: NetAdapter
            TestAdapter: 'vm.[1-8].vif.[1]'
            IPv4: auto

    ConfigureVnicIP:
        ESX: &CONFIGURE_LS1_4VMS_IP--ESX
            Type: NetAdapter
            TestAdapter: 'vm.[1].vnic.[1],vm.[3].vnic.[1],vm.[5].vnic.[1],vm.[7].vnic.[1]'
            IPv4: auto
        KVM: &CONFIGURE_LS1_4VMS_IP--KVM
            Type: NetAdapter
            TestAdapter: 'vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1],vm.[7].vif.[1]'
            IPv4: auto

    ConfigureVnicIP:
        ESX: &CONFIGURE_LS2_4VMS_IP--ESX
            Type: NetAdapter
            TestAdapter: 'vm.[2].vnic.[1],vm.[4].vnic.[1],vm.[6].vnic.[1],vm.[8].vnic.[1]'
            IPv4: auto
        KVM: &CONFIGURE_LS2_4VMS_IP--KVM
            Type: NetAdapter
            TestAdapter: 'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1],vm.[8].vif.[1]'
            IPv4: auto

    DeleteVM1Vnic1InExitSeq_ESX: &DELETE_VM1_VNIC1_IN_EXIT_SEQ_ESX
        Type: VM
        TestVM: vm.[1]
        deletevnic: vm.[1].vnic.[1]
        expectedResult: ignore

    DeleteVM1Vnic2InExitSeq_ESX: &DELETE_VM1_VNIC2_IN_EXIT_SEQ_ESX
        Type: VM
        TestVM: vm.[1]
        deletevnic: vm.[1].vnic.[2]

    DeleteVM1Vnic3InExitSeq_ESX: &DELETE_VM1_VNIC3_IN_EXIT_SEQ_ESX
        Type: VM
        TestVM: vm.[1]
        deletevnic: vm.[1].vnic.[3]

    DeleteVM1Vnic1WithoutPost_ESX: &DELETE_VM1_VNIC1_WITHOUT_POST_ESX
        Type: VM
        TestVM: vm.[1]
        deletevnic: vm.[1].vnic.[1]
        skipPostProcess: 1

    DeleteVM2Vnic1InExitSeq_ESX: &DELETE_VM2_VNIC1_IN_EXIT_SEQ_ESX
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_ESX
        TestVM: vm.[2]
        deletevnic: vm.[2].vnic.[1]

    DeleteVM2Vnic1WithoutPost_ESX: &DELETE_VM2_VNIC1_WITHOUT_POST_ESX
        <<: *DELETE_VM2_VNIC1_IN_EXIT_SEQ_ESX
        skipPostProcess: 1

    DeleteVM3Vnic1InExitSeq_ESX: &DELETE_VM3_VNIC1_IN_EXIT_SEQ_ESX
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_ESX
        TestVM: vm.[3]
        deletevnic: vm.[3].vnic.[1]

    DeleteVM4Vnic1InExitSeq_ESX: &DELETE_VM4_VNIC1_IN_EXIT_SEQ_ESX
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_ESX
        TestVM: vm.[4]
        deletevnic: vm.[4].vnic.[1]

    DeleteVM4Vnic1WithoutPost_ESX: &DELETE_VM4_VNIC1_WITHOUT_POST_ESX
        <<: *DELETE_VM4_VNIC1_IN_EXIT_SEQ_ESX
        skipPostProcess: 1

    DeleteVM5Vnic1InExitSeq_ESX: &DELETE_VM5_VNIC1_IN_EXIT_SEQ_ESX
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_ESX
        TestVM: vm.[5]
        deletevnic: vm.[5].vnic.[1]

    DeleteVM6Vnic1InExitSeq_ESX: &DELETE_VM6_VNIC1_IN_EXIT_SEQ_ESX
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_ESX
        TestVM: vm.[6]
        deletevnic: vm.[6].vnic.[1]

    DeleteVM6Vnic1WithoutPost_ESX: &DELETE_VM6_VNIC1_WITHOUT_POST_ESX
        <<: *DELETE_VM6_VNIC1_IN_EXIT_SEQ_ESX
        skipPostProcess: 1

    DeleteVM7Vnic1InExitSeq_ESX: &DELETE_VM7_VNIC1_IN_EXIT_SEQ_ESX
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_ESX
        TestVM: vm.[7]
        deletevnic: vm.[7].vnic.[1]

    DeleteVM7Vnic1InExitSeqIgnore_ESX: &DELETE_VM7_VNIC1_IN_EXIT_SEQ_IGNORE_ESX
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_ESX
        TestVM: vm.[7]
        deletevnic: vm.[7].vnic.[1]
        expectedresult: ignore

    DeleteVM8Vnic1InExitSeq_ESX: &DELETE_VM8_VNIC1_IN_EXIT_SEQ_ESX
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_ESX
        TestVM: vm.[8]
        deletevnic: vm.[8].vnic.[1]

    DeleteVM8Vnic1WithoutPost_ESX: &DELETE_VM8_VNIC1_WITHOUT_POST_ESX
        <<: *DELETE_VM8_VNIC1_IN_EXIT_SEQ_ESX
        skipPostProcess: 1

    DeleteVM1Vnic1InExitSeq_KVM: &DELETE_VM1_VNIC1_IN_EXIT_SEQ_KVM
        Type: VM
        TestVM: vm.[1]
        deletevif: vm.[1].vif.[1]

    DeleteVM1Vnic2InExitSeq_KVM: &DELETE_VM1_VNIC2_IN_EXIT_SEQ_KVM
        Type: VM
        TestVM: vm.[1]
        deletevif: vm.[1].vif.[2]

    DeleteVM1Vnic3InExitSeq_KVM: &DELETE_VM1_VNIC3_IN_EXIT_SEQ_KVM
        Type: VM
        TestVM: vm.[1]
        deletevif: vm.[1].vif.[3]

    DeleteVM1Vnic1WithoutPost_KVM: &DELETE_VM1_VNIC1_WITHOUT_POST_KVM
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_KVM
        skipPostProcess: 1

    DeleteVM2Vnic1InExitSeq_KVM: &DELETE_VM2_VNIC1_IN_EXIT_SEQ_KVM
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_KVM
        deletevif: vm.[2].vif.[1]

    DeleteVM2Vnic1WithoutPost_KVM: &DELETE_VM2_VNIC1_WITHOUT_POST_KVM
        <<: *DELETE_VM2_VNIC1_IN_EXIT_SEQ_KVM
        skipPostProcess: 1

    DeleteVM3Vnic1InExitSeq_KVM: &DELETE_VM3_VNIC1_IN_EXIT_SEQ_KVM
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_KVM
        deletevif: vm.[3].vif.[1]

    DeleteVM4Vnic1InExitSeq_KVM: &DELETE_VM4_VNIC1_IN_EXIT_SEQ_KVM
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_KVM
        deletevif: vm.[4].vif.[1]

    DeleteVM4Vnic1WithoutPost_KVM: &DELETE_VM4_VNIC1_WITHOUT_POST_KVM
        <<: *DELETE_VM4_VNIC1_IN_EXIT_SEQ_KVM
        skipPostProcess: 1

    DeleteVM5Vnic1InExitSeq_KVM: &DELETE_VM5_VNIC1_IN_EXIT_SEQ_KVM
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_KVM
        deletevif: vm.[5].vif.[1]

    DeleteVM6Vnic1InExitSeq_KVM: &DELETE_VM6_VNIC1_IN_EXIT_SEQ_KVM
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_KVM
        deletevif: vm.[6].vif.[1]

    DeleteVM6Vnic1WithoutPost_KVM: &DELETE_VM6_VNIC1_WITHOUT_POST_KVM
        <<: *DELETE_VM6_VNIC1_IN_EXIT_SEQ_KVM
        skipPostProcess: 1

    DeleteVM7Vnic1InExitSeq_KVM: &DELETE_VM7_VNIC1_IN_EXIT_SEQ_KVM
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_KVM
        deletevif: vm.[7].vif.[1]

    DeleteVM7Vnic1InExitSeqIgnore_KVM: &DELETE_VM7_VNIC1_IN_EXIT_SEQ_IGNORE_KVM
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_KVM
        deletevif: vm.[7].vif.[1]
        expectedresult: ignore

    DeleteVM8Vnic1InExitSeq_KVM: &DELETE_VM8_VNIC1_IN_EXIT_SEQ_KVM
        <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_KVM
        deletevif: vm.[8].vif.[1]

    DeleteVM8Vnic1WithoutPost_KVM: &DELETE_VM8_VNIC1_WITHOUT_POST_KVM
        <<: *DELETE_VM8_VNIC1_IN_EXIT_SEQ_KVM
        skipPostProcess: 1

    DeleteLogicalPort: &DELETE_LOGICAL_PORT
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        deletelogicalport: 'nsxmanager.[1].logicalport.[-1]'
        query_params:
            detach: "true"

    DeleteLogicalPort1: &DELETE_LOGICAL_PORT1
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[1]'

    DeleteLogicalPort2:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[2]'

    DeleteLogicalPort3:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[3]'

    DeleteLogicalPort4:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[4]'

    DeleteLogicalPort5:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[5]'

    DeleteLogicalPort6:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[6]'

    DeleteLogicalPort7:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[7]'

    DeleteLogicalPort7Ignore:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[7]'
        expectedresult: ignore

    DeleteLogicalPort8:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[8]'

    DeleteLogicalPort9:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[9]'

    DeleteLogicalPort10:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[10]'

    DeleteLogicalPort11:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[11]'

    DeleteLogicalPort12:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[12]'

    DeleteLogicalPort13:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[13]'

    DeleteLogicalPort14:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[14]'

    DeleteLogicalPort15:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[15]'

    DeleteLogicalPort16:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[16]'

    DeleteLogicalPort102:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[102]'

    DeleteLogicalPort103:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[103]'

    UnplugVM1Vnic1FromLSwitch: &UNPLUG_VM1_VNIC1_FROM_LSWITCH
        Type: NetAdapter
        TestAdapter: 'vm.[1].vnic.[1]'
        reconfigure: "true"
        connected: 0
        startconnected: 0

    UnplugVM2Vnic1FromLSwitch: &UNPLUG_VM2_VNIC1_FROM_LSWITCH
        <<: *UNPLUG_VM1_VNIC1_FROM_LSWITCH
        TestAdapter: 'vm.[2].vnic.[1]'

    UnplugVM3Vnic1FromLSwitch: &UNPLUG_VM3_VNIC1_FROM_LSWITCH
        <<: *UNPLUG_VM1_VNIC1_FROM_LSWITCH
        TestAdapter: 'vm.[3].vnic.[1]'

    UnplugVM4Vnic1FromLSwitch: &UNPLUG_VM4_VNIC1_FROM_LSWITCH
        <<: *UNPLUG_VM1_VNIC1_FROM_LSWITCH
        TestAdapter: 'vm.[4].vnic.[1]'

    UnplugVM5Vnic1FromLSwitch: &UNPLUG_VM5_VNIC1_FROM_LSWITCH
        <<: *UNPLUG_VM5_VNIC1_FROM_LSWITCH
        TestAdapter: 'vm.[5].vnic.[1]'

    UnplugVM6Vnic1FromLSwitch: &UNPLUG_VM6_VNIC1_FROM_LSWITCH
        <<: *UNPLUG_VM1_VNIC1_FROM_LSWITCH
        TestAdapter: 'vm.[6].vnic.[1]'

    UnplugVM7Vnic1FromLSwitch: &UNPLUG_VM7_VNIC1_FROM_LSWITCH
        <<: *UNPLUG_VM1_VNIC1_FROM_LSWITCH
        TestAdapter: 'vm.[7].vnic.[1]'

    UnplugVM8Vnic1FromLSwitch: &UNPLUG_VM8_VNIC1_FROM_LSWITCH
        <<: *UNPLUG_VM1_VNIC1_FROM_LSWITCH
        TestAdapter: 'vm.[8].vnic.[1]'

    UnplugVM1Vnic1FromLSwitch1:
        ESX: &UNPLUG_VM1_VNIC1_FROM_LSWITCH1--ESX
            - ['UnplugVM1Vnic1FromLSwitch']
        KVM: &UNPLUG_VM1_VNIC1_FROM_LSWITCH1--KVM
            - ['DeleteLogicalPort1']

    UnplugVM3Vnic1FromLSwitch1:
        ESX: &UNPLUG_VM3_VNIC1_FROM_LSWITCH1--ESX
            - ['UnplugVM3Vnic1FromLSwitch']
        KVM: &UNPLUG_VM3_VNIC1_FROM_LSWITCH1--KVM
            - ['DeleteLogicalPort3']

    UnplugVM6Vnic1FromLSwitch2:
        ESX: &UNPLUG_VM6_VNIC1_FROM_LSWITCH2--ESX
            - ['UnplugVM6Vnic1FromLSwitch']
        KVM: &UNPLUG_VM6_VNIC1_FROM_LSWITCH2--KVM
            - ['DeleteLogicalPort14']

    UnplugVM7Vnic1FromLSwitch1:
        ESX: &UNPLUG_VM7_VNIC1_FROM_LSWITCH1--ESX
            - ['UnplugVM7Vnic1FromLSwitch']
        KVM: &UNPLUG_VM7_VNIC1_FROM_LSWITCH1--KVM
            - ['DeleteLogicalPort7']

    UnplugVM7Vnic1FromLSwitch2:
        ESX: &UNPLUG_VM7_VNIC1_FROM_LSWITCH2--ESX
            - ['UnplugVM7Vnic1FromLSwitch']
        KVM: &UNPLUG_VM7_VNIC1_FROM_LSWITCH2--KVM
            - ['DeleteLogicalPort15']

    UnplugVM8Vnic1FromLSwitch2:
        ESX: &UNPLUG_VM8_VNIC1_FROM_LSWITCH2--ESX
            - ['UnplugVM8Vnic1FromLSwitch']
        KVM: &UNPLUG_VM8_VNIC1_FROM_LSWITCH2--KVM
            - ['DeleteLogicalPort16']

    DeleteVM1Vnic1:
        ESX: &DELETE_VM1_VNIC1--ESX
            - ['DeleteVM1Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM1_VNIC1--KVM
            - ['DeleteVM1Vnic1InExitSeq_KVM']

    DeleteVM2Vnic1:
        ESX: &DELETE_VM2_VNIC1--ESX
            - ['DeleteVM2Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM2_VNIC1--KVM
            - ['DeleteVM2Vnic1InExitSeq_KVM']

    DeleteVM3Vnic1:
        ESX: &DELETE_VM3_VNIC1--ESX
            - ['DeleteVM3Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM3_VNIC1--KVM
            - ['DeleteVM3Vnic1InExitSeq_KVM']

    DeleteVM4Vnic1:
        ESX: &DELETE_VM4_VNIC1--ESX
            - ['DeleteVM4Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM4_VNIC1--KVM
            - ['DeleteVM4Vnic1InExitSeq_KVM']

    DeleteVM5Vnic1:
        ESX: &DELETE_VM5_VNIC1--ESX
            - ['DeleteVM5Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM5_VNIC1--KVM
            - ['DeleteVM5Vnic1InExitSeq_KVM']

    DeleteVM6Vnic1:
        ESX: &DELETE_VM6_VNIC1--ESX
            - ['DeleteVM6Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM6_VNIC1--KVM
            - ['DeleteVM6Vnic1InExitSeq_KVM']

    DeleteVM7Vnic1:
        ESX: &DELETE_VM7_VNIC1--ESX
            - ['DeleteVM7Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM7_VNIC1--KVM
            - ['DeleteVM7Vnic1InExitSeq_KVM']

    DeleteVM8Vnic1:
        ESX: &DELETE_VM8_VNIC1--ESX
            - ['DeleteVM8Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM8_VNIC1--KVM
            - ['DeleteVM8Vnic1InExitSeq_KVM']

    DeleteVM1Vnic1FromLSwitch1:
        ESX: &DELETE_VM1_VNIC1_LSWITCH1--ESX
            - ['DeleteVM1Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM1_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort1']
            - ['DeleteVM1Vnic1InExitSeq_KVM']

    DeleteVM1Vnic2FromLSwitch1:
        ESX: &DELETE_VM1_VNIC2_LSWITCH1--ESX
            - ['DeleteVM1Vnic2InExitSeq_ESX']
        KVM: &DELETE_VM1_VNIC2_LSWITCH1--KVM
            - ['DeleteLogicalPort102']
            - ['DeleteVM1Vnic2InExitSeq_KVM']

    DeleteVM1Vnic3FromLSwitch1:
        ESX: &DELETE_VM1_VNIC3_LSWITCH1--ESX
            - ['DeleteVM1Vnic3InExitSeq_ESX']
        KVM: &DELETE_VM1_VNIC3_LSWITCH1--KVM
            - ['DeleteLogicalPort103']
            - ['DeleteVM1Vnic3InExitSeq_KVM']

    DeleteVM1Vnic1FromLSwitch1WithoutPost:
        ESX: &DELETE_VM1_VNIC1_LSWITCH1_WITHOUT_POST--ESX
            - ['DeleteVM1Vnic1WithoutPost_ESX']
        KVM: &DELETE_VM1_VNIC1_LSWITCH1_WITHOUT_POST--KVM
            - ['DeleteLogicalPort1']
            - ['DeleteVM1Vnic1WithoutPost_KVM']

    DeleteVM2Vnic1FromLSwitch1:
        ESX: &DELETE_VM2_VNIC1_LSWITCH1--ESX
            - ['DeleteVM2Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM2_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort2']
            - ['DeleteVM2Vnic1InExitSeq_KVM']

    DeleteVM3Vnic1FromLSwitch1:
        ESX: &DELETE_VM3_VNIC1_LSWITCH1--ESX
            - ['DeleteVM3Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM3_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort3']
            - ['DeleteVM3Vnic1InExitSeq_KVM']

    DeleteVM4Vnic1FromLSwitch1:
        ESX: &DELETE_VM4_VNIC1_LSWITCH1--ESX
            - ['DeleteVM4Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM4_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort4']
            - ['DeleteVM4Vnic1InExitSeq_KVM']

    DeleteVM5Vnic1FromLSwitch1:
        ESX: &DELETE_VM5_VNIC1_LSWITCH1--ESX
            - ['DeleteVM5Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM5_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort5']
            - ['DeleteVM5Vnic1InExitSeq_KVM']

    DeleteVM6Vnic1FromLSwitch1:
        ESX: &DELETE_VM6_VNIC1_LSWITCH1--ESX
            - ['DeleteVM6Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM6_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort6']
            - ['DeleteVM6Vnic1InExitSeq_KVM']

    DeleteVM7Vnic1FromLSwitch1:
        ESX: &DELETE_VM7_VNIC1_LSWITCH1--ESX
            - ['DeleteVM7Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM7_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort7']
            - ['DeleteVM7Vnic1InExitSeq_KVM']

    DeleteVM7Vnic1FromLSwitch1Ignore:
        ESX: &DELETE_VM7_VNIC1_LSWITCH1_IGNORE--ESX
            - ['DeleteVM7Vnic1InExitSeqIgnore_ESX']
        KVM: &DELETE_VM7_VNIC1_LSWITCH1_IGNORE--KVM
            - ['DeleteLogicalPort7Ignore']
            - ['DeleteVM7Vnic1InExitSeqIgnore_KVM']

    DeleteVM8Vnic1FromLSwitch1:
        ESX: &DELETE_VM8_VNIC1_LSWITCH1--ESX
            - ['DeleteVM8Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM8_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort8']
            - ['DeleteVM8Vnic1InExitSeq_KVM']

    DeleteVM1Vnic1FromLSwitch2:
        ESX: &DELETE_VM1_VNIC1_LSWITCH2--ESX
            - ['DeleteVM1Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM1_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort9']
            - ['DeleteVM1Vnic1InExitSeq_KVM']

    DeleteVM2Vnic1FromLSwitch2:
        ESX: &DELETE_VM2_VNIC1_LSWITCH2--ESX
            - ['DeleteVM2Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM2_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort10']
            - ['DeleteVM2Vnic1InExitSeq_KVM']

    DeleteVM2Vnic1FromLSwitch2WithoutPost:
        ESX: &DELETE_VM2_VNIC1_LSWITCH2_WITHOUT_POST--ESX
            - ['DeleteVM2Vnic1WithoutPost_ESX']
        KVM: &DELETE_VM2_VNIC1_LSWITCH2_WITHOUT_POST--KVM
            - ['DeleteLogicalPort10']
            - ['DeleteVM2Vnic1WithoutPost_KVM']

    DeleteVM3Vnic1FromLSwitch2:
        ESX: &DELETE_VM3_VNIC1_LSWITCH2--ESX
            - ['DeleteVM3Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM3_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort11']
            - ['DeleteVM3Vnic1InExitSeq_KVM']

    DeleteVM4Vnic1FromLSwitch2:
        ESX: &DELETE_VM4_VNIC1_LSWITCH2--ESX
            - ['DeleteVM4Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM4_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort12']
            - ['DeleteVM4Vnic1InExitSeq_KVM']

    DeleteVM4Vnic1FromLSwitch2WithoutPost:
        ESX: &DELETE_VM4_VNIC1_LSWITCH2_WITHOUT_POST--ESX
            - ['DeleteVM4Vnic1WithoutPost_ESX']
        KVM: &DELETE_VM4_VNIC1_LSWITCH2_WITHOUT_POST--KVM
            - ['DeleteLogicalPort12']
            - ['DeleteVM4Vnic1WithoutPost_KVM']

    DeleteVM5Vnic1FromLSwitch2:
        ESX: &DELETE_VM5_VNIC1_LSWITCH2--ESX
            - ['DeleteVM5Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM5_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort13']
            - ['DeleteVM5Vnic1InExitSeq_KVM']

    DeleteVM6Vnic1FromLSwitch2:
        ESX: &DELETE_VM6_VNIC1_LSWITCH2--ESX
            - ['DeleteVM6Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM6_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort14']
            - ['DeleteVM6Vnic1InExitSeq_KVM']

    DeleteVM6Vnic1FromLSwitch2WithoutPost:
        ESX: &DELETE_VM6_VNIC1_LSWITCH2_WITHOUT_POST--ESX
            - ['DeleteVM6Vnic1WithoutPost_ESX']
        KVM: &DELETE_VM6_VNIC1_LSWITCH2_WITHOUT_POST--KVM
            - ['DeleteLogicalPort14']
            - ['DeleteVM6Vnic1WithoutPost_KVM']

    DeleteVM7Vnic1FromLSwitch2:
        ESX: &DELETE_VM7_VNIC1_LSWITCH2--ESX
            - ['DeleteVM7Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM7_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort15']
            - ['DeleteVM7Vnic1InExitSeq_KVM']

    DeleteVM8Vnic1FromLSwitch2:
        ESX: &DELETE_VM8_VNIC1_LSWITCH2--ESX
            - ['DeleteVM8Vnic1InExitSeq_ESX']
        KVM: &DELETE_VM8_VNIC1_LSWITCH2--KVM
            - ['DeleteVM8Vnic1InExitSeq_KVM']
            - ['DeleteLogicalPort16']

    DeleteVM8Vnic1FromLSwitch2WithoutPost:
        ESX: &DELETE_VM8_VNIC1_LSWITCH2_WITHOUT_POST--ESX
            - ['DeleteVM8Vnic1WithoutPost_ESX']
        KVM: &DELETE_VM8_VNIC1_LSWITCH2_WITHOUT_POST--KVM
            - ['DeleteLogicalPort16']
            - ['DeleteVM8Vnic1WithoutPost_KVM']

    DetachVM1Vnic1FromLSwitch1:
        ESX: &DETACH_VM1_VNIC1_LSWITCH1--ESX
            - ['DeleteLogicalPort1']
        KVM: &DETACH_VM1_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort1']

    DetachVM2Vnic1FromLSwitch1:
        ESX: &DETACH_VM2_VNIC1_LSWITCH1--ESX
            - ['DeleteLogicalPort2']
        KVM: &DETACH_VM2_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort2']

    DetachVM3Vnic1FromLSwitch1:
        ESX: &DETACH_VM3_VNIC1_LSWITCH1--ESX
            - ['DeleteLogicalPort3']
        KVM: &DETACH_VM3_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort3']

    DetachVM4Vnic1FromLSwitch1:
        ESX: &DETACH_VM4_VNIC1_LSWITCH1--ESX
            - ['DeleteLogicalPort4']
        KVM: &DETACH_VM4_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort4']

    DetachVM5Vnic1FromLSwitch1:
        ESX: &DETACH_VM5_VNIC1_LSWITCH1--ESX
            - ['DeleteLogicalPort5']
        KVM: &DETACH_VM5_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort5']

    DetachVM6Vnic1FromLSwitch1:
        ESX: &DETACH_VM6_VNIC1_LSWITCH1--ESX
            - ['DeleteLogicalPort6']
        KVM: &DETACH_VM6_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort6']

    DetachVM7Vnic1FromLSwitch1:
        ESX: &DETACH_VM7_VNIC1_LSWITCH1--ESX
            - ['DeleteLogicalPort7']
        KVM: &DETACH_VM7_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort7']

    DetachVM8Vnic1FromLSwitch1:
        ESX: &DETACH_VM8_VNIC1_LSWITCH1--ESX
            - ['DeleteLogicalPort8']
        KVM: &DETACH_VM8_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort8']

    DetachVM1Vnic1FromLSwitch2:
        ESX: &DETACH_VM1_VNIC1_LSWITCH2--ESX
            - ['DeleteLogicalPort9']
        KVM: &DETACH_VM1_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort9']

    DetachVM2Vnic1FromLSwitch2:
        ESX: &DETACH_VM2_VNIC1_LSWITCH2--ESX
            - ['DeleteLogicalPort10']
        KVM: &DETACH_VM2_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort10']

    DetachVM3Vnic1FromLSwitch2:
        ESX: &DETACH_VM3_VNIC1_LSWITCH2--ESX
            - ['DeleteLogicalPort11']
        KVM: &DETACH_VM3_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort11']

    DetachVM4Vnic1FromLSwitch2:
        ESX: &DETACH_VM4_VNIC1_LSWITCH2--ESX
            - ['DeleteLogicalPort12']
        KVM: &DETACH_VM4_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort12']

    DetachVM5Vnic1FromLSwitch2:
        ESX: &DETACH_VM5_VNIC1_LSWITCH2--ESX
            - ['DeleteLogicalPort13']
        KVM: &DETACH_VM5_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort13']

    DetachVM6Vnic1FromLSwitch2:
        ESX: &DETACH_VM6_VNIC1_LSWITCH2--ESX
            - ['DeleteLogicalPort14']
        KVM: &DETACH_VM6_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort14']

    DetachVM7Vnic1FromLSwitch2:
        ESX: &DETACH_VM7_VNIC1_LSWITCH2--ESX
            - ['DeleteLogicalPort15']
        KVM: &DETACH_VM7_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort15']

    DetachVM8Vnic1FromLSwitch2:
        ESX: &DETACH_VM8_VNIC1_LSWITCH2--ESX
            - ['DeleteLogicalPort16']
        KVM: &DETACH_VM8_VNIC1_LSWITCH2--KVM
            - ['DeleteLogicalPort16']

    ChangeVM1Vnic1MacForKvm:
        Type: "NetAdapter"
        TestAdapter: "vm.[1].vif.[1]"
        set_mac_address: '00:11:22:33:44:66'

    ChangeVM2Vnic1MacForKvm:
        Type: "NetAdapter"
        TestAdapter: "vm.[2].vif.[1]"
        set_mac_address: '00:11:22:33:44:77'

    ChangeVM1Vnic1MacAddress:
        ESX: &CHANGE_VM1_VNIC1_MAC_ADDRESS--ESX
            Type: "NetAdapter"
            TestAdapter: "vm.[1].vnic.[1]"
            setmacaddr: '00:11:22:33:44:66'
        KVM: &CHANGE_VM1_VNIC1_MAC_ADDRESS--KVM
            - [ChangeVM1Vnic1MacForKvm]
            - [RebootVM1]

    ChangeVM2Vnic1MacAddress:
        ESX: &CHANGE_VM2_VNIC1_MAC_ADDRESS--ESX
            Type: "NetAdapter"
            TestAdapter: "vm.[2].vnic.[1]"
            setmacaddr: '00:11:22:33:44:77'
        KVM: &CHANGE_VM2_VNIC1_MAC_ADDRESS--KVM
            - [ChangeVM2Vnic1MacForKvm]
            - [RebootVM2]

    RebootVM1: &REBOOT_VM1
        Type: "VM"
        TestVM: "vm.[1]"
        vmstate: "poweroff,poweron"

    RebootVM2:
        <<: *REBOOT_VM1
        TestVM: "vm.[2]"

    RebootVM3:
        <<: *REBOOT_VM1
        TestVM: "vm.[3]"

    RebootVM4:
        <<: *REBOOT_VM1
        TestVM: "vm.[4]"

    ChangeVM1Vnic1MacToDuplicate1: &CHANGE_VM1_VNIC1_MAC_TO_DUPLICATE_MAC1--KVM
        Type: "NetAdapter"
        TestAdapter: "vm.[1].vif.[1]"
        set_mac_address: *DUPLICATE_MAC_1

    ChangeVM2Vnic1MacToDuplicate1:
        <<: *CHANGE_VM1_VNIC1_MAC_TO_DUPLICATE_MAC1--KVM
        TestAdapter: "vm.[2].vif.[1]"

    ChangeVM3Vnic1MacToDuplicate2: &CHANGE_VM3_VNIC1_MAC_TO_DUPLICATE_MAC2--KVM
        Type: "NetAdapter"
        TestAdapter: "vm.[3].vif.[1]"
        set_mac_address: *DUPLICATE_MAC_2

    ChangeVM4Vnic1MacToDuplicate2:
        <<: *CHANGE_VM3_VNIC1_MAC_TO_DUPLICATE_MAC2--KVM
        TestAdapter: "vm.[4].vif.[1]"

    ChangeVM1Vnic1MacAddressToDuplicateMac1:
        ESX: &CHANGE_VM1_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC1--ESX
            Type: "NetAdapter"
            TestAdapter: "vm.[1].vnic.[1]"
            setmacaddr: *DUPLICATE_MAC_1
        KVM: &CHANGE_VM1_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC1--KVM
            - [ChangeVM1Vnic1MacToDuplicate1]
            - [RebootVM1]

    ChangeVM2Vnic1MacAddressToDuplicateMac1:
        ESX: &CHANGE_VM2_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC1--ESX
            <<: *CHANGE_VM1_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC1--ESX
            TestAdapter: "vm.[2].vnic.[1]"
        KVM: &CHANGE_VM2_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC1--KVM
            - [ChangeVM2Vnic1MacToDuplicate1]
            - [RebootVM2]

    ChangeVM3Vnic1MacAddressToDuplicateMac2:
        ESX: &CHANGE_VM3_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC2--ESX
            Type: "NetAdapter"
            TestAdapter: "vm.[3].vnic.[1]"
            setmacaddr: *DUPLICATE_MAC_2
        KVM: &CHANGE_VM3_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC2--KVM
            - [ChangeVM3Vnic1MacToDuplicate2]
            - [RebootVM3]

    ChangeVM4Vnic1MacAddressToDuplicateMac2:
        ESX: &CHANGE_VM4_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC2--ESX
            <<: *CHANGE_VM3_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC2--ESX
            TestAdapter: "vm.[4].vnic.[1]"
        KVM: &CHANGE_VM4_VNIC1_MAC_ADDRESS_TO_DUPLICATE_MAC2--KVM
            - [ChangeVM4Vnic1MacToDuplicate2]
            - [RebootVM4]

    RestoreVM1Vnic1Mac:
        Type: "NetAdapter"
        TestAdapter: "vm.[1].vif.[1]"
        set_mac_address: vm.[1].vif.[1]->read_adapter_info->macaddress

    RestoreVM2Vnic1Mac:
        Type: "NetAdapter"
        TestAdapter: "vm.[2].vif.[1]"
        set_mac_address: vm.[2].vif.[1]->read_adapter_info->macaddress

    RestoreVM3Vnic1Mac:
        Type: "NetAdapter"
        TestAdapter: "vm.[3].vif.[1]"
        set_mac_address: vm.[3].vif.[1]->read_adapter_info->macaddress

    RestoreVM4Vnic1Mac:
        Type: "NetAdapter"
        TestAdapter: "vm.[4].vif.[1]"
        set_mac_address: vm.[4].vif.[1]->read_adapter_info->macaddress

    RestoreVM1Vnic1MacAddress:
        ESX: &RESTORE_VM1_VNIC1_MAC_ADDRESS--ESX
            Type: "NetAdapter"
            TestAdapter: "vm.[1].vnic.[1]"
            setmacaddr: vm.[1].vnic.[1]->read_adapter_info->macaddress
        KVM: &RESTORE_VM1_VNIC1_MAC_ADDRESS--KVM
            - [RestoreVM1Vnic1Mac]
            - [RebootVM1]

    RestoreVM2Vnic1MacAddress:
        ESX: &RESTORE_VM2_VNIC1_MAC_ADDRESS--ESX
            Type: "NetAdapter"
            TestAdapter: "vm.[2].vnic.[1]"
            setmacaddr: vm.[2].vnic.[1]->read_adapter_info->macaddress
        KVM: &RESTORE_VM2_VNIC1_MAC_ADDRESS--KVM
            - [RestoreVM2Vnic1Mac]
            - [RebootVM2]

    RestoreVM3Vnic1MacAddress:
        ESX: &RESTORE_VM3_VNIC1_MAC_ADDRESS--ESX
            Type: "NetAdapter"
            TestAdapter: "vm.[3].vnic.[1]"
            setmacaddr: vm.[3].vnic.[1]->read_adapter_info->macaddress
        KVM: &RESTORE_VM3_VNIC1_MAC_ADDRESS--KVM
            - [RestoreVM3Vnic1Mac]
            - [RebootVM3]

    RestoreVM4Vnic1MacAddress:
        ESX: &RESTORE_VM4_VNIC1_MAC_ADDRESS--ESX
            Type: "NetAdapter"
            TestAdapter: "vm.[4].vnic.[1]"
            setmacaddr: vm.[4].vnic.[1]->read_adapter_info->macaddress
        KVM: &RESTORE_VM4_VNIC1_MAC_ADDRESS--KVM
            - [RestoreVM4Vnic1Mac]
            - [RebootVM4]

    DeleteLogicalSwitch: &DELETE_LOGICALSWITCHES
        Type: NSX
        TestNSX: nsxmanager.[1]
        sync: true
        deletelogicalswitch: 'nsxmanager.[-1].logicalswitch.[-1]'

    DeleteLogicalSwitch1:
        <<: *DELETE_LOGICALSWITCHES
        deletelogicalswitch: 'nsxmanager.[-1].logicalswitch.[1]'

    DeleteVtep1: &DELETE_HOST1_VTEP
        Type: Host
        TestHost: 'esx.[1]'
        deletevtep: 'esx.[1].vtep.[-1]'

    DeleteVtep2: &DELETE_HOST2_VTEP
        Type: Host
        TestHost: 'esx.[2]'
        deletevtep: 'esx.[2].vtep.[-1]'

    DeleteVtep3: &DELETE_HOST3_VTEP
        Type: Host
        TestHost: 'esx.[3]'
        deletevtep: 'esx.[3].vtep.[-1]'

    DeleteVtep4: &DELETE_HOST4_VTEP
        Type: Host
        TestHost: 'esx.[4]'
        deletevtep: 'esx.[4].vtep.[-1]'

    DeleteTransportNodes: &DELETE_TRANSPORTNODES
        Type: NSX
        TestNSX: nsxmanager.[1]
        sync: true
        deletetransportnode: 'nsxmanager.[1].transportnode.[-1]'

    DeleteTransportZones: &DELETE_TRANSPORTZONES
        Type: NSX
        TestNSX: nsxmanager.[1]
        deletetransportzone: 'nsxmanager.[1].transportzone.[-1]'

    Register1Host:
        ESX: &REGISTER_1_HOSTS--ESX
            Type: Host
            TestHost: 'esx.[1]'
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'
                execution_type: 'cli'
        KVM: &REGISTER_1_HOSTS--KVM
            Type: Host
            TestHost: 'kvm.[1]'
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'
                execution_type: 'cli'

    Register2Hosts:
        ESX: &REGISTER_2_HOSTS--ESX
            Type: Host
            TestHost: 'esx.[1-2]'
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'
                execution_type: 'cli'
        KVM: &REGISTER_2_HOSTS--KVM
            Type: Host
            TestHost: 'kvm.[1-2]'
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'
                execution_type: 'cli'

    Register4Hosts:
        ESX: &REGISTER_4_HOSTS--ESX
            Type: Host
            TestHost: 'esx.[1-4]'
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'
                execution_type: 'cli'
        KVM: &REGISTER_4_HOSTS--KVM
            Type: Host
            TestHost: 'kvm.[1-4]'
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'
                execution_type: 'cli'

    UnregisterHost1:
        ESX: &UNREGISTER_HOST1--ESX
            Type: Host
            TestHost: 'esx.[1]'
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'
        KVM: &UNREGISTER_HOST1--KVM
            Type: Host
            TestHost: 'kvm.[1]'
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'

    UnregisterHost1Lenient:
        ESX: &UNREGISTER_HOST1_LENIENT--ESX
            <<: *UNREGISTER_HOST1--ESX
            expectedresult: ignore
        KVM: &UNREGISTER_HOST1_LENIENT--KVM
            <<: *UNREGISTER_HOST1--KVM
            expectedresult: ignore

    Unregister2Hosts:
        ESX: &UNREGISTER_2HOSTS--ESX
            Type: Host
            TestHost: 'esx.[1-2]'
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'
        KVM: &UNREGISTER_2HOSTS--KVM
            Type: Host
            TestHost: 'kvm.[1-2]'
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'

    Unregister4Hosts:
        ESX: &UNREGISTER_4HOSTS--ESX
            Type: Host
            TestHost: 'esx.[1-4]'
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'
        KVM: &UNREGISTER_4HOSTS--KVM
            Type: Host
            TestHost: 'kvm.[1-4]'
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                manager_thumbprint: 'nsxmanager.[1]'

    RegisterControllersToMP:
        Type: Controller
        TestController: 'nsxcontroller.[1-3]'
        set_nsx_registration:
            manager_ip: 'nsxmanager.[1]'
            manager_thumbprint: 'nsxmanager.[1]'
            execution_type: 'cli'

    RegisterController1ToMP:
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        set_nsx_registration:
            manager_ip: 'nsxmanager.[1]'
            manager_thumbprint: 'nsxmanager.[1]'
            execution_type: 'cli'

    AddMPNode1ToCluster: &ADD_MPNODE_1_TO_CLUSTER
        Type: NSX
        TestNSX: "nsxmanager.[1]"
        clusternode:
            '[1]':
                mgr_role_config:
                    username: 'admin'
                    password: 'default'
                    node_type: 'AddManagementNodeSpec'
                    manager_ip: "nsxmanager.[1]"
                    manager_thumbprint: "nsxmanager.[1]"

    AddMPNode2ToCluster: &ADD_MPNODE_2_TO_CLUSTER
        <<: *ADD_MPNODE_1_TO_CLUSTER
        clusternode:
            '[2]':
                mgr_role_config:
                    username: 'admin'
                    password: 'default'
                    node_type: 'AddManagementNodeSpec'
                    manager_ip: "nsxmanager.[2]"
                    manager_thumbprint: "nsxmanager.[2]"

    AddMPNode3ToCluster: &ADD_MPNODE_3_TO_CLUSTER
        <<: *ADD_MPNODE_1_TO_CLUSTER
        clusternode:
            '[3]':
                mgr_role_config:
                    username: 'admin'
                    password: 'default'
                    node_type: 'AddManagementNodeSpec'
                    manager_ip: "nsxmanager.[3]"
                    manager_thumbprint: "nsxmanager.[3]"

    MapNSXManager1ToCluster: &MAP_NSXMANAGER_1_TO_CLUSTER
        Type: 'NSX'
        TestNSX: 'nsxmanager.[1]'
        cluster:
            '[1]':
                map_object: true
                id_: 1

    MapNSXManager2ToCluster: &MAP_NSXMANAGER_2_TO_CLUSTER
        <<: *MAP_NSXMANAGER_1_TO_CLUSTER
        TestNSX: 'nsxmanager.[2]'
        cluster:
            '[1]':
                map_object: true
                id_: 1

    MapNSXManager3ToCluster: &MAP_NSXMANAGER_3_TO_CLUSTER
        <<: *MAP_NSXMANAGER_1_TO_CLUSTER
        TestNSX: 'nsxmanager.[3]'
        cluster:
            '[1]':
                map_object: true
                id_: 1

    RebootCCP1: &REBOOT_CCP_1
        Type: 'VM'
        TestVM: 'nsxcontroller.[1]'
        vmstate: 'reboot'

    RebootCCP2: &REBOOT_CCP_2
        <<: *REBOOT_CCP_1
        Type: 'VM'
        TestVM: 'nsxcontroller.[2]'

    RebootCCP: &REBOOT_CCP_3
        <<: *REBOOT_CCP_1
        TestVM: 'nsxcontroller.[3]'

    RebootMP1: &REBOOT_MP_1
        Type: 'VM'
        TestVM: 'nsxmanager.[1]'
        vmstate: 'reboot'

    RebootMP2: &REBOOT_MP_2
        <<: *REBOOT_MP_1
        TestVM: 'nsxmanager.[2]'

    RebootMP3: &REBOOT_MP_3
        <<: *REBOOT_MP_1
        TestVM: 'nsxmanager.[3]'

    AddControllersToCluster:
        - ['SetSecurityOnController1']
        - ['InitializeController1']
        - ['JoinController1ToCluster']
        - ['SetSecurityOnController2']
        - ['JoinController2ToCluster']
        - ['ActivateController2']
        - ['SetSecurityOnController3']
        - ['JoinController3ToCluster']
        - ['ActivateController3']

    AddController1ToCluster:
        - ['SetSecurityOnController1']
        - ['InitializeController1']
        - ['JoinController1ToCluster']

    Form3NodeMPCluster: &FORM_3_NODE_MP_CLUSTER
        - ['AddMPNode1ToCluster']
        - ['MapNSXManager1ToCluster']
        - ['AddMPNode2ToCluster']
        - ['MapNSXManager2ToCluster']
        - ['AddMPNode3ToCluster']
        - ['MapNSXManager3ToCluster']

    Form1NodeMPCluster: &FORM_1_NODE_MP_CLUSTER
        - ['AddMPNode1ToCluster']
        - ['MapNSXManager1ToCluster']

    Register3ControllersAndFormCluster: &REGISTER_3_CONTROLLERS_AND_FORM_CLUSTER
        - ['RegisterControllersToMP']
        - ['AddControllersToCluster']

    Register1ControllerAndFormCluster: &REGISTER_1_CONTROLLERS_AND_FORM_CLUSTER
        - ['RegisterController1ToMP']
        - ['AddController1ToCluster']

    Create3NodeMPAnd3NodeCCPCluster: &CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        - ['Form3NodeMPCluster']
        - ['Register3ControllersAndFormCluster']

    Create1NodeMPAnd1NodeCCPCluster: &CREATE_1_NODE_MP_AND_1_NODE_CCP_CLUSTER
        - ['Form1NodeMPCluster']
        - ['Register1ControllerAndFormCluster']

    NumControllerCheckRetries: &NUM_CONTROLLER_CHECK_RETRIES
        "10"

    Verify1NodeCCPCluster: &VERIFY_1_NODE_CCP_CLUSTER_STATUS
           Type: "ClusterNode"
           Testclusternode: "nsxcontroller.[1].clusternode.[1]"
           execution_type: 'cli'
           noofretries: *NUM_CONTROLLER_CHECK_RETRIES
           'get_cluster_node':
               'in_majority[?]equal_to': "true"
               'cluster_nodes[?]contain_once':
                   - controller_ip: "nsxcontroller.[1]"
                     id_: "nsxcontroller.[1].clusternode.[1]"
                     status: "active"

    Verify3NodeCCPCluster: &VERIFY_3_NODE_CCP_CLUSTER_STATUS
           Type: "ClusterNode"
           Testclusternode: "nsxcontroller.[1].clusternode.[1]"
           execution_type: 'cli'
           noofretries: *NUM_CONTROLLER_CHECK_RETRIES
           'get_cluster_node':
               'in_majority[?]equal_to': "true"
               'cluster_nodes[?]contain_once':
                   - controller_ip: "nsxcontroller.[1]"
                     id_: "nsxcontroller.[1].clusternode.[1]"
                     status: "active"
                   - controller_ip: "nsxcontroller.[2]"
                     id_: "nsxcontroller.[1].clusternode.[2]"
                     status: "active"
                   - controller_ip: "nsxcontroller.[3]"
                     id_: "nsxcontroller.[1].clusternode.[3]"
                     status: "active"

    VerifyClusterStatusFrom_Node1: &VERIFY_CLUSTER_STATUS_FROM_NODE_1
      Type: 'Cluster'
      TestCluster: 'nsxmanager.[1].cluster.[1]'
      cluster_status:
        'control_cluster_status':
          'status[?]equal_to': 'STABLE'
        'mgmt_cluster_status':
          'status[?]equal_to': 'STABLE'

    VerifyClusterStatusStability: &VERIFY_CLUSTER_STATUS_Stability
      Type: 'Cluster'
      TestCluster: 'nsxmanager.[-1].cluster.[1]'
      cluster_status:
        'control_cluster_status':
          'status[?]equal_to': 'STABLE'
        'mgmt_cluster_status':
          'status[?]equal_to': 'STABLE'

    VerifyClusterMembers_3MP_3CCP: &VERIFY_CLUSTER_MEMBERS_3MP_3CCP
      Type: "Cluster"
      TestCluster:  "nsxmanager.[-1].clusternode.[1]"
      get_cluster_members:
        'result_count[?]equal_to': 6
        'results[?]contain_once':
           - 'id_': 'nsxmanager.[1].clusternode.[1]'
             'manager_role':
               'node_type': 'ManagementClusterRoleConfig'
           - 'id_': 'nsxmanager.[1].clusternode.[2]'
             'manager_role':
               'node_type': 'ManagementClusterRoleConfig'
           - 'id_': 'nsxmanager.[1].clusternode.[3]'
             'manager_role':
               'node_type': 'ManagementClusterRoleConfig'
           - 'id_': 'nsxcontroller.[1].clusternode.[1]'
             'controller_role':
               'node_type': 'ControllerClusterRoleConfig'
           - 'id_': 'nsxcontroller.[1].clusternode.[2]'
             'controller_role':
               'node_type': 'ControllerClusterRoleConfig'
           - 'id_': 'nsxcontroller.[1].clusternode.[3]'
             'controller_role':
               'node_type': 'ControllerClusterRoleConfig'

    VerifyClusterMembers_1MP_1CCP: &VERIFY_CLUSTER_MEMBERS_1MP_1CCP
      Type: "Cluster"
      TestCluster:  "nsxmanager.[-1].clusternode.[1]"
      get_cluster_members:
        'result_count[?]equal_to': 2
        'results[?]contain_once':
           - 'id_': 'nsxmanager.[1].clusternode.[1]'
             'manager_role':
               'node_type': 'ManagementClusterRoleConfig'
           - 'id_': 'nsxcontroller.[1].clusternode.[1]'
             'controller_role':
               'node_type': 'ControllerClusterRoleConfig'

    Verify3NodeMPAnd3NodeCCPCluster: &VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        - ['VerifyClusterStatusStability']
        - ['VerifyClusterMembers_3MP_3CCP']
        - ['Verify3NodeCCPCluster']

    Verify1NodeMPAnd1NodeCCPCluster: &VERIFY_1_NODE_MP_AND_1_NODE_CCP_CLUSTER
        - ['VerifyClusterStatusStability']
        - ['VerifyClusterMembers_1MP_1CCP']
        - ['Verify1NodeCCPCluster']

    StartController1Service:
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        configure_service_state:
            state: 'start'
            service_name: 'controller'

    StopController1: &STOP_CONTROLLER_1
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        configure_service_state:
            state: 'stop'
            service_name: 'controller'

    StopController2: &STOP_CONTROLLER_2
        <<: *STOP_CONTROLLER_1
        TestController: 'nsxcontroller.[2]'

    StopController3: &STOP_CONTROLLER_3
        <<: *STOP_CONTROLLER_1
        TestController: 'nsxcontroller.[3]'

    RemoveCCPNode3FromCluster:
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        noofretries: *NUM_CONTROLLER_CHECK_RETRIES
        remove_ccp_cluster_node:
            controller_ip: 'nsxcontroller.[3]'
            execution_type: 'cli'

    RemoveCCPNode2FromCluster:
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        noofretries: *NUM_CONTROLLER_CHECK_RETRIES
        remove_ccp_cluster_node:
            controller_ip: 'nsxcontroller.[2]'
            execution_type: 'cli'

    DeleteClusterNode1FromMP:
          Type: NSX
          TestNSX: 'nsxmanager.[1]'
          deleteclusternode: 'nsxcontroller.[1].clusternode.[1]'

    DeleteClusterNode2FromMP:
          Type: NSX
          TestNSX: 'nsxmanager.[1]'
          deleteclusternode: 'nsxcontroller.[1].clusternode.[2]'

    DeleteClusterNode3FromMP:
          Type: NSX
          TestNSX: 'nsxmanager.[1]'
          deleteclusternode: 'nsxcontroller.[1].clusternode.[3]'

    SetProtonServiceIdFor_Node1: &SET_PROTON_SERVICE_ID_FOR_NODE_1
      Type: "NSX"
      TestNSX: "nsxmanager.[1]"
      nsxservice:
        '[1]':
          map_object: true
          id_: 'proton'

    SetProtonServiceIdFor_Node2: &SET_PROTON_SERVICE_ID_FOR_NODE_2
      <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
      TestNSX: "nsxmanager.[2]"

    SetProtonServiceIdFor_Node3: &SET_PROTON_SERVICE_ID_FOR_NODE_3
      <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
      TestNSX: "nsxmanager.[3]"

    SetProtonServiceIdFor_Node4: &SET_PROTON_SERVICE_ID_FOR_NODE_4
      <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
      TestNSX: "nsxmanager.[4]"

    StopProtonServiceOn_Node1: &STOP_PROTON_SERVICE_ON_NODE_1
      Type: "Service"
      TestService: "nsxmanager.[1].nsxservice.[1]"
      configure_service_state:
        state: 'stop'
        service_name: 'proton'

    StopProtonServiceOn_Node2: &STOP_PROTON_SERVICE_ON_NODE_2
      <<: *STOP_PROTON_SERVICE_ON_NODE_1
      TestService: "nsxmanager.[2].nsxservice.[1]"

    StopProtonServiceOn_Node3: &STOP_PROTON_SERVICE_ON_NODE_3
      <<: *STOP_PROTON_SERVICE_ON_NODE_1
      TestService: "nsxmanager.[3].nsxservice.[1]"

    StopProtonServiceOn_Node4: &STOP_PROTON_SERVICE_ON_NODE_4
      <<: *STOP_PROTON_SERVICE_ON_NODE_1
      TestService: "nsxmanager.[4].nsxservice.[1]"

    RemoveMP_Node2: &REMOVE_MP_NODE_2
      Type : "NSX"
      TestNSX : "nsxmanager.[1]"
      deleteclusternode:  "nsxmanager.[1].clusternode.[2]"

    RemoveMP_Node3: &REMOVE_MP_NODE_3
      Type : "NSX"
      TestNSX : "nsxmanager.[1]"
      deleteclusternode:  "nsxmanager.[1].clusternode.[3]"

    WORKAROUNDRestartProtonServiceOn_Node1: &RESTART_PROTON_SERVICE_ON_NODE_1
      Type: "Service"
      TestService: "nsxmanager.[1].nsxservice.[1]"
      configure_service_state:
        state: 'restart'
        service_name: 'proton'

    RestartProtonServiceOn_Node2: &RESTART_PROTON_SERVICE_ON_NODE_2
        <<: *RESTART_PROTON_SERVICE_ON_NODE_1
        TestService: "nsxmanager.[2].nsxservice.[1]"

    RestartProtonServiceOn_Node3: &RESTART_PROTON_SERVICE_ON_NODE_3
        <<: *RESTART_PROTON_SERVICE_ON_NODE_1
        TestService: "nsxmanager.[3].nsxservice.[1]"

    DeleteDataOnMPNode2: &DELETE_DATA_ON_MP_NODE
      Type: 'NSX'
      TestNSX: 'nsxmanager.[2]'
      delete_backend_file:
          file_name: '*'
          execution_type: 'cli'
          path: '/common/nsxapi/data/self'

    DeleteConfigOnMPNode2: &DELETE_CONFIG_ON_MP_NODE
      Type: 'NSX'
      TestNSX: 'nsxmanager.[2]'
      delete_backend_file:
          file_name: '*'
          execution_type: 'cli'
          path: '/home/secureall/secureall/nsxapi/config/self'

    DeleteDataOnMPNode1:
      <<: *DELETE_DATA_ON_MP_NODE
      TestNSX: 'nsxmanager.[1]'

    DeleteConfigOnMPNode1:
        <<: *DELETE_CONFIG_ON_MP_NODE
        TestNSX: 'nsxmanager.[1]'

    DeleteDataOnMPNode3:
        <<: *DELETE_DATA_ON_MP_NODE
        TestNSX: 'nsxmanager.[3]'

    DeleteConfigOnMPNode3:
        <<: *DELETE_CONFIG_ON_MP_NODE
        TestNSX: 'nsxmanager.[3]'

    DeleteNode2FromClusterNode1: &DELETE_NODE_2_FROM_CLUSTER_NODE_1
      - ["SetProtonServiceIdFor_Node2"]
      - ["StopProtonServiceOn_Node2"]
      - ["VerifyStopProtonServiceStatusFor_Node2"]
      - ["RemoveMP_Node2"]

    DeleteNode3FromClusterNode1: &DELETE_NODE_3_FROM_CLUSTER_NODE_1
      - ["SetProtonServiceIdFor_Node3"]
      - ["StopProtonServiceOn_Node3"]
      - ["VerifyStopProtonServiceStatusFor_Node3"]
      - ["RemoveMP_Node3"]

    DeleteDataAndConfigFileFromNode1:
      - ["DeleteDataOnMPNode1"]
      - ["DeleteConfigOnMPNode1"]

    DeleteDataAndConfigFileFromNode2: &DELETE_DATA_AND_CONFIG_FILE_FROM_NODE_2
      - ["DeleteDataOnMPNode2"]
      - ["DeleteConfigOnMPNode2"]

    DeleteDataAndConfigFileFromNode3:
      - ["DeleteDataOnMPNode3"]
      - ["DeleteConfigOnMPNode3"]

    StartProtonServiceOn_Node1: &START_PROTON_SERVICE_ON_NODE_1
      Type: "Service"
      TestService: "nsxmanager.[1].nsxservice.[1]"
      configure_service_state:
        state: 'start'
        service_name: 'proton'

    StartProtonServiceOn_Node2: &START_PROTON_SERVICE_ON_NODE_2
      <<: *START_PROTON_SERVICE_ON_NODE_1
      TestService: "nsxmanager.[2].nsxservice.[1]"

    StartProtonServiceOn_Node3: &START_PROTON_SERVICE_ON_NODE_3
      <<: *START_PROTON_SERVICE_ON_NODE_1
      TestService: "nsxmanager.[3].nsxservice.[1]"

    VerifyStartProtonServiceStatusFor_Node1: &VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_1
      Type: "Service"
      TestService: "nsxmanager.[1].nsxservice.[1]"
      get_service_state:
        'runtime_state[?]equal_to': 'running'

    VerifyStartProtonServiceStatusFor_Node2: &VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_2
      <<: *VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_1
      TestService: "nsxmanager.[2].nsxservice.[1]"

    VerifyStartProtonServiceStatusFor_Node3: &VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_3
      <<: *VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_1
      TestService: "nsxmanager.[3].nsxservice.[1]"

    VerifyStopProtonServiceStatusFor_Node1: &VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_1
      Type: "Service"
      TestService: "nsxmanager.[1].nsxservice.[1]"
      get_service_state:
        'runtime_state[?]equal_to': 'stopped'

    VerifyStopProtonServiceStatusFor_Node2: &VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_2
      <<: *VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_1
      TestService: "nsxmanager.[2].nsxservice.[1]"

    VerifyStopProtonServiceStatusFor_Node3: &VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_3
      <<: *VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_1
      TestService: "nsxmanager.[3].nsxservice.[1]"

    Wait_For_Cluster_Status_Stable_On_Node1: &WAIT_STABLE_NODE_1
      Type: 'Cluster'
      TestCluster: 'nsxmanager.[1].cluster.[1]'
      wait_for_required_cluster_status:
        'required_status': 'STABLE'
        'time_to_monitor': '300'

    Wait_For_Cluster_Status_Stable_On_Node2: &WAIT_STABLE_NODE_2
      <<: *WAIT_STABLE_NODE_1
      TestCluster: 'nsxmanager.[2].cluster.[1]'

    Wait_For_Cluster_Status_Stable_On_Node3: &WAIT_STABLE_NODE_3
      <<: *WAIT_STABLE_NODE_1
      TestCluster: 'nsxmanager.[3].cluster.[1]'

    VerifyClusterMembers_1MP_From_Node1:
      Type: "Cluster"
      TestCluster:  "nsxmanager.[1].clusternode.[1]"
      get_cluster_members:
        'result_count[?]equal_to': 1
        'results[?]contain_once':
           - 'id_': 'nsxmanager.[1].clusternode.[1]'
             'manager_role':
               'node_type': 'ManagementClusterRoleConfig'

    VerifyClusterMembers_1MP_From_Node2:
      Type: "Cluster"
      TestCluster:  "nsxmanager.[2].clusternode.[2]"
      get_cluster_members:
        'result_count[?]equal_to': 1
        'results[?]contain_once':
           - 'id_': 'nsxmanager.[2].clusternode.[2]'
             'manager_role':
               'node_type': 'ManagementClusterRoleConfig'

    VerifyClusterMembers_1MP_From_Node3:
      Type: "Cluster"
      TestCluster:  "nsxmanager.[3].clusternode.[3]"
      get_cluster_members:
        'result_count[?]equal_to': 1
        'results[?]contain_once':
           - 'id_': 'nsxmanager.[3].clusternode.[3]'
             'manager_role':
               'node_type': 'ManagementClusterRoleConfig'

    CleanupNode2ForReuse: &CLEANUP_NODE_2_FOR_REUSE
      - ["DeleteNode2FromClusterNode1"]
      - ["DeleteDataAndConfigFileFromNode2"]
      - ["StartProtonServiceOn_Node2"]
      - ["VerifyStartProtonServiceStatusFor_Node2"]
      - ["MapNSXManager2ToCluster"]
      - ["Wait_For_Cluster_Status_Stable_On_Node2"]

    CleanupNode3ForReuse: &CLEANUP_NODE_3_FOR_REUSE
      - ["DeleteNode3FromClusterNode1"]
      - ["DeleteDataAndConfigFileFromNode3"]
      - ["StartProtonServiceOn_Node3"]
      - ["VerifyStartProtonServiceStatusFor_Node3"]
      - ["MapNSXManager3ToCluster"]
      - ["Wait_For_Cluster_Status_Stable_On_Node3"]

    Cleanup3NodesMPCluster: &CLEANUP_3_NODES_MP_CLUSTER
        - ["CleanupNode2ForReuse"]
        - ["CleanupNode3ForReuse"]
        - ["VerifyClusterStatusFrom_Node1"]
        - ["VerifyClusterMembers_1MP_From_Node1"]

    Cleanup1NodesMPCluster: &CLEANUP_1_NODES_MP_CLUSTER
        - ["VerifyClusterStatusFrom_Node1"]
        - ["VerifyClusterMembers_1MP_From_Node1"]

    Cleanup3NodesCCPCluster: &CLEANUP_3_NODES_CCP_CLUSTER
        - ['RemoveNSXController3FromCluster']
        - ['RemoveNSXController2FromCluster']
        - ['StopController1']
        - ['DeleteClusterNode1FromMP']
        - ['StopMootOnController1']
        - ['ClearController1']
        - ['DeleteMootServerOnController1']
        - ['DeleteBootStrapOnController1']
        - ['DeleteControllerNodeUUIDFileOnController1']
        - ['StartMootOnController1']

    Cleanup1NodesCCPCluster: &CLEANUP_1_NODES_CCP_CLUSTER
        - ['StopController1']
        - ['DeleteClusterNode1FromMP']
        - ['StopMootOnController1']
        - ['ClearController1']
        - ['DeleteMootServerOnController1']
        - ['DeleteBootStrapOnController1']
        - ['DeleteControllerNodeUUIDFileOnController1']
        - ['StartMootOnController1']

    RemoveNSXController3FromCluster: &REMOVE_NSXCONTROLLER3_FROM_CLUSTER
        - ['StopController3']
        - ['RemoveCCPNode3FromCluster']
        - ['DeleteClusterNode3FromMP']
        - ['StopMootOnController3']
        - ['ClearController3']
        - ['DeleteMootServerOnController3']
        - ['DeleteBootStrapOnController3']
        - ['DeleteControllerNodeUUIDFileOnController3']
        - ['StartMootOnController3']

    RemoveNSXController2FromCluster: &REMOVE_NSXCONTROLLER2_FROM_CLUSTER
        - ['StopController2']
        - ['RemoveCCPNode2FromCluster']
        - ['DeleteClusterNode2FromMP']
        - ['StopMootOnController2']
        - ['ClearController2']
        - ['DeleteMootServerOnController2']
        - ['DeleteBootStrapOnController2']
        - ['DeleteControllerNodeUUIDFileOnController2']
        - ['StartMootOnController2']

    Cleanup3NodesCCPAnd3NodesMPCluster: &CLEANUP_3_NODES_CCP_AND_3_NODES_MP_CLUSTER
        - ['Cleanup3NodesCCPCluster']
        - ['Cleanup3NodesMPCluster']

    Cleanup1NodesCCPAnd1NodesMPCluster: &CLEANUP_1_NODES_CCP_AND_1_NODES_MP_CLUSTER
        - ['Cleanup1NodesCCPCluster']
        - ['Cleanup1NodesMPCluster']

    NSXCleanup:
        ESX: &NSX_CLEANUP--ESX
            - ['DeleteLogicalSwitch']
            - ['DeleteTransportNodes']
            - ['DeleteUplinkProfile', 'DeleteAllIPDiscoveryProfiles']
            - ['DeleteTransportZones']
            # Workaround PR 1476322
            # - ['Cleanup3NodesCCPAnd3NodesMPCluster']
        KVM: &NSX_CLEANUP--KVM
            - ['DeleteLogicalSwitch']
            - ['DeleteTransportNodes']
            - ['DeleteUplinkProfile', 'DeleteAllIPDiscoveryProfiles']
            - ['DeleteTransportZones']
            - ['Cleanup3NodesCCPAnd3NodesMPCluster']

    NSXCleanupLS1:
        ESX: &NSX_CLEANUP_LS1--ESX
            - ['DeleteLogicalSwitch1']
            - ['DeleteTransportNodes']
            - ['DeleteUplinkProfile', 'DeleteAllIPDiscoveryProfiles']
            - ['DeleteTransportZones']
            - ['Cleanup3NodesCCPCluster']
        KVM: &NSX_CLEANUP_LS1--KVM
            - ['DeleteLogicalSwitch1']
            - ['DeleteTransportNodes']
            - ['DeleteUplinkProfile', 'DeleteAllIPDiscoveryProfiles']
            - ['DeleteTransportZones']
            - ['Cleanup3NodesCCPCluster']

    NSXCleanup2VTEPs:
        ESX: &NSX_CLEANUP_2_VTEPS--ESX
            - ['DeleteLogicalSwitch1']
            - ['DeleteTransportNodes']
            - ['DeleteUplinkProfile', 'DeleteAllIPDiscoveryProfiles']
            - ['DeleteTransportZones']
            - ['Cleanup3NodesCCPCluster']
        KVM: &NSX_CLEANUP_2_VTEPS--KVM
            - ['DeleteLogicalSwitch1']
            - ['DeleteTransportNodes']
            - ['DeleteUplinkProfile', 'DeleteAllIPDiscoveryProfiles']
            - ['DeleteTransportZones']
            - ['Cleanup3NodesCCPCluster']

    EnableFirewallOnHost: &ENABLE_FIREWALL_ON_HOST
        Type: Host
        TestHost: esx.[x]
        execution_type: "cli"
        firewall_status: enable

    DisableFirewallOnHost4: &DISABLE_FIREWALL_ON_HOST
        Type: Host
        TestHost: esx.[x]
        firewall_status: disable
        execution_type: "cli"
        ExpectedResult: "ignore"

    DisableRabbitMQOnHost3:
        ESX: &DISABLE_RABBITMQ_ON_HOST3--ESX
            Type: Host
            TestHost: esx.[3]
            firewall_rule:
                    rule_operation: disable
                    ruleset: rabbitmqproxy
                    execution_type: "cli"
            ExpectedResult: "ignore"
        KVM: &DISABLE_RABBITMQ_ON_HOST3--KVM
            Type: Host
            TestHost: kvm.[3]
            firewall_rule: &DISABLE_RABBITMQ_RULE--KVM
                execution_type: "cmd"
                rule_operation: 'add'
                chain: 'OUTPUT'
                protocol: 'tcp'
                action: 'DROP'
                protocol_options:
                    'destination_port': '5671'
                match_extensions:
                    'comment_match_ext':
                        'comment': 'Block MPA to MP communication'
            ExpectedResult: "ignore"

    DisableRabbitMQOnHost1to4:
        ESX: &DISABLE_RABBITMQ_ON_HOST_1_TO_4--ESX
            <<: *DISABLE_RABBITMQ_ON_HOST3--ESX
            TestHost: esx.[1-4]
        KVM: &DISABLE_RABBITMQ_ON_HOST_1_TO_4--KVM
            <<: *DISABLE_RABBITMQ_ON_HOST3--KVM
            TestHost: kvm.[1-4]

    EnableRabbitMQOnHost3:
        ESX: &ENABLE_RABBITMQ_ON_HOST3--ESX
            Type: Host
            TestHost: esx.[3]
            firewall_rule:
                    rule_operation: enable
                    ruleset: rabbitmqproxy
                    execution_type: "cli"
        KVM: &ENABLE_RABBITMQ_ON_HOST3--KVM
            Type: Host
            TestHost: kvm.[3]
            firewall_rule:
                <<: *DISABLE_RABBITMQ_RULE--KVM
                rule_operation: 'remove'

    EnableRabbitMQOnHost1To4:
        ESX: &ENABLE_RABBITMQ_ON_HOST_1_TO_4--ESX
            <<: *ENABLE_RABBITMQ_ON_HOST3--ESX
            TestHost: esx.[1-4]
        KVM: &ENABLE_RABBITMQ_ON_HOST_1_TO_4--KVM
            <<: *ENABLE_RABBITMQ_ON_HOST3--KVM
            TestHost: kvm.[1-4]

    DisableNetCPOnHost1:
        ESX: &DISABLE_NETCP_ON_HOST1--ESX
            Type: Host
            TestHost: esx.[1]
            firewall_rule:
               rule_operation: disable
               ruleset: netCP
               execution_type: "cli"
            ExpectedResult: "ignore"
        KVM: &DISABLE_NETCP_ON_HOST1--KVM
            Type: Host
            TestHost: kvm.[1]
            firewall_rule: &DISABLE_NETCP_ON_HOST_RULE--KVM
                execution_type: "cmd"
                rule_operation: 'add'
                chain: 'OUTPUT'
                protocol: 'tcp'
                action: 'DROP'
                protocol_options:
                    'destination_port': '1234'
                match_extensions:
                    'comment_match_ext':
                        'comment': 'Block NetCPA to CCP communication'
            ExpectedResult: "ignore"

    DisableNetCPOnHost2:
        ESX: &DISABLE_NETCP_ON_HOST2--ESX
            <<: *DISABLE_NETCP_ON_HOST1--ESX
            TestHost: esx.[2]
        KVM: &DISABLE_NETCP_ON_HOST2--KVM
            <<: *DISABLE_NETCP_ON_HOST1--KVM
            TestHost: kvm.[2]

    DisableNetCPOnHost3:
        ESX: &DISABLE_NETCP_ON_HOST3--ESX
            <<: *DISABLE_NETCP_ON_HOST1--ESX
            TestHost: esx.[3]
        KVM: &DISABLE_NETCP_ON_HOST3--KVM
            <<: *DISABLE_NETCP_ON_HOST1--KVM
            TestHost: kvm.[3]

    DisableNetCPOnHost4:
        ESX: &DISABLE_NETCP_ON_HOST4--ESX
            <<: *DISABLE_NETCP_ON_HOST1--ESX
            TestHost: esx.[4]
        KVM: &DISABLE_NETCP_ON_HOST4--KVM
            <<: *DISABLE_NETCP_ON_HOST1--KVM
            TestHost: kvm.[4]

    DisableNetCPOnHost1to4:
        ESX: &DISABLE_NETCP_ON_HOST1_TO_4--ESX
            <<: *DISABLE_NETCP_ON_HOST1--ESX
            TestHost: esx.[1-4]
        KVM: &DISABLE_NETCP_ON_HOST1_TO_4--KVM
            <<: *DISABLE_NETCP_ON_HOST1--KVM
            TestHost: kvm.[1-4]

    BlockConnectionToHost1OnCCP_ESX: &BLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        Type: 'NSX'
        TestNSX: 'nsxcontroller.[-1]'
        network_partitioning: &NETWORK_PARTITIONING
            operation: 'set'
            ip_address: 'esx.[1]->ip_addresses'
            execution_type: 'cmd'

    BlockConnectionToHost2OnCCP_ESX: &BLOCK_CONNECTION_TO_HOST2_ON_CCP_ESX
        <<: *BLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        network_partitioning:
            <<: *NETWORK_PARTITIONING
            ip_address: 'esx.[2]->ip_addresses'

    BlockConnectionToHost3OnCCP_ESX: &BLOCK_CONNECTION_TO_HOST3_ON_CCP_ESX
        <<: *BLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        network_partitioning:
            <<: *NETWORK_PARTITIONING
            ip_address: 'esx.[3]->ip_addresses'

    BlockConnectionToHost4OnCCP_ESX: &BLOCK_CONNECTION_TO_HOST4_ON_CCP_ESX
        <<: *BLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        network_partitioning:
            <<: *NETWORK_PARTITIONING
            ip_address: 'esx.[4]->ip_addresses'

    BlockConnectionToHost1OnCCP_KVM: &BLOCK_CONNECTION_TO_HOST1_ON_CCP_KVM
        <<: *BLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        network_partitioning:
            <<: *NETWORK_PARTITIONING
            ip_address: 'kvm.[1]->ip_addresses'

    BlockConnectionToHost2OnCCP_KVM: &BLOCK_CONNECTION_TO_HOST2_ON_CCP_KVM
        <<: *BLOCK_CONNECTION_TO_HOST1_ON_CCP_KVM
        network_partitioning:
            <<: *NETWORK_PARTITIONING
            ip_address: 'kvm.[2]->ip_addresses'

    BlockConnectionToHost3OnCCP_KVM: &BLOCK_CONNECTION_TO_HOST3_ON_CCP_KVM
        <<: *BLOCK_CONNECTION_TO_HOST1_ON_CCP_KVM
        network_partitioning:
            <<: *NETWORK_PARTITIONING
            ip_address: 'kvm.[3]->ip_addresses'

    BlockConnectionToHost4OnCCP_KVM: &BLOCK_CONNECTION_TO_HOST4_ON_CCP_KVM
        <<: *BLOCK_CONNECTION_TO_HOST1_ON_CCP_KVM
        network_partitioning:
            <<: *NETWORK_PARTITIONING
            ip_address: 'kvm.[4]->ip_addresses'

    BlockIncomingTrafficToCCP: &BLOCK_INCOMING_TRAFFIC_TO_CCP
        Type: NSX
        TestNSX: nsxcontroller.[-1]
        firewall_rule: &INCOMING_CCP_FIREWALL_RULE_DROP
            execution_type: "cmd"
            rule_operation: 'add'
            chain: 'INPUT'
            protocol: 'tcp'
            action: 'DROP'
            protocol_options:
                'destination_port': '1234'
            match_extensions:
                'comment_match_ext':
                    'comment': 'Block incoming traffic to CCP'

    BlockOutogingTrafficFromCCP: &BLOCK_INCOMING_TRAFFIC_FROM_CCP
        Type: NSX
        TestNSX: nsxcontroller.[-1]
        firewall_rule:
            <<: *INCOMING_CCP_FIREWALL_RULE_DROP
            chain: 'OUTPUT'
            protocol_options:
                'source_port': '1234'
            match_extensions:
                'comment_match_ext':
                    'comment': 'Block outgoing traffic from CCP'

    AllowIncomingTrafficToCCP: &ALLOW_INCOMING_TRAFFIC_TO_CCP
        Type: NSX
        TestNSX: nsxcontroller.[-1]
        firewall_rule:
            <<: *INCOMING_CCP_FIREWALL_RULE_DROP
            rule_operation: 'remove'

    AllowOutgoingTrafficFromCCP: &ALLOW_OUTGOING_TRAFFIC_FROM_CCP
        Type: NSX
        TestNSX: nsxcontroller.[-1]
        firewall_rule:
            <<: *INCOMING_CCP_FIREWALL_RULE_DROP
            chain: 'OUTPUT'
            protocol_options:
                'source_port': '1234'
            match_extensions:
                'comment_match_ext':
                    'comment': 'Block outgoing traffic from CCP'
            rule_operation: 'remove'

    AllowIncomingTrafficToCCPLenient:
        <<: *ALLOW_INCOMING_TRAFFIC_TO_CCP
        ExpectedResult: ignore

    AllowOutgoingTrafficFromCCPLenient:
        <<: *ALLOW_OUTGOING_TRAFFIC_FROM_CCP
        ExpectedResult: ignore

    BLOCK_CONNECTION_TO_4_HOST_ON_CCP: &BLOCK_CONNECTION_TO_4_HOST_ON_CCP
        - ['BlockOutogingTrafficFromCCP']
        - ['BlockIncomingTrafficToCCP']

    BlockConnectionTo2HostOnCCP:
        ESX:  &BLOCK_CONNECTION_TO_2_HOST_ON_CCP--ESX
            - ['BlockConnectionToHost1OnCCP_ESX',
               'BlockConnectionToHost2OnCCP_ESX']
        KVM:  &BLOCK_CONNECTION_TO_2_HOST_ON_CCP--KVM
            - ['BlockConnectionToHost1OnCCP_KVM',
               'BlockConnectionToHost2OnCCP_KVM']

    EnableNetCPOnHost1:
        ESX: &ENABLE_NETCP_ON_HOST1--ESX
            Type: Host
            TestHost: esx.[1]
            firewall_rule:
               rule_operation: enable
               ruleset: netCP
               execution_type: "cli"
        KVM: &ENABLE_NETCP_ON_HOST1--KVM
            Type: Host
            TestHost: kvm.[1]
            firewall_rule:
                <<: *DISABLE_NETCP_ON_HOST_RULE--KVM
                rule_operation: 'remove'

    EnableNetCPOnHost1Lenient_KVM: &ENABLE_NETCP_ON_HOST1_LENIENT--KVM
        Type: Host
        TestHost: kvm.[1]
        firewall_rule:
            <<: *DISABLE_NETCP_ON_HOST_RULE--KVM
            rule_operation: 'remove'
            strict: false

    EnableNetCPOnHost3:
        ESX: &ENABLE_NETCP_ON_HOST3--ESX
            <<: *ENABLE_NETCP_ON_HOST1--ESX
            TestHost: esx.[3]
        KVM: &ENABLE_NETCP_ON_HOST3--KVM
            <<: *ENABLE_NETCP_ON_HOST1--KVM
            TestHost: kvm.[3]

    EnableNetCPOnHost4:
        ESX: &ENABLE_NETCP_ON_HOST4--ESX
            <<: *ENABLE_NETCP_ON_HOST1--ESX
            TestHost: esx.[4]
        KVM: &ENABLE_NETCP_ON_HOST4--KVM
            <<: *ENABLE_NETCP_ON_HOST1--KVM
            TestHost: kvm.[4]

    EnableNetCPOnHost1to4:
        ESX: &ENABLE_NETCP_ON_HOST1_TO_4--ESX
            <<: *ENABLE_NETCP_ON_HOST1--ESX
            TestHost: esx.[1-4]
        KVM: &ENABLE_NETCP_ON_HOST1_TO_4--KVM
            <<: *ENABLE_NETCP_ON_HOST1--KVM
            TestHost: kvm.[1-4]

    EnableNetCPOnHost1to4Lenient:
        ESX: &ENABLE_NETCP_ON_HOST1_TO_4_LENIENT--ESX
            Type: Host
            TestHost: esx.[1-4]
            firewall_rule:
               strict: false
               rule_operation: enable
               ruleset: netCP
               execution_type: "cli"
        KVM: &ENABLE_NETCP_ON_HOST1_TO_4_LENIENT--KVM
            <<: *ENABLE_NETCP_ON_HOST1_LENIENT--KVM
            TestHost: kvm.[1-4]

    UnblockConnectionToHost1OnCCP_ESX: &UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        Type: 'NSX'
        TestNSX: 'nsxcontroller.[-1]'
        network_partitioning: &RESTORE_NETWORK_PARTITIONING
            operation: 'reset'
            ip_address: 'esx.[1]->ip_addresses'
            execution_type: 'cmd'

    UnblockConnectionToHost2OnCCP_ESX: &UNBLOCK_CONNECTION_TO_HOST2_ON_CCP_ESX
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'esx.[2]->ip_addresses'

    UnblockConnectionToHost3OnCCP_ESX: &UNBLOCK_CONNECTION_TO_HOST3_ON_CCP_ESX
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'esx.[3]->ip_addresses'

    UnblockConnectionToHost4OnCCP_ESX: &UNBLOCK_CONNECTION_TO_HOST4_ON_CCP_ESX
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'esx.[4]->ip_addresses'

    UnblockConnectionToHost1OnCCP_KVM: &UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_KVM
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'kvm.[1]->ip_addresses'

    UnblockConnectionToHost2OnCCP_KVM: &UNBLOCK_CONNECTION_TO_HOST2_ON_CCP_KVM
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_KVM
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'kvm.[2]->ip_addresses'

    UnblockConnectionToHost3OnCCP_KVM: &UNBLOCK_CONNECTION_TO_HOST3_ON_CCP_KVM
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_KVM
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'kvm.[3]->ip_addresses'

    UnblockConnectionToHost4OnCCP_KVM: &UNBLOCK_CONNECTION_TO_HOST4_ON_CCP_KVM
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_KVM
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'kvm.[4]->ip_addresses'

    UnblockConnectionTo4HostOnCCP: &UNBLOCK_CONNECTION_TO_4_HOST_ON_CCP
        - ['AllowIncomingTrafficToCCP']
        - ['AllowOutgoingTrafficFromCCP']

    UnblockConnectionTo4HostOnCCPLenient: &UNBLOCK_CONNECTION_TO_4_HOST_ON_CCP_LENIENT
        - ['AllowIncomingTrafficToCCPLenient']
        - ['AllowOutgoingTrafficFromCCPLenient']

    UnblockConnectionTo2HostOnCCP:
        ESX: &UNBLOCK_CONNECTION_TO_2_HOST_ON_CCP--ESX
            - ['UnblockConnectionToHost1OnCCP_ESX',
               'UnblockConnectionToHost2OnCCP_ESX']
        KVM: &UNBLOCK_CONNECTION_TO_2_HOST_ON_CCP--KVM
            - ['UnblockConnectionToHost1OnCCP_KVM',
               'UnblockConnectionToHost2OnCCP_KVM']

    UnblockConnectionToHost1OnCCPLenient_ESX:
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        expectedResult: ignore
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'esx.[2]->ip_addresses'

    UnblockConnectionToHost2OnCCPLenient_ESX:
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        expectedResult: ignore
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'esx.[2]->ip_addresses'

    UnblockConnectionToHost3OnCCPLenient_ESX:
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        expectedResult: ignore
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'esx.[3]->ip_addresses'

    UnblockConnectionToHost4OnCCPLenient_ESX:
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        expectedResult: ignore
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'esx.[4]->ip_addresses'

    UnblockConnectionToHost1OnCCPLenient_KVM:
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_ESX
        expectedResult: ignore
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'kvm.[1]->ip_addresses'

    UnblockConnectionToHost2OnCCPLenient_KVM:
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_KVM
        expectedResult: ignore
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'kvm.[2]->ip_addresses'

    UnblockConnectionToHost3OnCCPLenient_KVM:
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_KVM
        expectedResult: ignore
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'kvm.[3]->ip_addresses'

    UnblockConnectionToHost4OnCCPLenient_KVM:
        <<: *UNBLOCK_CONNECTION_TO_HOST1_ON_CCP_KVM
        expectedResult: ignore
        network_partitioning:
            <<: *RESTORE_NETWORK_PARTITIONING
            ip_address: 'kvm.[4]->ip_addresses'

    UnblockConnectionTo4HostOnCCPLenient:
        ESX: &UNBLOCK_CONNECTION_TO_4_HOST_ON_CCP_LENIENT--ESX
            - ['UnblockConnectionToHost1OnCCPLenient_ESX']
            - ['UnblockConnectionToHost2OnCCPLenient_ESX']
            - ['UnblockConnectionToHost3OnCCPLenient_ESX']
            - ['UnblockConnectionToHost4OnCCPLenient_ESX']
        KVM: &UNBLOCK_CONNECTION_TO_4_HOST_ON_CCP_LENIENT--KVM
            - ['UnblockConnectionToHost1OnCCPLenient_KVM']
            - ['UnblockConnectionToHost2OnCCPLenient_KVM']
            - ['UnblockConnectionToHost3OnCCPLenient_KVM']
            - ['UnblockConnectionToHost4OnCCPLenient_KVM']

    UnblockConnectionTo2HostOnCCPLenient:
        ESX: &UNBLOCK_CONNECTION_TO_2_HOST_ON_CCP_LENIENT--ESX
            - ['UnblockConnectionToHost1OnCCPLenient_ESX']
            - ['UnblockConnectionToHost2OnCCPLenient_ESX']
        KVM: &UNBLOCK_CONNECTION_TO_2_HOST_ON_CCP_LENIENT--KVM
            - ['UnblockConnectionToHost1OnCCPLenient_KVM']
            - ['UnblockConnectionToHost2OnCCPLenient_KVM']

    SetNvsMtu1500Hosts1to4:
        Type: 'Host'
        TestHost: 'esx.[1-4]'
        set_switch_mtu:
            vmnic_name: 'vmnic1'
            value: '1500'
            execution_type: 'cli'

    SetNvsMtu9KHosts1to4:
        Type: 'Host'
        TestHost: 'esx.[1-4]'
        set_switch_mtu:
            vmnic_name: 'vmnic1'
            value: '9000'
            execution_type: 'cli'

    Set9kMTUOnVM1_KVM: &SET_9K_MTU_ON_VM1_KVM
        Type: 'NetAdapter'
        TestAdapter: "vm.[1].vif.[1]"
        mtu: 9000

    Set1500MTUOnVM1_KVM: &SET_1500_MTU_ON_VM1_KVM
        Type: 'NetAdapter'
        TestAdapter: "vm.[1].vif.[1]"
        mtu: 1500

    Set9kMTUOnVM3_KVM:
        <<: *SET_9K_MTU_ON_VM1_KVM
        TestAdapter: "vm.[3].vif.[1]"

    Set1500MTUOnVM3_KVM:
        <<: *SET_1500_MTU_ON_VM1_KVM
        TestAdapter: "vm.[3].vif.[1]"

    Set9kMTUOnVM1_ESX: &SET_9K_MTU_ON_VM1_ESX
        Type: 'NetAdapter'
        TestAdapter: "vm.[1].vnic.[1]"
        mtu: 9000

    Set1500MTUOnVM1_ESX: &SET_1500_MTU_ON_VM1_ESX
        Type: 'NetAdapter'
        TestAdapter: "vm.[1].vnic.[1]"
        mtu: 1500

    Set9kMTUOnVM3_ESX:
        <<: *SET_9K_MTU_ON_VM1_ESX
        TestAdapter: "vm.[3].vnic.[1]"

    Set1500MTUOnVM3_ESX:
        <<: *SET_1500_MTU_ON_VM1_ESX
        TestAdapter: "vm.[3].vnic.[1]"

    Set9kMTUOnVM1OnHost1:
        Type: 'Host'
        TestHost: "kvm.[1]"
        set_adapter_mtu: &SET_ADAPTER_MTU
            value: 9000
            adapter_name: "vm.[1].vif.[1]"
            execution_type: "cmd"

    Set9kMTUOnVM3OnHost2:
        Type: 'Host'
        TestHost: "kvm.[2]"
        set_adapter_mtu:
            <<: *SET_ADAPTER_MTU
            adapter_name: "vm.[3].vif.[1]"

    Set1500MTUOnVM1OnHost1:
        Type: 'Host'
        TestHost: "kvm.[1]"
        set_adapter_mtu:
            <<: *SET_ADAPTER_MTU
            adapter_name: "vm.[1].vif.[1]"
            value: 1500

    Set1500MTUOnVM3OnHost2:
        Type: 'Host'
        TestHost: "kvm.[2]"
        set_adapter_mtu:
            <<: *SET_ADAPTER_MTU
            adapter_name: "vm.[3].vif.[1]"
            value: 1500

    Set9kMTUOnVTEPUplinkOnHost1to2: &SET_9K_MTU_ON_VTEP_UPLINK_ON_HOST_1_2
        Type: 'NetAdapter'
        TestAdapter: "kvm.[1-2].pif.[1]"
        mtu: 9000

    Set1500MTUOnVTEPUplinkOnHost1to2:
        <<: *SET_9K_MTU_ON_VTEP_UPLINK_ON_HOST_1_2
        mtu: 1500

    Set1500MTUOnVM1andVM3:
        ESX: &SET_1500_MTU_ON_VM1_AND_VM3--ESX
            - ['Set1500MTUOnVM3_ESX', 'Set1500MTUOnVM1_ESX']
        KVM: &SET_1500_MTU_ON_VM1_AND_VM3--KVM
            - ['Set1500MTUOnVTEPUplinkOnHost1to2', 'Set1500MTUOnVM3OnHost2',
               'Set1500MTUOnVM1OnHost1', 'Set1500MTUOnVM1_KVM', 'Set9kMTUOnVM3_KVM']

    Set9kMTUOnVM1andVM3:
        ESX: &SET_9K_MTU_ON_VM1_AND_VM3--ESX
            - ['Set9kMTUOnVM3_ESX', 'Set9kMTUOnVM1_ESX']
        KVM: &SET_9K_MTU_ON_VM1_AND_VM3--KVM
            - ['Set9kMTUOnVTEPUplinkOnHost1to2', 'Set9kMTUOnVM3OnHost2',
               'Set9kMTUOnVM1OnHost1', 'Set9kMTUOnVM3_KVM', 'Set9kMTUOnVM1_KVM']

    AttachDhcpServer9toSwitch1:
        ESX: &ATTACH_DHCP_SERVER9_TO_SWITCH_1--ESX
            - ['AttachDhcpServer9toSwitch1_ESX']
        KVM: &ATTACH_DHCP_SERVER9_TO_SWITCH_1--KVM
            - ['AttachDhcpServer9toSwitch1_KVM']
            - ['DiscoverDhcpServer9Vif1LogicalPort_KVM']

    AttachDhcpServer9toSwitch1_ESX:
        Type: DHCPServer
        TestDHCPServer: 'dhcpserver.[9]'
        vnic:
            '[1]':
                <<: *VNIC_1_LS1--ESX
                allowguestcontrol: 1

    AttachDhcpServer9toSwitch1_KVM:
        Type: DHCPServer
        TestDHCPServer: 'dhcpserver.[9]'
        vif:
            '[1]':
                backing: "kvm.[4].bridge.[1]"

    DiscoverDhcpServer9Vif1LogicalPort_KVM:
        <<: *VIF_ATTACHMENT_01--KVM
        logicalport:
            '[901]':
                <<: *LPORT_VM1_VIF1_LS1--KVM
                attachment:
                    <<: *LPORT_ATTACHMENT
                    id_: dhcpserver.[9].vif.[1]->uuid

    PoweronDHCPServer9: &POWER_ON_DHCP_SERVER_9
        Type: DHCPServer
        TestDHCPServer: 'dhcpserver.[9]'
        vmstate: poweron

    PoweroffDHCPServers: &POWER_OFF_DHCP_SERVERS
        Type: DHCPServer
        TestDHCPServer: 'dhcpserver.[-1]'
        vmstate: poweroff

    SetupDHCPServer9: &SETUP_DHCP_SERVER_9
        Type: DHCPServer
        TestDHCPServer: "dhcpserver.[9]"
        unconfigure_dhcp_server:
            execution_type: "cmd"

    EnableDHCPServer9Oninterfaces_ESX: &ENABLE_DHCP_SERVER_9_ON_INTERFACES--ESX
        Type: "DHCPServer"
        TestDHCPServer: "dhcpserver.[9]"
        enable_dhcp_server_on_interfaces:
            adapter_interface: 'dhcpserver.[9].vnic.[1]'
            execution_type: "cmd"

    EnableDHCPServer9Oninterfaces_KVM: &ENABLE_DHCP_SERVER_9_ON_INTERFACES--KVM
        Type: "DHCPServer"
        TestDHCPServer: "dhcpserver.[9]"
        enable_dhcp_server_on_interfaces:
            adapter_interface: 'dhcpserver.[9].vif.[1]'
            execution_type: "cmd"

    RestartDHCPServer9:  &RESTART_DHCP_SERVER_9
        Type: "DHCPServer"
        TestDHCPServer: "dhcpserver.[9]"
        restart_dhcp_server:
            execution_type: 'cmd'

    DeleteDhcpServer9Vnic1FromLSwitch1:
        ESX: &DELETE_DHCP_SERVER9_VNIC1_LSWITCH1--ESX
            - ['DeleteDhcpServer9Vnic1InExitSeq_ESX']
        KVM: &DELETE_DHCP_SERVER9_VNIC1_LSWITCH1--KVM
            - ['DeleteLogicalPort901']
            - ['DeleteDhcpServer9Vnic1InExitSeq_KVM']

    DeleteLogicalPort901:
        <<: *DELETE_LOGICAL_PORT
        deletelogicalport: 'nsxmanager.[1].logicalport.[901]'

    DeleteDhcpServer9Vnic1InExitSeq_ESX:
        Type: DHCPServer
        TestDHCPServer: 'dhcpserver.[9]'
        deletevnic: 'dhcpserver.[9].vnic.[1]'

    DeleteDhcpServer9Vnic1InExitSeq_KVM:
        Type: DHCPServer
        TestDHCPServer: 'dhcpserver.[9]'
        deletevif: 'dhcpserver.[9].vif.[1]'

    StoreNetstackGateway1:
        Type: Netstack
        TestNetstack: esx.[1].netstack.[1]
        PersistData: "yes"
        read:
            'defaultgateway[?]defined': ''

    StoreNetstackGateway2:
        Type: Netstack
        TestNetstack: esx.[2].netstack.[1]
        PersistData: "yes"
        read:
            'defaultgateway[?]defined': ''

    StoreNetstackGateway3:
        Type: Netstack
        TestNetstack: esx.[3].netstack.[1]
        PersistData: "yes"
        read:
            'defaultgateway[?]defined': ''

    RestoreNetstackGateway1:
        Type: Netstack
        TestNetstack: esx.[1].netstack.[1]
        setnetstackgateway: add
        route: esx.[1].netstack.[1]->read->defaultgateway

    RestoreNetstackGateway2:
        Type: Netstack
        TestNetstack: esx.[2].netstack.[1]
        setnetstackgateway: add
        route: esx.[2].netstack.[1]->read->defaultgateway

    RestoreNetstackGateway3:
        Type: Netstack
        TestNetstack: esx.[3].netstack.[1]
        setnetstackgateway: add
        route: esx.[3].netstack.[1]->read->defaultgateway

    SetNetstackGateway1:
        Type: Netstack
        TestNetstack: esx.[1].netstack.[1]
        setnetstackgateway: add
        # If "different" is provided then default gateway is read from the
        # netstack and a gateway greater than what was found is set on the
        # netstack e.g if the original default gateway was set to 192.168.2.231
        # then the last octet will be incremented by 1 and then a modulo will
        # be taken over 255 which will give us the new gateway value of
        # 192.168.2.232. The original problem is that we can not set the
        # gatyeway to any value, it must be in the same subnet to which the
        # corresponding interface is attached otherwise ESX throws an error.
        # That is why we are trying to find a gateway within the same subnet
        # here.
        route: 'different'

    SetNetstackGateway3:
        Type: Netstack
        TestNetstack: esx.[3].netstack.[1]
        setnetstackgateway: add
        route: 'different'

    StoreDefaultGateway_KVM1:
        Type: Host
        TestHost: kvm.[1]
        PersistData: "yes"
        read:
            'defaultgateway[?]defined': ''

    StoreDefaultGateway_KVM2:
        Type: Host
        TestHost: kvm.[2]
        PersistData: "yes"
        read:
            'defaultgateway[?]defined': ''

    StoreDefaultGateway_KVM3:
        Type: Host
        TestHost: kvm.[3]
        PersistData: "yes"
        read:
            'defaultgateway[?]defined': ''

    DeleteDefaultGateway_KVM1:
        Type: Host
        TestHost: kvm.[1]
        defaultgateway:
            operation: delete
            gateway: kvm.[1]->read->defaultgateway

    DeleteDefaultGateway_KVM3:
        Type: Host
        TestHost: kvm.[3]
        defaultgateway:
            operation: delete
            gateway: kvm.[3]->read->defaultgateway

    DeleteAnyDefaultGateway_KVM1:
        Type: Host
        TestHost: kvm.[1]
        defaultgateway:
            operation: delete
            gateway: any

    DeleteAnyDefaultGateway_KVM2:
        Type: Host
        TestHost: kvm.[2]
        defaultgateway:
            operation: delete
            gateway: any

    DeleteAnyDefaultGateway_KVM3:
        Type: Host
        TestHost: kvm.[3]
        defaultgateway:
            operation: delete
            gateway: any

    RestoreDefaultGateway_KVM1:
        Type: Host
        TestHost: kvm.[1]
        defaultgateway:
            operation: add
            gateway: kvm.[1]->read->defaultgateway
        expectedResult: ignore

    RestoreDefaultGateway_KVM2:
        Type: Host
        TestHost: kvm.[2]
        defaultgateway:
            operation: add
            gateway: kvm.[2]->read->defaultgateway
        expectedResult: ignore

    RestoreDefaultGateway_KVM3:
        Type: Host
        TestHost: kvm.[3]
        defaultgateway:
            operation: add
            gateway: kvm.[3]->read->defaultgateway
        expectedResult: ignore

    AddDifferentDefaultGateway_KVM1:
        Type: Host
        TestHost: kvm.[1]
        defaultgateway:
            operation: add
            gateway: 'different'

    AddDifferentDefaultGateway_KVM3:
        Type: Host
        TestHost: kvm.[3]
        defaultgateway:
            operation: add
            gateway: 'different'

    StoreTwoDefaultGateways:
        ESX: &STORE_DEFAULT_GATEWAYS_HOST1_3--ESX
            - ['DiscoverNetstackOnHost1', 'DiscoverNetstackOnHost3']
            - ['StoreNetstackGateway1', 'StoreNetstackGateway3']
        KVM: &STORE_DEFAULT_GATEWAYS_HOST1_3--KVM
            - ['StoreDefaultGateway_KVM1', 'StoreDefaultGateway_KVM3']

    StoreDefaultGatewaysHost1And2:
        ESX: &STORE_DEFAULT_GATEWAYS_HOST1_2--ESX
            - ['DiscoverNetstackOnHost1', 'DiscoverNetstackOnHost2']
            - ['StoreNetstackGateway1', 'StoreNetstackGateway2']
        KVM: &STORE_DEFAULT_GATEWAYS_HOST1_2--KVM
            - ['StoreDefaultGateway_KVM1', 'StoreDefaultGateway_KVM2']

    SetTwoDifferentGateways:
        ESX: &SET_DIFFERENT_GATEWAYS_HOST1_3--ESX
            - ['SetNetstackGateway1', 'SetNetstackGateway3']
        KVM: &SET_DIFFERENT_GATEWAYS_HOST1_3--KVM
            - ['AddDifferentDefaultGateway_KVM1', 'AddDifferentDefaultGateway_KVM3']
            - ['DeleteDefaultGateway_KVM1', 'DeleteDefaultGateway_KVM3']

    RestoreTwoDefaultGateways:
        ESX: &RESTORE_DEFAULT_GATEWAYS_HOST1_3--ESX
            - ['RestoreNetstackGateway1', 'RestoreNetstackGateway3']
        KVM: &RESTORE_DEFAULT_GATEWAYS_HOST1_3--KVM
            - ['DeleteAnyDefaultGateway_KVM1', 'DeleteAnyDefaultGateway_KVM3']
            - ['RestoreDefaultGateway_KVM1', 'RestoreDefaultGateway_KVM3']

    RestoreDefaultGatewaysHost1And2:
        ESX: &RESTORE_DEFAULT_GATEWAYS_HOST1_2--ESX
            - ['RestoreNetstackGateway1', 'RestoreNetstackGateway2']
        KVM: &RESTORE_DEFAULT_GATEWAYS_HOST1_2--KVM
            - ['DeleteAnyDefaultGateway_KVM1', 'DeleteAnyDefaultGateway_KVM2']
            - ['RestoreDefaultGateway_KVM1', 'RestoreDefaultGateway_KVM2']

    dhcp_server_9_gateway_ip: &DHCP_SERVER_9_GATEWAY_IP
        '192.168.9.1'
    dhcp_server_9_subnet: &DHCP_SERVER_9_SUBNET
        '192.168.9.0'
    dhcp_server_9_ip_range: &DHCP_SERVER_9_IP_RANGE
        '192.168.9.2 - 192.168.9.10'
    ls1_vm1_static_ip: &LS1_VM1_STATIC_IP
        '192.168.9.21'
    ls1_vm3_static_ip: &LS1_VM3_STATIC_IP
        '192.168.9.23'
    ls1_vm5_static_ip: &LS1_VM5_STATIC_IP
        '192.168.9.25'
    ls1_vm7_static_ip: &LS1_VM7_STATIC_IP
        '192.168.9.27'

    VerifyLS1VtepEntryOnControllers:
        ESX: &VERIFY_LS1_VTEP_TABLE_CONTROLLER--ESX
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "esx.[1].vtep.[1]"
                    - adapter_ip: "esx.[2].vtep.[1]"
        KVM: &VERIFY_LS1_VTEP_TABLE_CONTROLLER--KVM
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"

    VerifyLS2VtepEntryOnControllers:
        ESX: &VERIFY_LS2_VTEP_TABLE_CONTROLLER--ESX
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "esx.[1].vtep.[1]"
                    - adapter_ip: "esx.[2].vtep.[1]"
        KVM: &VERIFY_LS2_VTEP_TABLE_CONTROLLER--KVM
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"

    VerifyLS1VtepEntryOnHost1:
        ESX: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--ESX
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'esx.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "esx.[2].vtep.[1]"
        KVM: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[1]'
            noofretries: *NUM_VTEP_ENTRY_CHECK_RETRIES
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[2].vtep.[1]"

    VerifyLS1VtepEntryOnHost2:
        ESX: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--ESX
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--ESX
            endpoints: 'esx.[2]'
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "esx.[1].vtep.[1]"
        KVM: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
            endpoints: 'kvm.[2]'
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"

    VerifyLS1VtepEntryOnHost3:
        ESX: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--ESX
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--ESX
            endpoints: 'esx.[3]'
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "esx.[1].vtep.[1]"
                    - adapter_ip: "esx.[2].vtep.[1]"
                    - adapter_ip: "esx.[4].vtep.[1]"
        KVM: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--KVM
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
            endpoints: 'kvm.[3]'
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[4].vtep.[1]"

    VerifyLS1VtepEntryOnHost4:
        ESX: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--ESX
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--ESX
            endpoints: 'esx.[4]'
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "esx.[1].vtep.[1]"
                    - adapter_ip: "esx.[2].vtep.[1]"
                    - adapter_ip: "esx.[3].vtep.[1]"
        KVM: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--KVM
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
            endpoints: 'kvm.[4]'
            'get_vtep_table[?]contain_once':
                table:
                    - adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_ip: "kvm.[2].vtep.[1]"
                    - adapter_ip: "kvm.[3].vtep.[1]"

    VerifyLS2VtepEntryOnHost1:
        ESX: &VERIFY_LS2_VTEP_ENTRY_ON_HOST_1--ESX
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--ESX
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
        KVM: &VERIFY_LS2_VTEP_ENTRY_ON_HOST_1--KVM
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'

    VerifyLS2VtepEntryOnHost2:
        ESX: &VERIFY_LS2_VTEP_ENTRY_ON_HOST_2--ESX
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--ESX
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
        KVM: &VERIFY_LS2_VTEP_ENTRY_ON_HOST_2--KVM
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'

    VerifyLS2VtepEntryOnHost3:
        ESX: &VERIFY_LS2_VTEP_ENTRY_ON_HOST_3--ESX
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--ESX
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
        KVM: &VERIFY_LS2_VTEP_ENTRY_ON_HOST_3--KVM
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_3--KVM
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'

    VerifyLS2VtepEntryOnHost4:
        ESX: &VERIFY_LS2_VTEP_ENTRY_ON_HOST_4--ESX
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--ESX
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
        KVM: &VERIFY_LS2_VTEP_ENTRY_ON_HOST_4--KVM
            <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_4--KVM
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'

    unassigned_ip_ls1: &LS1_UNASSIGNED_IP
        '192.168.98.254'

    ls2_vm2_static_ip: &LS2_VM2_STATIC_IP
        '192.168.10.22'

    unassigned_ip_ls2: &LS2_UNASSIGNED_IP
        '192.168.99.254'

    24_bit_netmask: &24_BIT_NETMASK
        '255.255.255.0'

    localsendsocketsize: &LOCAL_SEND_SOCKET_SIZE
        '64512'
    sendmessagesize: &SEND_MESSAGE_SIZE
        '14000'

    22_bit_netmask: &22_BIT_NETMASK
        '255.255.252.0'

    DiscoverHost4ManagementInterface:
        ESX: &DISCOVER_HOST4_MANAGEMENT_INTERFACE--ESX
            - ['DiscoverVss0']
            - ['CreatePortGroup']
        KVM: &DISCOVER_HOST4_MANAGEMENT_INTERFACE--KVM
            - ['DiscoverPif0']

    ConfigureHost4ManagementInterfaceWithContollerIP:
        ESX: &CONFIGURE_HOST4_MANAGEMENT_INTERFACE_WITH_CONTROLLER_IP--ESX
            - ['ConfigureESXManagementAdapterWithControllerIP']
        KVM: &CONFIGURE_HOST4_MANAGEMENT_INTERFACE_WITH_CONTROLLER_IP--KVM
            - ['ConfigureKVMManagementAdapterWithControllerIP']

    ConfigureHost4ManagementInterfaceWithNSMIP:
        ESX: &CONFIGURE_HOST4_MANAGEMENT_INTERFACE_WITH_NSM_IP--ESX
            - ['ConfigureESXManagementAdapterWithNSMIP']
        KVM: &CONFIGURE_HOST4_MANAGEMENT_INTERFACE_WITH_NSM_IP--KVM
            - ['ConfigureKVMManagementAdapterWithNSMIP']

    RemoveHost4ManagementInterface:
        ESX: &REMOVE_HOST4_MANAGEMENT_INTERFACE--ESX
            - ['RemoveVmk1']
        KVM: &REMOVE_HOST4_MANAGEMENT_INTERFACE--KVM
            - ['RemoveManagementAdapter']

    RemoveHost4ManagementInterfaceLenient:
        ESX: &REMOVE_HOST4_MANAGEMENT_INTERFACE_LENIENT--ESX
            - ['RemoveVmk1Lenient']
        KVM: &REMOVE_HOST4_MANAGEMENT_INTERFACE_LENIENT--KVM
            - ['RemoveManagementAdapterLenient']

    DiscoverVss0:
        Type: Host
        TestHost: 'esx.[4]'
        vss:
            '[0]':
                name: "vSwitch0"

    DiscoverPif0:
        Type: Host
        TestHost: 'kvm.[4]'
        pif:
            '[0]':
                interface: "eth0"

    CreatePortGroup:
        Type: Host
        TestHost: 'esx.[4]'
        portgroup:
            '[1]':
                name: "VMKernel"
                vss: "esx.[4].vss.[0]"

    ConfigureKVMManagementAdapterWithNSMIP:
        Type: NetAdapter
        TestAdapter: 'kvm.[4].pif.[0]'
        IPv4: nsxmanager.[1]->read_ip->ip
        netmask: *22_BIT_NETMASK

    ConfigureKVMManagementAdapterWithControllerIP:
        Type: NetAdapter
        TestAdapter: 'kvm.[4].pif.[0]'
        IPv4: nsxcontroller.[1]->read_ip->ip
        netmask: *22_BIT_NETMASK

    ConfigureESXManagementAdapterWithNSMIP:
        Type: Host
        TestHost: 'esx.[4]'
        vmknic:
            '[1]':
                portgroup: "esx.[4].portgroup.[1]"
                ipv4address: nsxmanager.[1]->read_ip->ip
                netmask: *22_BIT_NETMASK

    ConfigureESXManagementAdapterWithControllerIP:
        Type: Host
        TestHost: 'esx.[4]'
        vmknic:
            '[1]':
                portgroup: "esx.[4].portgroup.[1]"
                ipv4address: nsxcontroller.[1]->read_ip->ip
                netmask: *22_BIT_NETMASK

    RemoveVmk1:
       Type: Host
       TestHost: "esx.[4]"
       deletevmknic: "esx.[4].vmknic.[1]"

    RemoveVmk1Lenient:
       Type: Host
       TestHost: "esx.[4]"
       deletevmknic: "esx.[4].vmknic.[1]"
       ExpectedResult: Ignore

    RemoveManagementAdapter:
        Type: NetAdapter
        TestAdapter: 'kvm.[4].pif.[0]'
        IPv4: 'remove'

    RemoveManagementAdapterLenient:
        Type: NetAdapter
        TestAdapter: 'kvm.[4].pif.[0]'
        IPv4: 'remove'
        ExpectedResult: Ignore

    pktcap_ls1_tx_filter:
        KVM: &PKTCAP_LS1_TX_FILTER--KVM
            "count 1500,dst port 7471"
        ESX: &PKTCAP_LS1_TX_FILTER--ESX
            "count 200,stt nsxmanager.[1].logicalswitch.[1],flowdirection tx,capturestage post"

    pktcap_ls2_tx_filter:
        KVM: &PKTCAP_LS2_TX_FILTER--KVM
            "count 1500,dst port 7471"
        ESX: &PKTCAP_LS2_TX_FILTER--ESX
            "count 200,stt nsxmanager.[1].logicalswitch.[2],flowdirection tx,capturestage post"

    pktcap_rx_filter:
        KVM: &PKTCAP_RX_FILTER--KVM
            "count 1500,dst port 7471"
        ESX: &PKTCAP_RX_FILTER--ESX
            "count 200,flowdirection rx,capturestage pre"

    pktcap_ls1_rx_filter:
        KVM: &PKTCAP_LS1_RX_FILTER--KVM
            "count 1500,dst port 7471"
        ESX: &PKTCAP_LS1_RX_FILTER--ESX
            "count 200,stt nsxmanager.[1].logicalswitch.[1],flowdirection rx"

    pktcap_ls2_rx_filter:
        KVM: &PKTCAP_LS2_RX_FILTER--KVM
            "count 1500,dst port 7471"
        ESX: &PKTCAP_LS2_RX_FILTER--ESX
            "count 200,stt nsxmanager.[1].logicalswitch.[2],flowdirection rx"

    pkt_verification_type:
        KVM: &PKT_VERIFICATION_TYPE--KVM
            "pktcap"
        ESX: &PKT_VERIFICATION_TYPE--ESX
            "pktcapuserworld"

    PIF1_OF_HOST_2_3_4:
        ESX: &PIF1_OF_HOST_2_3_4--ESX
            'esx.[2].vmnic.[1],esx.[3].vmnic.[1],esx.[4].vmnic.[1]'
        KVM: &PIF1_OF_HOST_2_3_4--KVM
            'kvm.[2].pif.[1],kvm.[3].pif.[1],kvm.[4].pif.[1]'

    PIF1_OF_HOST_1_2_3_4:
        ESX: &PIF1_OF_HOST_1_2_3_4--ESX
            'esx.[1].vmnic.[1],esx.[2].vmnic.[1],esx.[3].vmnic.[1],esx.[4].vmnic.[1]'
        KVM: &PIF1_OF_HOST_1_2_3_4--KVM
            'kvm.[1].pif.[1],kvm.[2].pif.[1],kvm.[3].pif.[1],kvm.[4].pif.[1]'

    random_mac_address: &RANDOM_MAC_ADDRESS
        56:84:7a:fe:97:99

    VerificationAdminScopedMulticast_LS1:
        ESX: &VERIFICATION_ADMIN_SCOPED_MULTICAST_LS1--ESX
            PktCapVerification: &VERIFICATION_ADMIN_SCOPED_LS1--ESX
                target: *PIF1_OF_HOST_2_3_4--ESX
                verificationtype: *PKT_VERIFICATION_TYPE--ESX
                pktcount: '10+'
                pktcapfilter: *PKTCAP_LS1_RX_FILTER--ESX
                pkttype: 'multicast'
                dstmac: '01:00:5e:01:01:01'
        KVM: &VERIFICATION_ADMIN_SCOPED_MULTICAST_LS1--KVM
            PktCapVerification: &VERIFICATION_ADMIN_SCOPED_LS1--KVM
                target: *PIF1_OF_HOST_2_3_4--KVM
                verificationtype: *PKT_VERIFICATION_TYPE--KVM
                pktcount: '10+'
                pktcapfilter: *PKTCAP_LS1_RX_FILTER--KVM
                innerpkttype: 'multicast'
                innerdstmac: '01:00:5e:01:01:01'

    VerificationNodeLocalAllNodes_LS1:
        ESX: &VERIFICATION_NODE_LOCAL_ALL_NODES_LS1--ESX
            PktCapVerification: &IPV6_LS1_MULITCAST_VERIFICATION--ESX
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:00:00:01'
                L3protocol: 'ipv6'
        KVM: &VERIFICATION_NODE_LOCAL_ALL_NODES_LS1--KVM
            PktCapVerification: &IPV6_LS1_MULITCAST_VERIFICATION--KVM
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:00:00:01'
                innerl3protocol: 'ipv6'

    VerificationNodeLocalAllNodes_LS2:
        ESX: &VERIFICATION_NODE_LOCAL_ALL_NODES_LS2--ESX
            PktCapVerification:
                <<: *IPV6_LS1_MULITCAST_VERIFICATION--ESX
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--ESX
        KVM: &VERIFICATION_NODE_LOCAL_ALL_NODES_LS2--KVM
            PktCapVerification:
                <<: *IPV6_LS1_MULITCAST_VERIFICATION--KVM
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--KVM

    VerificationNodeLocalAllRoutersIPv6_LS1:
        ESX: &VERIFICATION_NODE_LOCAL_ALL_ROUTERS_IPV6_LS1--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:00:00:02'
                L3protocol: 'ipv6'
        KVM: &VERIFICATION_NODE_LOCAL_ALL_ROUTERS_IPV6_LS1--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:00:00:02'
                innerl3protocol: 'ipv6'

    VerificationNodeLocalAllRoutersIPv6_LS2:
        ESX: &VERIFICATION_NODE_LOCAL_ALL_ROUTERS_IPV6_LS2--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:00:00:02'
                L3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--ESX
        KVM: &VERIFICATION_NODE_LOCAL_ALL_ROUTERS_IPV6_LS2--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:00:00:02'
                innerl3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--KVM

    VerificationNodeLocalDNSv6_LS1:
        ESX: &VERIFICATION_NODE_LOCAL_DNSv6_LS1--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:00:00:FB'
                L3protocol: 'ipv6'
        KVM: &VERIFICATION_NODE_LOCAL_DNSv6_LS1--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:00:00:FB'
                innerl3protocol: 'ipv6'

    VerificationNodeLocalDNSv6_LS2:
        ESX: &VERIFICATION_NODE_LOCAL_DNSv6_LS2--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:00:00:FB'
                L3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--ESX
        KVM: &VERIFICATION_NODE_LOCAL_DNSv6_LS2--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:00:00:FB'
                innerl3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--KVM

    VerificationNodeLocalVariableScopeAllocation_LS1:
        ESX: &VERIFICATION_NODE_LOCAL_VARIABLE_SCOPE_LS1--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:00:00:0C'
                L3protocol: 'ipv6'
        KVM: &VERIFICATION_NODE_LOCAL_VARIABLE_SCOPE_LS1--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:00:00:0C'
                innerl3protocol: 'ipv6'

    VerificationNodeLocalVariableScopeAllocation_LS2:
        ESX: &VERIFICATION_NODE_LOCAL_VARIABLE_SCOPE_LS2--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:00:00:0C'
                L3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--ESX
        KVM: &VERIFICATION_NODE_LOCAL_VARIABLE_SCOPE_LS2--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:00:00:0C'
                innerl3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--KVM

    VerificationSiteLocalAllDHCPServersIPv6_LS1:
        ESX: &VERIFICATION_SITE_LOCAL_ALL_DHCP_LS1--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:01:00:03'
                L3protocol: 'ipv6'
        KVM: &VERIFICATION_SITE_LOCAL_ALL_DHCP_LS1--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:01:00:03'
                innerl3protocol: 'ipv6'

    VerificationSiteLocalAllDHCPServersIPv6_LS2:
        ESX: &VERIFICATION_SITE_LOCAL_ALL_DHCP_LS2--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:01:00:03'
                L3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--ESX
        KVM: &VERIFICATION_SITE_LOCAL_ALL_DHCP_LS2--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:01:00:03'
                innerl3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--KVM

    VerificationSiteLocal_MANET_RoutersIPv6_LS1:
        ESX: &VERIFICATION_SITE_MANET_ROUTERS_IPV6_LS1--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:01:00:05'
                L3protocol: 'ipv6'
        KVM: &VERIFICATION_SITE_MANET_ROUTERS_IPV6_LS1--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:01:00:05'
                innerl3protocol: 'ipv6'

    VerificationSiteLocal_MANET_RoutersIPv6_LS2:
        ESX: &VERIFICATION_SITE_MANET_ROUTERS_IPV6_LS2--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:01:00:05'
                L3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--ESX
        KVM: &VERIFICATION_SITE_MANET_ROUTERS_IPV6_LS2--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:01:00:05'
                innerl3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--KVM

    VerificationVariableScopeNTPIPv6_LS1:
        ESX: &VERIFICATION_VARIABLE_SCOPE_NTP_IPV6_LS1--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:00:01:01'
                L3protocol: 'ipv6'
        KVM: &VERIFICATION_VARIABLE_SCOPE_NTP_IPV6_LS1--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:00:01:01'
                innerl3protocol: 'ipv6'

    VerificationVariableScopeNTPIPv6_LS2:
        ESX: &VERIFICATION_VARIABLE_SCOPE_NTP_IPV6_LS2--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                dstmac: '33:33:00:00:01:01'
                L3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--ESX
        KVM: &VERIFICATION_VARIABLE_SCOPE_NTP_IPV6_LS2--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                innerdstmac: '33:33:00:00:01:01'
                innerl3protocol: 'ipv6'
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--KVM

    VerificationAdminScopedMulticast_LS2:
        ESX: &VERIFICATION_ADMIN_SCOPED_MULTICAST_LS2--ESX
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--ESX
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--ESX
        KVM: &VERIFICATION_ADMIN_SCOPED_MULTICAST_LS2--KVM
            PktCapVerification:
                <<: *VERIFICATION_ADMIN_SCOPED_LS1--KVM
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--KVM

    VerificationAllHostsMulticast_LS1:
        ESX: &VERIFICATION_ALL_HOSTS_MULTICAST_LS1--ESX
            PktCapVerification: &VERIFICATION_ALL_HOSTS_LS1--ESX
                target: *PIF1_OF_HOST_2_3_4--ESX
                verificationtype: *PKT_VERIFICATION_TYPE--ESX
                pktcount: '10+'
                pktcapfilter: *PKTCAP_LS1_RX_FILTER--ESX
                pkttype: 'multicast'
                dstmac: '01:00:5e:00:00:01'
        KVM: &VERIFICATION_ALL_HOSTS_MULTICAST_LS1--KVM
            PktCapVerification: &VERIFICATION_ALL_HOSTS_LS1--KVM
                target: *PIF1_OF_HOST_2_3_4--KVM
                verificationtype: *PKT_VERIFICATION_TYPE--KVM
                pktcount: '10+'
                pktcapfilter: *PKTCAP_LS1_RX_FILTER--KVM
                innerpkttype: 'multicast'
                innerdstmac: '01:00:5e:00:00:01'

    VerificationAllHostsMulticast_LS2:
        ESX: &VERIFICATION_ALL_HOSTS_MULTICAST_LS2--ESX
            PktCapVerification: &VERIFICATION_ALL_HOSTS_LS2--ESX
                <<: *VERIFICATION_ALL_HOSTS_LS1--ESX
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--ESX
        ESX: &VERIFICATION_ALL_HOSTS_MULTICAST_LS2--KVM
            PktCapVerification: &VERIFICATION_ALL_HOSTS_LS2--KVM
                <<: *VERIFICATION_ALL_HOSTS_LS1--KVM
                pktcapfilter: *PKTCAP_LS2_RX_FILTER--KVM

    VerificationAllRoutersMulticast_LS1:
        ESX: &VERIFICATION_ALL_ROUTERS_MULTICAST_LS1--ESX
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS1--ESX
                dstmac: '01:00:5e:00:00:02'
        KVM: &VERIFICATION_ALL_ROUTERS_MULTICAST_LS1--KVM
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS1--KVM
                innerdstmac: '01:00:5e:00:00:02'

    VerificationAllRoutersMulticast_LS2:
        ESX: &VERIFICATION_ALL_ROUTERS_MULTICAST_LS2--ESX
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS2--ESX
                dstmac: '01:00:5e:00:00:02'
        KVM: &VERIFICATION_ALL_ROUTERS_MULTICAST_LS2--KVM
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS2--KVM
                innerdstmac: '01:00:5e:00:00:02'

    VerificationOSPFAllRouterMulticast_LS1:
        ESX: &VERIFICATION_OSPF_ALL_ROUTERS_MULTICAST_LS1--ESX
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS1--ESX
                dstmac: '01:00:5e:00:00:05'
        KVM: &VERIFICATION_OSPF_ALL_ROUTERS_MULTICAST_LS1--KVM
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS1--KVM
                innerdstmac: '01:00:5e:00:00:05'

    VerificationOSPFAllRouterMulticast_LS2:
        ESX: &VERIFICATION_OSPF_ALL_ROUTERS_MULTICAST_LS2--ESX
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS2--ESX
                dstmac: '01:00:5e:00:00:05'
        KVM: &VERIFICATION_OSPF_ALL_ROUTERS_MULTICAST_LS2--KVM
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS2--KVM
                innerdstmac: '01:00:5e:00:00:05'

    VerificationDesignatedRoutersMulticast_LS1:
        ESX: &VERIFICATION_DESIGNATED_ROUTERS_MULTICAST_LS1--ESX
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS1--ESX
                dstmac: '01:00:5e:00:00:06'
        KVM: &VERIFICATION_DESIGNATED_ROUTERS_MULTICAST_LS1--KVM
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS1--KVM
                innerdstmac: '01:00:5e:00:00:06'

    VerificationDesignatedRoutersMulticast_LS2:
        ESX: &VERIFICATION_DESIGNATED_ROUTERS_MULTICAST_LS2--ESX
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS2--ESX
                dstmac: '01:00:5e:00:00:06'
        KVM: &VERIFICATION_DESIGNATED_ROUTERS_MULTICAST_LS2--KVM
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS2--KVM
                innerdstmac: '01:00:5e:00:00:06'

    VerificationAllSBMSMulticast_LS1:
        ESX: &VERIFICATION_ALL_SMB_MULTICAST_LS1--ESX
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS1--ESX
                dstmac: '01:00:5e:00:00:17'
        KVM: &VERIFICATION_ALL_SMB_MULTICAST_LS1--KVM
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS1--KVM
                innerdstmac: '01:00:5e:00:00:17'

    VerificationAllSBMSMulticast_LS2:
        ESX: &VERIFICATION_ALL_SMB_MULTICAST_LS2--ESX
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS2--ESX
                dstmac: '01:00:5e:00:00:17'
        KVM: &VERIFICATION_ALL_SMB_MULTICAST_LS2--KVM
            PktCapVerification:
                <<: *VERIFICATION_ALL_HOSTS_LS2--KVM
                innerdstmac: '01:00:5e:00:00:17'
    DisableNetCPOnHost4AndSave:
        ESX: &DISABLE_NETCP_ON_HOST4_AND_SAVE--ESX
            - ['DisableNetCPOnHost4_ESX']
        KVM: &DISABLE_NETCP_ON_HOST4_AND_SAVE--KVM
            - ['DisableNetCPOnHost4_KVM']
            - ['SaveFirewallRuleOnHost4']

    DisableNetCPOnHost4_ESX:
            <<: *DISABLE_NETCP_ON_HOST4--ESX

    DisableNetCPOnHost4_KVM:
            <<: *DISABLE_NETCP_ON_HOST4--KVM

    SaveFirewallRuleOnHost4:
            Type: Host
            TestHost: kvm.[4]
            firewall_status: save
            execution_type: *FIREWALL_EXECUTION_TYPE--KVM

    EnableNetCPOnHost4AndSave:
        ESX: &ENABLE_NETCP_ON_HOST4_AND_SAVE--ESX
            - ['EnableNetCPOnHost4_ESX']
        KVM: &ENABLE_NETCP_ON_HOST4_AND_SAVE--KVM
            - ['EnableNetCPOnHost4_KVM']
            - ['SaveFirewallRuleOnHost4']

    EnableNetCPOnHost4_ESX:
            <<: *ENABLE_NETCP_ON_HOST4--ESX

    EnableNetCPOnHost4_KVM:
            <<: *ENABLE_NETCP_ON_HOST4--KVM

    RemoveVtep4IPAddress:
        ESX: &REMOVE_VTEP4_IP_ADDRESS--ESX
            Type: NetAdapter
            TestAdapter: esx.[4].vtep.[1]
            IPv4: '0.0.0.0'
            expectedresult: 'Fail'
        KVM: &REMOVE_VTEP4_IP_ADDRESS--KVM
            Type: NetAdapter
            TestAdapter: kvm.[4].vtep.[1]
            IPv4: 'remove'

    ARPPING_LS1_CCP_Verification:
        ESX: &ARPPING_LS1_CCP_VERIFICATION--ESX
            - ['ArpPing_LS1_13_To_57_ESX',
               'VerifyLS1VM13ArpEntryOnControllers_ESX']
            - ['ArpPing_LS1_57_To_13_ESX',
               'VerifyLS1VM57ArpEntryOnControllers_ESX']
        KVM: &ARPPING_LS1_CCP_VERIFICATION--KVM
            - ['ArpPing_LS1_357_To_1_KVM', 'ArpPing_LS1_1_To_7_KVM']

    ARPPING_LS1_VM_1_3_5_CCP_Verification:
        ESX: &ARPPING_LS1_VM_1_3_5_CCP_VERIFICATION--ESX
            - ['ArpPing_LS1_35_To_1_ESX', 'ArpPing_LS1_1_To_5_ESX',
               'VerifyLS1ArpEntryVM_1_3_5_OnControllers_ESX']
        KVM: &ARPPING_LS1_VM_1_3_5_CCP_VERIFICATION--KVM
            - ['ArpPing_LS1_35_To_1_KVM', 'ArpPing_LS1_1_To_5_KVM']

    ARPPING_LS2_CCP_Verification:
        ESX: &ARPPING_LS2_CCP_VERIFICATION--ESX
            - ['ArpPing_LS2_24_To_68_ESX',
               'VerifyLS2VM24ArpEntryOnControllers_ESX']
            - ['ArpPing_LS2_68_To_24_ESX',
               'VerifyLS2VM68ArpEntryOnControllers_ESX']
        KVM: &ARPPING_LS2_CCP_VERIFICATION--KVM
            - ['ArpPing_LS2_468_To_2_KVM', 'ArpPing_LS2_2_To_8_KVM']

    ARPPING_LS2_24678_CCP_Verification:
        ESX: &ARPPING_LS2_24678_CCP_VERIFICATION--ESX
            - ['ArpPing_LS2_24_To_68_ESX',
               'VerifyLS2VM24ArpEntryOnControllers_ESX']
            - ['ArpPing_LS2_68_To_24_ESX',
               'VerifyLS2VM68ArpEntryOnControllers_ESX']
            - ['ArpPing_LS2_7_To_8_ESX',
               'VerifyLS2VM7ArpEntryOnControllers_ESX']
        KVM: &ARPPING_LS2_24678_CCP_VERIFICATION--KVM
            - ['ArpPing_LS2_2468_To_7_KVM', 'ArpPing_LS2_7_To_8_KVM']

    ARPPING_LS1_VM357_CCP_Verification:
        ESX: &ARPPING_LS1_VM357_CCP_VERIFICATION--ESX
            - ['ArpPing_LS1_357_To_1_ESX',
               'VerifyLS1VM357ArpEntryOnControllers_ESX']
        KVM: &ARPPING_LS1_VM357_CCP_VERIFICATION--KVM
            - ['ArpPing_LS1_35_To_7_KVM', 'ArpPing_LS1_7_To_3_KVM']

    ARPPING_LS2_VM468_CCP_Verification:
        ESX: &ARPPING_LS2_VM468_CCP_VERIFICATION--ESX
            - ['ArpPing_LS2_468_To_2_ESX',
               'VerifyLS2VM468ArpEntryOnControllers_ESX']
        KVM: &ARPPING_LS2_VM468_CCP_VERIFICATION--KVM
            - ['ArpPing_LS2_46_To_8_KVM', 'ArpPing_LS2_8_To_4_KVM']

    ARPPING_LS1_VM357_Host1_Verification:
        ESX: &ARPPING_LS1_VM357_HOST1_VERIFICATION--ESX
            - ['ArpPing_LS1_357_To_1_ESX', 'ArpPing_LS1_1_To_357_ESX',
               'VerifyLS1VM357ArpEntryOnHost1_ESX']
        KVM: &ARPPING_LS1_VM357_HOST1_VERIFICATION--KVM
            - ['ArpPing_LS1_357_To_1_KVM', 'ArpPing_LS1_1_To_357_KVM']

    ARPPING_LS1_VM157_Host2_Verification:
        ESX: &ARPPING_LS1_VM157_HOST2_VERIFICATION--ESX
            - ['ArpPing_LS1_157_To_3_ESX', 'ArpPing_LS1_3_To_157_ESX',
               'VerifyLS1VM157ArpEntryOnHost2_ESX']
        KVM: &ARPPING_LS1_VM157_HOST2_VERIFICATION--KVM
            - ['ArpPing_LS1_157_To_3_KVM', 'ArpPing_LS1_3_To_157_KVM']

    ARPPING_LS1_VM137_Host3_Verification:
        ESX: &ARPPING_LS1_VM137_HOST3_VERIFICATION--ESX
            - ['ArpPing_LS1_137_To_5_ESX', 'ArpPing_LS1_5_To_137_ESX',
               'VerifyLS1VM137ArpEntryOnHost3_ESX']
        KVM: &ARPPING_LS1_VM137_HOST3_VERIFICATION--KVM
            - ['ArpPing_LS1_137_To_5_KVM', 'ArpPing_LS1_5_To_137_KVM']

    ARPPING_LS1_VM135_Host4_Verification:
        ESX: &ARPPING_LS1_VM135_HOST4_VERIFICATION--ESX
            - ['ArpPing_LS1_135_To_7_ESX', 'ArpPing_LS1_7_To_135_ESX',
               'VerifyLS1VM135ArpEntryOnHost4_ESX']
        KVM: &ARPPING_LS1_VM135_HOST4_VERIFICATION--KVM
            - ['ArpPing_LS1_135_To_7_KVM', 'ArpPing_LS1_7_To_135_KVM']

    ARPPING_LS2_VM468_Host1_Verification:
        ESX: &ARPPING_LS2_VM468_HOST1_VERIFICATION--ESX
            - ['ArpPing_LS2_468_To_2_ESX', 'ArpPing_LS2_2_To_468_ESX',
               'VerifyLS2VM468ArpEntryOnHost1_ESX']
        KVM: &ARPPING_LS2_VM468_HOST1_VERIFICATION--KVM
            - ['ArpPing_LS2_468_To_2_KVM', 'ArpPing_LS2_2_To_468_KVM']

    ARPPING_LS2_VM268_Host2_Verification:
        ESX: &ARPPING_LS2_VM268_HOST2_VERIFICATION--ESX
            - ['ArpPing_LS2_268_To_4_ESX', 'ArpPing_LS2_4_To_268_ESX',
               'VerifyLS2VM268ArpEntryOnHost2_ESX']
        KVM: &ARPPING_LS2_VM268_HOST2_VERIFICATION--KVM
            - ['ArpPing_LS2_268_To_4_KVM', 'ArpPing_LS2_4_To_268_KVM']

    ARPPING_LS2_VM248_Host3_Verification:
        ESX: &ARPPING_LS2_VM248_HOST3_VERIFICATION--ESX
            - ['ArpPing_LS2_248_To_6_ESX', 'ArpPing_LS2_6_To_248_ESX',
               'VerifyLS2VM248ArpEntryOnHost3_ESX']
        KVM: &ARPPING_LS2_VM248_HOST3_VERIFICATION--KVM
            - ['ArpPing_LS2_248_To_6_KVM', 'ArpPing_LS2_6_To_248_KVM']

    ARPPING_LS2_VM246_Host4_Verification:
        ESX: &ARPPING_LS2_VM246_HOST4_VERIFICATION--ESX
            - ['ArpPing_LS2_246_To_8_ESX', 'ArpPing_LS2_8_To_246_ESX',
               'VerifyLS2VM246ArpEntryOnHost4_ESX']
        KVM: &ARPPING_LS2_VM246_HOST4_VERIFICATION--KVM
            - ['ArpPing_LS2_246_To_8_KVM', 'ArpPing_LS2_8_To_246_KVM']

    ARPPING_LS1_VM7_Host1_Verification:
        ESX: &ARPPING_LS1_VM7_HOST1_VERIFICATION--ESX
            - ['ArpPing_LS1_7_To_1_ESX', 'ArpPing_LS1_1_To_7_ESX',
               'VerifyLS1VM7ArpEntryOnHost1_ESX']
        KVM: &ARPPING_LS1_VM7_HOST1_VERIFICATION--KVM
            - ['ArpPing_LS1_7_To_1_KVM', 'ArpPing_LS1_1_To_7_KVM']

    ARPPING_LS1_VM5_Host2_Verification:
        ESX: &ARPPING_LS1_VM5_HOST2_VERIFICATION--ESX
            - ['ArpPing_LS1_5_To_3_ESX', 'ArpPing_LS1_3_To_5_ESX',
               'VerifyLS1VM5ArpEntryOnHost2_ESX']
        KVM: &ARPPING_LS1_VM5_HOST2_VERIFICATION--KVM
            - ['ArpPing_LS1_5_To_3_KVM', 'ArpPing_LS1_3_To_5_KVM']

    ARPPING_LS1_VM3_Host3_Verification:
        ESX: &ARPPING_LS1_VM3_HOST3_VERIFICATION--ESX
            - ['ArpPing_LS1_3_To_5_ESX', 'ArpPing_LS1_5_To_3_ESX',
               'VerifyLS1VM3ArpEntryOnHost3_ESX']
        KVM: &ARPPING_LS1_VM3_HOST3_VERIFICATION--KVM
            - ['ArpPing_LS1_3_To_5_KVM', 'ArpPing_LS1_5_To_3_KVM']

    ARPPING_LS1_VM1_Host4_Verification:
        ESX: &ARPPING_LS1_VM1_HOST4_VERIFICATION--ESX
            - ['ArpPing_LS1_1_To_7_ESX', 'ArpPing_LS1_7_To_1_ESX',
               'VerifyLS1VM1ArpEntryOnHost4_ESX']
        KVM: &ARPPING_LS1_VM1_HOST4_VERIFICATION--KVM
            - ['ArpPing_LS1_1_To_7_KVM', 'ArpPing_LS1_7_To_1_KVM']

    ARPPING_LS2_VM8_Host1_Verification:
        ESX: &ARPPING_LS2_VM8_HOST1_VERIFICATION--ESX
            - ['ArpPing_LS2_8_To_2_ESX', 'ArpPing_LS2_2_To_8_ESX',
               'VerifyLS2VM8ArpEntryOnHost1_ESX']
        KVM: &ARPPING_LS2_VM8_HOST1_VERIFICATION--KVM
            - ['ArpPing_LS2_8_To_2_KVM', 'ArpPing_LS2_2_To_8_KVM']

    ARPPING_LS2_VM6_Host2_Verification:
        ESX: &ARPPING_LS2_VM6_HOST2_VERIFICATION--ESX
            - ['ArpPing_LS2_6_To_4_ESX', 'ArpPing_LS2_4_To_6_ESX',
               'VerifyLS2VM6ArpEntryOnHost2_ESX']
        KVM: &ARPPING_LS2_VM6_HOST2_VERIFICATION--KVM
            - ['ArpPing_LS2_6_To_4_KVM', 'ArpPing_LS2_4_To_6_KVM']

    ARPPING_LS2_VM4_Host3_Verification:
        ESX: &ARPPING_LS2_VM4_HOST3_VERIFICATION--ESX
            - ['ArpPing_LS2_4_To_6_ESX', 'ArpPing_LS2_6_To_4_ESX',
               'VerifyLS2VM4ArpEntryOnHost3_ESX']
        KVM: &ARPPING_LS2_VM4_HOST3_VERIFICATION--KVM
            - ['ArpPing_LS2_4_To_6_KVM', 'ArpPing_LS2_6_To_4_KVM']

    ARPPING_LS2_VM2_Host4_Verification:
        ESX: &ARPPING_LS2_VM2_HOST4_VERIFICATION--ESX
            - ['ArpPing_LS2_2_To_8_ESX', 'ArpPing_LS2_8_To_2_ESX',
               'VerifyLS2VM2ArpEntryOnHost4_ESX']
        KVM: &ARPPING_LS2_VM2_HOST4_VERIFICATION--KVM
            - ['ArpPing_LS2_2_To_8_KVM', 'ArpPing_LS2_8_To_2_KVM']

    ArpPing_LS1_357_To_1_ESX: &ARPPING_LS1_357_TO_1--ESX
        Type: 'Traffic'
        toolName: 'ArpPing'
        TestAdapter:    'vm.[3].vnic.[1],vm.[5].vnic.[1],vm.[7].vnic.[1]'
        SupportAdapter: 'vm.[1].vnic.[1]'
        TestDuration: *ARP_PING_DURATION
        ParallelSession: "yes"
        connectivitytest: '0'
        sleepbetweenworkloads: *SLEEP_FIRST_VM_ARP--ESX

    ArpPing_LS1_357_To_1_KVM: &ARPPING_LS1_357_TO_1--KVM
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[3].vif.[1],vm.[5].vif.[1],vm.[7].vif.[1]'
        SupportAdapter: 'vm.[1].vif.[1]'
        sleepbetweenworkloads: *SLEEP_FIRST_VM_ARP--KVM

    ArpPing_LS1_35_To_1_ESX: &ARPPING_LS1_35_TO_1--ESX
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[3].vif.[1],vm.[5].vif.[1]'
        SupportAdapter: 'vm.[1].vif.[1]'

    ArpPing_LS1_35_To_1_KVM: &ARPPING_LS1_35_TO_1--KVM
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[3].vif.[1],vm.[5].vif.[1]'
        SupportAdapter: 'vm.[1].vif.[1]'
        sleepbetweenworkloads: *SLEEP_FIRST_VM_ARP--KVM

    ArpPing_LS1_13_To_57_ESX: &ARPPING_LS1_13_TO_57--ESX
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[1].vnic.[1],vm.[3].vnic.[1]'
        SupportAdapter: 'vm.[5].vnic.[1],vm.[7].vnic.[1]'

    ArpPing_LS1_13_To_57_KVM: &ARPPING_LS1_13_TO_57--KVM
        <<: *ARPPING_LS1_357_TO_1--KVM
        TestAdapter:    'vm.[1].vif.[1],vm.[3].vif.[1]'
        SupportAdapter: 'vm.[5].vif.[1],vm.[7].vif.[1]'

    ArpPing_LS1_57_To_13_ESX: &ARPPING_LS1_57_TO_13--ESX
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[5].vnic.[1],vm.[7].vnic.[1]'
        SupportAdapter: 'vm.[1].vnic.[1],vm.[3].vnic.[1]'

    ArpPing_LS1_57_To_13_KVM: &ARPPING_LS1_57_TO_13--KVM
        <<: *ARPPING_LS1_357_TO_1--KVM
        TestAdapter:    'vm.[5].vif.[1],vm.[7].vif.[1]'
        SupportAdapter: 'vm.[1].vif.[1],vm.[3].vif.[1]'

    ArpPing_LS1_157_To_3_ESX: &ARPPING_LS1_157_TO_3--ESX
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[1].vnic.[1],vm.[5].vnic.[1],vm.[7].vnic.[1]'
        SupportAdapter: 'vm.[3].vnic.[1]'

    ArpPing_LS1_157_To_3_KVM: &ARPPING_LS1_157_TO_3--KVM
        <<: *ARPPING_LS1_357_TO_1--KVM
        TestAdapter:    'vm.[1].vif.[1],vm.[5].vif.[1],vm.[7].vif.[1]'
        SupportAdapter: 'vm.[3].vif.[1]'

    ArpPing_LS1_137_To_5_ESX: &ARPPING_LS1_137_TO_5--ESX
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[1].vnic.[1],vm.[3].vnic.[1],vm.[7].vnic.[1]'
        SupportAdapter: 'vm.[5].vnic.[1]'

    ArpPing_LS1_137_To_5_KVM: &ARPPING_LS1_137_TO_5--KVM
        <<: *ARPPING_LS1_357_TO_1--KVM
        TestAdapter:    'vm.[1].vif.[1],vm.[3].vif.[1],vm.[7].vif.[1]'
        SupportAdapter: 'vm.[5].vif.[1]'

    ArpPing_LS1_135_To_7_ESX: &ARPPING_LS1_135_TO_7--ESX
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[1].vnic.[1],vm.[3].vnic.[1],vm.[5].vnic.[1]'
        SupportAdapter: 'vm.[7].vnic.[1]'

    ArpPing_LS1_135_To_7_KVM: &ARPPING_LS1_135_TO_7--KVM
        <<: *ARPPING_LS1_357_TO_1--KVM
        TestAdapter:    'vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]'
        SupportAdapter: 'vm.[7].vif.[1]'

    ArpPing_LS1_35_To_7_ESX: &ARPPING_LS1_35_TO_7--ESX
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[3].vnic.[1],vm.[5].vnic.[1]'
        SupportAdapter: 'vm.[7].vnic.[1]'

    ArpPing_LS1_35_To_7_KVM: &ARPPING_LS1_35_TO_7--KVM
        <<: *ARPPING_LS1_357_TO_1--KVM
        TestAdapter:    'vm.[3].vif.[1],vm.[5].vif.[1]'
        SupportAdapter: 'vm.[7].vif.[1]'

    ArpPing_LS1_1_To_357_ESX: &ARPPING_LS1_1_TO_357--ESX
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[1].vnic.[1]'
        SupportAdapter: 'vm.[3].vnic.[1],vm.[5].vnic.[1],vm.[7].vnic.[1]'
        ParallelSession: "yes"
        sleepbetweenworkloads: *SLEEP_SECOND_VM_ARP--ESX

    ArpPing_LS1_1_To_357_KVM: &ARPPING_LS1_1_TO_357--KVM
        <<: *ARPPING_LS1_1_TO_357--ESX
        TestAdapter:    'vm.[1].vif.[1]'
        SupportAdapter: 'vm.[3].vif.[1],vm.[5].vif.[1],vm.[7].vif.[1]'
        sleepbetweenworkloads: *SLEEP_SECOND_VM_ARP--KVM

    ArpPing_LS1_3_To_157_ESX: &ARPPING_LS1_3_TO_157--ESX
        <<: *ARPPING_LS1_1_TO_357--ESX
        TestAdapter:    'vm.[3].vnic.[1]'
        SupportAdapter: 'vm.[1].vnic.[1],vm.[5].vnic.[1],vm.[7].vnic.[1]'

    ArpPing_LS1_3_To_157_KVM: &ARPPING_LS1_3_TO_157--KVM
        <<: *ARPPING_LS1_1_TO_357--KVM
        TestAdapter:    'vm.[3].vif.[1]'
        SupportAdapter: 'vm.[1].vif.[1],vm.[5].vif.[1],vm.[7].vif.[1]'

    ArpPing_LS1_5_To_137_ESX: &ARPPING_LS1_5_TO_137--ESX
        <<: *ARPPING_LS1_1_TO_357--ESX
        TestAdapter:    'vm.[5].vnic.[1]'
        SupportAdapter: 'vm.[1].vnic.[1],vm.[3].vnic.[1],vm.[7].vnic.[1]'

    ArpPing_LS1_5_To_137_KVM: &ARPPING_LS1_5_TO_137--KVM
        <<: *ARPPING_LS1_1_TO_357--KVM
        TestAdapter:    'vm.[5].vif.[1]'
        SupportAdapter: 'vm.[1].vif.[1],vm.[3].vif.[1],vm.[7].vif.[1]'

    ArpPing_LS1_7_To_135_ESX: &ARPPING_LS1_7_TO_135--ESX
        <<: *ARPPING_LS1_1_TO_357--ESX
        TestAdapter:    'vm.[7].vnic.[1]'
        SupportAdapter: 'vm.[1].vnic.[1],vm.[3].vnic.[1],vm.[5].vnic.[1]'

    ArpPing_LS1_7_To_135_KVM: &ARPPING_LS1_7_TO_135--KVM
        <<: *ARPPING_LS1_1_TO_357--KVM
        TestAdapter:    'vm.[7].vif.[1]'
        SupportAdapter: 'vm.[1].vif.[1],vm.[3].vif.[1],vm.[5].vif.[1]'

    ArpPing_LS1_1_To_7_ESX: &ARPPING_LS1_1_TO_7--ESX
        <<: *ARPPING_LS1_1_TO_357--ESX
        TestAdapter:    'vm.[1].vnic.[1]'
        SupportAdapter: 'vm.[7].vnic.[1]'
        sleepbetweenworkloads: *SLEEP_FIRST_VM_ARP--ESX

    ArpPing_LS1_1_To_5_ESX: &ARPPING_LS1_1_TO_5--ESX
        <<: *ARPPING_LS1_1_TO_357--ESX
        TestAdapter:    'vm.[1].vnic.[1]'
        SupportAdapter: 'vm.[5].vnic.[1]'
        sleepbetweenworkloads: *SLEEP_FIRST_VM_ARP--ESX

    ArpPing_LS1_1_To_7_KVM: &ARPPING_LS1_1_TO_7--KVM
        <<: *ARPPING_LS1_1_TO_357--KVM
        TestAdapter:    'vm.[1].vif.[1]'
        SupportAdapter: 'vm.[7].vif.[1]'
        sleepbetweenworkloads: *SLEEP_FIRST_VM_ARP--KVM

    ArpPing_LS1_1_To_5_KVM: &ARPPING_LS1_1_TO_5--KVM
        <<: *ARPPING_LS1_1_TO_357--KVM
        TestAdapter:    'vm.[1].vif.[1]'
        SupportAdapter: 'vm.[5].vif.[1]'
        sleepbetweenworkloads: *SLEEP_FIRST_VM_ARP--KVM

    ArpPing_LS1_7_To_1_ESX: &ARPPING_LS1_7_TO_1--ESX
        <<: *ARPPING_LS1_1_TO_7--ESX
        TestAdapter:    'vm.[7].vnic.[1]'
        SupportAdapter: 'vm.[1].vnic.[1]'
        sleepbetweenworkloads: *SLEEP_SECOND_VM_ARP--ESX

    ArpPing_LS1_7_To_1_KVM: &ARPPING_LS1_7_TO_1--KVM
        <<: *ARPPING_LS1_1_TO_7--KVM
        TestAdapter:    'vm.[7].vif.[1]'
        SupportAdapter: 'vm.[1].vif.[1]'
        sleepbetweenworkloads: *SLEEP_SECOND_VM_ARP--KVM

    ArpPing_LS1_7_To_3_ESX: &ARPPING_LS1_7_TO_3--ESX
        <<: *ARPPING_LS1_1_TO_7--ESX
        TestAdapter:    'vm.[7].vnic.[1]'
        SupportAdapter: 'vm.[3].vnic.[1]'
        sleepbetweenworkloads: *SLEEP_SECOND_VM_ARP--ESX

    ArpPing_LS1_7_To_3_KVM: &ARPPING_LS1_7_TO_3--KVM
        <<: *ARPPING_LS1_1_TO_7--KVM
        TestAdapter:    'vm.[7].vif.[1]'
        SupportAdapter: 'vm.[3].vif.[1]'
        sleepbetweenworkloads: *SLEEP_SECOND_VM_ARP--KVM

    ArpPing_LS1_3_To_5_ESX: &ARPPING_LS1_3_TO_5--ESX
        <<: *ARPPING_LS1_1_TO_7--ESX
        TestAdapter:    'vm.[3].vnic.[1]'
        SupportAdapter: 'vm.[5].vnic.[1]'

    ArpPing_LS1_3_To_5_KVM: &ARPPING_LS1_3_TO_5--KVM
        <<: *ARPPING_LS1_1_TO_7--KVM
        TestAdapter:    'vm.[3].vif.[1]'
        SupportAdapter: 'vm.[5].vif.[1]'

    ArpPing_LS1_5_To_3_ESX: &ARPPING_LS1_5_TO_3--ESX
        <<: *ARPPING_LS1_7_TO_1--ESX
        TestAdapter:    'vm.[5].vnic.[1]'
        SupportAdapter: 'vm.[3].vnic.[1]'

    ArpPing_LS1_5_To_3_KVM: &ARPPING_LS1_5_TO_3--KVM
        <<: *ARPPING_LS1_7_TO_1--KVM
        TestAdapter:    'vm.[5].vif.[1]'
        SupportAdapter: 'vm.[3].vif.[1]'

    ArpPing_LS2_468_To_2_ESX: &ARPPING_LS2_468_TO_2--ESX
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[4].vnic.[1],vm.[6].vnic.[1],vm.[8].vnic.[1]'
        SupportAdapter: 'vm.[2].vnic.[1]'

    ArpPing_LS2_468_To_2_KVM: &ARPPING_LS2_468_TO_2--KVM
        <<: *ARPPING_LS1_357_TO_1--KVM
        TestAdapter:    'vm.[4].vif.[1],vm.[6].vif.[1],vm.[8].vif.[1]'
        SupportAdapter: 'vm.[2].vif.[1]'

    ArpPing_LS2_24_To_68_ESX: &ARPPING_LS2_24_TO_68--ESX
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[2].vnic.[1],vm.[4].vnic.[1]'
        SupportAdapter: 'vm.[6].vnic.[1],vm.[8].vnic.[1]'

    ArpPing_LS2_24_To_68_KVM: &ARPPING_LS2_24_TO_68--KVM
        <<: *ARPPING_LS1_357_TO_1--KVM
        TestAdapter:    'vm.[2].vif.[1],vm.[4].vif.[1]'
        SupportAdapter: 'vm.[6].vif.[1],vm.[8].vif.[1]'

    ArpPing_LS2_68_To_24_ESX: &ARPPING_LS2_68_TO_24--ESX
        <<: *ARPPING_LS1_357_TO_1--ESX
        TestAdapter:    'vm.[6].vnic.[1],vm.[8].vnic.[1]'
        SupportAdapter: 'vm.[2].vnic.[1],vm.[4].vnic.[1]'

    ArpPing_LS2_68_To_24_KVM: &ARPPING_LS2_68_TO_24--KVM
        <<: *ARPPING_LS1_357_TO_1--KVM
        TestAdapter:    'vm.[6].vif.[1],vm.[8].vif.[1]'
        SupportAdapter: 'vm.[2].vif.[1],vm.[4].vif.[1]'

    ArpPing_LS2_268_To_4_ESX: &ARPPING_LS2_268_TO_4--ESX
        <<: *ARPPING_LS2_468_TO_2--ESX
        TestAdapter:    'vm.[2].vnic.[1],vm.[6].vnic.[1],vm.[8].vnic.[1]'
        SupportAdapter: 'vm.[4].vnic.[1]'

    ArpPing_LS2_268_To_4_KVM: &ARPPING_LS2_268_TO_4--KVM
        <<: *ARPPING_LS2_468_TO_2--KVM
        TestAdapter:    'vm.[2].vif.[1],vm.[6].vif.[1],vm.[8].vif.[1]'
        SupportAdapter: 'vm.[4].vif.[1]'

    ArpPing_LS2_248_To_6_ESX: &ARPPING_LS2_248_TO_6--ESX
        <<: *ARPPING_LS2_468_TO_2--ESX
        TestAdapter:    'vm.[2].vnic.[1],vm.[4].vnic.[1],vm.[8].vnic.[1]'
        SupportAdapter: 'vm.[6].vnic.[1]'

    ArpPing_LS2_248_To_6_KVM: &ARPPING_LS2_248_TO_6--KVM
        <<: *ARPPING_LS2_468_TO_2--KVM
        TestAdapter:    'vm.[2].vif.[1],vm.[4].vif.[1],vm.[8].vif.[1]'
        SupportAdapter: 'vm.[6].vif.[1]'

    ArpPing_LS2_246_To_8_ESX: &ARPPING_LS2_246_TO_8--ESX
        <<: *ARPPING_LS2_468_TO_2--ESX
        TestAdapter:    'vm.[2].vnic.[1],vm.[4].vnic.[1],vm.[6].vnic.[1]'
        SupportAdapter: 'vm.[8].vnic.[1]'

    ArpPing_LS2_246_To_8_KVM: &ARPPING_LS2_246_TO_8--KVM
        <<: *ARPPING_LS2_468_TO_2--KVM
        TestAdapter:    'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]'
        SupportAdapter: 'vm.[8].vif.[1]'

    ArpPing_LS2_2468_To_7_ESX: &ARPPING_LS2_2468_TO_7--ESX
        <<: *ARPPING_LS2_468_TO_2--ESX
        TestAdapter: 'vm.[2].vnic.[1],vm.[4].vnic.[1],vm.[6].vnic.[1],vm.[8].vnic.[1]'
        SupportAdapter: 'vm.[7].vnic.[1]'

    ArpPing_LS2_2468_To_7_KVM: &ARPPING_LS2_2468_TO_7--KVM
        <<: *ARPPING_LS2_468_TO_2--KVM
        TestAdapter: 'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1],vm.[8].vif.[1]'
        SupportAdapter: 'vm.[7].vif.[1]'

    ArpPing_LS2_46_To_8_ESX: &ARPPING_LS2_46_TO_8--ESX
        <<: *ARPPING_LS2_468_TO_2--ESX
        TestAdapter:    'vm.[4].vnic.[1],vm.[6].vnic.[1]'
        SupportAdapter: 'vm.[8].vnic.[1]'

    ArpPing_LS2_46_To_8_KVM: &ARPPING_LS2_46_TO_8--KVM
        <<: *ARPPING_LS2_468_TO_2--KVM
        TestAdapter:    'vm.[4].vif.[1],vm.[6].vif.[1]'
        SupportAdapter: 'vm.[8].vif.[1]'

    ArpPing_LS2_2_To_468_ESX: &ARPPING_LS2_2_TO_468--ESX
        <<: *ARPPING_LS1_1_TO_357--ESX
        TestAdapter:    'vm.[2].vnic.[1]'
        SupportAdapter: 'vm.[4].vnic.[1],vm.[6].vnic.[1],vm.[8].vnic.[1]'

    ArpPing_LS2_2_To_468_KVM: &ARPPING_LS2_2_TO_468--KVM
        <<: *ARPPING_LS1_1_TO_357--KVM
        TestAdapter:    'vm.[2].vif.[1]'
        SupportAdapter: 'vm.[4].vif.[1],vm.[6].vif.[1],vm.[8].vif.[1]'

    ArpPing_LS2_4_To_268_ESX: &ARPPING_LS2_4_TO_268--ESX
        <<: *ARPPING_LS2_2_TO_468--ESX
        TestAdapter:    'vm.[4].vnic.[1]'
        SupportAdapter: 'vm.[2].vnic.[1],vm.[6].vnic.[1],vm.[8].vnic.[1]'

    ArpPing_LS2_4_To_268_KVM: &ARPPING_LS2_4_TO_268--KVM
        <<: *ARPPING_LS2_2_TO_468--KVM
        TestAdapter:    'vm.[4].vif.[1]'
        SupportAdapter: 'vm.[2].vif.[1],vm.[6].vif.[1],vm.[8].vif.[1]'

    ArpPing_LS2_6_To_248_ESX: &ARPPING_LS2_6_TO_248--ESX
        <<: *ARPPING_LS2_2_TO_468--ESX
        TestAdapter:    'vm.[6].vnic.[1]'
        SupportAdapter: 'vm.[2].vnic.[1],vm.[4].vnic.[1],vm.[8].vnic.[1]'

    ArpPing_LS2_6_To_248_KVM: &ARPPING_LS2_6_TO_248--KVM
        <<: *ARPPING_LS2_2_TO_468--KVM
        TestAdapter:    'vm.[6].vif.[1]'
        SupportAdapter: 'vm.[2].vif.[1],vm.[4].vif.[1],vm.[8].vif.[1]'

    ArpPing_LS2_8_To_246_ESX: &ARPPING_LS2_8_TO_246--ESX
        <<: *ARPPING_LS2_2_TO_468--ESX
        TestAdapter:    'vm.[8].vnic.[1]'
        SupportAdapter: 'vm.[2].vnic.[1],vm.[4].vnic.[1],vm.[6].vnic.[1]'

    ArpPing_LS2_8_To_246_KVM: &ARPPING_LS2_8_TO_246--KVM
        <<: *ARPPING_LS2_2_TO_468--KVM
        TestAdapter:    'vm.[8].vif.[1]'
        SupportAdapter: 'vm.[2].vif.[1],vm.[4].vif.[1],vm.[6].vif.[1]'

    ArpPing_LS2_2_To_8_ESX: &ARPPING_LS2_2_TO_8--ESX
        <<: *ARPPING_LS1_1_TO_7--ESX
        TestAdapter:    'vm.[2].vnic.[1]'
        SupportAdapter: 'vm.[8].vnic.[1]'

    ArpPing_LS2_2_To_8_KVM: &ARPPING_LS2_2_TO_8--KVM
        <<: *ARPPING_LS1_1_TO_7--KVM
        TestAdapter:    'vm.[2].vif.[1]'
        SupportAdapter: 'vm.[8].vif.[1]'

    ArpPing_LS2_8_To_2_ESX: &ARPPING_LS2_8_TO_2--ESX
        <<: *ARPPING_LS1_7_TO_1--ESX
        TestAdapter:    'vm.[8].vnic.[1]'
        SupportAdapter: 'vm.[2].vnic.[1]'

    ArpPing_LS2_8_To_2_KVM: &ARPPING_LS2_8_TO_2--KVM
        <<: *ARPPING_LS1_7_TO_1--KVM
        TestAdapter:    'vm.[8].vif.[1]'
        SupportAdapter: 'vm.[2].vif.[1]'

    ArpPing_LS2_8_To_4_ESX: &ARPPING_LS2_8_TO_4--ESX
        <<: *ARPPING_LS1_7_TO_1--ESX
        TestAdapter:    'vm.[8].vnic.[1]'
        SupportAdapter: 'vm.[4].vnic.[1]'

    ArpPing_LS2_8_To_4_KVM: &ARPPING_LS2_8_TO_4--KVM
        <<: *ARPPING_LS1_7_TO_1--KVM
        TestAdapter:    'vm.[8].vif.[1]'
        SupportAdapter: 'vm.[4].vif.[1]'

    ArpPing_LS2_4_To_6_ESX: &ARPPING_LS2_4_TO_6--ESX
        <<: *ARPPING_LS2_2_TO_8--ESX
        TestAdapter:    'vm.[4].vnic.[1]'
        SupportAdapter: 'vm.[6].vnic.[1]'

    ArpPing_LS2_4_To_6_KVM: &ARPPING_LS2_4_TO_6--KVM
        <<: *ARPPING_LS2_2_TO_8--KVM
        TestAdapter:    'vm.[4].vif.[1]'
        SupportAdapter: 'vm.[6].vif.[1]'

    ArpPing_LS2_6_To_4_ESX: &ARPPING_LS2_6_TO_4--ESX
        <<: *ARPPING_LS2_8_TO_2--ESX
        TestAdapter:    'vm.[6].vnic.[1]'
        SupportAdapter: 'vm.[4].vnic.[1]'

    ArpPing_LS2_6_To_4_KVM: &ARPPING_LS2_6_TO_4--KVM
        <<: *ARPPING_LS2_8_TO_2--KVM
        TestAdapter:    'vm.[6].vif.[1]'
        SupportAdapter: 'vm.[4].vif.[1]'

    ArpPing_LS2_7_To_8_ESX: &ARPPING_LS2_7_TO_8--ESX
        <<: *ARPPING_LS1_1_TO_7--ESX
        TestAdapter:    'vm.[7].vnic.[1]'
        SupportAdapter: 'vm.[8].vnic.[1]'

    ArpPing_LS2_7_To_8_KVM: &ARPPING_LS2_7_TO_8--KVM
        <<: *ARPPING_LS1_1_TO_7--KVM
        TestAdapter:    'vm.[7].vif.[1]'
        SupportAdapter: 'vm.[8].vif.[1]'

    VerifyLS1ArpEntryOnControllers_ESX: &VERIFY_LS1_CCP_ARP--ESX
        Type: 'Switch'
        TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
        execution_type: *CONTROLLER_EXECUTION_TYPE
        switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
        endpoints: 'nsxcontroller.[-1]'
        noofretries: *NUM_ARP_ENTRY_CHECK_RETRIES
        sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--ESX
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vnic.[1]"
                  adapter_mac: "vm.[1].vnic.[1]"
                - adapter_ip:  "vm.[3].vnic.[1]"
                  adapter_mac: "vm.[3].vnic.[1]"
                - adapter_ip:  "vm.[5].vnic.[1]"
                  adapter_mac: "vm.[5].vnic.[1]"
                - adapter_ip:  "vm.[7].vnic.[1]"
                  adapter_mac: "vm.[7].vnic.[1]"

    VerifyLS1ArpEntryOnControllers_KVM: &VERIFY_LS1_CCP_ARP--KVM
        <<: *VERIFY_LS1_CCP_ARP--ESX
        sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vif.[1]"
                  adapter_mac: "vm.[1].vif.[1]"
                - adapter_ip:  "vm.[3].vif.[1]"
                  adapter_mac: "vm.[3].vif.[1]"
                - adapter_ip:  "vm.[5].vif.[1]"
                  adapter_mac: "vm.[5].vif.[1]"
                - adapter_ip:  "vm.[7].vif.[1]"
                  adapter_mac: "vm.[7].vif.[1]"

    VerifyLS1VM13ArpEntryOnControllers_ESX: &VERIFY_LS1_VM13_CCP_ARP--ESX
        <<: *VERIFY_LS1_CCP_ARP--ESX
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vnic.[1]"
                  adapter_mac: "vm.[1].vnic.[1]"
                - adapter_ip:  "vm.[3].vnic.[1]"
                  adapter_mac: "vm.[3].vnic.[1]"

    VerifyLS1VM13ArpEntryOnControllers_KVM: &VERIFY_LS1_VM13_CCP_ARP--KVM
        <<: *VERIFY_LS1_CCP_ARP--KVM
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vif.[1]"
                  adapter_mac: "vm.[1].vif.[1]"
                - adapter_ip:  "vm.[3].vif.[1]"
                  adapter_mac: "vm.[3].vif.[1]"

    VerifyLS1VM57ArpEntryOnControllers_ESX: &VERIFY_LS1_VM57_CCP_ARP--ESX
        <<: *VERIFY_LS1_CCP_ARP--ESX
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[5].vnic.[1]"
                  adapter_mac: "vm.[5].vnic.[1]"
                - adapter_ip:  "vm.[7].vnic.[1]"
                  adapter_mac: "vm.[7].vnic.[1]"

    VerifyLS1VM57ArpEntryOnControllers_KVM: &VERIFY_LS1_VM57_CCP_ARP--KVM
        <<: *VERIFY_LS1_CCP_ARP--KVM
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[5].vif.[1]"
                  adapter_mac: "vm.[5].vif.[1]"
                - adapter_ip:  "vm.[7].vif.[1]"
                  adapter_mac: "vm.[7].vif.[1]"

    VerifyLS1ArpEntryVM_1_3_5_OnControllers_ESX: &VERIFY_LS1_VM_1_3_5_CCP_ARP--ESX
        <<: *VERIFY_LS1_CCP_ARP--ESX
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vnic.[1]"
                  adapter_mac: "vm.[1].vnic.[1]"
                - adapter_ip:  "vm.[3].vnic.[1]"
                  adapter_mac: "vm.[3].vnic.[1]"
                - adapter_ip:  "vm.[5].vnic.[1]"
                  adapter_mac: "vm.[5].vnic.[1]"

    VerifyLS1VM357ArpEntryOnControllers_ESX: &VERIFY_LS1_VM357_CCP_ARP--ESX
        <<: *VERIFY_LS1_CCP_ARP--ESX
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[3].vnic.[1]"
                  adapter_mac: "vm.[3].vnic.[1]"
                - adapter_ip:  "vm.[5].vnic.[1]"
                  adapter_mac: "vm.[5].vnic.[1]"
                - adapter_ip:  "vm.[7].vnic.[1]"
                  adapter_mac: "vm.[7].vnic.[1]"

    VerifyLS1VM357ArpEntryOnControllers_KVM: &VERIFY_LS1_VM357_CCP_ARP--KVM
        <<: *VERIFY_LS1_CCP_ARP--KVM
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[3].vif.[1]"
                  adapter_mac: "vm.[3].vif.[1]"
                - adapter_ip:  "vm.[5].vif.[1]"
                  adapter_mac: "vm.[5].vif.[1]"
                - adapter_ip:  "vm.[7].vif.[1]"
                  adapter_mac: "vm.[7].vif.[1]"

    VerifyLS2ArpEntryOnControllers_ESX: &VERIFY_LS2_CCP_ARP--ESX
        <<: *VERIFY_LS1_CCP_ARP--ESX
        TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
        switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vnic.[1]"
                  adapter_mac: "vm.[2].vnic.[1]"
                - adapter_ip:  "vm.[4].vnic.[1]"
                  adapter_mac: "vm.[4].vnic.[1]"
                - adapter_ip:  "vm.[6].vnic.[1]"
                  adapter_mac: "vm.[6].vnic.[1]"
                - adapter_ip:  "vm.[8].vnic.[1]"
                  adapter_mac: "vm.[8].vnic.[1]"

    VerifyLS2ArpEntryOnControllers_KVM: &VERIFY_LS2_CCP_ARP--KVM
        <<: *VERIFY_LS2_CCP_ARP--ESX
        sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vif.[1]"
                  adapter_mac: "vm.[2].vif.[1]"
                - adapter_ip:  "vm.[4].vif.[1]"
                  adapter_mac: "vm.[4].vif.[1]"
                - adapter_ip:  "vm.[6].vif.[1]"
                  adapter_mac: "vm.[6].vif.[1]"
                - adapter_ip:  "vm.[8].vif.[1]"
                  adapter_mac: "vm.[8].vif.[1]"

    VerifyLS2VM24ArpEntryOnControllers_ESX: &VERIFY_LS2_VM24_CCP_ARP--ESX
        <<: *VERIFY_LS1_CCP_ARP--ESX
        TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
        switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vnic.[1]"
                  adapter_mac: "vm.[2].vnic.[1]"
                - adapter_ip:  "vm.[4].vnic.[1]"
                  adapter_mac: "vm.[4].vnic.[1]"

    VerifyLS2VM24ArpEntryOnControllers_KVM: &VERIFY_LS2_VM24_CCP_ARP--KVM
        <<: *VERIFY_LS2_CCP_ARP--ESX
        sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vif.[1]"
                  adapter_mac: "vm.[2].vif.[1]"
                - adapter_ip:  "vm.[4].vif.[1]"
                  adapter_mac: "vm.[4].vif.[1]"

    VerifyLS2VM68ArpEntryOnControllers_ESX: &VERIFY_LS2_VM68_CCP_ARP--ESX
        <<: *VERIFY_LS1_CCP_ARP--ESX
        TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
        switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[6].vnic.[1]"
                  adapter_mac: "vm.[6].vnic.[1]"
                - adapter_ip:  "vm.[8].vnic.[1]"
                  adapter_mac: "vm.[8].vnic.[1]"

    VerifyLS2VM68ArpEntryOnControllers_KVM: &VERIFY_LS2_VM68_CCP_ARP--KVM
        <<: *VERIFY_LS2_CCP_ARP--ESX
        sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[6].vif.[1]"
                  adapter_mac: "vm.[6].vif.[1]"
                - adapter_ip:  "vm.[8].vif.[1]"
                  adapter_mac: "vm.[8].vif.[1]"

    VerifyLS2VM7ArpEntryOnControllers_ESX: &VERIFY_LS2_VM7_CCP_ARP--ESX
        <<: *VERIFY_LS1_CCP_ARP--ESX
        TestSwitch: 'nsxmanager.[1].logicalswitch.[2]'
        switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[7].vnic.[1]"
                  adapter_mac: "vm.[7].vnic.[1]"

    VerifyLS2VM468ArpEntryOnControllers_ESX: &VERIFY_LS2_VM468_CCP_ARP--ESX
        <<: *VERIFY_LS2_CCP_ARP--ESX
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[4].vnic.[1]"
                  adapter_mac: "vm.[4].vnic.[1]"
                - adapter_ip:  "vm.[6].vnic.[1]"
                  adapter_mac: "vm.[6].vnic.[1]"
                - adapter_ip:  "vm.[8].vnic.[1]"
                  adapter_mac: "vm.[8].vnic.[1]"

    VerifyLS2VM468ArpEntryOnControllers_KVM: &VERIFY_LS2_VM468_CCP_ARP--KVM
        <<: *VERIFY_LS2_CCP_ARP--KVM
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[4].vif.[1]"
                  adapter_mac: "vm.[4].vif.[1]"
                - adapter_ip:  "vm.[6].vif.[1]"
                  adapter_mac: "vm.[6].vif.[1]"
                - adapter_ip:  "vm.[8].vif.[1]"
                  adapter_mac: "vm.[8].vif.[1]"

    VerifyLS1VM357ArpEntryOnHost1_ESX: &VERIFY_LS1_VM357_ARP_HOST1--ESX
        Type: "Switch"
        TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
        execution_type: 'cli'
        switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
        endpoints: 'esx.[1]'
        noofretries: *NUM_ARP_ENTRY_CHECK_RETRIES
        sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--ESX
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[3].vnic.[1]"
                  adapter_mac: "vm.[3].vnic.[1]"
                - adapter_ip:  "vm.[5].vnic.[1]"
                  adapter_mac: "vm.[5].vnic.[1]"
                - adapter_ip:  "vm.[7].vnic.[1]"
                  adapter_mac: "vm.[7].vnic.[1]"

    VerifyLS1VM357ArpEntryOnHost1_KVM: &VERIFY_LS1_VM357_ARP_HOST1--KVM
        <<: *VERIFY_LS1_VM357_ARP_HOST1--ESX
        endpoints: 'kvm.[1]'
        sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--KVM
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[3].vif.[1]"
                  adapter_mac: "vm.[3].vif.[1]"
                - adapter_ip:  "vm.[5].vif.[1]"
                  adapter_mac: "vm.[5].vif.[1]"
                - adapter_ip:  "vm.[7].vif.[1]"
                  adapter_mac: "vm.[7].vif.[1]"

    VerifyLS1VM157ArpEntryOnHost2_ESX: &VERIFY_LS1_VM157_ARP_HOST2--ESX
        <<: *VERIFY_LS1_VM357_ARP_HOST1--ESX
        endpoints: 'esx.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vnic.[1]"
                  adapter_mac: "vm.[1].vnic.[1]"
                - adapter_ip:  "vm.[5].vnic.[1]"
                  adapter_mac: "vm.[5].vnic.[1]"
                - adapter_ip:  "vm.[7].vnic.[1]"
                  adapter_mac: "vm.[7].vnic.[1]"

    VerifyLS1VM157ArpEntryOnHost2_KVM: &VERIFY_LS1_VM157_ARP_HOST2--KVM
        <<: *VERIFY_LS1_VM357_ARP_HOST1--KVM
        endpoints: 'kvm.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vif.[1]"
                  adapter_mac: "vm.[1].vif.[1]"
                - adapter_ip:  "vm.[5].vif.[1]"
                  adapter_mac: "vm.[5].vif.[1]"
                - adapter_ip:  "vm.[7].vif.[1]"
                  adapter_mac: "vm.[7].vif.[1]"

    VerifyLS1VM137ArpEntryOnHost3_ESX: &VERIFY_LS1_VM137_ARP_HOST3--ESX
        <<: *VERIFY_LS1_VM357_ARP_HOST1--ESX
        endpoints: 'esx.[3]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vnic.[1]"
                  adapter_mac: "vm.[1].vnic.[1]"
                - adapter_ip:  "vm.[3].vnic.[1]"
                  adapter_mac: "vm.[3].vnic.[1]"
                - adapter_ip:  "vm.[7].vnic.[1]"
                  adapter_mac: "vm.[7].vnic.[1]"

    VerifyLS1VM137ArpEntryOnHost3_KVM: &VERIFY_LS1_VM137_ARP_HOST3--KVM
        <<: *VERIFY_LS1_VM357_ARP_HOST1--KVM
        endpoints: 'kvm.[3]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vif.[1]"
                  adapter_mac: "vm.[1].vif.[1]"
                - adapter_ip:  "vm.[3].vif.[1]"
                  adapter_mac: "vm.[3].vif.[1]"
                - adapter_ip:  "vm.[7].vif.[1]"
                  adapter_mac: "vm.[7].vif.[1]"

    VerifyLS1VM135ArpEntryOnHost4_ESX: &VERIFY_LS1_VM135_ARP_HOST4--ESX
        <<: *VERIFY_LS1_VM357_ARP_HOST1--ESX
        endpoints: 'esx.[4]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vnic.[1]"
                  adapter_mac: "vm.[1].vnic.[1]"
                - adapter_ip:  "vm.[3].vnic.[1]"
                  adapter_mac: "vm.[3].vnic.[1]"
                - adapter_ip:  "vm.[5].vnic.[1]"
                  adapter_mac: "vm.[5].vnic.[1]"

    VerifyLS1VM135ArpEntryOnHost4_KVM: &VERIFY_LS1_VM135_ARP_HOST4--KVM
        <<: *VERIFY_LS1_VM357_ARP_HOST1--KVM
        endpoints: 'kvm.[4]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vif.[1]"
                  adapter_mac: "vm.[1].vif.[1]"
                - adapter_ip:  "vm.[3].vif.[1]"
                  adapter_mac: "vm.[3].vif.[1]"
                - adapter_ip:  "vm.[5].vif.[1]"
                  adapter_mac: "vm.[5].vif.[1]"

    VerifyLS2VM468ArpEntryOnHost1_ESX: &VERIFY_LS2_VM468_ARP_HOST1--ESX
        <<: *VERIFY_LS1_VM357_ARP_HOST1--ESX
        TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
        switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
        endpoints: 'esx.[1]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[4].vnic.[1]"
                  adapter_mac: "vm.[4].vnic.[1]"
                - adapter_ip:  "vm.[6].vnic.[1]"
                  adapter_mac: "vm.[6].vnic.[1]"
                - adapter_ip:  "vm.[8].vnic.[1]"
                  adapter_mac: "vm.[8].vnic.[1]"

    VerifyLS2VM468ArpEntryOnHost1_KVM: &VERIFY_LS2_VM468_ARP_HOST1--KVM
        <<: *VERIFY_LS1_VM357_ARP_HOST1--KVM
        TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
        switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
        endpoints: 'kvm.[1]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[4].vif.[1]"
                  adapter_mac: "vm.[4].vif.[1]"
                - adapter_ip:  "vm.[6].vif.[1]"
                  adapter_mac: "vm.[6].vif.[1]"
                - adapter_ip:  "vm.[8].vif.[1]"
                  adapter_mac: "vm.[8].vif.[1]"

    VerifyLS2VM268ArpEntryOnHost2_ESX: &VERIFY_LS2_VM268_ARP_HOST2--ESX
        <<: *VERIFY_LS2_VM468_ARP_HOST1--ESX
        endpoints: 'esx.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vnic.[1]"
                  adapter_mac: "vm.[2].vnic.[1]"
                - adapter_ip:  "vm.[6].vnic.[1]"
                  adapter_mac: "vm.[6].vnic.[1]"
                - adapter_ip:  "vm.[8].vnic.[1]"
                  adapter_mac: "vm.[8].vnic.[1]"

    VerifyLS2VM268ArpEntryOnHost2_KVM: &VERIFY_LS2_VM268_ARP_HOST2--KVM
        <<: *VERIFY_LS2_VM468_ARP_HOST1--KVM
        endpoints: 'kvm.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vif.[1]"
                  adapter_mac: "vm.[2].vif.[1]"
                - adapter_ip:  "vm.[6].vif.[1]"
                  adapter_mac: "vm.[6].vif.[1]"
                - adapter_ip:  "vm.[8].vif.[1]"
                  adapter_mac: "vm.[8].vif.[1]"

    VerifyLS2VM248ArpEntryOnHost3_ESX: &VERIFY_LS2_VM248_ARP_HOST3--ESX
        <<: *VERIFY_LS2_VM468_ARP_HOST1--ESX
        endpoints: 'esx.[3]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vnic.[1]"
                  adapter_mac: "vm.[2].vnic.[1]"
                - adapter_ip:  "vm.[4].vnic.[1]"
                  adapter_mac: "vm.[4].vnic.[1]"
                - adapter_ip:  "vm.[8].vnic.[1]"
                  adapter_mac: "vm.[8].vnic.[1]"

    VerifyLS2VM248ArpEntryOnHost3_KVM: &VERIFY_LS2_VM248_ARP_HOST3--KVM
        <<: *VERIFY_LS2_VM468_ARP_HOST1--KVM
        endpoints: 'kvm.[3]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vif.[1]"
                  adapter_mac: "vm.[2].vif.[1]"
                - adapter_ip:  "vm.[4].vif.[1]"
                  adapter_mac: "vm.[4].vif.[1]"
                - adapter_ip:  "vm.[8].vif.[1]"
                  adapter_mac: "vm.[8].vif.[1]"

    VerifyLS2VM246ArpEntryOnHost4_ESX: &VERIFY_LS2_VM246_ARP_HOST4--ESX
        <<: *VERIFY_LS2_VM468_ARP_HOST1--ESX
        endpoints: 'esx.[4]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vnic.[1]"
                  adapter_mac: "vm.[2].vnic.[1]"
                - adapter_ip:  "vm.[4].vnic.[1]"
                  adapter_mac: "vm.[4].vnic.[1]"
                - adapter_ip:  "vm.[6].vnic.[1]"
                  adapter_mac: "vm.[6].vnic.[1]"

    VerifyLS2VM246ArpEntryOnHost4_KVM: &VERIFY_LS2_VM246_ARP_HOST4--KVM
        <<: *VERIFY_LS2_VM468_ARP_HOST1--KVM
        endpoints: 'kvm.[4]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vif.[1]"
                  adapter_mac: "vm.[2].vif.[1]"
                - adapter_ip:  "vm.[4].vif.[1]"
                  adapter_mac: "vm.[4].vif.[1]"
                - adapter_ip:  "vm.[6].vif.[1]"
                  adapter_mac: "vm.[6].vif.[1]"

    VerifyLS1VM1ArpEntryOnHost4_ESX: &VERIFY_LS1_VM1_ARP_HOST4--ESX
        <<: *VERIFY_LS1_VM357_ARP_HOST1--ESX
        endpoints: 'esx.[4]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vnic.[1]"
                  adapter_mac: "vm.[1].vnic.[1]"

    VerifyLS1VM1ArpEntryOnHost4_KVM: &VERIFY_LS1_VM1_ARP_HOST4--KVM
        <<: *VERIFY_LS1_VM357_ARP_HOST1--KVM
        endpoints: 'kvm.[4]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vif.[1]"
                  adapter_mac: "vm.[1].vif.[1]"

    VerifyLS1VM7ArpEntryOnHost1_ESX: &VERIFY_LS1_VM7_ARP_HOST1--ESX
        <<: *VERIFY_LS1_VM357_ARP_HOST1--ESX
        endpoints: 'esx.[1]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[7].vnic.[1]"
                  adapter_mac: "vm.[7].vnic.[1]"

    VerifyLS1VM7ArpEntryOnHost1_KVM: &VERIFY_LS1_VM7_ARP_HOST1--KVM
        <<: *VERIFY_LS1_VM357_ARP_HOST1--KVM
        endpoints: 'kvm.[4]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[1].vif.[1]"
                  adapter_mac: "vm.[1].vif.[1]"

    VerifyLS1VM3ArpEntryOnHost3_ESX: &VERIFY_LS1_VM3_ARP_HOST3--ESX
        <<: *VERIFY_LS1_VM357_ARP_HOST1--ESX
        endpoints: 'esx.[3]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[3].vnic.[1]"
                  adapter_mac: "vm.[3].vnic.[1]"

    VerifyLS1VM3ArpEntryOnHost3_KVM: &VERIFY_LS1_VM3_ARP_HOST3--KVM
        <<: *VERIFY_LS1_VM357_ARP_HOST1--KVM
        endpoints: 'kvm.[3]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[3].vif.[1]"
                  adapter_mac: "vm.[3].vif.[1]"

    VerifyLS1VM5ArpEntryOnHost2_ESX: &VERIFY_LS1_VM5_ARP_HOST2--ESX
        <<: *VERIFY_LS1_VM357_ARP_HOST1--ESX
        endpoints: 'esx.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[5].vnic.[1]"
                  adapter_mac: "vm.[5].vnic.[1]"

    VerifyLS1VM5ArpEntryOnHost2_KVM: &VERIFY_LS1_VM5_ARP_HOST2--KVM
        <<: *VERIFY_LS1_VM357_ARP_HOST1--KVM
        endpoints: 'kvm.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[5].vif.[1]"
                  adapter_mac: "vm.[5].vif.[1]"

    VerifyLS2VM2ArpEntryOnHost4_ESX: &VERIFY_LS2_VM2_ARP_HOST4--ESX
        <<: *VERIFY_LS2_VM468_ARP_HOST1--ESX
        endpoints: 'esx.[4]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vnic.[1]"
                  adapter_mac: "vm.[2].vnic.[1]"

    VerifyLS2VM2ArpEntryOnHost4_KVM: &VERIFY_LS2_VM2_ARP_HOST4--KVM
        <<: *VERIFY_LS2_VM468_ARP_HOST1--KVM
        endpoints: 'kvm.[4]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[2].vif.[1]"
                  adapter_mac: "vm.[2].vif.[1]"

    VerifyLS2VM8ArpEntryOnHost1_ESX: &VERIFY_LS2_VM8_ARP_HOST1--ESX
        <<: *VERIFY_LS2_VM468_ARP_HOST1--ESX
        endpoints: 'esx.[1]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[8].vnic.[1]"
                  adapter_mac: "vm.[8].vnic.[1]"

    VerifyLS2VM8ArpEntryOnHost1_KVM: &VERIFY_LS2_VM8_ARP_HOST1--KVM
        <<: *VERIFY_LS2_VM468_ARP_HOST1--KVM
        endpoints: 'kvm.[1]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[8].vif.[1]"
                  adapter_mac: "vm.[8].vif.[1]"

    VerifyLS2VM6ArpEntryOnHost2_ESX: &VERIFY_LS2_VM6_ARP_HOST2--ESX
        <<: *VERIFY_LS2_VM468_ARP_HOST1--ESX
        endpoints: 'esx.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[6].vnic.[1]"
                  adapter_mac: "vm.[6].vnic.[1]"

    VerifyLS2VM6ArpEntryOnHost2_KVM: &VERIFY_LS2_VM6_ARP_HOST2--KVM
        <<: *VERIFY_LS2_VM468_ARP_HOST1--KVM
        endpoints: 'kvm.[2]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[6].vif.[1]"
                  adapter_mac: "vm.[6].vif.[1]"

    VerifyLS2VM4ArpEntryOnHost3_ESX: &VERIFY_LS2_VM4_ARP_HOST3--ESX
        <<: *VERIFY_LS2_VM468_ARP_HOST1--ESX
        endpoints: 'esx.[3]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[4].vnic.[1]"
                  adapter_mac: "vm.[4].vnic.[1]"

    VerifyLS2VM4ArpEntryOnHost3_KVM: &VERIFY_LS2_VM4_ARP_HOST3--KVM
        <<: *VERIFY_LS2_VM468_ARP_HOST1--KVM
        endpoints: 'kvm.[3]'
        'get_arp_table[?]contain_once':
            table:
                - adapter_ip:  "vm.[4].vif.[1]"
                  adapter_mac: "vm.[4].vif.[1]"

    VerifyLS1MacEntryOnControllers:
        ESX: &VERIFY_LS1_MAC_TABLE_CONTROLLER--ESX
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once':
                table:
                    - adapter_mac: "vm.[1].vnic.[1]"
                      adapter_ip: "esx.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vnic.[1]"
                      adapter_ip: "esx.[2].vtep.[1]"
        KVM: &VERIFY_LS1_MAC_TABLE_CONTROLLER--KVM
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[3].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"

    VerifyLS2MacEntryOnControllers:
        ESX: &VERIFY_LS2_MAC_TABLE_CONTROLLER--ESX
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vnic.[1]"
                      adapter_ip: "esx.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vnic.[1]"
                      adapter_ip: "esx.[2].vtep.[1]"
        KVM: &VERIFY_LS2_MAC_TABLE_CONTROLLER--KVM
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            noofretries: "3"
            sleepbetweenworkloads: *SLEEP_BEFORE_MAC_ENTRY_CHECK
            'get_mac_table[?]contain_once' :
                table:
                    - adapter_mac: "vm.[2].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"
                    - adapter_mac: "vm.[4].vif.[1]"
                      adapter_ip: "kvm.[2].vtep.[1]"

    VerifyLS1MacEntryOnControllersAfterLCPToCCPDisconnect:
        ESX: &VerifyLS1MacEntryOnControllersAfterLCPToCCPDisconnect--ESX
            Type: Switch
            execution_type: *CONTROLLER_EXECUTION_TYPE
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            sleepbetweenworkloads: 20
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]not_contains':
                table:
                    - adapter_mac: "vm.[1].vnic.[1]"
                      adapter_ip: "esx.[1].vtep.[1]"
        KVM: &VerifyLS1MacEntryOnControllersAfterLCPToCCPDisconnect--KVM
            Type: Switch
            execution_type: *CONTROLLER_EXECUTION_TYPE
            TestSwitch: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            sleepbetweenworkloads: 20
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            'get_mac_table[?]not_contains':
                table:
                    - adapter_mac: "vm.[1].vif.[1]"
                      adapter_ip: "kvm.[1].vtep.[1]"

    VerifyLS2MacEntryOnHost4AfterLCPToCCPDisconnect:
        ESX: &VerifyLS2MacEntryOnHost4AfterLCPToCCPDisconnect--ESX
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'esx.[4]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *MAC_ENTRY_EXPIRATION
            'get_mac_table[?]not_contains':
                table:
                    - adapter_mac: "vm.[2].vnic.[1]"

        KVM: &VerifyLS2MacEntryOnHost4AfterLCPToCCPDisconnect--KVM
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_MAC_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: '30'
            'get_mac_table[?]contains':
                table:
                    - adapter_mac: "vm.[2].vif.[1]"

    VerifyLS1ArpEntryOnHost4AfterLCPToCCPDisconnect:
        ESX: &VerifyLS2ArpEntryOnHost4AfterLCPToCCPDisconnect--ESX
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'esx.[4]'
            noofretries: *NUM_ARP_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--ESX
            'get_arp_table[?]not_contains':
                table:
                    - adapter_ip:  "vm.[1].vnic.[1]"
                      adapter_mac: "vm.[1].vnic.[1]"
        KVM: &VerifyLS2ArpEntryOnHost4AfterLCPToCCPDisconnect--KVM
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'kvm.[4]'
            noofretries: *NUM_ARP_ENTRY_CHECK_RETRIES
            sleepbetweenworkloads: *SLEEP_BEFORE_ARP_ENTRY_CHECK--ESX
            'get_arp_table[?]contains':
                table:
                    - adapter_ip:  "vm.[1].vif.[1]"
                      adapter_mac: "vm.[1].vif.[1]"

    VerifyLS2ArpEntryOnHost3AfterLCPToCCPDisconnect:
        ESX: &VerifyLS2ArpEntryOnHost3AfterLCPToCCPDisconnect--ESX
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'esx.[3]'
            noofretries: "10"
            sleepbetweenworkloads: *ARP_ENTRY_EXPIRATION
            'get_arp_table[?]not_contains':
                table:
                    - adapter_mac:  "vm.[8].vnic.[1]"
                      adapter_ip:   "vm.[8].vnic.[1]"
        KVM: &VerifyLS2ArpEntryOnHost3AfterLCPToCCPDisconnect--KVM
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: 'cli'
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'kvm.[3]'
            noofretries: "10"
            sleepbetweenworkloads: *ARP_ENTRY_EXPIRATION
            'get_arp_table[?]contain_once':
                table:
                    - adapter_mac:  "vm.[8].vif.[1]"
                      adapter_ip:   "vm.[8].vif.[1]"

    VerifyLS1StatsDiffOnController:
        ESX: &VerifyLS1StatsDiffOnControllers--ESX
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            verificationStyle: 'diff'
            'get_stats_table[?]contain_once':
                table:
                    - 'update_arp[?]>': "3"
                      'query_arp[?]>': "2"
        KVM: &VerifyLS1StatsDiffOnControllers--KVM
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
            endpoints: 'nsxcontroller.[-1]'
            verificationStyle: 'diff'
            'get_stats_table[?]contain_once':
                table:
                    - 'update_arp[?]>': "3"
                      'query_arp[?]=': "0"

    VerifyLS2StatsDiffOnControllers:
        ESX: &VerifyLS2StatsDiffOnControllers--ESX
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            verificationStyle: 'diff'
            'get_stats_table[?]contain_once':
                table:
                    - 'update_arp[?]>': "3"
                      'query_arp[?]>': "2"
        KVM: &VerifyLS2StatsDiffOnControllers--KVM
            Type: "Switch"
            TestSwitch: "nsxmanager.[1].logicalswitch.[2]"
            execution_type: *CONTROLLER_EXECUTION_TYPE
            switch_vni: 'nsxmanager.[1].logicalswitch.[2]'
            endpoints: 'nsxcontroller.[-1]'
            verificationStyle: 'diff'
            'get_stats_table[?]contain_once':
                table:
                    - 'update_arp[?]>': "3"
                      'query_arp[?]=': "0"

    ControllerSecurityPassword: &CONTROLLER_SECURITY_PASSWORD
        "12345"

    ControllerSecurityType: &CONTROLLER_SECURITY_TYPE
        "password"

    JoinController1ToCluster: &JOIN_CONTROLLER_1_TO_CLUSTER
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        clusternode:
            '[1]':
                controller_ip: 'nsxcontroller.[1]'
                control_cluster_thumbprint: 'nsxcontroller.[1]'
                execution_type: 'cli'

    JoinController2ToCluster: &JOIN_CONTROLLER_2_TO_CLUSTER
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        clusternode:
            '[2]':
                controller_ip: 'nsxcontroller.[2]'
                control_cluster_thumbprint: 'nsxcontroller.[2]'
                execution_type: 'cli'

    JoinController3ToCluster: &JOIN_CONTROLLER_3_TO_CLUSTER
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        clusternode:
            '[3]':
                controller_ip: 'nsxcontroller.[3]'
                control_cluster_thumbprint: 'nsxcontroller.[3]'
                execution_type: 'cli'

    ActivateController2: &ACTIVATE_CONTROLLER_2
        Type: Controller
        TestController: 'nsxcontroller.[2]'
        noofretries: *NUM_CONTROLLER_CHECK_RETRIES
        configure_service_state:
            state: 'activate'
            service_name: 'control-cluster'
        execution_type: 'cli'

    WAIT_FOR_MOOT: &WAIT_FOR_MOOT_STATUS
        '30'

    ActivateController3: &ACTIVATE_CONTROLLER_3
        Type: Controller
        TestController: 'nsxcontroller.[3]'
        sleepbetweenworkloads: *WAIT_FOR_MOOT_STATUS
        noofretries: *NUM_CONTROLLER_CHECK_RETRIES
        configure_service_state:
            state: 'activate'
            service_name: 'control-cluster'
        execution_type: 'cli'

    DeactivateController2: &DEACTIVATE_CONTROLLER_2
        Type: Controller
        TestController: 'nsxcontroller.[2]'
        noofretries: *NUM_CONTROLLER_CHECK_RETRIES
        configure_service_state:
            state: 'deactivate'
            service_name: 'control-cluster'
        execution_type: 'cli'

    DeactivateController3: &DEACTIVATE_CONTROLLER_3
        Type: Controller
        TestController: 'nsxcontroller.[3]'
        noofretries: *NUM_CONTROLLER_CHECK_RETRIES
        configure_service_state:
            state: 'deactivate'
            service_name: 'control-cluster'
        execution_type: 'cli'

    InitializeController1: &INITIALIZE_CONTROLLER_1
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        noofretries: *NUM_CONTROLLER_CHECK_RETRIES
        configure_service_state:
            state: 'initialize'
            service_name: 'control-cluster'
        execution_type: 'cli'

    RestartController1: &RESTART_CONTROLLER_1
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        noofretries: *NUM_CONTROLLER_CHECK_RETRIES
        configure_service_state:
            state: 'restart'
            service_name: 'control-cluster'
        execution_type: 'cli'

    RestartController2: &RESTART_CONTROLLER_2
        <<: *RESTART_CONTROLLER_1
        TestController: 'nsxcontroller.[2]'

    RestartController3: &RESTART_CONTROLLER_3
        <<: *RESTART_CONTROLLER_1
        TestController: 'nsxcontroller.[3]'

    SetSecurityOnController1: &SET_SECURITY_ON_CONTROLLER_1
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        set_security:
            security_type: *CONTROLLER_SECURITY_TYPE
            value: *CONTROLLER_SECURITY_PASSWORD
        execution_type: 'cli'

    SetSecurityOnController2: &SET_SECURITY_ON_CONTROLLER_2
        <<: *SET_SECURITY_ON_CONTROLLER_1
        TestController: 'nsxcontroller.[2]'

    SetSecurityOnController3: &SET_SECURITY_ON_CONTROLLER_3
        <<: *SET_SECURITY_ON_CONTROLLER_1
        TestController: 'nsxcontroller.[3]'

    DeleteMootServerOnController1: &DELETE_MOOT_SERVER_ON_CONTROLLER_1
        Type: 'NSX'
        TestNSX: 'nsxcontroller.[1]'
        delete_backend_file:
            file_name: '*'
            execution_type: 'cmd'
            path: '/config/moot-server'

    DeleteMootServerOnController2: &DELETE_MOOT_SERVER_ON_CONTROLLER_2
        <<: *DELETE_MOOT_SERVER_ON_CONTROLLER_1
        TestNSX: 'nsxcontroller.[2]'

    DeleteMootServerOnController3: &DELETE_MOOT_SERVER_ON_CONTROLLER_3
        <<: *DELETE_MOOT_SERVER_ON_CONTROLLER_1
        TestNSX: 'nsxcontroller.[3]'

    ClearController1: &CLEAR_CONTROLLER_1
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        clear_controller:
            execution_type: 'cmd'

    ClearController2: &CLEAR_CONTROLLER_2
        <<: *CLEAR_CONTROLLER_1
        TestController: 'nsxcontroller.[2]'

    ClearController3: &CLEAR_CONTROLLER_3
        <<: *CLEAR_CONTROLLER_1
        TestController: 'nsxcontroller.[3]'

    StartMootOnController1: &START_MOOT_ON_CONTROLLER_1
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        configure_service_state:
            state: 'start'
            service_name: 'moot-server'
            execution_type: 'cmd'

    StartMootOnController2: &START_MOOT_ON_CONTROLLER_2
        <<: *START_MOOT_ON_CONTROLLER_1
        TestController: 'nsxcontroller.[2]'

    StartMootOnController3: &START_MOOT_ON_CONTROLLER_3
        <<: *START_MOOT_ON_CONTROLLER_1
        TestController: 'nsxcontroller.[3]'

    StopMootOnController1: &STOP_MOOT_ON_CONTROLLER_1
        Type: Controller
        TestController: 'nsxcontroller.[1]'
        configure_service_state:
            state: 'stop'
            service_name: 'moot-server'
            execution_type: 'cmd'

    StopMootOnController2: &STOP_MOOT_ON_CONTROLLER_2
        <<: *STOP_MOOT_ON_CONTROLLER_1
        TestController: 'nsxcontroller.[2]'

    StopMootOnController3: &STOP_MOOT_ON_CONTROLLER_3
        <<: *STOP_MOOT_ON_CONTROLLER_1
        TestController: 'nsxcontroller.[3]'

    DeleteBootStrapOnController3: &DELETE_BOOT_STRAP_ON_CONTROLLER3
        Type: 'NSX'
        TestNSX: 'nsxcontroller.[3]'
        delete_backend_file:
            file_name: 'bootstrap-config'
            execution_type: 'cmd'
            path: '/opt/vmware/etc'

    DeleteControllerNodeUUIDFileOnController3: &DELETE_CONTROLLER_NODE_UUID_FILE_ON_CONTROLLER3
        Type: 'NSX'
        TestNSX: 'nsxcontroller.[3]'
        delete_backend_file:
            file_name: 'node-uuid'
            execution_type: 'cmd'
            path: '/opt/vmware/etc'

    DeleteBootStrapOnController2: &DELETE_BOOT_STRAP_ON_CONTROLLER2
        <<: *DELETE_BOOT_STRAP_ON_CONTROLLER3
        TestNSX: 'nsxcontroller.[2]'

    DeleteControllerNodeUUIDFileOnController2: &DELETE_CONTROLLER_NODE_UUID_FILE_ON_CONTROLLER2
        <<: *DELETE_CONTROLLER_NODE_UUID_FILE_ON_CONTROLLER3
        TestNSX: 'nsxcontroller.[2]'

    DeleteBootStrapOnController1: &DELETE_BOOT_STRAP_ON_CONTROLLER1
        <<: *DELETE_BOOT_STRAP_ON_CONTROLLER3
        TestNSX: 'nsxcontroller.[1]'

    DeleteControllerNodeUUIDFileOnController1: &DELETE_CONTROLLER_NODE_UUID_FILE_ON_CONTROLLER1
        <<: *DELETE_CONTROLLER_NODE_UUID_FILE_ON_CONTROLLER3
        TestNSX: 'nsxcontroller.[1]'

    UpHost4Vtep_ESX:
        Type:          "NetAdapter"
        TestAdapter:   "esx.[4].vtep.[1]"
        devicestatus:  "up"

    UpHost4Vtep_KVM:
        Type:          "NetAdapter"
        TestAdapter:   "kvm.[4].vtep.[1]"
        devicestatus:  "up"

    RefreshDhcpRouteOnHost4_KVM:
        Type:          "NetAdapter"
        TestAdapter:   "kvm.[4].vtep.[1]"
        renew_dhcp:
            execution_type: 'cli'

    RestoreHost4:
        ESX: &RESTORE_HOST4--ESX
            - ['UpHost4Vtep_ESX']
        KVM: &RESTORE_HOST4--KVM
            - ['UpHost4Vtep_KVM']
            - ['RefreshDhcpRouteOnHost4_KVM']

    UpHost3Vtep_ESX:
        Type:          "NetAdapter"
        TestAdapter:   "esx.[3].vtep.[1]"
        devicestatus:  "up"

    UpHost3Vtep_KVM:
        Type:          "NetAdapter"
        TestAdapter:   "kvm.[3].vtep.[1]"
        devicestatus:  "up"

    RefreshDhcpRouteOnHost3_KVM:
        Type:          "NetAdapter"
        TestAdapter:   "kvm.[3].vtep.[1]"
        renew_dhcp:
            execution_type: 'cli'

    RestoreHost3:
        ESX: &RESTORE_HOST3--ESX
            - ['UpHost3Vtep_ESX']
        KVM: &RESTORE_HOST3--KVM
            - ['UpHost3Vtep_KVM']
            - ['RefreshDhcpRouteOnHost3_KVM']

    SERVICE_EXECUTION_TYPE:
        ESX: &SERVICE_EXECUTION_TYPE--ESX
            cli
        KVM: &SERVICE_EXECUTION_TYPE--KVM
            cmd

PlatformAgnosticWorkloads: &PlatformAgnosticWorkloads
    CreateTransportZone: *CREATE_1_TRANSPORTZONE
    CreateIPDiscoveryProfile: *CREATE_IP_DISCOVERY_PROFILE_OVERLAY
    CreateUplinkProfile: *CREATE_UPLINK_PROFILE_01
    CreateLogicalSwitch: *CREATE_2_LOGICALSWITCHES
    DeleteAllLogicalSwitches: *DELETE_LOGICALSWITCHES
    DeleteAllUplinkProfiles: *DELETE_UPLINK_PROFILE
    DeleteAllIPDiscoveryProfiles: *DELETE_ALL_IPDISCOVERY_PROFILES
    DeleteAllTransportNodes: *DELETE_TRANSPORTNODES
    DeleteAllTransportZones: *DELETE_TRANSPORTZONES

1NodeCCP_1NodeMP_2Hosts_2VMs_1TZ_1LS_Workloads:
    ESX: &1NodeCCP_1NodeMP_2Hosts_2VMs_1TZ_1LS_Workloads--ESX
        <<: *PlatformAgnosticWorkloads
        SetupMPAndCCPCluster: *CREATE_1_NODE_MP_AND_1_NODE_CCP_CLUSTER
        VerifyMPAndCCPCluster: *VERIFY_1_NODE_MP_AND_1_NODE_CCP_CLUSTER
        RegisterHost1: *REGISTER_1_HOSTS--ESX
        Register2Hosts: *REGISTER_2_HOSTS--ESX
        DiscoverHostNode1: *DISCOVER_1_HOST_NODE--ESX
        Discover2HostNodes: *DISCOVER_2_HOST_NODES--ESX
        CreateTransportNodes: *CREATE_2_TRANSPORTNODES--ESX
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--ESX
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--ESX
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--ESX
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--ESX
        UnregisterHost1Lenient: *UNREGISTER_HOST1--ESX
        UnregisterHost1: *UNREGISTER_HOST1--ESX
        Unregister2Hosts: *UNREGISTER_2HOSTS--ESX
        CleanupMPAndCCPCluster: *CLEANUP_1_NODES_CCP_AND_1_NODES_MP_CLUSTER
        CreateTestVifs:
            - - AttachVM1toSwitch1
              - AttachVM3toSwitch1
        DeleteTestVifs:
            - - DeleteVM1Vnic1FromLSwitch1
              - DeleteVM3Vnic1FromLSwitch1

        L2Setup:
            - - SetupMPAndCCPCluster
            - - VerifyMPAndCCPCluster
            - - CreateIPDiscoveryProfileOverlay
            - - CreateTransportZone
            - - Register2Hosts
            - - Discover2HostNodes
            - - CreateUplinkProfile
            - - CreateTransportNodes
            - - CreateLogicalSwitch
            - - CreateTestVifs

        L2Cleanup:
            - - DeleteTestVifs
            - - DeleteAllLogicalSwitches
            - - DeleteAllTransportNodes
            - - DeleteAllTransportZones
            - - DeleteAllUplinkProfiles
              - DeleteAllIPDiscoveryProfiles
            - - Unregister2Hosts
            - - CleanupMPAndCCPCluster

    KVM: &1NodeCCP_1NodeMP_2Hosts_2VMs_1TZ_1LS_Workloads--KVM
        <<: *1NodeCCP_1NodeMP_2Hosts_2VMs_1TZ_1LS_Workloads--ESX
        RegisterHost1: *REGISTER_1_HOSTS--KVM
        Register2Hosts: *REGISTER_2_HOSTS--KVM
        DiscoverHostNode1: *DISCOVER_1_HOST_NODE--KVM
        Discover2HostNodes: *DISCOVER_2_HOST_NODES--KVM
        CreateTransportNodes: *CREATE_2_TRANSPORTNODES--KVM
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        DeleteVM1Vnic1FromLSwitch1:  *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM3Vnic1FromLSwitch1:  *DELETE_VM3_VNIC1_LSWITCH1--KVM
        UnregisterHost1Lenient: *UNREGISTER_HOST1--KVM
        UnregisterHost1: *UNREGISTER_HOST1--KVM
        Unregister2Hosts: *UNREGISTER_2HOSTS--KVM

3NodeCCP_3NodeMP_2Hosts_4VMs_1TZ_2LS_Workloads:
    ESX: &3NodeCCP_3NodeMP_2Hosts_4VMs_1TZ_2LS_Workloads--ESX
        <<: *PlatformAgnosticWorkloads
        SetupMPAndCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        VerifyMPAndCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CleanupMPAndCCPCluster: *CLEANUP_3_NODES_CCP_AND_3_NODES_MP_CLUSTER
        Register2Hosts: *REGISTER_2_HOSTS--ESX
        DiscoverHostnodes: *DISCOVER_2_HOST_NODES--ESX
        DiscoverVteps: *DISCOVER_2_VTEPS--ESX
        CreateTransportNodes: *CREATE_2_TRANSPORTNODES--ESX
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--ESX
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--ESX
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--ESX
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--ESX
        DeleteVM1Vnic1FromLSwitch1: *DELETE_VM1_VNIC1_LSWITCH1--ESX
        DeleteVM2Vnic1FromLSwitch2: *DELETE_VM2_VNIC1_LSWITCH2--ESX
        DeleteVM3Vnic1FromLSwitch1: *DELETE_VM3_VNIC1_LSWITCH1--ESX
        DeleteVM4Vnic1FromLSwitch2: *DELETE_VM4_VNIC1_LSWITCH2--ESX
        ConfigureVnicIP:  *CONFIGURE_4VMS_IP--ESX
        Unregister2Hosts: *UNREGISTER_2HOSTS--ESX
        VerifyLSReplicationModeOnHost: *VERIFY_2_LS_REP_MODE--ESX
        VerifyLS1MacEntryOnControllers: *VERIFY_LS1_MAC_TABLE_CONTROLLER--ESX
        VerifyLS2MacEntryOnControllers: *VERIFY_LS2_MAC_TABLE_CONTROLLER--ESX
        VerifyLS1VtepEntryOnControllers: *VERIFY_LS1_VTEP_TABLE_CONTROLLER--ESX
        VerifyLS2VtepEntryOnControllers: *VERIFY_LS2_VTEP_TABLE_CONTROLLER--ESX
        RemoveNSXController3FromCluster: *REMOVE_NSXCONTROLLER3_FROM_CLUSTER
        RemoveNSXController2FromCluster: *REMOVE_NSXCONTROLLER2_FROM_CLUSTER

        TopoSetup_3MP_3CCP:
            - ['Create3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeMPAnd3NodeCCPCluster']
            - ['Verify3NodeCCPCluster']

        TopoSetup_LogicalEntity:
            - ['Register2Hosts']
            - ['DiscoverHostnodes']
            - ['CreateTransportZone']
            - ['CreateUplinkProfile']
            - ['CreateTransportNodes']
            - ['CreateIPDiscoveryProfile']
            - ['DiscoverVteps']
            - ['CreateLogicalSwitch']
            - ['AttachVM1toSwitch1', 'AttachVM3toSwitch1']
            - ['AttachVM2toSwitch2', 'AttachVM4toSwitch2']
            - ['ConfigureVnicIP']

        Sanity_Check_Controller:
            - ['VerifyLS1MacEntryOnControllers',
               'VerifyLS2MacEntryOnControllers']
            - ['VerifyLS1VtepEntryOnControllers',
               'VerifyLS2VtepEntryOnControllers']

        TopoCleanup:
            - ['DeleteVM1Vnic1FromLSwitch1',  'DeleteVM3Vnic1FromLSwitch1']
            - ['DeleteVM2Vnic1FromLSwitch2',  'DeleteVM4Vnic1FromLSwitch2']
            - ['NSXCleanup']
            - ['Unregister4Hosts']

        LogicalSwitch1Traffic: &LS1_TRAFFIC--ESX
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[1].vnic.[1]"
            SupportAdapter: "vm.[3].vnic.[1]"
            TestDuration  : "10"

        LogicalSwitch2Traffic: &LS2_TRAFFIC--ESX
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[2].vnic.[1]"
            SupportAdapter: "vm.[4].vnic.[1]"
            TestDuration  : "10"

    KVM: &3NodeCCP_3NodeMP_2Hosts_4VMs_1TZ_2LS_Workloads--KVM
        <<: *PlatformAgnosticWorkloads
        <<: *3NodeCCP_3NodeMP_2Hosts_4VMs_1TZ_2LS_Workloads--ESX
        Register2Hosts: *REGISTER_2_HOSTS--KVM
        DiscoverHostnodes: *DISCOVER_2_HOST_NODES--KVM
        CreateTransportNodes: *CREATE_2_TRANSPORTNODES--KVM
        DiscoverVteps: *DISCOVER_2_VTEPS--KVM
        AttachVM1toSwitch1: *ATTACH_VM1_TO_SWITCH_1--KVM
        AttachVM2toSwitch2: *ATTACH_VM2_TO_SWITCH_2--KVM
        AttachVM3toSwitch1: *ATTACH_VM3_TO_SWITCH_1--KVM
        AttachVM4toSwitch2: *ATTACH_VM4_TO_SWITCH_2--KVM
        DeleteVM1Vnic1FromLSwitch1: *DELETE_VM1_VNIC1_LSWITCH1--KVM
        DeleteVM2Vnic1FromLSwitch2: *DELETE_VM2_VNIC1_LSWITCH2--KVM
        DeleteVM3Vnic1FromLSwitch1: *DELETE_VM3_VNIC1_LSWITCH1--KVM
        DeleteVM4Vnic1FromLSwitch2: *DELETE_VM4_VNIC1_LSWITCH2--KVM
        ConfigureVnicIP:  *CONFIGURE_4VMS_IP--KVM
        Unregister2Hosts: *UNREGISTER_2HOSTS--KVM
        VerifyLSReplicationModeOnHost: *VERIFY_2_LS_REP_MODE--KVM
        VerifyLS1MacEntryOnControllers: *VERIFY_LS1_MAC_TABLE_CONTROLLER--KVM
        VerifyLS2MacEntryOnControllers: *VERIFY_LS2_MAC_TABLE_CONTROLLER--KVM
        VerifyLS1VtepEntryOnControllers: *VERIFY_LS1_VTEP_TABLE_CONTROLLER--KVM
        VerifyLS2VtepEntryOnControllers: *VERIFY_LS2_VTEP_TABLE_CONTROLLER--KVM

        LogicalSwitch1Traffic: &LS1_TRAFFIC--KVM
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[1].vif.[1]"
            SupportAdapter: "vm.[3].vif.[1]"
            TestDuration  : "10"

        LogicalSwitch2Traffic: &LS2_TRAFFIC--KVM
            Type          : "Traffic"
            ToolName      : "netperf"
            L3Protocol    : "ipv4"
            L4Protocol    : "tcp"
            TestAdapter   : "vm.[2].vif.[1]"
            SupportAdapter: "vm.[4].vif.[1]"
            TestDuration  : "10"

3NodeCCP_3NodeMP_2Hosts_2VMs_1TZ_1LS_Workloads:
    ESX: &3NodeCCP_3NodeMP_2Hosts_2VMs_1TZ_1LS_Workloads--ESX
        <<: *1NodeCCP_1NodeMP_2Hosts_2VMs_1TZ_1LS_Workloads--ESX
        SetupMPAndCCPCluster: *CREATE_3_NODE_MP_AND_3_NODE_CCP_CLUSTER
        VerifyMPAndCCPCluster: *VERIFY_3_NODE_MP_AND_3_NODE_MP_CLUSTER
        CleanupMPAndCCPCluster: *CLEANUP_3_NODES_CCP_AND_3_NODES_MP_CLUSTER

    KVM: &3NodeCCP_3NodeMP_2Hosts_2VMs_1TZ_1LS_Workloads--KVM
        <<: *3NodeCCP_3NodeMP_2Hosts_2VMs_1TZ_1LS_Workloads--ESX
        <<: *1NodeCCP_1NodeMP_2Hosts_2VMs_1TZ_1LS_Workloads--KVM

STRESS_WORKLOADS: &STRESS_WORKLOADS
    RegisterUnregisterHost1_100--ESX:
         <<: *REGISTER_1_HOSTS--ESX
         Iterations: 100

         runworkload:
            <<: *UNREGISTER_HOST1--ESX
            Type: Host

    RegisterUnregisterHost1_100--KVM:
         <<: *REGISTER_1_HOSTS--KVM
         Iterations: 100

         runworkload:
            <<: *UNREGISTER_HOST1--KVM
            Type: Host

    CreateDeleteTransportZoneAndNode_100Times--ESX:
        Iterations: 2
        <<: *CREATE_1_TRANSPORTZONE
        runworkload:
            <<: *CREATE_TRANSPORTNODE_1--ESX
            runworkload:
                <<: *DELETE_TRANSPORTNODES
                runworkload:
                    <<: *DELETE_TRANSPORTZONES

    CreateDeleteTransportZoneAndNode_100Times--KVM:
        Iterations: 2
        <<: *CREATE_1_TRANSPORTZONE
        runworkload:
            <<: *CREATE_TRANSPORTNODE_1--KVM
            runworkload:
                <<: *DELETE_TRANSPORTNODES
                runworkload:
                    <<: *DELETE_TRANSPORTZONES

    CreateDeleteLogicalSwitch_100Times:
        Iterations: 100
        Type: NSX
        TestNSX: nsxmanager.[1]
        sync: true
        logicalswitch:
            '[1]':
                name: autogenerate
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                admin_state: UP
                # replication_mode's value is case sensitive
                replication_mode: MTEP
                switching_profile_ids:
                    - switching_profile_value: nsxmanager.[1].ipdiscovery_profile.[1]->id
                      switching_profile_key: *IPDISCOVERY_RPOFILE_RESOURCE
        runworkload:
            Type: NSX
            TestNSX: nsxmanager.[1]
            sync: true
            deletelogicalswitch: 'nsxmanager.[1].logicalswitch.[1]'

    CreateDeleteLogicalPort_100Times--ESX:
        Iterations: 100
        <<: *VIF_ATTACHMENT_01--ESX
        TestVM: 'vm.[1]'
        runworkload:
            <<: *DISCOVER_LOGICAL_PORT_VM1_VNIC1_LSWITCH1
            runworkload:
                <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_ESX

    CreateDeleteLogicalPort_100Times--KVM:
        Iterations: 100
        <<: *CREATE_VIF1_VM1
        runworkload:
            <<: *ATTACH_VM1_TO_SWITCH1_KVM
            runworkload:
                <<: *DELETE_LOGICAL_PORT1
                runworkload:
                    <<: *DELETE_VM1_VNIC1_IN_EXIT_SEQ_KVM

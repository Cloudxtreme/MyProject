WORKLOADS: &AUTOGENERATED_WORKLOADS
    __AUTOGENERATED__: true


    VerifyLS1VtepEntryOnHost1--ESX: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--ESX
        Type: "Switch"
        TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
        execution_type: 'cli'
        switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
        endpoints: 'esx.[1]'
        noofretries: 1
        'get_vtep_table[?]contain_once':
            table:
                - adapter_ip: "esx.[2].vtep.[1]"
    VerifyLS1VtepEntryOnHost1--KVM: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
        Type: "Switch"
        TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
        execution_type: 'cli'
        switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
        endpoints: 'kvm.[1]'
        noofretries: 1
        'get_vtep_table[?]contain_once':
            table:
                - adapter_ip: "kvm.[2].vtep.[1]"

    VerifyLS1VtepEntryOnHost2--ESX: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--ESX
        <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--ESX
        endpoints: 'esx.[2]'
        'get_vtep_table[?]contain_once':
            table:
                - adapter_ip: "esx.[1].vtep.[1]"
    VerifyLS1VtepEntryOnHost2--KVM: &VERIFY_LS1_VTEP_ENTRY_ON_HOST_2--KVM
        <<: *VERIFY_LS1_VTEP_ENTRY_ON_HOST_1--KVM
        endpoints: 'kvm.[2]'
        'get_vtep_table[?]contain_once':
            table:
                - adapter_ip: "kvm.[1].vtep.[1]"
    VerifyLSReplicationModeOnHost--ESX: &VERIFY_REPLICATION_MODE_ON_HOST--ESX
        Type: "Host"
        testHost: "esx.[1-2]"
        execution_type: 'cli'
        'get_logical_switch[?]contain_once':
            table:
                - switch_vni: "nsxmanager.[1].logicalswitch.[1]"
                  replication_mode: 'mtep'
    VerifyLSReplicationModeOnHost--KVM:
        <<: *VERIFY_REPLICATION_MODE_ON_HOST--ESX
        testHost: "kvm.[1-2]"

    VerifyLS1ConnTableOnControllers--ESX: &VERIFY_LS1_CONN_TABLE_ON_CONTROLLER_1--ESX
        Type: "Switch"
        TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
        endpoints: 'nsxcontroller.[-1]'
        execution_type: cli
        switch_vni: "nsxmanager.[1].logicalswitch.[1]"
        noofretries: "3"
        get_connection_table[?]contain_once:
          table:
            - adapter_ip: "esx.[1]->mgmt_ip"
            - adapter_ip: "esx.[2]->mgmt_ip"
    VerifyLS1ConnTableOnControllers--KVM: &VERIFY_LS1_CONN_TABLE_ON_CONTROLLER_1--KVM
        <<: *VERIFY_LS1_CONN_TABLE_ON_CONTROLLER_1--ESX
        get_connection_table[?]contain_once:
          table:
            - adapter_ip: "kvm.[1]->mgmt_ip"
            - adapter_ip: "kvm.[2]->mgmt_ip"

    VerifyLS1MacEntryOnControllers--ESX: &VERIFY_LS1_MAC_ENTRY_ON_CONTROLLERS--ESX
        Type: "Switch"
        TestSwitch: "nsxmanager.[1].logicalswitch.[1]"
        execution_type: cli
        switch_vni: 'nsxmanager.[1].logicalswitch.[1]'
        endpoints: 'nsxcontroller.[-1]'
        noofretries: "3"
        'get_mac_table[?]contain_once' :
            table:
                - adapter_mac: "vm.[1].vnic.[1]"
                  adapter_ip: "esx.[1].vtep.[1]"
                - adapter_mac: "vm.[2].vnic.[1]"
                  adapter_ip: "esx.[2].vtep.[1]"

    VerifyLS1MacEntryOnControllers--KVM:
        <<: *VERIFY_LS1_MAC_ENTRY_ON_CONTROLLERS--ESX
        'get_mac_table[?]contain_once' :
            table:
                - adapter_mac: "vm.[1].vif.[1]"
                  adapter_ip: "kvm.[1].vtep.[1]"
                - adapter_mac: "vm.[2].vif.[1]"
                  adapter_ip: "kvm.[2].vtep.[1]"

    AddVM1Vnic1ToLS1:
        TestVM: vm.[1]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[1]
                startconnected: 1

    AddVM2Vnic1ToLS1:
        TestVM: vm.[2]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[1]
                startconnected: 1

    ConfigureServiceOnNSXC-1_NAME-controller_STATE-stop:
        TestController: nsxcontroller.[1]
        Type: Controller
        configure_service_state:
            service_name: controller
            state: stop

    ConfigureVM1-2Vnic1IP-Auto:
        IPv4: auto
        TestAdapter: vm.[1-2].vnic.[1]
        Type: NetAdapter

    CreateLS-1_RMODE-MTEP:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[1]':
                admin_state: UP
                name: lswitch1
                replication_mode: MTEP
                summary: lswitch1 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-1_HOSTNODE-1_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[1]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[1]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-2_HOSTNODE-2_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[2]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[2]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTZ-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportzone:
            '[1]':
                name: transportzone1
                summary: transportzone1 (created through automation)
                switch_name: nsxvswitch
                transport_zone_type: OVERLAY

    CreateUPROF-1_MTU-1600:
        TestNSX: nsxmanager.[1]
        Type: NSX
        uplinkprofile:
            '[1]':
                mtu: 1600
                resource_type: UplinkHostSwitchProfile
                teaming:
                    active:
                    -   adapter_name: uplink1
                        adapter_type: PNIC
                    policy: FAILOVER_ORDER
                vlan: 0

    DeleteBootstrapFileOnNSXC-1:
        TestNSX: nsxcontroller.[1]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: bootstrap-config
            path: /opt/vmware/etc

    DeleteCCPClusterNode-1_NSXC-1_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxcontroller.[1].clusternode.[1]

    DeleteLS-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[1]

    DeleteNodeUUIDFileOnNSXC-1:
        TestNSX: nsxcontroller.[1]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: node-uuid
            path: /opt/vmware/etc

    DeleteTN-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportnode: nsxmanager.[1].transportnode.[1]

    DeleteTN-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportnode: nsxmanager.[1].transportnode.[2]

    DeleteTZ-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportzone: nsxmanager.[1].transportzone.[1]

    DeleteUPROF-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteuplinkprofile: nsxmanager.[1].uplinkprofile.[1]

    DeleteVnic-1_VM-1:
        TestVM: vm.[1]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-2:
        TestVM: vm.[2]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DiscoverESX1Vtep1FromDevice-vmk10:
        Testhost: esx.[1]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: vmk10

    DiscoverESX2Vtep1FromDevice-vmk10:
        Testhost: esx.[2]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: vmk10

    DiscoverHostNode1FromESX1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[1]':
                discover: 'true'
                ip_addresses: esx.[1]

    DiscoverHostNode2FromESX2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[2]':
                discover: 'true'
                ip_addresses: esx.[2]

    DiscoverLport1FromVM1Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[1]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport2FromVM2Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[2]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[2].vnic.[1]->uuid
                discover: 'true'

    JoinCCPClusterNode-1_NSXC-1_ToNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        clusternode:
            '[1]':
                controller_ip: nsxcontroller.[1]
                control_cluster_thumbprint: 'nsxcontroller.[1]'
                execution_type: cli

    JoinMPClusterNode-1_NSXM-1_ToNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        clusternode:
            '[1]':
                mgr_role_config:
                    manager_ip: nsxmanager.[1]
                    manager_thumbprint: nsxmanager.[1]
                    node_type: AddManagementNodeSpec
                    password: default
                    username: admin

    MapNSXManager-1_CLUSTER-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        cluster:
            '[1]':
                id_: 1
                map_object: true

    PingFromVM1Vnic1ToVM2Vnic1:
        SupportAdapter: vm.[2].vnic.[1]
        TestAdapter: vm.[1].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromVM3Vnic1ToVM4Vnic1:
        SupportAdapter: vm.[4].vnic.[1]
        TestAdapter: vm.[3].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    RemoveCCPClusterNode-1_FromNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        noofretries: 10
        remove_ccp_cluster_node:
            controller_ip: nsxcontroller.[1]
            execution_type: cli
            force: 'yes'

    RemoveManagerOnESX-1:
        TestHost: esx.[1]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnESX-2:
        TestHost: esx.[2]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnESX-1:
        TestHost: esx.[1]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnESX-2:
        TestHost: esx.[2]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    UndiscoverHostNode-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[1]
        skipmethod: 1

    UndiscoverHostNode-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[2]
        skipmethod: 1

    UndiscoverLSP-1-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[1-2]
        skipmethod: 1

    VerifyMPClusterStatus-1_NSXM-1:
        TestCluster: nsxmanager.[1].cluster.[1]
        Type: Cluster
        cluster_status:
            control_cluster_status:
                status[?]equal_to: STABLE
            mgmt_cluster_status:
                status[?]equal_to: STABLE

    WaitForMPClusterStable-1_NSXM-1:
        TestCluster: nsxmanager.[1].cluster.[1]
        Type: Cluster
        wait_for_required_cluster_status:
            required_status: STABLE
            time_to_monitor: 300

    PingFailFromVM1Vnic1ToVM2Vnic1:
        ExpectedResult: Fail
        SupportAdapter: vm.[2].vnic.[1]
        TestAdapter: vm.[1].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0
        Verification: Verification_ICMP_UNREACH_VM1_VM2--ESX

    PingFailFromVM3Vnic1ToVM4Vnic1:
        ExpectedResult: Fail
        SupportAdapter: vm.[4].vnic.[1]
        TestAdapter: vm.[3].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0
        Verification: Verification_ICMP_UNREACH_VM3_VM4--ESX

    PingFailFromVM2Vnic1ToVM4Vnic1:
        ExpectedResult: Fail
        SupportAdapter: vm.[4].vnic.[1]
        TestAdapter: vm.[2].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0
        Verification: Verification_ICMP_UNREACH_VM2_VM4--ESX

    PingFailFromVM2Vnic1ToVM3Vnic1:
        ExpectedResult: Fail
        SupportAdapter: vm.[3].vnic.[1]
        TestAdapter: vm.[2].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0
        Verification: Verification_ICMP_UNREACH_VM2_VM3--ESX

    AddVM1Vif1ToKVM1Bridge1:
        TestVM: vm.[1]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[1].bridge.[1]

    AddVM2Vif1ToKVM2Bridge1:
        TestVM: vm.[2]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[2].bridge.[1]

    ConfigureVM1-2Vif1IP-Auto:
        IPv4: auto
        TestAdapter: vm.[1-2].vif.[1]
        Type: NetAdapter

    CreateLP1OnLS1ForVM1Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[1]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLP2OnLS1ForVM2Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[2]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[2].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateTN-1_HOSTNODE-1_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[1]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[1]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-2_HOSTNODE-2_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[2]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[2]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    DeleteLSP-1-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[1-2]
        query_params:
            detach: 'true'

    DeleteVif-1_VM-1:
        TestVM: vm.[1]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-2:
        TestVM: vm.[2]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DiscoverHostNode1FromKVM1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[1]':
                discover: 'true'
                ip_addresses: kvm.[1]

    DiscoverHostNode2FromKVM2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[2]':
                discover: 'true'
                ip_addresses: kvm.[2]

    DiscoverKVM1Vtep1FromDevice-nsx-vtep0.0:
        Testhost: kvm.[1]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: nsx-vtep0.0

    DiscoverKVM2Vtep1FromDevice-nsx-vtep0.0:
        Testhost: kvm.[2]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: nsx-vtep0.0

    PingFailFromVM1Vif1ToVM2Vif1:
        ExpectedResult: Fail
        SupportAdapter: vm.[2].vif.[1]
        TestAdapter: vm.[1].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0
        Verification: Verification_ICMP_UNREACH_VM1_VM2--KVM
    Verification_ICMP_UNREACH_VM1_VM2--KVM:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[1].vif.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[1].vif.[1],src host vm.[2].vif.[1]
           pktcount: 1-10
           badpkt: 0
    Verification_ICMP_UNREACH_VM1_VM2--ESX:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[1].vnic.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[1].vnic.[1],src host vm.[2].vnic.[1]
           pktcount: 1-10
           badpkt: 0
    Verification_ICMP_UNREACH_VM3_VM4--KVM:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[3].vif.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[3].vif.[1],src host vm.[4].vif.[1]
           pktcount: 1-10
           badpkt: 0
    Verification_ICMP_UNREACH_VM3_VM4--ESX:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[3].vnic.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[3].vnic.[1],src host vm.[4].vnic.[1]
           pktcount: 1-10
           badpkt: 0
    Verification_ICMP_UNREACH_VM2_VM4--KVM:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[2].vif.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[2].vif.[1],src host vm.[4].vif.[1]
           pktcount: 1-10
           badpkt: 0
    Verification_ICMP_UNREACH_VM2_VM4--ESX:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[2].vnic.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[2].vnic.[1],src host vm.[4].vnic.[1]
           pktcount: 1-10
           badpkt: 0
    Verification_ICMP_UNREACH_VM2_VM3--KVM:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[2].vif.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[2].vif.[1],src host vm.[3].vif.[1]
           pktcount: 1-10
           badpkt: 0
    Verification_ICMP_UNREACH_VM2_VM3--ESX:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[2].vnic.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[2].vnic.[1],src host vm.[3].vnic.[1]
           pktcount: 1-10
           badpkt: 0
    PingFailFromVM2Vif1ToVM4Vif1:
        ExpectedResult: Fail
        SupportAdapter: vm.[4].vif.[1]
        TestAdapter: vm.[2].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0
        Verification: Verification_ICMP_UNREACH_VM2_VM4--KVM

    PingFailFromVM3Vif1ToVM4Vif1:
        ExpectedResult: Fail
        SupportAdapter: vm.[4].vif.[1]
        TestAdapter: vm.[3].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0
        Verification: Verification_ICMP_UNREACH_VM3_VM4--KVM

    PingDropFromVM3Vnic1ToVM4Vnic1:
        ExpectedResult: Fail
        SupportAdapter: vm.[4].vnic.[1]
        TestAdapter: vm.[3].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0
        Verification: Verification_ICMP_Drop_VM3_VM4--ESX

    PingDropFromVM1Vnic1ToVM2Vnic1:
        ExpectedResult: Fail
        SupportAdapter: vm.[2].vnic.[1]
        TestAdapter: vm.[1].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0
        Verification: Verification_ICMP_Drop_VM1_VM2--ESX

    PingDropFromVM3Vif1ToVM4Vif1:
        ExpectedResult: Fail
        SupportAdapter: vm.[4].vif.[1]
        TestAdapter: vm.[3].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0
        Verification: Verification_ICMP_Drop_VM3_VM4--KVM

    PingDropFromVM1Vif1ToVM2Vif1:
        ExpectedResult: Fail
        SupportAdapter: vm.[2].vif.[1]
        TestAdapter: vm.[1].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0
        Verification: Verification_ICMP_Drop_VM1_VM2--KVM

    Verification_ICMP_Drop_VM1_VM2--KVM:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[1].vif.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[1].vif.[1],src host vm.[2].vif.[1]
           pktcount: 0
           badpkt: 0
    Verification_ICMP_Drop_VM1_VM2--ESX:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[1].vnic.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[1].vnic.[1],src host vm.[2].vnic.[1]
           pktcount: 0
           badpkt: 0
    Verification_ICMP_Drop_VM3_VM4--KVM:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[3].vif.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[3].vif.[1],src host vm.[4].vif.[1]
           pktcount: 0
           badpkt: 0
    Verification_ICMP_Drop_VM3_VM4--ESX:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[3].vnic.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[3].vnic.[1],src host vm.[4].vnic.[1]
           pktcount: 0
           badpkt: 0
    Verification_ICMP_Drop_VM2_VM4--KVM:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[2].vif.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[2].vif.[1],src host vm.[4].vif.[1]
           pktcount: 0
           badpkt: 0
    Verification_ICMP_Drop_VM2_VM4--ESX:
        PktCapVerificaton:
           verificationtype: pktcap
           target: vm.[2].vnic.[1]
           pktcapfilter: count 1,icmptype == icmp-unreach,icmpcode == 10,dst host vm.[2].vnic.[1],src host vm.[4].vnic.[1]
           pktcount: 0
           badpkt: 0

    PingFromVM1Vif1ToVM2Vif1:
        SupportAdapter: vm.[2].vif.[1]
        TestAdapter: vm.[1].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromVM3Vif1ToVM4Vif1:
        SupportAdapter: vm.[4].vif.[1]
        TestAdapter: vm.[3].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    NetcatListenOnVM2:
        Type: VM
        TestVM: vm.[2]
        start_netcat_server:
            ip: vm.[2].vnic.[1]->adapter_ip
            port: 4444
            wait: False
            execution_type: cmd

    NetcatListenOnVM4:
        Type: VM
        TestVM: vm.[4]
        start_netcat_server:
            ip: vm.[4].vnic.[1]->adapter_ip
            port: 4444
            wait: False
            execution_type: cmd

    RemoveManagerOnKVM-1:
        TestHost: kvm.[1]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnKVM-2:
        TestHost: kvm.[2]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-1:
        TestHost: kvm.[1]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-2:
        TestHost: kvm.[2]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    AddVM3Vnic1ToLS1:
        TestVM: vm.[3]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[1]
                startconnected: 1

    AddVM4Vnic1ToLS1:
        TestVM: vm.[4]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[1]
                startconnected: 1

    ConfigureVM1-4Vnic1IP-Auto:
        IPv4: auto
        TestAdapter: vm.[1-4].vnic.[1]
        Type: NetAdapter

    DeleteVnic-1_VM-3:
        TestVM: vm.[3]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-4:
        TestVM: vm.[4]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DiscoverLport3FromVM1Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[3]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport4FromVM1Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[4]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vnic.[1]->uuid
                discover: 'true'

    UndiscoverLSP-1-4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[1-4]
        skipmethod: 1

    Add192RouteOnVM1Vnic1viaLRP1:
        TestAdapter: vm.[1].vnic.[1]
        Type: NetAdapter
        destination: 192.0.0.0
        gateway: nsxmanager.[1].logicalrouterport.[1]->ip
        netmask: 255.0.0.0
        route: add

    Add192RouteOnVM2Vnic1viaLRP1:
        TestAdapter: vm.[2].vnic.[1]
        Type: NetAdapter
        destination: 192.0.0.0
        gateway: nsxmanager.[1].logicalrouterport.[1]->ip
        netmask: 255.0.0.0
        route: add

    Add192RouteOnVM3Vnic1viaLRP2:
        TestAdapter: vm.[3].vnic.[1]
        Type: NetAdapter
        destination: 192.0.0.0
        gateway: nsxmanager.[1].logicalrouterport.[2]->ip
        netmask: 255.0.0.0
        route: add

    Add192RouteOnVM4Vnic1viaLRP2:
        TestAdapter: vm.[4].vnic.[1]
        Type: NetAdapter
        destination: 192.0.0.0
        gateway: nsxmanager.[1].logicalrouterport.[2]->ip
        netmask: 255.0.0.0
        route: add

    AddVM3Vnic1ToLS2:
        TestVM: vm.[3]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[2]
                startconnected: 1

    AddVM4Vnic1ToLS2:
        TestVM: vm.[4]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[2]
                startconnected: 1

    CreateLR-1_TIER-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouter:
            '[1]':
                name: lrouter-1
                router_type: TIER1
                summary: LRouter1 created through automation

    CreateLRP-1_LR-1_IP-192.168.4.1_LSP-5:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[1]':
                linked_switch_port_id: nsxmanager.[1].logicalport.[5]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[1]
                name: lrouterport-1
                resource_type: LogicalRouterDownLinkPort
                subnets:
                -   ip_addresses:
                    - 192.168.4.1
                    prefixlen: 24
                summary: LRPort1 created through automation

    CreateLRP-2_LR-1_IP-192.168.5.1_LSP-6:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalrouterport:
            '[2]':
                linked_switch_port_id: nsxmanager.[1].logicalport.[6]->id
                logical_router_id: nsxmanager.[1].logicalrouter.[1]
                name: lrouterport-2
                resource_type: LogicalRouterDownLinkPort
                subnets:
                -   ip_addresses:
                    - 192.168.5.1
                    prefixlen: 24
                summary: LRPort2 created through automation

    CreateLS-2_RMODE-MTEP:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[2]':
                admin_state: UP
                name: lswitch2
                replication_mode: MTEP
                summary: lswitch2 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLSP-5_LS-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[5]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLSP-6_LS-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[6]':
                admin_state: UP
                switch_id: nsxmanager.[1].logicalswitch.[2]->id

    DeleteLR-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouter: nsxmanager.[1].logicalrouter.[1]

    DeleteLRP-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouterport: nsxmanager.[1].logicalrouterport.[1]

    DeleteLRP-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalrouterport: nsxmanager.[1].logicalrouterport.[2]

    DeleteLS-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[2]

    DeleteLSP-5:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[5]
        query_params:
            detach: 'true'

    DeleteLSP-6:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[6]
        query_params:
            detach: 'true'

    DiscoverLport3FromVM3Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[3]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[3].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport4FromVM4Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[4]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[4].vnic.[1]->uuid
                discover: 'true'

    PingFromVM2Vnic1ToVM3Vnic1:
        SupportAdapter: vm.[3].vnic.[1]
        TestAdapter: vm.[2].vnic.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromESX1Vtep1ToESX2Vtep1:
        SupportAdapter: esx.[2].vtep.[1]
        TestAdapter: esx.[1].vtep.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    Add192RouteOnVM1Vif1viaLRP1:
        TestAdapter: vm.[1].vif.[1]
        Type: NetAdapter
        destination: 192.0.0.0
        gateway: nsxmanager.[1].logicalrouterport.[1]->ip
        netmask: 255.0.0.0
        route: add

    Add192RouteOnVM2Vif1viaLRP1:
        TestAdapter: vm.[2].vif.[1]
        Type: NetAdapter
        destination: 192.0.0.0
        gateway: nsxmanager.[1].logicalrouterport.[1]->ip
        netmask: 255.0.0.0
        route: add

    Add192RouteOnVM3Vif1viaLRP2:
        TestAdapter: vm.[3].vif.[1]
        Type: NetAdapter
        destination: 192.0.0.0
        gateway: nsxmanager.[1].logicalrouterport.[2]->ip
        netmask: 255.0.0.0
        route: add

    Add192RouteOnVM4Vif1viaLRP2:
        TestAdapter: vm.[4].vif.[1]
        Type: NetAdapter
        destination: 192.0.0.0
        gateway: nsxmanager.[1].logicalrouterport.[2]->ip
        netmask: 255.0.0.0
        route: add

    AddVM2Vif1ToKVM1Bridge1:
        TestVM: vm.[2]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[1].bridge.[1]

    CreateLP3OnLS1ForVM3Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[3]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[3].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLP4OnLS1ForVM4Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[4]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[4].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    DeleteLSP-1-4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[1-4]
        query_params:
            detach: 'true'

    DeleteVif-1_VM-3:
        TestVM: vm.[3]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-4:
        TestVM: vm.[4]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    PingFromKVM1Vtep1ToKVM2Vtep1:
        SupportAdapter: kvm.[2].vtep.[1]
        TestAdapter: kvm.[1].vtep.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    PingFromVM2Vif1ToVM3Vif1:
        SupportAdapter: vm.[3].vif.[1]
        TestAdapter: vm.[2].vif.[1]
        TestDuration: 10
        ToolName: ping
        Type: Traffic
        connectivitytest: 0

    ConfigureVM1Vnic1IP-192.168.4.3:
        TestAdapter: vm.[1].vnic.[1]
        Type: NetAdapter
        ipv4: 192.168.4.3
        netmask: 255.255.255.0

    ConfigureVM2Vnic1IP-192.168.4.4:
        TestAdapter: vm.[2].vnic.[1]
        Type: NetAdapter
        ipv4: 192.168.4.4
        netmask: 255.255.255.0

    ConfigureVM3Vnic1IP-192.168.5.3:
        TestAdapter: vm.[3].vnic.[1]
        Type: NetAdapter
        ipv4: 192.168.5.3
        netmask: 255.255.255.0

    ConfigureVM4Vnic1IP-192.168.5.4:
        TestAdapter: vm.[4].vnic.[1]
        Type: NetAdapter
        ipv4: 192.168.5.4
        netmask: 255.255.255.0

    ConfigureVM1Vif1IP-192.168.4.3:
        TestAdapter: vm.[1].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.4.3
        netmask: 255.255.255.0

    ConfigureVM2Vif1IP-192.168.4.4:
        TestAdapter: vm.[2].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.4.4
        netmask: 255.255.255.0

    ConfigureVM3Vif1IP-192.168.5.3:
        TestAdapter: vm.[3].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.5.3
        netmask: 255.255.255.0

    ConfigureVM4Vif1IP-192.168.5.4:
        TestAdapter: vm.[4].vif.[1]
        Type: NetAdapter
        ipv4: 192.168.5.4
        netmask: 255.255.255.0

    AddVM3Vif1ToKVM2Bridge1:
        TestVM: vm.[3]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[2].bridge.[1]

    AddVM4Vif1ToKVM2Bridge1:
        TestVM: vm.[4]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[2].bridge.[1]

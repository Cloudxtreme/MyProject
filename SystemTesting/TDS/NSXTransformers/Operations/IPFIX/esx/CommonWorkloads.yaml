WORKLOADS:
    JoinCCPClusterNode-1_NSXC-1_ToNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        clusternode:
            '[1]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    JoinCCPClusterNode-2_NSXC-2_ToNSXC-1:
        TestController: nsxcontroller.[2]
        Type: Controller
        clusternode:
            '[2]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    JoinCCPClusterNode-3_NSXC-3_ToNSXC-1:
        TestController: nsxcontroller.[3]
        Type: Controller
        clusternode:
            '[3]':
                controller_ip: nsxcontroller.[1]
                execution_type: cli

    SetManagerOnNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnNSXC-2:
        TestController: nsxcontroller.[2]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnNSXC-3:
        TestController: nsxcontroller.[3]
        Type: Controller
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    CreateLS-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[1]':
                admin_state: UP
                name: lswitch1
                replication_mode: MTEP
                summary: lswitch1 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[2]':
                admin_state: UP
                name: lswitch2
                replication_mode: MTEP
                summary: lswitch2 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-1_HOSTNODE-1_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[1]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[1]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-2_HOSTNODE-2_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[2]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[2]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-3_HOSTNODE-3_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[3]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[3]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-4_HOSTNODE-4_TZ-1_VMNIC-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[4]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: vmnic1
                node_id: nsxmanager.[1].hostnode.[4]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTZ-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportzone:
            '[1]':
                name: transportzone1
                summary: transportzone1 (created through automation)
                switch_name: nsxvswitch
                transport_zone_type: OVERLAY

    CreateUPROF-1_MTU-1600:
        TestNSX: nsxmanager.[1]
        Type: NSX
        uplinkprofile:
            '[1]':
                mtu: 1600
                resource_type: UplinkHostSwitchProfile
                teaming:
                    active:
                    -   adapter_name: uplink1
                        adapter_type: PNIC
                    policy: FAILOVER_ORDER
                vlan: 0

    DiscoverHostNode1FromESX1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[1]':
                discover: 'true'
                ip_addresses: esx.[1]

    DiscoverHostNode2FromESX2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[2]':
                discover: 'true'
                ip_addresses: esx.[2]

    DiscoverHostNode3FromESX3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[3]':
                discover: 'true'
                ip_addresses: esx.[3]

    DiscoverHostNode4FromESX4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[4]':
                discover: 'true'
                ip_addresses: esx.[4]

    AddVM1Vnic1ToLS1:
        TestVM: vm.[1]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[1]
                startconnected: 1

    AddVM2Vnic1ToLS2:
        TestVM: vm.[2]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[2]
                startconnected: 1

    AddVM3Vnic1ToLS1:
        TestVM: vm.[3]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[1]
                startconnected: 1

    AddVM4Vnic1ToLS2:
        TestVM: vm.[4]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[2]
                startconnected: 1

    AddVM5Vnic1ToLS1:
        TestVM: vm.[5]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[1]
                startconnected: 1

    AddVM6Vnic1ToLS2:
        TestVM: vm.[6]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[2]
                startconnected: 1

    AddVM7Vnic1ToLS1:
        TestVM: vm.[7]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[1]
                startconnected: 1

    AddVM8Vnic1ToLS2:
        TestVM: vm.[8]
        Type: VM
        vnic:
            '[1]':
                connected: 1
                driver: e1000
                portgroup: nsxmanager.[1].logicalswitch.[2]
                startconnected: 1

    ConfigureVM1-8Vnic1IP-Auto:
        IPv4: auto
        TestAdapter: vm.[1-8].vnic.[1]
        Type: NetAdapter

    DeleteLS-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[1]

    DeleteLS-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalswitch: nsxmanager.[1].logicalswitch.[2]

    DeleteTN-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportnode: nsxmanager.[1].transportnode.[1]

    DeleteTN-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportnode: nsxmanager.[1].transportnode.[2]

    DeleteTN-3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportnode: nsxmanager.[1].transportnode.[3]

    DeleteTN-4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportnode: nsxmanager.[1].transportnode.[4]

    DeleteTZ-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletetransportzone: nsxmanager.[1].transportzone.[1]

    DeleteUPROF-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteuplinkprofile: nsxmanager.[1].uplinkprofile.[1]

    DeleteVnic-1_VM-1:
        TestVM: vm.[1]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-2:
        TestVM: vm.[2]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-3:
        TestVM: vm.[3]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-4:
        TestVM: vm.[4]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-5:
        TestVM: vm.[5]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-6:
        TestVM: vm.[6]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-7:
        TestVM: vm.[7]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DeleteVnic-1_VM-8:
        TestVM: vm.[8]
        Type: VM
        deletevnic: vm.[x=vm_index].vnic.[1]

    DiscoverLport1FromVM1Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[1]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport2FromVM2Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[2]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[2].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport3FromVM3Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[3]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[3].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport4FromVM4Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[4]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[4].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport5FromVM5Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[5]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[5].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport6FromVM6Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[6]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[6].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport7FromVM7Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[7]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[7].vnic.[1]->uuid
                discover: 'true'

    DiscoverLport8FromVM8Vnic1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[8]':
                attachment:
                    attachment_type: VIF
                    id_: vm.[8].vnic.[1]->uuid
                discover: 'true'

    RemoveManagerOnESX-1:
        TestHost: esx.[1]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnESX-2:
        TestHost: esx.[2]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnESX-3:
        TestHost: esx.[3]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnESX-4:
        TestHost: esx.[4]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    UndiscoverHostNode-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[1]
        skipmethod: 1

    UndiscoverHostNode-2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[2]
        skipmethod: 1

    UndiscoverHostNode-3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[3]
        skipmethod: 1

    UndiscoverHostNode-4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletehostnode: nsxmanager.[1].hostnode.[4]
        skipmethod: 1

    UndiscoverLSP-1-8:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[1-8]
        skipmethod: 1

    AddVM1Vif1ToKVM1Bridge1:
        TestVM: vm.[1]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[1].bridge.[1]

    AddVM2Vif1ToKVM1Bridge1:
        TestVM: vm.[2]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[1].bridge.[1]

    AddVM3Vif1ToKVM2Bridge1:
        TestVM: vm.[3]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[2].bridge.[1]

    AddVM4Vif1ToKVM2Bridge1:
        TestVM: vm.[4]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[2].bridge.[1]

    AddVM5Vif1ToKVM3Bridge1:
        TestVM: vm.[5]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[3].bridge.[1]

    AddVM6Vif1ToKVM3Bridge1:
        TestVM: vm.[6]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[3].bridge.[1]

    AddVM7Vif1ToKVM4Bridge1:
        TestVM: vm.[7]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[4].bridge.[1]

    AddVM8Vif1ToKVM4Bridge1:
        TestVM: vm.[8]
        Type: VM
        vif:
            '[1]':
                backing: kvm.[4].bridge.[1]

    ConfigureVM1-8Vif1IP-Auto:
        IPv4: auto
        TestAdapter: vm.[1-8].vif.[1]
        Type: NetAdapter

    CreateLP1OnLS1ForVM1Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[1]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[1].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLP2OnLS2ForVM2Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[2]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[2].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[2]->id

    CreateLP3OnLS1ForVM3Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[3]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[3].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLP4OnLS2ForVM4Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[4]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[4].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[2]->id

    CreateLP5OnLS1ForVM5Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[5]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[5].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLP6OnLS2ForVM6Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[6]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[6].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[2]->id

    CreateLP7OnLS1ForVM7Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[7]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[7].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[1]->id

    CreateLP8OnLS2ForVM8Vif1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalport:
            '[8]':
                admin_state: UP
                attachment:
                    attachment_type: VIF
                    id_: vm.[8].vif.[1]->uuid
                switch_id: nsxmanager.[1].logicalswitch.[2]->id

    CreateTN-1_HOSTNODE-1_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[1]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[1]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-2_HOSTNODE-2_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[2]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[2]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-3_HOSTNODE-3_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[3]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[3]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateTN-4_HOSTNODE-4_TZ-1_ETH-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportnode:
            '[4]':
                host_switches:
                -   host_switch_profile_ids:
                    -   key: UplinkHostSwitchProfile
                        value: nsxmanager.[1].uplinkprofile.[1]->id
                    switch_name: nsxvswitch
                    uplinks:
                    -   adapter_name: uplink1
                        device_name: eth1
                node_id: nsxmanager.[1].hostnode.[4]->id
                transport_zone_endpoint:
                -   transport_zone_id: nsxmanager.[1].transportzone.[1]

    DeleteVif-1_VM-1:
        TestVM: vm.[1]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-2:
        TestVM: vm.[2]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-3:
        TestVM: vm.[3]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-4:
        TestVM: vm.[4]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-5:
        TestVM: vm.[5]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-6:
        TestVM: vm.[6]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-7:
        TestVM: vm.[7]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DeleteVif-1_VM-8:
        TestVM: vm.[8]
        Type: VM
        deletevif: vm.[x=vm_index].vif.[1]

    DiscoverHostNode1FromKVM1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[1]':
                discover: 'true'
                ip_addresses: kvm.[1]

    DiscoverHostNode2FromKVM2:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[2]':
                discover: 'true'
                ip_addresses: kvm.[2]

    DiscoverHostNode3FromKVM3:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[3]':
                discover: 'true'
                ip_addresses: kvm.[3]

    DiscoverHostNode4FromKVM4:
        TestNSX: nsxmanager.[1]
        Type: NSX
        hostnode:
            '[4]':
                discover: 'true'
                ip_addresses: kvm.[4]

    RemoveManagerOnKVM-1:
        TestHost: kvm.[1]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnKVM-2:
        TestHost: kvm.[2]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnKVM-3:
        TestHost: kvm.[3]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    RemoveManagerOnKVM-4:
        TestHost: kvm.[4]
        Type: Host
        remove_nsx_manager:
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnESX-1:
        TestHost: esx.[1]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnESX-2:
        TestHost: esx.[2]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnESX-3:
        TestHost: esx.[3]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnESX-4:
        TestHost: esx.[4]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-1:
        TestHost: kvm.[1]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-2:
        TestHost: kvm.[2]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-3:
        TestHost: kvm.[3]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    SetManagerOnKVM-4:
        TestHost: kvm.[4]
        Type: Host
        set_nsx_manager:
            execution_type: cli
            manager_ip: nsxmanager.[1]
            manager_thumbprint: nsxmanager.[1]

    CreateLS-1_RMODE-MTEP:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[1]':
                admin_state: UP
                name: lswitch1
                replication_mode: MTEP
                summary: lswitch1 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    CreateLS-2_RMODE-SOURCE:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[2]':
                admin_state: UP
                name: lswitch2
                replication_mode: SOURCE
                summary: lswitch2 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]

    DiscoverESX1Vtep1FromDevice-vmk10:
        Testhost: esx.[1]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: vmk10

    DiscoverESX2Vtep1FromDevice-vmk10:
        Testhost: esx.[2]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: vmk10

    DiscoverESX3Vtep1FromDevice-vmk10:
        Testhost: esx.[3]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: vmk10

    DiscoverESX4Vtep1FromDevice-vmk10:
        Testhost: esx.[4]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: vmk10

    DeleteLSP-1-8:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deletelogicalport: nsxmanager.[1].logicalport.[1-8]
        query_params:
            detach: 'true'

    DiscoverKVM2Vtep1FromDevice-nsx-vtep0.0:
        Testhost: kvm.[2]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: nsx-vtep0.0

    DiscoverKVM3Vtep1FromDevice-nsx-vtep0.0:
        Testhost: kvm.[3]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: nsx-vtep0.0

    DiscoverKVM4Vtep1FromDevice-nsx-vtep0.0:
        Testhost: kvm.[4]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: nsx-vtep0.0

    DiscoverKVM1Vtep1FromDevice-nsx-vtep0.0:
        Testhost: kvm.[1]
        Type: Host
        vtep:
            '[1]':
                discover: 'true'
                execution_type: cli
                name: nsx-vtep0.0

    RebootNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        reboot:
            execution_type: cli

    PowerOnVM-1-2:
        TestVM: vm.[1-2]
        Type: VM
        vmstate: poweron

    RebootKVM-1:
        TestHost: kvm.[1]
        Type: Host
        reboot: 'yes'

    RebootESX-1:
        TestHost: esx.[1]
        Type: Host
        reboot: 'yes'

    JoinMPClusterNode-1_NSXM-1_ToNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        clusternode:
            '[1]':
                mgr_role_config:
                    manager_ip: nsxmanager.[1]
                    manager_thumbprint: nsxmanager.[1]
                    node_type: AddManagementNodeSpec
                    password: default
                    username: admin

    JoinMPClusterNode-2_NSXM-2_ToNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        clusternode:
            '[2]':
                mgr_role_config:
                    manager_ip: nsxmanager.[2]
                    manager_thumbprint: nsxmanager.[2]
                    node_type: AddManagementNodeSpec
                    password: default
                    username: admin

    JoinMPClusterNode-3_NSXM-3_ToNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        clusternode:
            '[3]':
                mgr_role_config:
                    manager_ip: nsxmanager.[3]
                    manager_thumbprint: nsxmanager.[3]
                    node_type: AddManagementNodeSpec
                    password: default
                    username: admin

    MapNSXManager-1_CLUSTER-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        cluster:
            '[1]':
                id_: 1
                map_object: true

    MapNSXManager-2_CLUSTER-1:
        TestNSX: nsxmanager.[2]
        Type: NSX
        cluster:
            '[1]':
                id_: 1
                map_object: true

    MapNSXManager-3_CLUSTER-1:
        TestNSX: nsxmanager.[3]
        Type: NSX
        cluster:
            '[1]':
                id_: 1
                map_object: true

    VerifyMPClusterStatus-1_NSXM-1:
        TestCluster: nsxmanager.[1].cluster.[1]
        Type: Cluster
        cluster_status:
            control_cluster_status:
                status[?]equal_to: STABLE
            mgmt_cluster_status:
                status[?]equal_to: STABLE

    VerifyMPClusterStatus-1_NSXM-2:
        TestCluster: nsxmanager.[2].cluster.[1]
        Type: Cluster
        cluster_status:
            control_cluster_status:
                status[?]equal_to: STABLE
            mgmt_cluster_status:
                status[?]equal_to: STABLE

    VerifyMPClusterStatus-1_NSXM-3:
        TestCluster: nsxmanager.[3].cluster.[1]
        Type: Cluster
        cluster_status:
            control_cluster_status:
                status[?]equal_to: STABLE
            mgmt_cluster_status:
                status[?]equal_to: STABLE

    ConfigureServiceOnNSXC-1_NAME-controller_STATE-stop:
        TestController: nsxcontroller.[1]
        Type: Controller
        configure_service_state:
            service_name: controller
            state: stop

    ConfigureServiceOnNSXC-2_NAME-controller_STATE-stop:
        TestController: nsxcontroller.[2]
        Type: Controller
        configure_service_state:
            service_name: controller
            state: stop

    ConfigureServiceOnNSXC-3_NAME-controller_STATE-stop:
        TestController: nsxcontroller.[3]
        Type: Controller
        configure_service_state:
            service_name: controller
            state: stop

    ConfigureServiceOnNSXM-2_NAME-proton_STATE-start:
        TestService: nsxmanager.[2].nsxservice.[1]
        Type: Service
        configure_service_state:
            service_name: proton
            state: start

    ConfigureServiceOnNSXM-2_NAME-proton_STATE-stop:
        TestService: nsxmanager.[2].nsxservice.[1]
        Type: Service
        configure_service_state:
            service_name: proton
            state: stop

    ConfigureServiceOnNSXM-3_NAME-proton_STATE-start:
        TestService: nsxmanager.[3].nsxservice.[1]
        Type: Service
        configure_service_state:
            service_name: proton
            state: start

    ConfigureServiceOnNSXM-3_NAME-proton_STATE-stop:
        TestService: nsxmanager.[3].nsxservice.[1]
        Type: Service
        configure_service_state:
            service_name: proton
            state: stop

    DeleteBootstrapFileOnNSXC-1:
        TestNSX: nsxcontroller.[1]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: bootstrap-config
            path: /opt/vmware/etc

    DeleteBootstrapFileOnNSXC-2:
        TestNSX: nsxcontroller.[2]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: bootstrap-config
            path: /opt/vmware/etc

    DeleteBootstrapFileOnNSXC-3:
        TestNSX: nsxcontroller.[3]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: bootstrap-config
            path: /opt/vmware/etc

    DeleteCCPClusterNode-1_NSXC-1_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxcontroller.[1].clusternode.[1]

    DeleteCCPClusterNode-2_NSXC-2_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxcontroller.[2].clusternode.[2]

    DeleteCCPClusterNode-3_NSXC-3_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxcontroller.[3].clusternode.[3]

    DeleteConfigFilesOnNSXM-2:
        TestNSX: nsxmanager.[2]
        Type: NSX
        delete_backend_file:
            execution_type: cli
            file_name: '*'
            path: /home/secureall/secureall/nsxapi/config/self

    DeleteConfigFilesOnNSXM-3:
        TestNSX: nsxmanager.[3]
        Type: NSX
        delete_backend_file:
            execution_type: cli
            file_name: '*'
            path: /home/secureall/secureall/nsxapi/config/self

    DeleteDataFilesOnNSXM-2:
        TestNSX: nsxmanager.[2]
        Type: NSX
        delete_backend_file:
            execution_type: cli
            file_name: '*'
            path: /common/nsxapi/data/self

    DeleteDataFilesOnNSXM-3:
        TestNSX: nsxmanager.[3]
        Type: NSX
        delete_backend_file:
            execution_type: cli
            file_name: '*'
            path: /common/nsxapi/data/self

    DeleteMPClusterNode-2_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxmanager.[1].clusternode.[2]

    DeleteMPClusterNode-3_FromNSXM-1:
        TestNSX: nsxmanager.[1]
        Type: NSX
        deleteclusternode: nsxmanager.[1].clusternode.[3]

    DeleteNodeUUIDFileOnNSXC-1:
        TestNSX: nsxcontroller.[1]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: node-uuid
            path: /opt/vmware/etc

    DeleteNodeUUIDFileOnNSXC-2:
        TestNSX: nsxcontroller.[2]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: node-uuid
            path: /opt/vmware/etc

    DeleteNodeUUIDFileOnNSXC-3:
        TestNSX: nsxcontroller.[3]
        Type: NSX
        delete_backend_file:
            execution_type: cmd
            file_name: node-uuid
            path: /opt/vmware/etc

    RemoveCCPClusterNode-1_FromNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        remove_ccp_cluster_node:
            controller_ip: nsxcontroller.[1]
            execution_type: cli
            force: 'yes'

    RemoveCCPClusterNode-2_FromNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        remove_ccp_cluster_node:
            controller_ip: nsxcontroller.[2]
            execution_type: cli
            force: 'yes'

    RemoveCCPClusterNode-3_FromNSXC-1:
        TestController: nsxcontroller.[1]
        Type: Controller
        remove_ccp_cluster_node:
            controller_ip: nsxcontroller.[3]
            execution_type: cli
            force: 'yes'

    SetProtonServiceIdForNSXM-2:
        TestNSX: nsxmanager.[2]
        Type: NSX
        nsxservice:
            '[1]':
                id_: proton
                map_object: true

    SetProtonServiceIdForNSXM-3:
        TestNSX: nsxmanager.[3]
        Type: NSX
        nsxservice:
            '[1]':
                id_: proton
                map_object: true

    VerifyServiceOnNSXM-2_NAME-proton_STATE-running:
        TestService: nsxmanager.[2].nsxservice.[1]
        Type: Service
        get_service_state:
            runtime_state[?]equal_to: running

    VerifyServiceOnNSXM-2_NAME-proton_STATE-stopped:
        TestService: nsxmanager.[2].nsxservice.[1]
        Type: Service
        get_service_state:
            runtime_state[?]equal_to: stopped

    VerifyServiceOnNSXM-3_NAME-proton_STATE-running:
        TestService: nsxmanager.[3].nsxservice.[1]
        Type: Service
        get_service_state:
            runtime_state[?]equal_to: running

    VerifyServiceOnNSXM-3_NAME-proton_STATE-stopped:
        TestService: nsxmanager.[3].nsxservice.[1]
        Type: Service
        get_service_state:
            runtime_state[?]equal_to: stopped

    WaitForMPClusterStable-1_NSXM-1:
        TestCluster: nsxmanager.[1].cluster.[1]
        Type: Cluster
        wait_for_required_cluster_status:
            required_status: STABLE
            time_to_monitor: 300

    WaitForMPClusterStable-1_NSXM-2:
        TestCluster: nsxmanager.[2].cluster.[1]
        Type: Cluster
        wait_for_required_cluster_status:
            required_status: STABLE
            time_to_monitor: 300

    WaitForMPClusterStable-1_NSXM-3:
        TestCluster: nsxmanager.[3].cluster.[1]
        Type: Cluster
        wait_for_required_cluster_status:
            required_status: STABLE
            time_to_monitor: 300

    Set1500MTUOnVM1Vnic1:
        TestAdapter: vm.[1].vnic.[1]
        Type: NetAdapter
        mtu: 1500

    Set1500MTUOnVM2Vnic1:
        TestAdapter: vm.[2].vnic.[1]
        Type: NetAdapter
        mtu: 1500

    Set1500MTUOnVM3Vnic1:
        TestAdapter: vm.[3].vnic.[1]
        Type: NetAdapter
        mtu: 1500

    Set1500MTUOnVM4Vnic1:
        TestAdapter: vm.[4].vnic.[1]
        Type: NetAdapter
        mtu: 1500

    Set1500MTUOnVM1Vif1:
        TestAdapter: vm.[1].vif.[1]
        Type: NetAdapter
        mtu: 1500

    Set1500MTUOnVM2Vif1:
        TestAdapter: vm.[2].vif.[1]
        Type: NetAdapter
        mtu: 1500

    Set1500MTUOnVM3Vif1:
        TestAdapter: vm.[3].vif.[1]
        Type: NetAdapter
        mtu: 1500

    Set1500MTUOnVM4Vif1:
        TestAdapter: vm.[4].vif.[1]
        Type: NetAdapter
        mtu: 1500

    Set9000MTUOnVM1Vif1:
        TestAdapter: vm.[1].vif.[1]
        Type: NetAdapter
        mtu: 9000

    Set9000MTUOnVM2Vif1:
        TestAdapter: vm.[2].vif.[1]
        Type: NetAdapter
        mtu: 9000

    Set9000MTUOnVM3Vif1:
        TestAdapter: vm.[3].vif.[1]
        Type: NetAdapter
        mtu: 9000

    Set9000MTUOnVM4Vif1:
        TestAdapter: vm.[4].vif.[1]
        Type: NetAdapter
        mtu: 9000

    Set9000MTUOnVM1Vnic1:
        TestAdapter: vm.[1].vnic.[1]
        Type: NetAdapter
        mtu: 9000

    Set9000MTUOnVM2Vnic1:
        TestAdapter: vm.[2].vnic.[1]
        Type: NetAdapter
        mtu: 9000

    Set9000MTUOnVM3Vnic1:
        TestAdapter: vm.[3].vnic.[1]
        Type: NetAdapter
        mtu: 9000

    Set9000MTUOnVM4Vnic1:
        TestAdapter: vm.[4].vnic.[1]
        Type: NetAdapter
        mtu: 9000

    CreateLS-1_VLAN-21:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[1]':
                admin_state: UP
                name: lswitch1
                summary: lswitch1 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                vlan: 21

    CreateLS-2_VLAN-22:
        TestNSX: nsxmanager.[1]
        Type: NSX
        logicalswitch:
            '[2]':
                admin_state: UP
                name: lswitch1
                summary: lswitch1 (created through automation)
                transport_zone_id: nsxmanager.[1].transportzone.[1]
                vlan: 22

    CreateTZ-1_TZTYPE-VLAN:
        TestNSX: nsxmanager.[1]
        Type: NSX
        transportzone:
            '[1]':
                name: transportzone1
                summary: transportzone1 (created through automation)
                switch_name: nsxvswitch
                transport_zone_type: VLAN

    UpdateIPFIXConfig-1_DOMAINID-10_FLOWTIMEOUT-65_IDLETIMEOUT-60_SAMPLING-1_PORT-9999:
        TestService: nsxmanager.[1].ipfixconfig.[1]
        Type: Service
        domain_id: 10
        flow_timeout: 65
        idle_timeout: 60
        packet_sample_probability: 1
        port: 9999
        reconfigure: true

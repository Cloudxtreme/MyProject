MultiNode_CSR_POST_API:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "MultiNode_CSR_POST_API"
    Version: "2"
    Summary: "Verify newly created CSR gets replicated to all the NSXManager cluster nodes"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P1"
    Developer: "dgargote"
    Procedure: '1. Create CSR on NSXManager node-1
                2. Verify newly created CSR is available on all the NSXManager cluster nodes'
    ExpectedResult: 'Newly created CSR should be available on all the NSXManager cluster nodes'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec: *NSXMANAGER_3_NODE_CLUSTER_SETUP
    WORKLOADS:
        Sequence:
            - ["CreateCSROnClusterNode1"]
            - ["VerifyCSROnClusterNode1"]
            - ["VerifyCSROnClusterNode2"]
            - ["VerifyCSROnClusterNode3"]
        ExitSequence:
            - ["DeleteCSRFromClusterNode1"]

        CreateCSROnClusterNode1: *CREATE_CSR

        VerifyCSROnClusterNode1: *CSR_VERIFICATION_NODE1

        VerifyCSROnClusterNode2: *CSR_VERIFICATION_NODE2

        VerifyCSROnClusterNode3: *CSR_VERIFICATION_NODE3

        DeleteCSRFromClusterNode1: *DELETE_CSR

MultiNode_Certificate_POST_API:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "MultiNode_Certificate_POST_API"
    Version: "2"
    Summary: "Verify newly created Certificate gets replicated to all the NSXManager cluster nodes"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P1"
    Developer: "dgargote"
    Procedure: '1. Create Certificate on NSXManager node-1
                2. Verify newly created Certificate is available on all the NSXManager cluster nodes'
    ExpectedResult: 'Newly created Certificate should be available on all the NSXManager cluster nodes'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec: *NSXMANAGER_3_NODE_CLUSTER_SETUP
    WORKLOADS:
        Sequence:
            - ["CreateCertificateOnClusterNode1"]
            - ["VerifyCertificateOnClusterNode1"]
            - ["VerifyCertificateOnClusterNode2"]
            - ["VerifyCertificateOnClusterNode3"]
        ExitSequence:
            - ["DeleteCertificateFromClusterNode1"]

        CreateCertificateOnClusterNode1: *CREATE_CERTIFICATE

        VerifyCertificateOnClusterNode1: *CERT_VERIFICATION_NODE1

        VerifyCertificateOnClusterNode2: *CERT_VERIFICATION_NODE2

        VerifyCertificateOnClusterNode3: *CERT_VERIFICATION_NODE3

        DeleteCertificateFromClusterNode1: *DELETE_CERTIFICATE

MultiNode_CRL_POST_API:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "MultiNode_CRL_POST_API"
    Version: "2"
    Summary: "Verify newly created CRL gets replicated to all the NSXManager cluster nodes"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P1"
    Developer: "dgargote"
    Procedure: '1. Create CRL on NSXManager node-1
                2. Verify newly created CRL is available on all the NSXManager cluster nodes'
    ExpectedResult: 'Newly created CRL should be available on all the NSXManager cluster nodes'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec: *NSXMANAGER_3_NODE_CLUSTER_SETUP
    WORKLOADS:
        Sequence:
            - ["CreateCRLOnClusterNode1"]
            - ["VerifyCRLOnClusterNode1"]
            - ["VerifyCRLOnClusterNode2"]
            - ["VerifyCRLOnClusterNode3"]
        ExitSequence:
            - ["DeleteCRLFromClusterNode1"]

        CreateCRLOnClusterNode1: *CREATE_CRL

        VerifyCRLOnClusterNode1: *CRL_VERIFICATION_NODE1

        VerifyCRLOnClusterNode2: *CRL_VERIFICATION_NODE2

        VerifyCRLOnClusterNode3: *CRL_VERIFICATION_NODE3

        DeleteCRLFromClusterNode1: *DELETE_CRL

MultiNode_CRL_PUT_API:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "MultiNode_CRL_PUT_API"
    Version: "2"
    Summary: "Verify updated CRL gets replicated to all the NSXManager cluster nodes"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P1"
    Developer: "dgargote"
    Procedure: '1. Create CRL on NSXManager node-1
                2. Verify newly created CRL is available on all the NSXManager cluster nodes
                3. Update CRL from any one node
                4. Verify updated CRL is available on all the NSXManager cluster nodes'
    ExpectedResult: 'Updated CRL should be available on all the NSXManager cluster nodes'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec: *NSXMANAGER_3_NODE_CLUSTER_SETUP
    WORKLOADS:
        Sequence:
            - ["CreateCRLOnClusterNode1"]
            - ["VerifyCRLOnClusterNode1"]
            - ["VerifyCRLOnClusterNode2"]
            - ["VerifyCRLOnClusterNode3"]
            - ["UpdateCRLOnClusterNode2"]
            - ["VerifyUpdatedCRLOnClusterNode2"]
            - ["VerifyUpdatedCRLOnClusterNode1"]
            - ["VerifyUpdatedCRLOnClusterNode3"]

        ExitSequence:
            - ["DeleteCRLFromClusterNode1"]

        CreateCRLOnClusterNode1: *CREATE_CRL

        VerifyCRLOnClusterNode1: *CRL_VERIFICATION_NODE1

        VerifyCRLOnClusterNode2: *CRL_VERIFICATION_NODE2

        VerifyCRLOnClusterNode3: *CRL_VERIFICATION_NODE3

        UpdateCRLOnClusterNode2:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[2].crl.[1]"
            reconfigure: true
            name: 'VMware Certificate Authority'
            pem_encoded: '-----BEGIN X509 CRL-----\nMIIBmjCCAQMwDQYJKoZIhvcNAQEEBQAwgb0xCzAJBgNVBAYTAlVTMRMwEQYDVQQI\nEwpDYWxpZm9ybmlhMRAwDgYDVQQHEwdPYWtsYW5kMRYwFAYDVQQKEw1SZWQgSGF0\nLCBJbmMuMSIwIAYDVQQLFBlHbG9iYWwgU2VydmljZXMgJiBTdXBwb3J0MR0wGwYD\nVQQDExRSZWQgSGF0IFRlc3QgUm9vdCBDQTEsMCoGCSqGSIb3DQEJARYdc3Ryb25n\naG9sZC1zdXBwb3J0QHJlZGhhdC5jb20XDTAwMTExMzIwNTcyNVoXDTAwMTIxMzIw\nNTcyNVowFDASAgEBFw0wMDA4MzEyMTE5MTdaMA0GCSqGSIb3DQEBBAUAA4GBAIge\nX5VaOkNOKn8MrbxFiqpOrH/M9Vocu9oDeQ6EMTeA5xIWBGN53BZ/HUJ1NjS32VDG\nwaM3P6DXud4xKXauVgAXyH6D6xEDBt5GIBTFrWKIDKGOkvRChTUvzObmx9ZVSMMg\n5xvAbsaFgJx3RBbznySlqVU4APYE0W2/xL0/8fzM\n-----END X509 CRL-----\n'
            resource_type: 'crl'

        VerifyUpdatedCRLOnClusterNode1:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].crl.[1]"
            read:
              'name[?]equal_to': 'VMware Certificate Authority'
              'resource_type[?]equal_to': 'crl'

        VerifyUpdatedCRLOnClusterNode2:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[2].crl.[1]"
            read:
              'name[?]equal_to': 'VMware Certificate Authority'
              'resource_type[?]equal_to': 'crl'

        VerifyUpdatedCRLOnClusterNode3:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[3].crl.[1]"
            read:
              'name[?]equal_to': 'VMware Certificate Authority'
              'resource_type[?]equal_to': 'crl'

        DeleteCRLFromClusterNode1: *DELETE_CRL

MultiNode_CSR_DELETE_API:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "MultiNode_CSR_DELETE_API"
    Version: "2"
    Summary: "Verify CSR gets deleted from all the NSXManager cluster nodes"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P1"
    Developer: "dgargote"
    Procedure: '1. Create CSR on NSXManager node-1
                2. Verify newly created CSR is available on all the NSXManager cluster nodes
                3. Delete CSR from one of the cluster node
                4. Verify CSR is deleted from all the cluster nodes'
    ExpectedResult: 'CSR should get deleted from all the NSXManager cluster nodes'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec: *NSXMANAGER_3_NODE_CLUSTER_SETUP
    WORKLOADS:
        Sequence:
            - ["CreateCSROnClusterNode1"]
            - ["VerifyCSROnClusterNode1"]
            - ["VerifyCSROnClusterNode2"]
            - ["VerifyCSROnClusterNode3"]
            - ["DeleteCSRFromClusterNode2"]
            - ["SetCSRId"]
            - ["VerifyCSRDeletionOnClusterNode1"]
            - ["VerifyCSRDeletionOnClusterNode2"]
            - ["VerifyCSRDeletionOnClusterNode3"]

        CreateCSROnClusterNode1: *CREATE_CSR

        VerifyCSROnClusterNode1: *CSR_VERIFICATION_NODE1

        VerifyCSROnClusterNode2: *CSR_VERIFICATION_NODE2

        VerifyCSROnClusterNode3: *CSR_VERIFICATION_NODE3

        DeleteCSRFromClusterNode2:
            Type: "NSX"
            TestNSX: "nsxmanager.[2]"
            deletecsr: "nsxmanager.[2].csr.[1]"

        SetCSRId: *SET_CSR_ID

        VerifyCSRDeletionOnClusterNode1:
            <<: *DELETE_CSR_VERIFICATION

        VerifyCSRDeletionOnClusterNode2:
            <<: *DELETE_CSR_VERIFICATION
            Testcertificate: "nsxmanager.[2].csr.[1]"

        VerifyCSRDeletionOnClusterNode3:
            <<: *DELETE_CSR_VERIFICATION
            Testcertificate: "nsxmanager.[3].csr.[1]"

MultiNode_Certificate_DELETE_API:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "MultiNode_Certificate_DELETE_API"
    Version: "2"
    Summary: "Verify Certificate gets deleted from all the NSXManager cluster nodes"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P1"
    Developer: "dgargote"
    Procedure: '1. Create Certificate on NSXManager node-1
                2. Verify newly created Certificate is available on all the NSXManager cluster nodes
                3. Delete Certificate from one of the cluster node
                4. Verify Certificate is deleted from all the cluster nodes'
    ExpectedResult: 'Certificate should get deleted from all the NSXManager cluster nodes'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec: *NSXMANAGER_3_NODE_CLUSTER_SETUP
    WORKLOADS:
        Sequence:
            - ["CreateCertificateOnClusterNode1"]
            - ["VerifyCertificateOnClusterNode1"]
            - ["VerifyCertificateOnClusterNode2"]
            - ["VerifyCertificateOnClusterNode3"]
            - ["DeleteCertificateFromClusterNode2"]
            - ["SetCertificateId"]
            - ["VerifyCertificateDeletionOnClusterNode1"]
            - ["VerifyCertificateDeletionOnClusterNode2"]
            - ["VerifyCertificateDeletionOnClusterNode3"]

        CreateCertificateOnClusterNode1: *CREATE_CERTIFICATE

        VerifyCertificateOnClusterNode1: *CERT_VERIFICATION_NODE1

        VerifyCertificateOnClusterNode2: *CERT_VERIFICATION_NODE2

        VerifyCertificateOnClusterNode3: *CERT_VERIFICATION_NODE3

        DeleteCertificateFromClusterNode2:
            Type: "NSX"
            TestNSX: "nsxmanager.[2]"
            deletecertificate: "nsxmanager.[2].certificate.[1]"

        SetCertificateId: *SET_CERTIFICATE_ID

        VerifyCertificateDeletionOnClusterNode1: *DELETE_CERTIFICATE_VERIFICATION

        VerifyCertificateDeletionOnClusterNode2:
            <<: *DELETE_CERTIFICATE_VERIFICATION
            Testcertificate: "nsxmanager.[2].certificatemob.[1]"

        VerifyCertificateDeletionOnClusterNode3:
            <<: *DELETE_CERTIFICATE_VERIFICATION
            Testcertificate: "nsxmanager.[3].certificatemob.[1]"

MultiNode_CRL_DELETE_API:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "MultiNode_Certificate_CRL_API"
    Version: "2"
    Summary: "Verify CRL gets deleted from all the NSXManager cluster nodes"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P1"
    Developer: "dgargote"
    Procedure: '1. Create CRL on NSXManager node-1
                2. Verify newly created CRL is available on all the NSXManager cluster nodes
                3. Delete CRL from one of the cluster node
                4. Verify CRL is deleted from all the cluster nodes'
    ExpectedResult: 'CRL should get deleted from all the NSXManager cluster nodes'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec: *NSXMANAGER_3_NODE_CLUSTER_SETUP
    WORKLOADS:
        Sequence:
            - ["CreateCRLOnClusterNode1"]
            - ["VerifyCRLOnClusterNode1"]
            - ["VerifyCRLOnClusterNode2"]
            - ["VerifyCRLOnClusterNode3"]
            - ["DeleteCRLFromClusterNode2"]
            - ["SetCRLId"]
            - ["VerifyCRLDeletionOnClusterNode1"]
            - ["VerifyCRLDeletionOnClusterNode2"]
            - ["VerifyCRLDeletionOnClusterNode3"]

        CreateCRLOnClusterNode1: *CREATE_CRL

        VerifyCRLOnClusterNode1: *CRL_VERIFICATION_NODE1

        VerifyCRLOnClusterNode2: *CRL_VERIFICATION_NODE2

        VerifyCRLOnClusterNode3: *CRL_VERIFICATION_NODE3

        DeleteCRLFromClusterNode2:
            Type: "NSX"
            TestNSX: "nsxmanager.[2]"
            deletecertificate: "nsxmanager.[2].crl.[1]"

        SetCRLId: *SET_CRL_ID

        VerifyCRLDeletionOnClusterNode1: *DELETE_CRL_VERIFICATION

        VerifyCRLDeletionOnClusterNode2:
            <<: *DELETE_CRL_VERIFICATION
            Testcertificate: "nsxmanager.[2].crlmob.[1]"

        VerifyCRLDeletionOnClusterNode3:
            <<: *DELETE_CRL_VERIFICATION
            Testcertificate: "nsxmanager.[3].crlmob.[1]"

Verify_Certificate_After_Rebooting_NSXManager:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "Verify_Certificate_After_Rebooting_NSXManager"
    Version: "2"
    Summary: "Verify Certificate is available after rebooting NSXManager"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P1"
    Developer: "dgargote"
    Procedure: '1. Create Certificate on NSXManager node-1
                2. Verify newly created Certificate is available on all the
                NSXManager cluster nodes
                3. Reboot one NSXManager node
                4. Once the rebooted NSXManager node is up, verify certificate
                is available on that NSXManager'
    ExpectedResult: 'Certificate should be available on the rebooted
    NSXManager cluster nodes'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec: *NSXMANAGER_3_NODE_CLUSTER_SETUP
    WORKLOADS:
        Sequence:
            - ["CreateCertificateOnClusterNode1"]
            - ["VerifyCertificateOnClusterNode1"]
            - ["VerifyCertificateOnClusterNode2"]
            - ["VerifyCertificateOnClusterNode3"]
            - ["RebootClusterNode1"]
            - ["VerifyCertificateOnClusterNode2"]
            - ["VerifyCertificateOnClusterNode3"]
            - ["VerifyCertificateOnClusterNode1AfterReboot"]
        ExitSequence:
            - ["DeleteCertificateFromClusterNode1"]

        CreateCertificateOnClusterNode1: *CREATE_CERTIFICATE

        VerifyCertificateOnClusterNode1: *CERT_VERIFICATION_NODE1

        VerifyCertificateOnClusterNode2: *CERT_VERIFICATION_NODE2

        VerifyCertificateOnClusterNode3: *CERT_VERIFICATION_NODE3

        RebootClusterNode1:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            configure_power_state:
                state: 'restart'

        VerifyCertificateOnClusterNode1AfterReboot:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].certificate.[1]"
            sleepbetweenworkloads: 600
            read:
                'resource_type[?]equal_to': 'certificate_signed'

        DeleteCertificateFromClusterNode1: *DELETE_CERTIFICATE

MultiNode_CSR_Master_Testcase:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "MultiNode_CSR_Master_Testcase"
    Version: "2"
    Summary: "Create CSR on each node of cluster and verify it is getting deleted from some other node"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P1"
    Developer: "dgargote"
    Procedure: '1. Create CSR-1 on NSXManager node-1
                2. Create CSR-2 on NSXManager node-2
                3. Create CSR-3 on NSXManager node-3
                4. Verify all the CSRs are available on all the NSXManager cluster nodes
                5. Delete CSR-1 from NSXManager node-2
                6. Delete CSR-2 from NSXManager node-3
                7. Delete CSR-3 from NSXManager node-1
                8. Verify all the CSRs are deleted on all the NSXManager cluster nodes'
    ExpectedResult: 'All the CSR should get created on all NSXManager nodes and should get deleted from all NSXManager nodes'
    Duration: '10'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec: *NSXMANAGER_3_NODE_CLUSTER_SETUP
    WORKLOADS:
        Sequence:
            - ["CreateCSR1OnClusterNode1"]
            - ["CreateCSR2OnClusterNode2"]
            - ["CreateCSR3OnClusterNode3"]
            - ["VerifyCSRListOnNode1"]
            - ["VerifyCSRListOnNode2"]
            - ["VerifyCSRListOnNode3"]
            - ["DeleteCSR1FromClusterNode2"]
            - ["DeleteCSR2FromClusterNode3"]
            - ["DeleteCSR3FromClusterNode1"]
            - ["SetCSRId"]
            - ["VerifyCSRDeletionOnClusterNode1"]
            - ["VerifyCSRDeletionOnClusterNode2"]
            - ["VerifyCSRDeletionOnClusterNode3"]

        CreateCSR1OnClusterNode1: *CREATE_CSR

        CreateCSR2OnClusterNode2:
            Type: "NSX"
            TestNSX: "nsxmanager.[2]"
            csr:
                '[2]':
                    algorithm: "RSA"
                    key_size: "2048"
                    subject:
                      attributes:
                        - key: CN
                          value: NSX
                        - key: O
                          value: VMware
                        - key: OU
                          value: NSBU
                        - key: C
                          value: US
                        - key: ST
                          value: CA
                        - key: L
                          value: PA

        CreateCSR3OnClusterNode3:
            Type: "NSX"
            TestNSX: "nsxmanager.[3]"
            csr:
                '[3]':
                    algorithm: "RSA"
                    key_size: "2048"
                    subject:
                      attributes:
                        - key: CN
                          value: NSX
                        - key: O
                          value: VMware
                        - key: OU
                          value: NSBU
                        - key: C
                          value: US
                        - key: ST
                          value: CA
                        - key: L
                          value: PA

        VerifyCSRListOnNode1: *VERIFY_CSR_LIST

        VerifyCSRListOnNode2:
            <<: *VERIFY_CSR_LIST
            Testcertificate: "nsxmanager.[2].csr.[1]"

        VerifyCSRListOnNode3:
            <<: *VERIFY_CSR_LIST
            Testcertificate: "nsxmanager.[3].csr.[1]"

        DeleteCSR1FromClusterNode2:
            Type: "NSX"
            TestNSX: "nsxmanager.[2]"
            deletecsr: "nsxmanager.[2].csr.[1]"

        DeleteCSR2FromClusterNode3:
            Type: "NSX"
            TestNSX: "nsxmanager.[3]"
            deletecsr: "nsxmanager.[3].csr.[2]"

        DeleteCSR3FromClusterNode1:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            deletecsr: "nsxmanager.[1].csr.[3]"

        SetCSRId: *SET_CSR_ID

        VerifyCSRDeletionOnClusterNode1:
            <<: *DELETE_CSR_VERIFICATION

        VerifyCSRDeletionOnClusterNode2:
            <<: *DELETE_CSR_VERIFICATION
            Testcertificate: "nsxmanager.[2].csr.[1]"

        VerifyCSRDeletionOnClusterNode3:
            <<: *DELETE_CSR_VERIFICATION
            Testcertificate: "nsxmanager.[3].csr.[1]"

MultiNode_Certificate_Master_Testcase:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "MultiNode_Certificate_Master_Testcase"
    Version: "2"
    Summary: "Create Certificate on each node of cluster and verify it is getting deleted from some other node"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P1"
    Developer: "dgargote"
    Procedure: '1. Create Certificate-1 on NSXManager node-1
                2. Create Certificate-2 on NSXManager node-2
                3. Create Certificate-3 on NSXManager node-3
                4. Verify all the Certificates are available on all the NSXManager cluster nodes
                5. Delete Certificate-1 from NSXManager node-2
                6. Delete Certificate-2 from NSXManager node-3
                7. Delete Certificate-3 from NSXManager node-1
                8. Verify all the Certificates are deleted on all the NSXManager cluster nodes'
    ExpectedResult: 'All the Certificate should get created on all NSXManager nodes and should get deleted from all NSXManager nodes'
    Duration: '10'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec: *NSXMANAGER_3_NODE_CLUSTER_SETUP
    WORKLOADS:
        Sequence:
            - ["CreateCertificate1OnClusterNode1"]
            - ["CreateCertificate2OnClusterNode2"]
            - ["CreateCertificate3OnClusterNode3"]
            - ["VerifyCertificateListOnNode1"]
            - ["VerifyCertificateListOnNode2"]
            - ["VerifyCertificateListOnNode3"]
            - ["DeleteCertificate1FromClusterNode2"]
            - ["DeleteCertificate2FromClusterNode3"]
            - ["DeleteCertificate3FromClusterNode1"]
            - ["SetCertificateId"]
            - ["VerifyCertificateDeletionOnClusterNode1"]
            - ["VerifyCertificateDeletionOnClusterNode2"]
            - ["VerifyCertificateDeletionOnClusterNode3"]

        CreateCertificate1OnClusterNode1: *CREATE_CERTIFICATE

        CreateCertificate2OnClusterNode2:
            Type: "NSX"
            TestNSX: "nsxmanager.[2]"
            certificate:
                '[2]':
                    result_object: 'results'
                    pem_encoded: '-----BEGIN CERTIFICATE-----\nMIIFATCCA+mgAwIBAgIQEIMC/Zn63fVdHaJf/4o1MzANBgkqhkiG9w0BAQUFADCB\nyzELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTAwLgYDVQQL\nEydGb3IgVGVzdCBQdXJwb3NlcyBPbmx5LiAgTm8gYXNzdXJhbmNlcy4xQjBABgNV\nBAsTOVRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2lnbi5jb20vY3Bz\nL3Rlc3RjYSAoYykwOTEtMCsGA1UEAxMkVmVyaVNpZ24gVHJpYWwgU2VjdXJlIFNl\ncnZlciBDQSAtIEcyMB4XDTE0MDkxMDAwMDAwMFoXDTE0MTAxMDIzNTk1OVowaTEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExEjAQBgNVBAcUCVBhbG8g\nQWx0bzEPMA0GA1UEChQGVk13YXJlMQ0wCwYDVQQLFAROU0JVMREwDwYDVQQDFAhu\nc2J1LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALgUgbZIKN7N\nN3dpXoW7AfRc8FLmRXKs2ZSb7aK4nXv59CiWNKYdxYjRocKxZjqSjN/NqDX8New0\n2m0+Qo5wUgq5oOOMp51A6KFp/Y8hrIoHlmMSgi28SBKcchCjd97LK1SHKG0hrOqH\n79DX8xrjKjz5TRNTYI7WVjNWrLu2XUuh0qhM4X/oFWB1Lu60ujOQKv5ODVO2Tk6T\nTPhbQaqsZYv04WwSWNkxtVZ+exDccE19Hau5+MNxerDrA1MwOdTy7NzN4XHdazKo\nprNLpMsM8xXS68lKGoO26BJRi5NSqy6c2YQ9MtpFZXCs2D9cqonkq8HMac3FC4zy\nCz93hpJND1kCAwEAAaOCAUAwggE8MBMGA1UdEQQMMAqCCG5zYnUuY29tMAkGA1Ud\nEwQCMAAwDgYDVR0PAQH/BAQDAgWgMCsGA1UdHwQkMCIwIKAeoByGGmh0dHA6Ly9z\ncS5zeW1jYi5jb20vc3EuY3JsMGUGA1UdIAReMFwwWgYKYIZIAYb4RQEHFTBMMCMG\nCCsGAQUFBwIBFhdodHRwczovL2Quc3ltY2IuY29tL2NwczAlBggrBgEFBQcCAjAZ\nFhdodHRwczovL2Quc3ltY2IuY29tL3JwYTAdBgNVHSUEFjAUBggrBgEFBQcDAQYI\nKwYBBQUHAwIwHwYDVR0jBBgwFoAUKBcTir3WorXcBiy3to7aEGZgbuUwNgYIKwYB\nBQUHAQEEKjAoMCYGCCsGAQUFBzAChhpodHRwOi8vc3Euc3ltY2IuY29tL3NxLmNy\ndDANBgkqhkiG9w0BAQUFAAOCAQEAkSwOg1UloYvCV/o3pZ0/aT/AL9FHGZHnwD5M\nmXqFRDImdAoq7yF2p2ByjuJvdESIpHu/7JXK9T97D0tDtIOpynU1VOy56WQLjhUx\n+41Z6ZG25MBH2i44vl5d6qdgbzzG36eAFsLnn6kxpIXxR6KR40kMggLDj1j6Hs9x\nDWi/3c4zRO+F/vxQ14GFy95qWTQzgZ9Sr4lDvPKhZuo5VWzfYwHEVAm5y/6RCObc\n2xZ1CMiu9aTXd1C0bG5x8McIpUXSsDz4vDI165QuP7muqa/JPZs4m6CuiZiuG7ML\nhLpsZoDy5oNMcrX6zYi0M8mh3iE+R/VHRsVdp+KbBbY43/YdMA==\n-----END CERTIFICATE-----\n'

        CreateCertificate3OnClusterNode3:
            Type: "NSX"
            TestNSX: "nsxmanager.[3]"
            certificate:
                '[3]':
                    result_object: 'results'
                    pem_encoded: '-----BEGIN CERTIFICATE-----\nMIIFATCCA+mgAwIBAgIQEIMC/Zn63fVdHaJf/4o1MzANBgkqhkiG9w0BAQUFADCB\nyzELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTAwLgYDVQQL\nEydGb3IgVGVzdCBQdXJwb3NlcyBPbmx5LiAgTm8gYXNzdXJhbmNlcy4xQjBABgNV\nBAsTOVRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2lnbi5jb20vY3Bz\nL3Rlc3RjYSAoYykwOTEtMCsGA1UEAxMkVmVyaVNpZ24gVHJpYWwgU2VjdXJlIFNl\ncnZlciBDQSAtIEcyMB4XDTE0MDkxMDAwMDAwMFoXDTE0MTAxMDIzNTk1OVowaTEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExEjAQBgNVBAcUCVBhbG8g\nQWx0bzEPMA0GA1UEChQGVk13YXJlMQ0wCwYDVQQLFAROU0JVMREwDwYDVQQDFAhu\nc2J1LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALgUgbZIKN7N\nN3dpXoW7AfRc8FLmRXKs2ZSb7aK4nXv59CiWNKYdxYjRocKxZjqSjN/NqDX8New0\n2m0+Qo5wUgq5oOOMp51A6KFp/Y8hrIoHlmMSgi28SBKcchCjd97LK1SHKG0hrOqH\n79DX8xrjKjz5TRNTYI7WVjNWrLu2XUuh0qhM4X/oFWB1Lu60ujOQKv5ODVO2Tk6T\nTPhbQaqsZYv04WwSWNkxtVZ+exDccE19Hau5+MNxerDrA1MwOdTy7NzN4XHdazKo\nprNLpMsM8xXS68lKGoO26BJRi5NSqy6c2YQ9MtpFZXCs2D9cqonkq8HMac3FC4zy\nCz93hpJND1kCAwEAAaOCAUAwggE8MBMGA1UdEQQMMAqCCG5zYnUuY29tMAkGA1Ud\nEwQCMAAwDgYDVR0PAQH/BAQDAgWgMCsGA1UdHwQkMCIwIKAeoByGGmh0dHA6Ly9z\ncS5zeW1jYi5jb20vc3EuY3JsMGUGA1UdIAReMFwwWgYKYIZIAYb4RQEHFTBMMCMG\nCCsGAQUFBwIBFhdodHRwczovL2Quc3ltY2IuY29tL2NwczAlBggrBgEFBQcCAjAZ\nFhdodHRwczovL2Quc3ltY2IuY29tL3JwYTAdBgNVHSUEFjAUBggrBgEFBQcDAQYI\nKwYBBQUHAwIwHwYDVR0jBBgwFoAUKBcTir3WorXcBiy3to7aEGZgbuUwNgYIKwYB\nBQUHAQEEKjAoMCYGCCsGAQUFBzAChhpodHRwOi8vc3Euc3ltY2IuY29tL3NxLmNy\ndDANBgkqhkiG9w0BAQUFAAOCAQEAkSwOg1UloYvCV/o3pZ0/aT/AL9FHGZHnwD5M\nmXqFRDImdAoq7yF2p2ByjuJvdESIpHu/7JXK9T97D0tDtIOpynU1VOy56WQLjhUx\n+41Z6ZG25MBH2i44vl5d6qdgbzzG36eAFsLnn6kxpIXxR6KR40kMggLDj1j6Hs9x\nDWi/3c4zRO+F/vxQ14GFy95qWTQzgZ9Sr4lDvPKhZuo5VWzfYwHEVAm5y/6RCObc\n2xZ1CMiu9aTXd1C0bG5x8McIpUXSsDz4vDI165QuP7muqa/JPZs4m6CuiZiuG7ML\nhLpsZoDy5oNMcrX6zYi0M8mh3iE+R/VHRsVdp+KbBbY43/YdMA==\n-----END CERTIFICATE-----\n'

        VerifyCertificateListOnNode1: *VERIFY_CERTIFICATE_LIST

        VerifyCertificateListOnNode2:
            <<: *VERIFY_CERTIFICATE_LIST
            Testcertificate: "nsxmanager.[2].certificate.[1]"

        VerifyCertificateListOnNode3:
            <<: *VERIFY_CERTIFICATE_LIST
            Testcertificate: "nsxmanager.[3].certificate.[1]"

        DeleteCertificate1FromClusterNode2:
            Type: "NSX"
            TestNSX: "nsxmanager.[2]"
            deletecertificate: "nsxmanager.[2].certificate.[1]"

        DeleteCertificate2FromClusterNode3:
            Type: "NSX"
            TestNSX: "nsxmanager.[3]"
            deletecertificate: "nsxmanager.[3].certificate.[2]"

        DeleteCertificate3FromClusterNode1:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            deletecertificate: "nsxmanager.[1].certificate.[3]"

        SetCertificateId: *SET_CERTIFICATE_ID

        VerifyCertificateDeletionOnClusterNode1:
            <<: *DELETE_CERTIFICATE_VERIFICATION

        VerifyCertificateDeletionOnClusterNode2:
            <<: *DELETE_CERTIFICATE_VERIFICATION
            Testcertificate: "nsxmanager.[2].certificatemob.[1]"

        VerifyCertificateDeletionOnClusterNode3:
            <<: *DELETE_CERTIFICATE_VERIFICATION
            Testcertificate: "nsxmanager.[3].certificatemob.[1]"

MultiNode_CRL_Master_Testcase:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "MultiNode_CRL_Master_Testcase"
    Version: "2"
    Summary: "Create CRL on each node of cluster and verify it is getting deleted from some other node"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P1"
    Developer: "dgargote"
    Procedure: '1. Create CRL-1 on NSXManager node-1
                2. Create CRL-2 on NSXManager node-2
                3. Create CRL-3 on NSXManager node-3
                4. Verify all the Certificates are available on all the NSXManager cluster nodes
                5. Update CRL-1 from NSXManager node-2
                6. Update CRL-2 from NSXManager node-3
                7. Update CRL-3 from NSXManager node-1
                8. Verify all the CRLs are getting updated from all the NSXManager cluster nodes
                9. Delete CRL-1 from NSXManager node-3
                10. Delete CRL-2 from NSXManager node-1
                11. Delete CRL-3 from NSXManager node-2
                12. Verify all the CRLs are getting updated from all the NSXManager cluster nodes'
    ExpectedResult: 'All the CRLs should get created, updated on all NSXManager nodes and should get deleted from all NSXManager nodes'
    Duration: '10'
    Tags: 'nsxmanager,management,certmgmt'
    Partnerfacing: "N"
    TestbedSpec: *NSXMANAGER_3_NODE_CLUSTER_SETUP
    WORKLOADS:
        Sequence:
            - ["CreateCRL1OnClusterNode1"]
            - ["CreateCRL2OnClusterNode2"]
            - ["CreateCRL3OnClusterNode3"]
            - ["VerifyCRLListOnNode1"]
            - ["VerifyCRLListOnNode2"]
            - ["VerifyCRLListOnNode3"]
            - ["UpdateCRL1OnClusterNode2"]
            - ["VerifyUpdatedCRL1OnClusterNode2"]
            - ["UpdateCRL2OnClusterNode3"]
            - ["VerifyUpdatedCRL2OnClusterNode3"]
            - ["UpdateCRL3OnClusterNode1"]
            - ["VerifyUpdatedCRL3OnClusterNode1"]
            - ["DeleteCRL1FromClusterNode3"]
            - ["DeleteCRL2FromClusterNode1"]
            - ["DeleteCRL3FromClusterNode2"]
            - ["SetCRLId"]
            - ["VerifyCRLDeletionOnClusterNode1"]
            - ["VerifyCRLDeletionOnClusterNode2"]
            - ["VerifyCRLDeletionOnClusterNode3"]

        CreateCRL1OnClusterNode1: *CREATE_CRL

        CreateCRL2OnClusterNode2:
            Type: "NSX"
            TestNSX: "nsxmanager.[2]"
            crl:
                '[2]':
                    result_object: 'results'
                    pem_encoded: '-----BEGIN X509 CRL-----\nMIIBmjCCAQMwDQYJKoZIhvcNAQEEBQAwgb0xCzAJBgNVBAYTAlVTMRMwEQYDVQQI\nEwpDYWxpZm9ybmlhMRAwDgYDVQQHEwdPYWtsYW5kMRYwFAYDVQQKEw1SZWQgSGF0\nLCBJbmMuMSIwIAYDVQQLFBlHbG9iYWwgU2VydmljZXMgJiBTdXBwb3J0MR0wGwYD\nVQQDExRSZWQgSGF0IFRlc3QgUm9vdCBDQTEsMCoGCSqGSIb3DQEJARYdc3Ryb25n\naG9sZC1zdXBwb3J0QHJlZGhhdC5jb20XDTAwMTExMzIwNTcyNVoXDTAwMTIxMzIw\nNTcyNVowFDASAgEBFw0wMDA4MzEyMTE5MTdaMA0GCSqGSIb3DQEBBAUAA4GBAIge\nX5VaOkNOKn8MrbxFiqpOrH/M9Vocu9oDeQ6EMTeA5xIWBGN53BZ/HUJ1NjS32VDG\nwaM3P6DXud4xKXauVgAXyH6D6xEDBt5GIBTFrWKIDKGOkvRChTUvzObmx9ZVSMMg\n5xvAbsaFgJx3RBbznySlqVU4APYE0W2/xL0/8fzM\n-----END X509 CRL-----\n'

        CreateCRL3OnClusterNode3:
            Type: "NSX"
            TestNSX: "nsxmanager.[3]"
            crl:
                '[3]':
                    result_object: 'results'
                    pem_encoded: '-----BEGIN X509 CRL-----\nMIIBmjCCAQMwDQYJKoZIhvcNAQEEBQAwgb0xCzAJBgNVBAYTAlVTMRMwEQYDVQQI\nEwpDYWxpZm9ybmlhMRAwDgYDVQQHEwdPYWtsYW5kMRYwFAYDVQQKEw1SZWQgSGF0\nLCBJbmMuMSIwIAYDVQQLFBlHbG9iYWwgU2VydmljZXMgJiBTdXBwb3J0MR0wGwYD\nVQQDExRSZWQgSGF0IFRlc3QgUm9vdCBDQTEsMCoGCSqGSIb3DQEJARYdc3Ryb25n\naG9sZC1zdXBwb3J0QHJlZGhhdC5jb20XDTAwMTExMzIwNTcyNVoXDTAwMTIxMzIw\nNTcyNVowFDASAgEBFw0wMDA4MzEyMTE5MTdaMA0GCSqGSIb3DQEBBAUAA4GBAIge\nX5VaOkNOKn8MrbxFiqpOrH/M9Vocu9oDeQ6EMTeA5xIWBGN53BZ/HUJ1NjS32VDG\nwaM3P6DXud4xKXauVgAXyH6D6xEDBt5GIBTFrWKIDKGOkvRChTUvzObmx9ZVSMMg\n5xvAbsaFgJx3RBbznySlqVU4APYE0W2/xL0/8fzM\n-----END X509 CRL-----\n'

        VerifyCRLListOnNode1: *VERIFY_CRL_LIST

        VerifyCRLListOnNode2:
            <<: *VERIFY_CRL_LIST
            Testcertificate: "nsxmanager.[2].crl.[1]"

        VerifyCRLListOnNode3:
            <<: *VERIFY_CRL_LIST
            Testcertificate: "nsxmanager.[3].crl.[1]"

        UpdateCRL1OnClusterNode2:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[2].crl.[1]"
            reconfigure: true
            name: 'VMware Certificate Authority'
            pem_encoded: '-----BEGIN X509 CRL-----\nMIIBmjCCAQMwDQYJKoZIhvcNAQEEBQAwgb0xCzAJBgNVBAYTAlVTMRMwEQYDVQQI\nEwpDYWxpZm9ybmlhMRAwDgYDVQQHEwdPYWtsYW5kMRYwFAYDVQQKEw1SZWQgSGF0\nLCBJbmMuMSIwIAYDVQQLFBlHbG9iYWwgU2VydmljZXMgJiBTdXBwb3J0MR0wGwYD\nVQQDExRSZWQgSGF0IFRlc3QgUm9vdCBDQTEsMCoGCSqGSIb3DQEJARYdc3Ryb25n\naG9sZC1zdXBwb3J0QHJlZGhhdC5jb20XDTAwMTExMzIwNTcyNVoXDTAwMTIxMzIw\nNTcyNVowFDASAgEBFw0wMDA4MzEyMTE5MTdaMA0GCSqGSIb3DQEBBAUAA4GBAIge\nX5VaOkNOKn8MrbxFiqpOrH/M9Vocu9oDeQ6EMTeA5xIWBGN53BZ/HUJ1NjS32VDG\nwaM3P6DXud4xKXauVgAXyH6D6xEDBt5GIBTFrWKIDKGOkvRChTUvzObmx9ZVSMMg\n5xvAbsaFgJx3RBbznySlqVU4APYE0W2/xL0/8fzM\n-----END X509 CRL-----\n'
            resource_type: 'crl'

        VerifyUpdatedCRL1OnClusterNode2:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[2].crl.[1]"
            read:
              'name[?]equal_to': 'VMware Certificate Authority'
              'resource_type[?]equal_to': 'crl'

        UpdateCRL2OnClusterNode3:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[3].crl.[2]"
            reconfigure: true
            name: 'NSBU Certificate Authority'
            pem_encoded: '-----BEGIN X509 CRL-----\nMIIBmjCCAQMwDQYJKoZIhvcNAQEEBQAwgb0xCzAJBgNVBAYTAlVTMRMwEQYDVQQI\nEwpDYWxpZm9ybmlhMRAwDgYDVQQHEwdPYWtsYW5kMRYwFAYDVQQKEw1SZWQgSGF0\nLCBJbmMuMSIwIAYDVQQLFBlHbG9iYWwgU2VydmljZXMgJiBTdXBwb3J0MR0wGwYD\nVQQDExRSZWQgSGF0IFRlc3QgUm9vdCBDQTEsMCoGCSqGSIb3DQEJARYdc3Ryb25n\naG9sZC1zdXBwb3J0QHJlZGhhdC5jb20XDTAwMTExMzIwNTcyNVoXDTAwMTIxMzIw\nNTcyNVowFDASAgEBFw0wMDA4MzEyMTE5MTdaMA0GCSqGSIb3DQEBBAUAA4GBAIge\nX5VaOkNOKn8MrbxFiqpOrH/M9Vocu9oDeQ6EMTeA5xIWBGN53BZ/HUJ1NjS32VDG\nwaM3P6DXud4xKXauVgAXyH6D6xEDBt5GIBTFrWKIDKGOkvRChTUvzObmx9ZVSMMg\n5xvAbsaFgJx3RBbznySlqVU4APYE0W2/xL0/8fzM\n-----END X509 CRL-----\n'
            resource_type: 'crl'

        VerifyUpdatedCRL2OnClusterNode3:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[3].crl.[2]"
            read:
              'name[?]equal_to': 'NSBU Certificate Authority'
              'resource_type[?]equal_to': 'crl'

        UpdateCRL3OnClusterNode1:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].crl.[3]"
            reconfigure: true
            name: 'vSphere Certificate Authority'
            pem_encoded: '-----BEGIN X509 CRL-----\nMIIBmjCCAQMwDQYJKoZIhvcNAQEEBQAwgb0xCzAJBgNVBAYTAlVTMRMwEQYDVQQI\nEwpDYWxpZm9ybmlhMRAwDgYDVQQHEwdPYWtsYW5kMRYwFAYDVQQKEw1SZWQgSGF0\nLCBJbmMuMSIwIAYDVQQLFBlHbG9iYWwgU2VydmljZXMgJiBTdXBwb3J0MR0wGwYD\nVQQDExRSZWQgSGF0IFRlc3QgUm9vdCBDQTEsMCoGCSqGSIb3DQEJARYdc3Ryb25n\naG9sZC1zdXBwb3J0QHJlZGhhdC5jb20XDTAwMTExMzIwNTcyNVoXDTAwMTIxMzIw\nNTcyNVowFDASAgEBFw0wMDA4MzEyMTE5MTdaMA0GCSqGSIb3DQEBBAUAA4GBAIge\nX5VaOkNOKn8MrbxFiqpOrH/M9Vocu9oDeQ6EMTeA5xIWBGN53BZ/HUJ1NjS32VDG\nwaM3P6DXud4xKXauVgAXyH6D6xEDBt5GIBTFrWKIDKGOkvRChTUvzObmx9ZVSMMg\n5xvAbsaFgJx3RBbznySlqVU4APYE0W2/xL0/8fzM\n-----END X509 CRL-----\n'
            resource_type: 'crl'

        VerifyUpdatedCRL3OnClusterNode1:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].crl.[3]"
            read:
              'name[?]equal_to': 'vSphere Certificate Authority'
              'resource_type[?]equal_to': 'crl'

        DeleteCRL1FromClusterNode3:
            Type: "NSX"
            TestNSX: "nsxmanager.[3]"
            deletecrl: "nsxmanager.[3].crl.[1]"

        DeleteCRL2FromClusterNode1:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            deletecrl: "nsxmanager.[1].crl.[2]"

        DeleteCRL3FromClusterNode2:
            Type: "NSX"
            TestNSX: "nsxmanager.[2]"
            deletecrl: "nsxmanager.[2].crl.[3]"

        SetCRLId: *SET_CRL_ID

        VerifyCRLDeletionOnClusterNode1:
            <<: *DELETE_CRL_VERIFICATION

        VerifyCRLDeletionOnClusterNode2:
            <<: *DELETE_CRL_VERIFICATION
            Testcertificate: "nsxmanager.[2].crlmob.[1]"

        VerifyCRLDeletionOnClusterNode3:
            <<: *DELETE_CRL_VERIFICATION
            Testcertificate: "nsxmanager.[3].crlmob.[1]"


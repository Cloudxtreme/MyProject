CreateCSR:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "Create CSR"
    Version: "2"
    Summary: "Verify CSR gets created"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P0"
    Developer: "dgargote"
    Procedure: '1. Create one CSR
                2. Verify CSR gets created successfully'
    ExpectedResult: 'CSR should get created successfully'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt'
    Partnerfacing: "N"
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]
            - ["VerifyCSR"]
        ExitSequence:
            - ["DeleteCSR"]

        CreateCSR: *CREATE_CSR

        VerifyCSR:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            read:
              'resource_type[?]equal_to': 'csr'
              'algorithm[?]equal_to': 'RSA'
              'key_size[?]equal_to': '2048'

        DeleteCSR: *DELETE_ALL_CSR

GenerateCSRWithCorrectAttributes:
    Product: 'NSXTransformers'
    Component: 'CertificateMgmt'
    Category: 'ManagementPlatform'
    TestName: 'Generate CSR with correct attributes'
    Version: "2"
    Priority: 'P0'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    Summary: 'Verify CSR gets generated with correct attributes'
    Procedure: '1. Generate CSR with correct attributes
                2. Verify CSR gets generated successfully'
    ExpectedResult: 'CSR should get generated successfully'
    Duration: '5'
    Tags: 'nsx,management,certmgmt,cat'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: "Execution Ready"
    PartnerFacing: 'N'
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]
            - ["VerifyCSR"]
        ExitSequence:
            - ["DeleteCSR"]

        CreateCSR: *CREATE_CSR

        VerifyCSR:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            read:
              'resource_type[?]equal_to': 'csr'
              'algorithm[?]equal_to': 'RSA'
              'key_size[?]equal_to': '2048'

        DeleteCSR: *DELETE_ALL_CSR

GenerateCSRWithKeySize3072:
    Product: 'NSXTransformers'
    Component: 'CertificateMgmt'
    Category: 'ManagementPlatform'
    TestName: 'Generate CSR with key size 3072'
    Version: "2"
    Priority: 'P1'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    Summary: 'Verify CSR gets generated with key size 3072'
    Procedure: '1. Generate CSR with key size 3072
                2. Verify CSR gets generated successfully'
    ExpectedResult: 'CSR should get generated successfully with key size 3072'
    Duration: '5'
    Tags: 'nsx,management,certmgmt,cat'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: "Execution Ready"
    PartnerFacing: 'N'
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]
            - ["VerifyCSR"]
        ExitSequence:
            - ["DeleteCSR"]

        CreateCSR:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            csr:
                '[1]':
                    algorithm: "RSA"
                    key_size: "3072"
                    subject:
                      attributes:
                        - key: CN
                          value: NSX
                        - key: O
                          value: VMware
                        - key: OU
                          value: NSBU
                        - key: C
                          value: US
                        - key: ST
                          value: CA
                        - key: L
                          value: PA

        VerifyCSR:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            read:
              'resource_type[?]equal_to': 'csr'
              'algorithm[?]equal_to': 'RSA'
              'key_size[?]equal_to': '3072'

        DeleteCSR: *DELETE_ALL_CSR

GenerateCSRWithKeySize2048:
    Product: 'NSXTransformers'
    Component: 'CertificateMgmt'
    Category: 'ManagementPlatform'
    TestName: 'Generate CSR with key size 2048'
    Version: "2"
    Priority: 'P1'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    Summary: 'Verify CSR gets generated with key size 2048'
    Procedure: '1. Generate CSR with key size 2048
                2. Verify CSR gets generated successfully'
    ExpectedResult: 'CSR should get generated successfully with key size 2048'
    Duration: '5'
    Tags: 'nsx,management,certmgmt,cat'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: "Execution Ready"
    PartnerFacing: 'N'
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]
            - ["VerifyCSR"]
        ExitSequence:
            - ["DeleteCSR"]

        CreateCSR: *CREATE_CSR

        VerifyCSR:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            read:
              'resource_type[?]equal_to': 'csr'
              'algorithm[?]equal_to': 'RSA'
              'key_size[?]equal_to': '2048'

        DeleteCSR: *DELETE_ALL_CSR

GenerateCSRWithMessageAlgorithmRSA:
    Product: 'NSXTransformers'
    Component: 'CertificateMgmt'
    Category: 'ManagementPlatform'
    TestName: 'Generate CSR with message algorithm RSA'
    Version: "2"
    Priority: 'P1'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    Summary: 'Verify CSR gets generated with message algorithm RSA'
    Procedure: '1. Generate CSR with message algorithm RSA
                2. Verify CSR gets generated successfully'
    ExpectedResult: 'CSR should get generated successfully with message algorithm
    RSA'
    Duration: '5'
    Tags: 'nsx,management,certmgmt,cat'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: "Execution Ready"
    PartnerFacing: 'N'
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]
            - ["VerifyCSR"]
        ExitSequence:
            - ["DeleteCSR"]

        CreateCSR: *CREATE_CSR

        VerifyCSR:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            read:
              'resource_type[?]equal_to': 'csr'
              'algorithm[?]equal_to': 'RSA'
              'key_size[?]equal_to': '2048'

        DeleteCSR: *DELETE_ALL_CSR

GenerateCSRWithMessageAlgorithmDSA:
    Product: 'NSXTransformers'
    Component: 'CertificateMgmt'
    Category: 'ManagementPlatform'
    TestName: 'Generate CSR with message algorithm DSA'
    Version: "2"
    Priority: 'P1'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    Summary: 'Verify CSR gets generated with message algorithm DSA'
    Procedure: '1. Generate CSR with message algorithm DSA
                2. Verify CSR gets generated successfully'
    ExpectedResult: 'CSR should get generated successfully with message algorithm
    DSA'
    Duration: '5'
    Tags: 'nsx,management,certmgmt,cat'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: "Execution Ready"
    PartnerFacing: 'N'
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]
            - ["VerifyCSR"]
        ExitSequence:
            - ["DeleteCSR"]

        CreateCSR:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            csr:
                '[1]':
                    algorithm: "DSA"
                    key_size: "2048"
                    subject:
                      attributes:
                        - key: CN
                          value: NSX
                        - key: O
                          value: VMware
                        - key: OU
                          value: NSBU
                        - key: C
                          value: US
                        - key: ST
                          value: CA
                        - key: L
                          value: PA

        VerifyCSR:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            read:
              'resource_type[?]equal_to': 'csr'
              'algorithm[?]equal_to': 'DSA'
              'key_size[?]equal_to': '2048'

        DeleteCSR: *DELETE_ALL_CSR

DeleteCSR:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "Delete CSR"
    Version: "2"
    Summary: "Verify CSR gets deleted"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P0"
    Developer: "dgargote"
    Procedure: '1. Create one CSR
                2. Try to delete CSR created in step-1
                3. Verify CSR gets deleted successfully'
    ExpectedResult: 'CSR should get deleted successfully'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]
            - ["VerifyCSR"]
        ExitSequence:
            - ["DeleteCSR"]

        CreateCSR: *CREATE_CSR

        VerifyCSR:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            read:
              'resource_type[?]equal_to': 'csr'
              'algorithm[?]equal_to': 'RSA'
              'key_size[?]equal_to': '2048'

        DeleteCSR: *DELETE_ALL_CSR

GetCSRDetails:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "Delete CSR"
    Version: "2"
    Summary: "Verify CSR details get retrieved"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P0"
    Developer: "dgargote"
    Procedure: '1. Create one CSR
                2. Try to retrieve CSR details
                3. Verify CSR details gets retrieved successfully'
    ExpectedResult: 'CSR details should get retrieved successfully'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]
            - ["VerifyCSR"]
        ExitSequence:
            - ["DeleteCSR"]

        CreateCSR: *CREATE_CSR

        VerifyCSR:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            read:
              'resource_type[?]equal_to': 'csr'
              'algorithm[?]equal_to': 'RSA'
              'key_size[?]equal_to': '2048'
              'subject[?]contains':
                  attributes:
                    - key: CN
                      value: NSX
                    - key: O
                      value: VMware
                    - key: OU
                      value: NSBU
                    - key: C
                      value: US
                    - key: ST
                      value: CA
                    - key: L
                      value: PA

        DeleteCSR: *DELETE_ALL_CSR

ViewAllCSRs:
    Product: 'NSXTransformers'
    Component: 'CertificateMgmt'
    Category: 'ManagementPlatform'
    TestName: 'Verify if all CSRs get listed'
    Version: "2"
    Priority: 'P1'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    Summary: 'Verify all CSRs get listed'
    Procedure: '1. Generate multiple CSRs
                2. Get list of all CSRs generated'
    ExpectedResult: 'All the CSRs should get listed'
    Duration: '5'
    Tags: 'nsx,management,certmgmt,cat'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: "Execution Ready"
    PartnerFacing: 'N'
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSRWithAlgorithmRSA"]
            - ["CreateCSRWithAlgorithmDSA"]
            - ["VerifyAllCSRs"]
        ExitSequence:
            - ["DeleteAllCSRs"]

        CreateCSRWithAlgorithmRSA: *CREATE_CSR
        CreateCSRWithAlgorithmDSA:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            csr:
                '[2]':
                    algorithm: "DSA"
                    key_size: "2048"
                    subject:
                      attributes:
                        - key: CN
                          value: NSX
                        - key: O
                          value: VMware
                        - key: OU
                          value: NSBU
                        - key: C
                          value: US
                        - key: ST
                          value: CA
                        - key: L
                          value: PA

        VerifyAllCSRs:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            get_certificate_list:
               'result_count[?]equal_to': 2
               'results[?]contains':
                   - resource_type: 'csr'
                     algorithm: 'RSA'
                     key_size: '2048'
                   - resource_type: 'csr'
                     algorithm: 'DSA'
                     key_size: '2048'

        DeleteAllCSRs: *DELETE_ALL_CSR

GenerateCSRWithIncorrectMessageAlgorithmAttribute:
    Product: 'NSXTransformers'
    Component: 'CertificateMgmt'
    Category: 'ManagementPlatform'
    TestName: 'Generate CSR with incorrect message algorithm'
    Version: "2"
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    Summary: 'Verify CSR generation fails with incorrect message algorithm'
    Procedure: '1. Try to generate CSR with incorrect message algorithm
                2. Verify CSR generation fails with appropriate error message'
    ExpectedResult: 'CSR generation should fail with appropriate error message'
    Duration: '5'
    Tags: 'nsx,management,certmgmt,cat'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: "Execution Ready"
    PartnerFacing: 'N'
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]

        CreateCSR:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            ExpectedResult:
                status_code: BAD_REQUEST
            csr:
                '[1]':
                    algorithm: "incorrect-algorithm" #Incorrect algorithm
                    key_size: "2048"
                    subject:
                      attributes:
                        - key: CN
                          value: NSX
                        - key: O
                          value: VMware
                        - key: OU
                          value: NSBU
                        - key: C
                          value: US
                        - key: ST
                          value: CA
                        - key: L
                          value: PA

GenerateCSRWithIncorrectKeySizeAttribute:
    Product: 'NSXTransformers'
    Component: 'CertificateMgmt'
    Category: 'ManagementPlatform'
    TestName: 'Generate CSR with incorrect key-size'
    Version: "2"
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    Summary: 'Verify CSR generation fails with incorrect key-size'
    Procedure: '1. Try to generate CSR with incorrect key-size
                2. Verify CSR generation fails with appropriate error message'
    ExpectedResult: 'CSR generation should fail with appropriate error message'
    Duration: '5'
    Tags: 'nsx,management,certmgmt,cat'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: "Execution Ready"
    PartnerFacing: 'N'
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]

        CreateCSR:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            ExpectedResult:
                status_code: BAD_REQUEST
            csr:
                '[1]':
                    algorithm: "RSA"
                    key_size: "1234" #Incorrect key-size
                    subject:
                      attributes:
                        - key: CN
                          value: NSX
                        - key: O
                          value: VMware
                        - key: OU
                          value: NSBU
                        - key: C
                          value: US
                        - key: ST
                          value: CA
                        - key: L
                          value: PA

GenerateCSRWithIncorrectOrganiztionalInfoAttribute:
    Product: 'NSXTransformers'
    Component: 'CertificateMgmt'
    Category: 'ManagementPlatform'
    TestName: 'Generate CSR with incorrect org info attribute'
    Version: "2"
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    Summary: 'Verify CSR generation fails with incorrect org info attribute'
    Procedure: '1. Try to generate CSR with incorrect org info attribute
                2. Verify CSR generation fails with appropriate error message'
    ExpectedResult: 'CSR generation should fail with appropriate error message'
    Duration: '5'
    Tags: 'nsx,management,certmgmt,cat'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: "Execution Ready"
    PartnerFacing: 'N'
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]

        CreateCSR:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            ExpectedResult:
                status_code: BAD_REQUEST
            csr:
                '[1]':
                    algorithm: "RSA"
                    key_size: "2048"
                    subject:
                      attributes:
                        - key: IncorrectKey #Incorrect key
                          value: NSX
                        - key: O
                          value: VMware
                        - key: OU
                          value: NSBU
                        - key: C
                          value: US
                        - key: ST
                          value: CA
                        - key: L
                          value: PA

GetCSRDetailsWithIncorrectCSRId:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "Delete CSR"
    Version: "2"
    Summary: "Verify get CSR fails with incorrect CSR-id"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "dgargote"
    Procedure: '1. Try  retrieve CSR details with incorrect CSR-id
                2. Verify get CSR API returns appropriate error'
    ExpectedResult: 'Get CSR should return appropriate error'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["SetCSRId"]
            - ["GetCSR"]

        #Set CSR-Id to incorrect value
        SetCSRId:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            csr:
                '[1]':
                    map_object: true
                    id_: 'incorrect_id'

        GetCSR:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            ExpectedResult:
                status_code: NOT_FOUND
            read:
              'resource_type[?]equal_to': 'csr'

DeleteCSRWithIncorrectCSRId:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "Delete CSR"
    Version: "2"
    Summary: "Verify delete CSR fails with incorrect CSR-id"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "dgargote"
    Procedure: '1. Try  delete CSR with incorrect CSR-id
                2. Verify delete CSR API returns appropriate error'
    ExpectedResult: 'Delete CSR should return appropriate error'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["SetCSRId"]
            - ["DeleteCSR"]

        #Set CSR-Id to incorrect value
        SetCSRId:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            csr:
                '[1]':
                    map_object: true
                    id_: 'incorrect_id'

        DeleteCSR:
            Type: "NSX"
            TestNSX: "nsxmanager.[1]"
            ExpectedResult:
                status_code: NOT_FOUND
            deletecsr: "nsxmanager.[1].csr.[1]"

DownloadCSRPemFile:
    Product: "NSXTransformers"
    Category: "ManagementPlatform"
    Component: "CertificateMgmt"
    TestName: "DownloadCSRPemFile"
    Version: "2"
    Summary: "Verify CSR pem gets downloaded"
    ExpectedResult: "PASS"
    Status: "Execution Ready"
    AutomationLevel: "Automated"
    FullyAutomatable: "Y"
    TestcaseLevel: "Functional"
    TestcaseType: "Functional"
    Priority: "P2"
    Developer: "dgargote"
    Procedure: '1. Create one CSR
                2. Verify CSR gets created successfully
                3. Download pem-data file of the generated CSR'
    ExpectedResult: 'CSR pem-data should get downloaded successfully'
    Duration: '5'
    Tags: 'nsxmanager,management,certmgmt,cat'
    Partnerfacing: "N"
    TestbedSpec:
        nsxmanager:
            '[1]':
               'ip': None
    WORKLOADS:
        Sequence:
            - ["CreateCSR"]
            - ["VerifyCSR"]
            - ["DownloadCSRPem"]
        ExitSequence:
            - ["DeleteCSR"]

        CreateCSR: *CREATE_CSR

        VerifyCSR:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            read:
              'algorithm[?]equal_to': 'RSA'
              'key_size[?]equal_to': '2048'

        DownloadCSRPem:
            Type: "Certificate"
            Testcertificate: "nsxmanager.[1].csr.[1]"
            csr_id: "nsxmanager.[1].csr.[1]"
            download_pem_data:
              'pem_data[?]defined': ''
              'response_data':
                  'status_code[?]equal_to': 200

        DeleteCSR: *DELETE_ALL_CSR


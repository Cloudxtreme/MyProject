INVENTORY_WORKLOADS: &INVENTORY_WORKLOADS
    StopDA: &STOP_DA
        ESX: &STOP_DA--ESX
            Type: Host
            TestHost: 'esx.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'stop'
                service_name: 'nsx-da'
                execution_type: 'cli'

        KVM: &STOP_DA--KVM
            Type: Host
            TestHost: 'kvm.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'stop'
                service_name: 'nsx-da'
                execution_type: 'cmd'

    StartDA: &START_DA
        ESX: &START_DA--ESX
            Type: Host
            TestHost: 'esx.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'start'
                service_name: 'nsx-da'
                execution_type: 'cli'

        KVM: &START_DA--KVM
            Type: Host
            TestHost: 'kvm.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'start'
                service_name: 'nsx-da'
                execution_type: 'cmd'

    RestartMPA: &RESTART_MPA
        ESX: &RESTART_MPA--ESX
            Type: Host
            TestHost: 'esx.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'restart'
                service_name: 'nsx-mpa'
                execution_type: 'cli'

        KVM: &RESTART_MPA--KVM
            Type: Host
            TestHost: 'kvm.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'restart'
                service_name: 'nsx-mpa'
                execution_type: 'cmd'

    RestartDA: &RESTART_DA
        ESX: &RESTART_DA--ESX
            Type: Host
            TestHost: 'esx.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'restart'
                service_name: 'nsx-da'
                execution_type: 'cli'

        KVM: &RESTART_DA--KVM
            Type: Host
            TestHost: 'kvm.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'restart'
                service_name: 'nsx-da'
                execution_type: 'cmd'

    StopMPA: &STOP_MPA
        ESX: &STOP_MPA--ESX
            Type: Host
            TestHost: 'esx.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'stop'
                service_name: 'nsx-mpa'
                execution_type: 'cli'

        KVM: &STOP_MPA--KVM
            Type: Host
            TestHost: 'kvm.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'stop'
                service_name: 'nsx-mpa'
                execution_type: 'cmd'

    StartMPA: &START_MPA
        ESX: &START_MPA--ESX
            Type: Host
            TestHost: 'esx.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'start'
                service_name: 'nsx-mpa'
                execution_type: 'cli'

        KVM: &START_MPA--KVM
            Type: Host
            TestHost: 'kvm.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'start'
                service_name: 'nsx-mpa'
                execution_type: 'cmd'

    KillDA: &KILL_DA
        ESX: &KILL_DA--ESX
            Type: Host
            TestHost: 'esx.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'kill'
                service_name: 'nsx-da'
                execution_type: 'cli'

        KVM: &KILL_DA--KVM
            Type: Host
            TestHost: 'kvm.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'kill'
                service_name: 'nsx-da'
                execution_type: 'cmd'

    KillMPA: &KILL_MPA
        ESX: &KILL_MPA--ESX
            Type: Host
            TestHost: 'esx.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'kill'
                service_name: 'nsx-mpa'
                execution_type: 'cli'

        KVM: &KILL_MPA--KVM
            Type: Host
            TestHost: 'kvm.[1]'
            sleepbetweenworkloads: "10"
            configure_service_state:
                state: 'kill'
                service_name: 'nsx-mpa'
                execution_type: 'cmd'

    UnregisterAllHosts: &UNREGISTER_ALL_HOSTS
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: "10"
        deletehostnode: "nsxmanager.[1].hostnode.[-1]"

    UnregisterHostNode1: &UNREGISTER_HOST_NODE1
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: "10"
        deletehostnode: "nsxmanager.[1].hostnode.[1]"

    SetNonExistingHostId: &SET_NON_EXISTING_HOSTID
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        hostnode:
            '[1]':
                map_object: true
                id_: 'incorrect_id'

    SetNonExistingVifId: &SET_NON_EXISTING_VIFID
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        fabricvif:
            '[1]':
                map_object: true
                id_: 'incorrect_id'

    SetNonExistingVmId: &SET_NON_EXISTING_VMID
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        fabricvm:
            '[1]':
                map_object: true
                id_: 'incorrect_id'

    SetManager: &SET_MANAGER
        ESX: &SET_MANAGER--ESX
            Type: Host
            TestHost: 'esx.[1]'
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[1]'
        KVM: &SET_MANAGER--KVM
            <<: *SET_MANAGER--ESX
            TestHost: 'kvm.[1]'

    RegisterESX1: &REGISTER_ESX1
      Type: NSX
      TestNSX: 'nsxmanager.[1]'
      hostnode:
          '[1]':
              hypervisor_info:
                    ip_addresses: 'esx.[1]'
                    external_id: 'esx.[1]->id'
                    os_type: 'ESXI'
              host_msg_client_info:
                    account_name: 'esx.[1]'
                    shared_secret: 'cvn-1-2-3'
                    certificate: 'iaWCS2wJhrhXGz0e7iFk7zFO9fM='

    AddVSSOnEsx1: &ADD_VSS_ON_ESX1
        Type: Host
        TestHost: 'esx.[1]'
        vss:
           '[1]':
              name : "TestSwitch"

    AddPGOnEsx1: &ADD_PG_ON_ESX1
        Type: Host
        TestHost: 'esx.[1]'
        portgroup:
           '[1]':
              name: "testpg"
              vss: "esx.[1].vss.[1]"

    AddVm2OnEsx1: &ADD_VM2_ON_ESX1
        Type: 'Root'
        TestNode: 'root.[1]'
        vm:
            '[2]':
                template: 'rhel53-srv-32'
                host: 'esx.[1]'

    GetVm1Id: &GET_VM1_ID
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        noofretries: 6
        sleepbetweenretry: 60
        fabricvm:
            '[1]':
                discover: 'true'
                name: 'vm.[1]'

    GetVm2Id: &GET_VM2_ID
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: "120"
        fabricvm:
            '[2]':
                discover: 'true'
                name: 'vm.[2]'

    AddVNic1ToVM1: &ADD_VNIC1_TO_VM1
        Type: VM
        TestVM: 'vm.[1]'
        vnic:
            '[1]':
                driver: "E1000"
                connected: 1
                startconnected: 1
                portgroup: "esx.[1].portgroup.[1]"

    AddVnic1ToVM2: &ADD_VNIC1_To_VM2
        Type: VM
        TestVM: 'vm.[2]'
        sleepbetweenworkloads: "10"
        vnic:
            '[1]':
                driver: "vmxnet3"
                connected: 1
                startconnected: 1
                portgroup: "esx.[1].portgroup.[1]"

    GetVnic1OfVm1: &GET_VNIC1_OF_VM1
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: '60'
        fabricvif:
            '[1]':
                discover: 'true'
                adapter_mac: 'vm.[1].vnic.[1]'

    GetVnic1OfVm2: &GET_VNIC1_OF_VM2
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: '60'
        fabricvif:
            '[2]':
                discover: 'true'
                adapter_mac: 'vm.[2].vnic.[1]'

    DeleteVnic1ofVM1: &DELETE_VNIC1_OF_VM1
        Type: VM
        TestVM: 'vm.[1]'
        deletevnic: vm.[1].vnic.[1]
        sleepbetweenworkloads: '10'

    DeleteVm2: &DELETE_VM2
        Type: 'Root'
        TestNode: 'root.[1]'
        deletevm: vm.[2]
        sleepbetweenworkloads: '10'

    DeletePortgroupFromESX1: &DELETE_PORTGROUP_FROM_ESX1
        Type: Host
        TestHost: 'esx.[1]'
        deleteportgroup: esx.[1].portgroup.[1]
        sleepbetweenworkloads: "10"

    DeleteVSSFromESX1: &DELETE_VSS_FROM_ESX1
        Type: Host
        TestHost: 'esx.[1]'
        deletevss: esx.[1].vss.[1]
        sleepbetweenworkloads: "10"

    RenameVm2: &RENAME_VM2
        Type: VM
        TestHost: 'vm.[2]'
        sleepbetweenworkloads: "10"
        rename_vm:
            name: 'UpdatedVM'
            execution_type: 'cli'

    SetRabbitmqServiceId: &SET_RABBITMQ_SERVICEID
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        nsxservice:
          '[1]':
              map_object: true
              id_: 'rabbitmq'

    StopRabbitmqService: &STOP_RABBITMQ_SERVICE
                Type: "Service"
                TestService: "nsxmanager.[1].nsxservice.[1]"
                configure_service_state:
                    state: 'stop'
                    service_name: 'rabbitmq'

    StartRabbitmqService: &START_RABBITMQ_SERVICE
        Type: "Service"
        TestService: "nsxmanager.[1].nsxservice.[1]"
        configure_service_state:
            state: 'start'
            service_name: 'rabbitmq'

    RestartRabbitmqService: &RESTART_RABBITMQ_SERVICE
        Type: "Service"
        TestService: "nsxmanager.[1].nsxservice.[1]"
        configure_service_state:
            state: 'restart'
            service_name: 'rabbitmq'

    StartProtonService: &START_PROTON_SERVICE
        Type: "Service"
        TestService: "nsxmanager.[1].nsxservice.[1]"
        configure_service_state:
            state: 'start'
            service_name: 'proton'

    RestartManagerAppliance: &RESTART_MANAGER_APPLIANCE
      Type: NSX
      TestNSX: "nsxmanager.[1]"
      configure_power_state:
        state: 'restart'

    RebootKVM1: &REBOOT_KVM1
       Type: "Host"
       TestHost: "kvm.[1]"
       reboot: "yes"

    RebootESX1: &REBOOT_ESX1
       Type: "Host"
       TestHost: "esx.[1]"
       reboot: "yes"

    RegisterHostOnClusterNode1: &REGISTER_HOST_ON_CLUSTER_NODE1
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        hostnode:
            '[1]':
                resource_type: "HostNode"
                name: 'TestESXIHost'
                summary: "Test CRUD APIs of host on NSX Manager"
                ip_addresses:
                      - 192.168.10.10
                external_id: 'd4c70b3e-e0a5-479c-b3cb-dbfbc68612342'
                os_type: 'ESXI'
                host_msg_client_info:
                    account_name: 'test'
                    shared_secret: 'cvn-1-2-3'
                    certificate: 'iaWCS2wJhrhXGz0e7iFk7zFO9fM='

    ReadHostOnClusterNode1: &READ_HOST_ON_CLUSTER_NODE1
        Type: "Host"
        TestHost: "nsxmanager.[1].hostnode.[1]"
        read:
          'name[?]equal_to': 'TestESXIHost'
          'summary[?]equal_to': "Test CRUD APIs of host on NSX Manager"

    ReadHostOnClusterNode2: &READ_HOST_ON_CLUSTER_NODE2
        Type: "Host"
        TestHost: "nsxmanager.[2].hostnode.[1]"
        read:
          'name[?]equal_to': 'TestESXIHost'
          'summary[?]equal_to': "Test CRUD APIs of host on NSX Manager"

    ReadHostOnClusterNode3: &READ_HOST_ON_CLUSTER_NODE3
        Type: "Host"
        TestHost: "nsxmanager.[3].hostnode.[1]"
        read:
          'name[?]equal_to': 'TestESXIHost'
          'summary[?]equal_to': "Test CRUD APIs of host on NSX Manager"

    UnregisterHostOnClusterNode1: &Unregister_HOST_ON_CLUSTER_NODE1
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: "10"
        deletehostnode: "nsxmanager.[1].hostnode.[1]"

    AddVIF1ToVM1: &ADD_VIF1_TO_VM1
        Type: VM
        TestVM: 'vm.[1]'
        vif:
            '[1]':
                backing: 'kvm.[1].bridge.[1]'

    AddVIF1ToVM2: &ADD_VIF1_TO_VM2
        <<: *ADD_VIF1_TO_VM1
        TestVM: 'vm.[2]'

    AddVm2OnKVM1: &ADD_VM2_ON_KVM1
        Type: 'Root'
        TestNode: 'root.[1]'
        vm:
            '[2]':
                host: 'kvm.[1]'
                template: template_kvm_debian
                vmstate: poweron
                installtype: fullclone

    DeleteVif1ofVM1: &DELETE_VIF1_OF_VM1
        Type: VM
        TestVM: 'vm.[1]'
        deletevif: vm.[1].vif.[1]
        sleepbetweenworkloads: '10'

    GetVif1OfVm1OnKVM: &GET_VIF1_OF_VM1_ON_KVM
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: '60'
        fabricvif:
            '[1]':
                discover: 'true'
                adapter_mac: 'vm.[1].vif.[1]'

    GetVif1OfVm2OnKVM: &GET_VIF1_OF_VM2_ON_KVM
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: '50'
        fabricvif:
            '[2]':
                discover: 'true'
                adapter_mac: 'vm.[2].vif.[1]'

    ReadFabricVif1PostDeletion: &READ_FABRIC_VIF1_POST_DELETION
        Type: "Inventory"
        TestInventory: "nsxmanager.[1].fabricvif.[1]"
        sleepbetweenworkloads: '60'
        ExpectedResult:
            status_code: NOT_FOUND
        read:
            'resource_type[?]equal_to': 'VirtualNetworkInterface'

    VerifyVif1OfVm1Deleted: &VERIFY_VIF1_OF_VM1_DELETED
     Type: "Inventory"
     TestInventory: "nsxmanager.[1].fabricvif.[1]"
     sleepbetweenworkloads: '60'
     get_inventoryobject_list:
      'results[?]not_contains':
         - id_: 'nsxmanager.[1].fabricvif.[1]->id'

    VerifyVif1OfVm2Deleted: &VERIFY_VIF1_OF_VM2_DELETED
     Type: "Inventory"
     TestInventory: "nsxmanager.[1].fabricvif.[2]"
     sleepbetweenworkloads: '60'
     get_inventoryobject_list:
      'results[?]not_contains':
         - id_: 'nsxmanager.[1].fabricvif.[2]->id'

    VerifyVm1Deleted: &VERIFY_VM1_DELETED
     Type: "Inventory"
     TestInventory: "nsxmanager.[1].fabricvm.[1]"
     sleepbetweenworkloads: '60'
     get_inventoryobject_list:
      'results[?]not_contains':
         - id_: 'nsxmanager.[1].fabricvm.[1]->id'

    VerifyVm2Deleted: &VERIFY_VM2_DELETED
     Type: "Inventory"
     TestInventory: "nsxmanager.[1].fabricvm.[1]"
     sleepbetweenworkloads: '60'
     get_inventoryobject_list:
      'results[?]not_contains':
         - id_: 'nsxmanager.[1].fabricvm.[2]->id'

    RegisterNodeWithInvalidPassword: &REGISTER_NODE_WITH_INVALID_PASSWORD
        ESX: &REGISTER_NODE_WITH_INVALID_PASSWORD--ESX
            Type: Host
            TestHost: 'esx.[1]'
            ExpectedResult:
                status_code: FAILURE
                reason[?]match: Failed to authenticate to Manager
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[1]'
                username: 'admin'
                password: 'invalid'

        KVM: &REGISTER_NODE_WITH_INVALID_PASSWORD--KVM
            <<: *REGISTER_NODE_WITH_INVALID_PASSWORD--ESX
            TestHost: 'kvm.[1]'

    RegisterNodeWithInvalidThumbprint: &REGISTER_NODE_WITH_INVALID_THUMBPRINT
        ESX: &REGISTER_NODE_WITH_INVALID_THUMBPRINT--ESX
            Type: Host
            TestHost: 'esx.[1]'
            ExpectedResult:
                status_code: FAILURE
                reason[?]match: |
                    Invalid value for argument <thumbprint>: Invalid_Thumbprint
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                execution_type: 'cli'
                manager_thumbprint: 'Invalid_Thumbprint'

        KVM: &REGISTER_NODE_WITH_INVALID_THUMBPRINT--KVM
            <<: *REGISTER_NODE_WITH_INVALID_THUMBPRINT--ESX
            TestHost: 'kvm.[1]'

    RegisterNodeWithInvalidUser: &REGISTER_NODE_WITH_INVALID_USER
        ESX: &REGISTER_NODE_WITH_INVALID_USER--ESX
            Type: Host
            TestHost: 'esx.[1]'
            ExpectedResult:
                status_code: FAILURE
                reason[?]match: Failed to authenticate to Manager
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[1]'
                username: 'invalid'
                password: 'default'

        KVM: &REGISTER_NODE_WITH_INVALID_USER--KVM
            <<: *REGISTER_NODE_WITH_INVALID_USER--ESX
            TestHost: 'kvm.[1]'

    RegisterNodeWithUnreachableManager: &REGISTER_NODE_WITH_UNREACHABLE_MANAGER
        ESX: &REGISTER_NODE_WITH_UNREACHABLE_MANAGER--ESX
            Type: Host
            TestHost: 'esx.[1]'
            ExpectedResult:
                status_code: FAILURE
                reason[?]match: Exception when registering host  'MSG_API_CONNECTION_FAILED'
            set_nsx_manager:
                manager_ip: '10.1.1.1'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[1]'

        KVM: &REGISTER_NODE_WITH_UNREACHABLE_MANAGER--KVM
            <<: *REGISTER_NODE_WITH_UNREACHABLE_MANAGER--ESX
            TestHost: 'kvm.[1]'

    DeregisterNodeWithInvalidPassword: &DEREGISTER_NODE_WITH_INVALID_PASSWORD
        ESX: &DEREGISTER_NODE_WITH_INVALID_PASSWORD--ESX
            Type: Host
            TestHost: 'esx.[1]'
            ExpectedResult:
                status_code: FAILURE
                reason[?]match: Failed to authenticate to Manager
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[1]'
                username: 'admin'
                password: 'invalid'

        KVM: &DEREGISTER_NODE_WITH_INVALID_PASSWORD--KVM
            <<: *DEREGISTER_NODE_WITH_INVALID_PASSWORD--ESX
            TestHost: 'kvm.[1]'

    DeregisterNodeWithInvalidThumbprint: &DEREGISTER_NODE_WITH_INVALID_THUMBPRINT
        ESX: &DEREGISTER_NODE_WITH_INVALID_THUMBPRINT--ESX
            Type: Host
            TestHost: 'esx.[1]'
            ExpectedResult:
                status_code: FAILURE
                reason[?]match: |
                    Invalid value for argument <thumbprint>: Invalid_Thumbprint
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                execution_type: 'cli'
                manager_thumbprint: 'Invalid_Thumbprint'

        KVM: &DEREGISTER_NODE_WITH_INVALID_THUMBPRINT--KVM
            <<: *REGISTER_NODE_WITH_INVALID_THUMBPRINT--ESX
            TestHost: 'kvm.[1]'

    DeregisterNodeWithInvalidUser: &DEREGISTER_NODE_WITH_INVALID_USER
        ESX: &DEREGISTER_NODE_WITH_INVALID_USER--ESX
            Type: Host
            TestHost: 'esx.[1]'
            ExpectedResult:
                status_code: FAILURE
                reason[?]match: Failed to authenticate to Manager
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[1]'
                username: 'invalid'
                password: 'default'

        KVM: &DEREGISTER_NODE_WITH_INVALID_USER--KVM
            <<: *DEREGISTER_NODE_WITH_INVALID_USER--ESX
            TestHost: 'kvm.[1]'

    DeregisterNodeWithUnreachableManager: &DEREGISTER_NODE_WITH_UNREACHABLE_MANAGER
        ESX: &DEREGISTER_NODE_WITH_UNREACHABLE_MANAGER--ESX
            Type: Host
            TestHost: 'esx.[1]'
            ExpectedResult:
                status_code: FAILURE
                reason[?]match: Exception when deregistering host  'MSG_API_CONNECTION_FAILED'
            remove_nsx_manager:
                manager_ip: '10.1.1.1'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[1]'

        KVM: &DEREGISTER_NODE_WITH_UNREACHABLE_MANAGER--KVM
            <<: *DEREGISTER_NODE_WITH_UNREACHABLE_MANAGER--ESX
            TestHost: 'kvm.[1]'

    RemoveNSXManager: &REMOVE_NSX_MANAGER
        ESX: &REMOVE_NSX_MANAGER--ESX
            Type: Host
            TestHost: 'esx.[1]'
            sleepbetweenworkloads: '60'
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[1]'
        KVM: &REMOVE_NSX_MANAGER--KVM
            <<: *REMOVE_NSX_MANAGER--ESX
            TestHost: 'kvm.[1]'

    RegisterNodeWithTacacsUser: &REGISTER_NODE_WITH_TACACS_USER
        ESX: &REGISTER_NODE_WITH_TACACS_USER--ESX
            Type: Host
            TestHost: 'esx.[1]'
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[1]'
                username: 'nsxadmin'
                password: 'admin123'
        KVM: &REGISTER_NODE_WITH_TACACS_USER--KVM
            <<: *REGISTER_NODE_WITH_TACACS_USER--ESX
            TestHost: 'kvm.[1]'

    DeregisterNodeWithTacacsUser: &DEREGISTER_NODE_WITH_TACACS_USER
        ESX: &DEREGISTER_NODE_WITH_TACACS_USER--ESX
            Type: Host
            TestHost: 'esx.[1]'
            sleepbetweenworkloads: '30'
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[1]'
                username: 'nsxadmin'
                password: 'admin123'
        KVM: &DEREGISTER_NODE_WITH_TACACS_USER--KVM
            <<: *DEREGISTER_NODE_WITH_TACACS_USER--ESX
            TestHost: 'kvm.[1]'

    SetManager2OnNode2: &SET_MANAGER2_ON_NODE2
           ESX: &SET_MANAGER2_ON_NODE2--ESX
               Type: Host
               TestHost: 'esx.[2]'
               set_nsx_manager:
                   manager_ip: 'nsxmanager.[2]'
                   execution_type: 'cli'
                   manager_thumbprint: 'nsxmanager.[2]'
           KVM: &SET_MANAGER2_ON_NODE2--KVM
               <<: *SET_MANAGER2_ON_NODE2--ESX
               TestHost: 'kvm.[2]'

    SetManager3OnNode3: &SET_MANAGER3_ON_NODE3
         ESX: &SET_MANAGER3_ON_NODE3--ESX
             Type: Host
             TestHost: 'esx.[3]'
             set_nsx_manager:
                 manager_ip: 'nsxmanager.[3]'
                 execution_type: 'cli'
                 manager_thumbprint: 'nsxmanager.[3]'
         KVM: &SET_MANAGER3_ON_NODE3--KVM
             <<: *SET_MANAGER3_ON_NODE3--ESX
             TestHost: 'kvm.[3]'

    RemoveNSXManager2OnNode2: &REMOVE_NSX_MANAGER2_ON_NODE2
            ESX: &REMOVE_NSX_MANAGER2_ON_NODE2--ESX
                Type: Host
                TestHost: 'esx.[2]'
                sleepbetweenworkloads: '60'
                remove_nsx_manager:
                    manager_ip: 'nsxmanager.[2]'
                    execution_type: 'cli'
                    manager_thumbprint: 'nsxmanager.[2]'
            KVM: &REMOVE_NSX_MANAGER2_ON_NODE2--KVM
                <<: *REMOVE_NSX_MANAGER2_ON_NODE2--ESX
                TestHost: 'kvm.[2]'

    RemoveNSXManager3OnNode3: &REMOVE_NSX_MANAGER3_ON_NODE3
        ESX: &REMOVE_NSX_MANAGER3_ON_NODE3--ESX
            Type: Host
            TestHost: 'esx.[3]'
            sleepbetweenworkloads: '60'
            remove_nsx_manager:
                manager_ip: 'nsxmanager.[3]'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[3]'

        KVM: &REMOVE_NSX_MANAGER3_ON_NODE3--KVM
            <<: *REMOVE_NSX_MANAGER3_ON_NODE3--ESX
            TestHost: 'kvm.[3]'

    DiscoverHostNode2: &DISCOVER_HOST_NODE2
        ESX: &DISCOVER_HOST_NODE2--ESX
            Type: NSX
            TestNSX: 'nsxmanager.[2]'
            hostnode:
                '[2]':
                    discover: 'true'
                    ip_addresses: 'esx.[2]'
        KVM: &DISCOVER_HOST_NODE2--KVM
            <<: *DISCOVER_HOST_NODE2--ESX
            hostnode:
                '[2]':
                    discover: 'true'
                    ip_addresses: 'kvm.[2]'

    DiscoverHostNode3: &DISCOVER_HOST_NODE3
        ESX: &DISCOVER_HOST_NODE3--ESX
            Type: NSX
            TestNSX: 'nsxmanager.[3]'
            hostnode:
                '[3]':
                    discover: 'true'
                    ip_addresses: 'esx.[3]'
        KVM: &DISCOVER_HOST_NODE3--KVM
            <<: *DISCOVER_HOST_NODE3--ESX
            hostnode:
                '[3]':
                    discover: 'true'
                    ip_addresses: 'kvm.[3]'

    PowerOffManager1: &POWER_OFF_MANAGER1
        Type: "VM"
        TestVM: "nsxmanager.[1]"
        execution_type: 'cli'
        sleepbetweenworkloads: 10
        vmstate: poweroff

    PowerOnManager1: &POWER_ON_MANAGER1
        Type: "VM"
        TestVM: "nsxmanager.[1]"
        execution_type: 'cli'
        sleepbetweenworkloads: 10
        vmstate: poweron

    AddVm4OnHost1: &ADD_VM4_ON_HOST1
        ESX: &ADD_VM4_ON_HOST1--ESX
            Type: 'Root'
            TestNode: 'root.[1]'
            vm:
                '[4]':
                    template: 'rhel53-srv-32'
                    host: 'esx.[1]'
        KVM: &ADD_VM4_ON_HOST1--KVM
            <<: *ADD_VM4_ON_HOST1--ESX
            vm:
                '[4]':
                    template: 'template_kvm_debian'
                    vmstate: 'poweron'
                    host: 'kvm.[1]'
                    installtype: fullclone

    GetVm4IdFromManager1: &GET_VM4ID_FROM_MANAGER1
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        sleepbetweenworkloads: "100"
        fabricvm:
            '[4]':
                discover: 'true'
                name: 'vm.[4]'

    DeleteVm: &DELETE_VM
        Type: 'Root'
        TestNode: 'root.[1]'
        deletevm: vm.[1]
        sleepbetweenworkloads: '10'

    AddVm1OnHost1: &ADD_VM1_ON_HOST1
        ESX: &ADD_VM1_ON_HOST1--ESX
            Type: 'Root'
            TestNode: 'root.[1]'
            vm:
                '[1]':
                    template: 'rhel53-srv-32'
                    host: 'esx.[1]'
        KVM: &ADD_VM1_ON_HOST1--KVM
            <<: *ADD_VM1_ON_HOST1--ESX
            vm:
                '[1]':
                    template: 'template_kvm_debian'
                    vmstate: 'poweron'
                    host: 'kvm.[1]'
                    installtype: fullclone

    ReadOSVersionOnHostNode1: &READ_OSVERSION_ON_HOST_NODE1
        ESX: &READ_OSVERSION_ON_HOST_NODE1--ESX
            Type: "Host"
            TestHost: "nsxmanager.[1].hostnode.[1]"
            read:
                'os_version[?]equal_to': '6.0.0'
        KVM: &READ_OSVERSION_ON_HOST_NODE1--KVM
            Type: "Host"
            TestHost: "nsxmanager.[1].hostnode.[1]"
            read:
                'os_version[?]equal_to': '6.4'

    BlockHostNode1TrafficOnNode1: &BLOCK_HOSTNODE1_TRAFFIC_ON_NODE1
        ESX: &BLOCK_HOSTNODE1_TRAFFIC_ON_NODE1--ESX
            Type: 'NSX'
            TestNSX: 'nsxmanager.[1]'
            node_network_partitioning:
                operation: 'set'
                manager_ip: 'esx.[1]->mgmt_ip'
                execution_type: 'cli'
        KVM: &BLOCK_HOSTNODE1_TRAFFIC_ON_NODE1--KVM
            Type: 'NSX'
            TestNSX: 'nsxmanager.[1]'
            node_network_partitioning:
                operation: 'set'
                manager_ip: 'kvm.[1]->mgmt_ip'
                execution_type: 'cli'

    UnblockHostNode1TrafficOnNode1: &UNBLOCK_HOSTNODE1_TRAFFIC_ON_NODE1
        ESX: &UNBLOCK_HOSTNODE1_TRAFFIC_ON_NODE1--ESX
            Type: 'NSX'
            TestNSX: 'nsxmanager.[1]'
            node_network_partitioning:
                operation: 'reset'
                manager_ip: 'esx.[1]->mgmt_ip'
                execution_type: 'cli'
        KVM: &UNBLOCK_HOSTNODE1_TRAFFIC_ON_NODE1--KVM
            Type: 'NSX'
            TestNSX: 'nsxmanager.[1]'
            node_network_partitioning:
                operation: 'reset'
                manager_ip: 'kvm.[1]->mgmt_ip'
                execution_type: 'cli'

    GetClients: &GET_CLIENTS
        Type: 'NSX'
        TestNSX: 'nsxmanager.[1]'
        messagingclient:
            '[1]':
                result_object: 'results'

    PingClient1: &PING_CLIENT_1
        Type: 'Messaging'
        TestMessaging: 'nsxmanager.[1].messagingclient.[1]'
        noofretries: 6
        sleepbetweenretry: 60
        ping_client:
            'client_status[?]equal_to': 'true'

    RegisterNodeExpectFailure: &REGISTER_NODE_EXPECT_FAILURE
        ESX: &REGISTER_NODE_EXPECT_FAILURE--ESX
            Type: Host
            TestHost: 'esx.[1]'
            ExpectedResult:
                status_code: FAILURE
            set_nsx_manager:
                manager_ip: 'nsxmanager.[1]'
                execution_type: 'cli'
                manager_thumbprint: 'nsxmanager.[1]'

        KVM: &REGISTER_NODE_EXPECT_FAILURE--KVM
            <<: *REGISTER_NODE_EXPECT_FAILURE--ESX
            TestHost: 'kvm.[1]'

    DiscoverHostNodes: &DISCOVER_HOST_NODES
        ESX: &DISCOVER_HOST_NODES--ESX
            Type: NSX
            TestNSX: 'nsxmanager.[1]'
            hostnode:
                '[1-3]':
                    discover: 'true'
                    ip_addresses: 'esx.[x=hostnode_index]'
        KVM: &DISCOVER_HOST_NODES--KVM
            Type: NSX
            TestNSX: 'nsxmanager.[1]'
            hostnode:
                '[1-3]':
                    discover: 'true'
                    ip_addresses: 'kvm.[x=hostnode_index]'

    DiscoverHostNode1: &DISCOVER_HOST_NODE1
        ESX: &DISCOVER_HOST_NODE1--ESX
            Type: NSX
            TestNSX: 'nsxmanager.[1]'
            hostnode:
                '[1]':
                    discover: 'true'
                    ip_addresses: 'esx.[1]'
        KVM: &DISCOVER_HOST_NODE1--KVM
            Type: NSX
            TestNSX: 'nsxmanager.[1]'
            hostnode:
                '[1]':
                    discover: 'true'
                    ip_addresses: 'kvm.[1]'

    PowerOnVm1: &POWER_ON_VM1
        Type: VM
        TestVM: vm.[1]
        vmstate: poweron

    GetVm1IdFromManager1: &GET_VM1_ID_FROM_MANAGER1
        Type: "NSX"
        TestNSX: "nsxmanager.[1]"
        noofretries: 6
        sleepbetweenretry: 60
        fabricvm:
            '[1]':
                discover: 'true'
                name: 'vm.[1]'

    GetVm1IdFromManager2: &GET_VM1_ID_FROM_MANAGER2
        <<: *GET_VM1_ID_FROM_MANAGER1
        TestNSX: "nsxmanager.[2]"

    GetVm1IdFromManager3: &GET_VM1_ID_FROM_MANAGER3
        <<: *GET_VM1_ID_FROM_MANAGER1
        TestNSX: "nsxmanager.[3]"

    GetVm2IdFromManager1: &GET_VM2_ID_FROM_MANAGER1
        <<: *GET_VM1_ID_FROM_MANAGER1
        fabricvm:
            '[2]':
                discover: 'true'
                name: 'vm.[2]'

    GetVm2IdFromManager2: &GET_VM2_ID_FROM_MANAGER2
        <<: *GET_VM2_ID_FROM_MANAGER1
        TestNSX: "nsxmanager.[2]"

    GetVm2IdFromManager3: &GET_VM2_ID_FROM_MANAGER3
        <<: *GET_VM2_ID_FROM_MANAGER1
        TestNSX: "nsxmanager.[3]"

    GetVm3IdFromManager1: &GET_VM3_ID_FROM_MANAGER1
        <<: *GET_VM1_ID_FROM_MANAGER1
        fabricvm:
            '[3]':
                discover: 'true'
                name: 'vm.[3]'

    GetVm3IdFromManager2: &GET_VM3_ID_FROM_MANAGER2
        <<: *GET_VM3_ID_FROM_MANAGER1
        TestNSX: "nsxmanager.[2]"

    GetVm3IdFromManager3: &GET_VM3_ID_FROM_MANAGER3
        <<: *GET_VM3_ID_FROM_MANAGER1
        TestNSX: "nsxmanager.[3]"

    DiscoverHostNode1OnManager1ESX: &DISCOVER_HOSTNODE1_ON_MANAGER1--ESX
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        hostnode:
            '[1]':
                discover: 'true'
                ip_addresses: 'esx.[1]'

    DiscoverHostNode1OnManager2ESX: &DISCOVER_HOSTNODE1_ON_MANAGER2--ESX
        <<: *DISCOVER_HOSTNODE1_ON_MANAGER1--ESX
        TestNSX: 'nsxmanager.[2]'

    DiscoverHostNode1OnManager3ESX: &DISCOVER_HOSTNODE1_ON_MANAGER3--ESX
        <<: *DISCOVER_HOSTNODE1_ON_MANAGER1--ESX
        TestNSX: 'nsxmanager.[3]'

    DiscoverHostNode2OnManager1ESX: &DISCOVER_HOSTNODE2_ON_MANAGER1--ESX
        <<: *DISCOVER_HOSTNODE1_ON_MANAGER1--ESX
        hostnode:
            '[2]':
                discover: 'true'
                ip_addresses: 'esx.[2]'

    DiscoverHostNode2OnManager2ESX: &DISCOVER_HOSTNODE2_ON_MANAGER2--ESX
        <<: *DISCOVER_HOSTNODE2_ON_MANAGER1--ESX
        TestNSX: 'nsxmanager.[2]'

    DiscoverHostNode2OnManager3ESX: &DISCOVER_HOSTNODE2_ON_MANAGER3--ESX
        <<: *DISCOVER_HOSTNODE2_ON_MANAGER1--ESX
        TestNSX: 'nsxmanager.[3]'

    DiscoverHostNode3OnManager1ESX: &DISCOVER_HOSTNODE3_ON_MANAGER1--ESX
        <<: *DISCOVER_HOSTNODE1_ON_MANAGER1--ESX
        hostnode:
            '[3]':
                discover: 'true'
                ip_addresses: 'esx.[3]'

    DiscoverHostNode3OnManager2ESX: &DISCOVER_HOSTNODE3_ON_MANAGER2--ESX
        <<: *DISCOVER_HOSTNODE3_ON_MANAGER1--ESX
        TestNSX: 'nsxmanager.[2]'

    DiscoverHostNode3OnManager3ESX: &DISCOVER_HOSTNODE3_ON_MANAGER3--ESX
        <<: *DISCOVER_HOSTNODE3_ON_MANAGER1--ESX
        TestNSX: 'nsxmanager.[3]'

    DiscoverHostNode1OnManager1KVM: &DISCOVER_HOSTNODE1_ON_MANAGER1--KVM
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        hostnode:
            '[1]':
                discover: 'true'
                ip_addresses: 'kvm.[1]'

    DiscoverHostNode1OnManager2KVM: &DISCOVER_HOSTNODE1_ON_MANAGER2--KVM
        <<: *DISCOVER_HOSTNODE1_ON_MANAGER1--KVM
        TestNSX: 'nsxmanager.[2]'

    DiscoverHostNode1OnManager3KVM: &DISCOVER_HOSTNODE1_ON_MANAGER3--KVM
        <<: *DISCOVER_HOSTNODE1_ON_MANAGER1--KVM
        TestNSX: 'nsxmanager.[3]'

    DiscoverHostNode2OnManager1KVM: &DISCOVER_HOSTNODE2_ON_MANAGER1--KVM
        <<: *DISCOVER_HOSTNODE1_ON_MANAGER1--KVM
        hostnode:
            '[2]':
                discover: 'true'
                ip_addresses: 'kvm.[2]'

    DiscoverHostNode2OnManager2KVM: &DISCOVER_HOSTNODE2_ON_MANAGER2--KVM
        <<: *DISCOVER_HOSTNODE2_ON_MANAGER1--KVM
        TestNSX: 'nsxmanager.[2]'

    DiscoverHostNode2OnManager3KVM: &DISCOVER_HOSTNODE2_ON_MANAGER3--KVM
        <<: *DISCOVER_HOSTNODE2_ON_MANAGER1--KVM
        TestNSX: 'nsxmanager.[3]'

    DiscoverHostNode3OnManager1KVM: &DISCOVER_HOSTNODE3_ON_MANAGER1--KVM
        <<: *DISCOVER_HOSTNODE1_ON_MANAGER1--KVM
        hostnode:
            '[3]':
                discover: 'true'
                ip_addresses: 'kvm.[3]'

    DiscoverHostNode3OnManager2KVM: &DISCOVER_HOSTNODE3_ON_MANAGER2--KVM
        <<: *DISCOVER_HOSTNODE3_ON_MANAGER1--KVM
        TestNSX: 'nsxmanager.[2]'

    DiscoverHostNode3OnManager3KVM: &DISCOVER_HOSTNODE3_ON_MANAGER3--KVM
        <<: *DISCOVER_HOSTNODE3_ON_MANAGER1--KVM
        TestNSX: 'nsxmanager.[3]'

    DiscoverAllHostNodesFromManager1ESX: &DISCOVER_ALL_HOST_NODES_FROM_MANAGER1--ESX
        Type: NSX
        TestNSX: 'nsxmanager.[1]'
        hostnode:
            '[1-3]':
                discover: 'true'
                ip_addresses: 'esx.[x=hostnode_index]'

    DiscoverAllHostNodesFromManager1KVM: &DISCOVER_ALL_HOST_NODES_FROM_MANAGER1--KVM
        <<: *DISCOVER_ALL_HOST_NODES_FROM_MANAGER1--ESX
        hostnode:
            '[1-3]':
                discover: 'true'
                ip_addresses: 'kvm.[x=hostnode_index]'

CommonWorkloads: &CommonWorkloads

  CreateLogicalSwitch01:
    Type: NSX
    TestNSX: nsxmanager.[1]
    logicalswitch:
      '[1]':
        name: "ls-1"
        summary: "1st logical Switch"
        transport_zone_id: nsxmanager.[1].transportzone.[1]
        admin_state: UP
        replication_mode: MTEP

  CreateLogicalSwitch01WithSingleTag:
    Type: NSX
    TestNSX: nsxmanager.[1]
    logicalswitch:
      '[1]':
        name: "ls-1"
        summary: "1st logical Switch"
        transport_zone_id: nsxmanager.[1].transportzone.[1]
        admin_state: UP
        replication_mode: MTEP
        tags:
          - scope: "Scope-1"
            tag: "Tag-1"

  CreateLogicalSwitch01WithMultipleTags:
    Type: NSX
    TestNSX: nsxmanager.[1]
    logicalswitch:
      '[1]':
        name: "ls-1"
        summary: "1st logical Switch"
        transport_zone_id: nsxmanager.[1].transportzone.[1]
        admin_state: UP
        replication_mode: MTEP
        tags:
          - scope: "Scope-1"
            tag: "Tag-1"
          - scope: "Scope-2"
            tag: "Tag-2"
          - scope: "Scope-3"
            tag: "Tag-3"
          - scope: "Scope-4"
            tag: "Tag-4"
          - scope: "Scope-5"
            tag: "Tag-5"

  UpdateLogicalSwitchWithSingleTag:
    Type: "Switch"
    Testswitch: "nsxmanager.[1].logicalswitch.[1]"
    reconfigure: true
    summary: "Updated logical Switch"
    tags:
      - scope: "Scope-1"
        tag: "Tag-1"

  UpdateLogicalSwitchWithMultipleTags:
    Type: "Switch"
    Testswitch: "nsxmanager.[1].logicalswitch.[1]"
    reconfigure: true
    summary: "Updated logical Switch"
    tags:
      - scope: "Scope-1"
        tag: "Tag-1"
      - scope: "Scope-2"
        tag: "Tag-2"
      - scope: "Scope-3"
        tag: "Tag-3"
      - scope: "Scope-4"
        tag: "Tag-4"
      - scope: "Scope-5"
        tag: "Tag-5"

  VerifyLogicalSwitchWithSingleTag:
    Type: "Switch"
    Testswitch: "nsxmanager.[1].logicalswitch.[1]"
    read:
      'name[?]equal_to': "ls-1"
      'tags[?]contains':
        - scope: "Scope-1"
          tag: "Tag-1"

  VerifyLogicalSwitchWithMultipleTags:
    Type: "Switch"
    Testswitch: "nsxmanager.[1].logicalswitch.[1]"
    read:
      'name[?]equal_to': "ls-1"
      'tags[?]contains':
        - scope: "Scope-1"
          tag: "Tag-1"
        - scope: "Scope-2"
          tag: "Tag-2"
        - scope: "Scope-3"
          tag: "Tag-3"
        - scope: "Scope-4"
          tag: "Tag-4"
        - scope: "Scope-5"
          tag: "Tag-5"

  DeleteLogicalSwitch1:
    Type: NSX
    TestNSX: nsxmanager.[1]
    deletelogicalswitch: "nsxmanager.[1].logicalswitch.[1]"

  CreateIPPool1:
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    ippool:
      '[1]':
        name: 'IPPool-1'
        summary: "IPPool created through automation"
        subnets:
          - allocation_ranges:
              - end: 192.168.1.10
                begin: 192.168.1.2
              - end: 192.168.1.20
                begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPool1WithTags: &CREATE_IPPOOL_WITH_TAGS
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    ippool:
      '[1]':
        name: 'IPPool-1'
        summary: "IPPool created through automation"
        subnets:
          - allocation_ranges:
              - end: 192.168.1.10
                begin: 192.168.1.2
              - end: 192.168.1.20
                begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1
        tags:
          - scope: "Scope-1"
            tag: "Tag-1"
          - scope: "Scope-2"
            tag: "Tag-2"
          - scope: "Scope-3"
            tag: "Tag-3"
          - scope: "Scope-4"
            tag: "Tag-4"
          - scope: "Scope-5"
            tag: "Tag-5"

  DeleteIPPool1:
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    deleteippool: "nsxmanager.[1].ippool.[1]"

  VerifyIPPool1WithTags: &VERIFY_IPPOOL_WITH_TAGS
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[1].ippool.[1]"
    read:
      'name[?]equal_to': "IPPool-1"
      'tags[?]contains':
        - scope: "Scope-1"
          tag: "Tag-1"
        - scope: "Scope-2"
          tag: "Tag-2"
        - scope: "Scope-3"
          tag: "Tag-3"
        - scope: "Scope-4"
          tag: "Tag-4"
        - scope: "Scope-5"
          tag: "Tag-5"

  CreateLogicalRouter01:
    Type: NSX
    TestNSX: nsxmanager.[1]
    logicalrouter:
      '[1]':
        name: "lrouter-1"
        router_type: "TIER0"
        summary: "Logical Router created through automation"

  CreateLogicalRouter01WithTags:
    Type: NSX
    TestNSX: nsxmanager.[1]
    logicalrouter:
      '[1]':
        name: "lrouter-1"
        router_type: "TIER0"
        summary: "Logical Router created through automation"
        tags:
          - scope: "Scope-1"
            tag: "Tag-1"
          - scope: "Scope-2"
            tag: "Tag-2"
          - scope: "Scope-3"
            tag: "Tag-3"
          - scope: "Scope-4"
            tag: "Tag-4"
          - scope: "Scope-5"
            tag: "Tag-5"

  UpdateLogicalRouter1WithMultipleTags:
    Type: "Router"
    Testrouter: "nsxmanager.[1].logicalrouter.[1]"
    reconfigure: true
    summary: "Updated logical router"
    tags:
      - scope: "Scope-1"
        tag: "Tag-1"
      - scope: "Scope-2"
        tag: "Tag-2"
      - scope: "Scope-3"
        tag: "Tag-3"
      - scope: "Scope-4"
        tag: "Tag-4"
      - scope: "Scope-5"
        tag: "Tag-5"

  VerifyLogicalRouter1WithMultipleTags:
    Type: "Router"
    Testrouter: "nsxmanager.[1].logicalrouter.[1]"
    read:
      'name[?]equal_to': "lrouter-1"
      'tags[?]contains':
        - scope: "Scope-1"
          tag: "Tag-1"
        - scope: "Scope-2"
          tag: "Tag-2"
        - scope: "Scope-3"
          tag: "Tag-3"
        - scope: "Scope-4"
          tag: "Tag-4"
        - scope: "Scope-5"
          tag: "Tag-5"

  DeleteLogicalRouter1:
    TestNSX: nsxmanager.[1]
    Type: NSX
    deletelogicalrouter: nsxmanager.[1].logicalrouter.[1]

  VerifyLogicalSwitchWithMultipleTagsOnNSXManager1: &VERIFY_LS_WITH_MULTIPLE_TAGS_ON_NSXMANAGER1
    Type: "Switch"
    Testswitch: "nsxmanager.[1].logicalswitch.[1]"
    read:
      'name[?]equal_to': "ls-1"
      'tags[?]contains':
        - scope: "Scope-1"
          tag: "Tag-1"
        - scope: "Scope-2"
          tag: "Tag-2"
        - scope: "Scope-3"
          tag: "Tag-3"
        - scope: "Scope-4"
          tag: "Tag-4"
        - scope: "Scope-5"
          tag: "Tag-5"

  VerifyLogicalSwitchWithMultipleTagsOnNSXManager2:
    <<: *VERIFY_LS_WITH_MULTIPLE_TAGS_ON_NSXMANAGER1
    Testswitch: "nsxmanager.[2].logicalswitch.[1]"

  VerifyLogicalSwitchWithMultipleTagsOnNSXManager3:
    <<: *VERIFY_LS_WITH_MULTIPLE_TAGS_ON_NSXMANAGER1
    Testswitch: "nsxmanager.[3].logicalswitch.[1]"

  MapNSXManager1ToCluster:
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    cluster:
      '[1]':
        map_object: true
        id_: 1

  Restart_NSXManager1: &RESTART_NSXMANAGER1
    Type: VM
    TestVM: "nsxmanager.[1]"
    vmstate: reboot

  Restart_NSXManager2:
    <<: *RESTART_NSXMANAGER1
    TestVM: "nsxmanager.[2]"

  Restart_NSXManager3:
    <<: *RESTART_NSXMANAGER1
    TestVM: "nsxmanager.[3]"

  Wait_For_Cluster_Status_Stable_On_NSXManager1: &WAIT_STABLE_NODE_1
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    wait_for_required_cluster_status:
      'required_status': 'STABLE'
      'time_to_monitor': '300'

  Wait_For_Cluster_Status_Stable_On_NSXManager2:
    <<: *WAIT_STABLE_NODE_1
    TestCluster: 'nsxmanager.[2].cluster.[1]'

  Wait_For_Cluster_Status_Stable_On_NSXManager3:
    <<: *WAIT_STABLE_NODE_1
    TestCluster: 'nsxmanager.[3].cluster.[1]'

  SetAAAId: &SET_AAA_ID
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    aaa_provider:
      '[1]':
        map_object: true
        id_: 1

  StopAuthServer: &STOP_AUTH_SERVER
    Type: AuthServer
    TestAuthServer: "authserver.[1]"
    state: 'stop'
    configure_service_state:
      'content[?]match': 'Stopping TACACS+'

  StartAuthServer: &START_AUTH_SERVER
    Type: AuthServer
    TestAuthServer: "authserver.[1]"
    sleepbetweenworkloads:  "10"
    state: 'start'
    configure_service_state:
      'content[?]match': 'Starting TACACS+'

  AddUser: &ADD_USER
    Type: AuthServer
    TestAuthServer: "authserver.[1]"
    sleepbetweenworkloads:  "10"
    add_user:
      username: 'nsxadmin'
      password: 'admin123'
      service: 'vmware_nsx'

  BackupDefaultConfig: &BACKUP_DEFAULT_CONFIG
    Type: AuthServer
    TestAuthServer: "authserver.[1]"
    sleepbetweenworkloads:  "30"
    backup_config_file:
      file_name: 'tbackup.conf'

  RestoreDefaultConfig: &RESTORE_DEFAULT_CONFIG
    Type: AuthServer
    TestAuthServer: "authserver.[1]"
    sleepbetweenworkloads:  "30"
    restore_config_file:
      file_name: 'tbackup.conf'

  VerifyProviderList: &VERIFY_PROVIDER_LIST
    Type: "AAA"
    Testaaa: "nsxmanager.[1].aaa_provider.[1]"
    get_provider_list:
      'provider_list[?]contains':
        - 'resource_type[?]equal_to': "TacacsPlusAAAProviderGroupProperties"
          'auth_type[?]equal_to': "CHAP"

  UpdateProviderList: &UPDATE_PROVIDER_LIST
    Type: "AAA"
    Testaaa: "nsxmanager.[1].aaa_provider.[1]"
    reconfigure: true
    provider_list:
      - resource_type: "TacacsPlusAAAProviderGroupProperties"
        auth_type: "CHAP"
        servers:
          - address: 'authserver.[1]->ip'
            secret_key: "testing123"

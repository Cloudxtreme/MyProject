CreateLogicalSwitchWithSingleTag:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'CreateLogicalSwitchWithSingleTag'
    Version: "2"
    TCMSId: ''
    Priority: 'P0'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch with single tag in it can be created'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create one logical switch with one tag in it
                3. Verify logical switch with single tag in it gets created'
    ExpectedResult: 'Logical switch with single tag in it should get created'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithSingleTag
            - - VerifyLogicalSwitchWithSingleTag
        ExitSequence:
            - - DeleteLogicalSwitch1

CreateLogicalSwitchWithMultipleTags:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'CreateLogicalSwitchWithMultipleTags'
    Version: "2"
    TCMSId: ''
    Priority: 'P0'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch with multiple tags in it can be created'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create one logical switch with five tags in it
                3. Verify logical switch with five tags in it gets created'
    ExpectedResult: 'Logical switch with five tags in it should get created'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithMultipleTags
            - - VerifyLogicalSwitchWithMultipleTags
        ExitSequence:
            - - DeleteLogicalSwitch1

UpdateLogicalSwitchByAddingSingleTag:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'UpdateLogicalSwitchByAddingSingleTag'
    Version: "2"
    TCMSId: ''
    Priority: 'P0'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch can be updated by adding single tag in it'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create one logical switch with tag in it
                3. Update logical switch by adding single tag in it
                3. Verify tag gets added to logical switch'
    ExpectedResult: 'Logical switch should get updated and one tag should get added to it'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01
            - - UpdateLogicalSwitchWithSingleTag
            - - VerifyLogicalSwitchWithSingleTag
        ExitSequence:
            - - DeleteLogicalSwitch1

UpdateLogicalSwitchByAddingMultipleTags:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'UpdateLogicalSwitchByAddingMultipleTags'
    Version: "2"
    TCMSId: ''
    Priority: 'P0'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch can be updated by adding multiple tags in it'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create one logical switch
                3. Update logical switch by adding multiple tags in it
                3. Verify multiple tags get added to logical switch'
    ExpectedResult: 'Logical switch should get updated and multiple tags should get added to it'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01
            - - UpdateLogicalSwitchWithMultipleTags
            - - VerifyLogicalSwitchWithMultipleTags
        ExitSequence:
            - - DeleteLogicalSwitch1

UpdateLogicalSwitchByRemovingSingleTag:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'UpdateLogicalSwitchByRemovingSingleTag'
    Version: "2"
    TCMSId: ''
    Priority: 'P0'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch can be updated by removing single tag in it'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create one logical switch with tag in it
                3. Update logical switch by removing single tag in it
                3. Verify tag gets removed from logical switch'
    ExpectedResult: 'Logical switch should get updated and tag should get removed from it'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithMultipleTags
            - - UpdateLogicalSwitchByRemovingSingleTag
            - - VerifySingleTagRemovedFromLogicalSwitch
            - - VerifyRemainingTagsInLogicalSwitch
        ExitSequence:
            - - DeleteLogicalSwitch1

        UpdateLogicalSwitchByRemovingSingleTag:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            reconfigure: true
            summary: "Updated logical Switch"
            tags:
                - scope: "Scope-2"
                  tag: "Tag-2"
                - scope: "Scope-3"
                  tag: "Tag-3"
                - scope: "Scope-4"
                  tag: "Tag-4"
                - scope: "Scope-5"
                  tag: "Tag-5"

        VerifySingleTagRemovedFromLogicalSwitch:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            read:
                'name[?]equal_to': "ls-1"
                'summary[?]equal_to': "Updated logical Switch"
                'tags[?]not_contains':
                    - scope: "Scope-1"
                      tag: "Tag-1"

        VerifyRemainingTagsInLogicalSwitch:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            read:
                'name[?]equal_to': "ls-1"
                'summary[?]equal_to': "Updated logical Switch"
                'tags[?]contains':
                    - scope: "Scope-2"
                      tag: "Tag-2"
                    - scope: "Scope-3"
                      tag: "Tag-3"
                    - scope: "Scope-4"
                      tag: "Tag-4"
                    - scope: "Scope-5"
                      tag: "Tag-5"

UpdateLogicalSwitchByRemovingMultipleTags:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'UpdateLogicalSwitchByRemovingMultipleTags'
    Version: "2"
    TCMSId: ''
    Priority: 'P0'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch can be updated by removing multiple tags in it'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create one logical switch with tag in it
                3. Update logical switch by removing multiple tags in it
                3. Verify tags get removed from logical switch'
    ExpectedResult: 'Logical switch should get updated and tags should get removed from it'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithMultipleTags
            - - UpdateLogicalSwitchByRemovingMultipleTags
            - - VerifyMultipleTagsRemovedFromLogicalSwitch
            - - VerifyRemainingTagsInLogicalSwitch
        ExitSequence:
            - - DeleteLogicalSwitch1

        UpdateLogicalSwitchByRemovingMultipleTags:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            reconfigure: true
            summary: "Updated logical Switch"
            tags:
                - scope: "Scope-2"
                  tag: "Tag-2"
                - scope: "Scope-3"
                  tag: "Tag-3"
                - scope: "Scope-4"
                  tag: "Tag-4"

        VerifyMultipleTagsRemovedFromLogicalSwitch:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            read:
                'name[?]equal_to': "ls-1"
                'summary[?]equal_to': "Updated logical Switch"
                'tags[?]not_contains':
                    - scope: "Scope-1"
                      tag: "Tag-1"
                    - scope: "Scope-5"
                      tag: "Tag-5"

        VerifyRemainingTagsInLogicalSwitch:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            read:
                'name[?]equal_to': "ls-1"
                'summary[?]equal_to': "Updated logical Switch"
                'tags[?]contains':
                    - scope: "Scope-2"
                      tag: "Tag-2"
                    - scope: "Scope-3"
                      tag: "Tag-3"
                    - scope: "Scope-4"
                      tag: "Tag-4"

UpdateLogicalSwitchByAddingRemovingTags:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'UpdateLogicalSwitchByAddingRemovingTags'
    Version: "2"
    TCMSId: ''
    Priority: 'P0'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch can be updated by adding and removing tags in it'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create one logical switch with tag in it
                3. Update logical switch by adding and removing tags in it in a single call
                3. Verify tags get added and removed from logical switch'
    ExpectedResult: 'Logical switch should get updated and new tag should get added and
                     old tag should get removed from it'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithMultipleTags
            - - UpdateLogicalSwitchByAddingAndRemovingTags
            - - VerifyTagsRemovedFromLogicalSwitch
            - - VerifyRemainingTagsInLogicalSwitch
        ExitSequence:
            - - DeleteLogicalSwitch1

        UpdateLogicalSwitchByAddingAndRemovingTags:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            reconfigure: true
            summary: "Updated logical Switch"
            tags:
                - scope: "Scope-2"
                  tag: "Tag-2"
                - scope: "Scope-3"
                  tag: "Tag-3"
                - scope: "Scope-6"
                  tag: "Tag-6"

        VerifyTagsRemovedFromLogicalSwitch:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            read:
                'name[?]equal_to': "ls-1"
                'summary[?]equal_to': "Updated logical Switch"
                'tags[?]not_contains':
                    - scope: "Scope-1"
                      tag: "Tag-1"
                    - scope: "Scope-4"
                      tag: "Tag-4"
                    - scope: "Scope-5"
                      tag: "Tag-5"

        VerifyRemainingTagsInLogicalSwitch:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            read:
                'name[?]equal_to': "ls-1"
                'summary[?]equal_to': "Updated logical Switch"
                'tags[?]contains':
                    - scope: "Scope-2"
                      tag: "Tag-2"
                    - scope: "Scope-3"
                      tag: "Tag-3"
                    - scope: "Scope-6"
                      tag: "Tag-6"

CreateLogicalSwitchWithBlankTag:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'CreateLogicalSwitchWithBlankTag'
    Version: "2"
    TCMSId: ''
    Priority: 'P1'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch with blank tag in it can be created'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Try to create logical switch with blank tag in it
                3. Verify logical switch with blank tag in it can be created'
    ExpectedResult: 'Logical switch with blank tag and valid scope value in it should get created'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithBlankTag
            - - VerifyLogicalSwitchWithBlankTag
        ExitSequence:
            - - DeleteLogicalSwitch1

        CreateLogicalSwitch01WithBlankTag:
            Type: NSX
            TestNSX: nsxmanager.[1]
            logicalswitch:
                '[1]':
                    name: "ls-1"
                    summary: "1st logical Switch"
                    transport_zone_id: nsxmanager.[1].transportzone.[1]
                    admin_state: UP
                    replication_mode: MTEP
                    tags:
                        - scope: "Scope-1"
                          tag: ""

        VerifyLogicalSwitchWithBlankTag:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            read:
                'name[?]equal_to': "ls-1"
                'tags[?]contains':
                    - scope: "Scope-1"
                      tag: ""

CreateLogicalSwitchWithTagMoreThan40CharacterLong:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'CreateLogicalSwitchWithTagMoreThan40CharacterLong'
    Version: "2"
    TCMSId: ''
    Priority: 'P1'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch with tag length more than 40 characters in it can be created'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Try to create logical switch with tag more than 40 characters long in it
                3. Verify logical switch with tag more than 40 characters long in it creation fails'
    ExpectedResult: 'Logical switch with tag more than 40 characters long in it should not get created'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithTagMoreThan40CharacterLong

        CreateLogicalSwitch01WithTagMoreThan40CharacterLong:
            Type: NSX
            TestNSX: nsxmanager.[1]
            ExpectedResult:
                status_code: BAD_REQUEST
            logicalswitch:
                '[1]':
                    name: "ls-1"
                    summary: "1st logical Switch"
                    transport_zone_id: nsxmanager.[1].transportzone.[1]
                    admin_state: UP
                    replication_mode: MTEP
                    tags:
                        - scope: "Scope-1"
                          tag: "01234567890123456789012345678901234567891"

CreateLogicalSwitchWithMoreThan5Tags:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'CreateLogicalSwitchWithMoreThan5Tags'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch with more than 5 tags in it can not be created'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create one logical switch with more than 5 tags in it
                3. Verify logical switch create operation is failing with 400 status code'
    ExpectedResult: 'Logical switch create operation should fail with 400 status code'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithMoreThan5Tags

        CreateLogicalSwitch01WithMoreThan5Tags:
            Type: NSX
            TestNSX: nsxmanager.[1]
            ExpectedResult:
                status_code: BAD_REQUEST
            logicalswitch:
                '[1]':
                    name: "ls-1"
                    summary: "1st logical Switch"
                    transport_zone_id: nsxmanager.[1].transportzone.[1]
                    admin_state: UP
                    replication_mode: MTEP
                    tags:
                        - scope: "Scope-1"
                          tag: "Tag-1"
                        - scope: "Scope-2"
                          tag: "Tag-2"
                        - scope: "Scope-3"
                          tag: "Tag-3"
                        - scope: "Scope-4"
                          tag: "Tag-4"
                        - scope: "Scope-5"
                          tag: "Tag-5"
                        - scope: "Scope-6"
                          tag: "Tag-6"

UpdateLogicalSwitchWithMoreThan5Tags:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'UpdateLogicalSwitchWithMoreThan5Tags'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify more than 5 tags can not be added to logical switch'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create one logical switch
                3. Try to add more than 5 tags to logical switch
                4. Verify logical switch update operation is failing with 400 status code'
    ExpectedResult: 'Logical switch update operation should fail with 400 status code'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01
            - - UpdateLogicalSwitchWithMoreThan5Tags
        ExitSequence:
            - - DeleteLogicalSwitch1

        UpdateLogicalSwitchWithMoreThan5Tags:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            ExpectedResult:
                status_code: BAD_REQUEST
            reconfigure: true
            summary: "Updated logical Switch"
            tags:
                - scope: "Scope-1"
                  tag: "Tag-1"
                - scope: "Scope-2"
                  tag: "Tag-2"
                - scope: "Scope-3"
                  tag: "Tag-3"
                - scope: "Scope-4"
                  tag: "Tag-4"
                - scope: "Scope-5"
                  tag: "Tag-5"
                - scope: "Scope-6"
                  tag: "Tag-6"

CreateLogicalSwitchWithBlankScope:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'CreateLogicalSwitchWithBlankScope'
    Version: "2"
    TCMSId: ''
    Priority: 'P1'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch with blank scope in it can be created'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Try to create logical switch with blank scope of the tag in it
                3. Verify logical switch with blank scope in it can be created'
    ExpectedResult: 'Logical switch with blank scope and valid tag value in it should get created'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithBlankScope
            - - VerifyLogicalSwitchWithBlankScope
        ExitSequence:
            - - DeleteLogicalSwitch1

        CreateLogicalSwitch01WithBlankScope:
            Type: NSX
            TestNSX: nsxmanager.[1]
            logicalswitch:
                '[1]':
                    name: "ls-1"
                    summary: "1st logical Switch"
                    transport_zone_id: nsxmanager.[1].transportzone.[1]
                    admin_state: UP
                    replication_mode: MTEP
                    tags:
                        - scope: ""
                          tag: "Tag-1"

        VerifyLogicalSwitchWithBlankScope:
            Type: "Switch"
            Testswitch: "nsxmanager.[1].logicalswitch.[1]"
            read:
                'name[?]equal_to': "ls-1"
                'tags[?]contains':
                    - scope: ""
                      tag: "Tag-1"

CreateLogicalSwitchWithScopeMoreThan20CharacterLong:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'CreateLogicalSwitchWithScopeMoreThan20CharacterLong'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch with blank tag in it can be created'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Try to create logical switch with scope more than 20 character long
                3. Verify logical switch creation is failing with 400 status code'
    ExpectedResult: 'Logical switch creation should fail with 400 status code'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithScopeMoreThan20CharacterLong

        CreateLogicalSwitch01WithScopeMoreThan20CharacterLong:
            Type: NSX
            TestNSX: nsxmanager.[1]
            ExpectedResult:
                status_code: BAD_REQUEST
            logicalswitch:
                '[1]':
                    name: "ls-1"
                    summary: "1st logical Switch"
                    transport_zone_id: nsxmanager.[1].transportzone.[1]
                    admin_state: UP
                    replication_mode: MTEP
                    tags:
                        - scope: "0123456789012345678901"
                          tag: "Tag-1"

CreateLogicalSwitchWithBlankScopeAndBlankTag:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'CreateLogicalSwitchWithBlankScopeAndBlankTag'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical switch with blank tag and blank tag in it can not be created'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Try to create logical switch with blank scope and blank tag in it
                3. Verify logical switch with blank scope and blank tag in it can not be created'
    ExpectedResult: 'Logical switch creation should fail with 400 status code'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: "Automated"
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithBlankScopeAndBlankTag

        CreateLogicalSwitch01WithBlankScopeAndBlankTag:
            Type: NSX
            TestNSX: nsxmanager.[1]
            ExpectedResult:
                status_code: BAD_REQUEST
            logicalswitch:
                '[1]':
                    name: "ls-1"
                    summary: "1st logical Switch"
                    transport_zone_id: nsxmanager.[1].transportzone.[1]
                    admin_state: UP
                    replication_mode: MTEP
                    tags:
                        - scope: ""
                          tag: ""

CreateIPPoolWithTags:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'CreateIPPoolWithTags'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify IPPool with tags in it can be created'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create IPPool with tags in it
                3. Verify IPPool with tags in it is getting created'
    ExpectedResult: 'IPPool with tags in it should get created'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: 'Automated'
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateIPPool1WithTags
            - - VerifyIPPool1WithTags
        ExitSequence:
            - - DeleteIPPool1

AddTagToIPPool:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'AddTagToIPPool'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify tags can be added to IPPool'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create IPPool
                3. Add tags to IPPool created in step-2
                4. Verify tags get added to the IPPool'
    ExpectedResult: 'IPPool should get updated with tags'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: 'Automated'
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateIPPool1
            - - UpdateIPPool1WithTags
            - - VerifyIPPool1WithTags
        ExitSequence:
            - - DeleteIPPool1

        UpdateIPPool1WithTags:
            Type: "GroupingObject"
            Testgroupingobject: "nsxmanager.[1].ippool.[1]"
            reconfigure: true
            summary: "Updated IPPool"
            tags:
                - scope: "Scope-1"
                  tag: "Tag-1"
                - scope: "Scope-2"
                  tag: "Tag-2"
                - scope: "Scope-3"
                  tag: "Tag-3"
                - scope: "Scope-4"
                  tag: "Tag-4"
                - scope: "Scope-5"
                  tag: "Tag-5"

RemoveTagFromIPPool:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'RemoveTagFromIPPool'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify tags can be removed from IPPool'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create IPPool with tags in it
                3. Update IPPool by removing tags from it
                3. Verify tags get removed from IPPool'
    ExpectedResult: 'Tags should get removed from IPPool'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: 'Automated'
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateIPPool1
            - - UpdateIPPool1WithTags
            - - VerifyIPPool1WithTags
            - - UpdateIPPool1ByRemovingTags
            - - VerifyTagsRemovedFromIPPool1
            - - VerifyRemainingTagsInIPPool1
        ExitSequence:
            - - DeleteIPPool1

        UpdateIPPool1WithTags:
            Type: "GroupingObject"
            Testgroupingobject: "nsxmanager.[1].ippool.[1]"
            reconfigure: true
            summary: "Updated IPPool"
            tags:
                - scope: "Scope-1"
                  tag: "Tag-1"
                - scope: "Scope-2"
                  tag: "Tag-2"
                - scope: "Scope-3"
                  tag: "Tag-3"
                - scope: "Scope-4"
                  tag: "Tag-4"
                - scope: "Scope-5"
                  tag: "Tag-5"

        UpdateIPPool1ByRemovingTags:
            Type: "GroupingObject"
            Testgroupingobject: "nsxmanager.[1].ippool.[1]"
            reconfigure: true
            summary: "Updated IPPool"
            tags:
                - scope: "Scope-3"
                  tag: "Tag-3"
                - scope: "Scope-4"
                  tag: "Tag-4"
                - scope: "Scope-5"
                  tag: "Tag-5"

        VerifyTagsRemovedFromIPPool1:
            Type: "GroupingObject"
            Testgroupingobject: "nsxmanager.[1].ippool.[1]"
            read:
                'name[?]equal_to': "IPPool-1"
                'tags[?]not_contains':
                    - scope: "Scope-1"
                      tag: "Tag-1"
                    - scope: "Scope-2"
                      tag: "Tag-2"

        VerifyRemainingTagsInIPPool1:
            Type: "GroupingObject"
            Testgroupingobject: "nsxmanager.[1].ippool.[1]"
            read:
                'name[?]equal_to': "IPPool-1"
                'tags[?]contains':
                    - scope: "Scope-3"
                      tag: "Tag-3"
                    - scope: "Scope-4"
                      tag: "Tag-4"
                    - scope: "Scope-5"
                      tag: "Tag-5"

CreateLogicalRouterWithTags:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'CreateLogicalRouterWithTags'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify logical router with tags in it can be created'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create logical router with tags in it
                3. Verify logical router with tags in it is getting created'
    ExpectedResult: 'Logical router with tags in it should get created'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: 'Automated'
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalRouter01WithTags
            - - VerifyLogicalRouter1WithMultipleTags
        ExitSequence:
            - - DeleteLogicalRouter1

AddTagToLogicalRouter:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'AddTagToLogicalRouter'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify tags can be added to logical router'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create logical router
                3. Add tags to logical router created in step-2
                4. Verify tags get added to the logical router'
    ExpectedResult: 'Logical router should get updated with tags'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: 'Automated'
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalRouter01
            - - UpdateLogicalRouter1WithMultipleTags
            - - VerifyLogicalRouter1WithMultipleTags
        ExitSequence:
            - - DeleteLogicalRouter1

RemoveTagFromLogicalRouter:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'RemoveTagFromLogicalRouter'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify tags can be removed from logical router'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create logical router with tags in it
                3. Update logical router by removing tags from it
                3. Verify tags get removed from logical router'
    ExpectedResult: 'Tags should get removed from Logical router'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: 'Automated'
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalRouter01
            - - UpdateLogicalRouter1WithMultipleTags
            - - VerifyLogicalRouter1WithMultipleTags
            - - UpdateLogicalRouter1ByRemovingTags
            - - VerifyTagsRemovedFromLogicalRouter1
            - - VerifyRemainingTagsInLogicalRouter1
        ExitSequence:
            - - DeleteLogicalRouter1

        UpdateLogicalRouter1ByRemovingTags:
            Type: "Router"
            Testrouter: "nsxmanager.[1].logicalrouter.[1]"
            reconfigure: true
            summary: "Updated logical router"
            tags:
                - scope: "Scope-3"
                  tag: "Tag-3"
                - scope: "Scope-4"
                  tag: "Tag-4"
                - scope: "Scope-5"
                  tag: "Tag-5"

        VerifyTagsRemovedFromLogicalRouter1:
            Type: "Router"
            Testrouter: "nsxmanager.[1].logicalrouter.[1]"
            read:
                'name[?]equal_to': "lrouter-1"
                'tags[?]not_contains':
                    - scope: "Scope-1"
                      tag: "Tag-1"
                    - scope: "Scope-2"
                      tag: "Tag-2"

        VerifyRemainingTagsInLogicalRouter1:
            Type: "Router"
            Testrouter: "nsxmanager.[1].logicalrouter.[1]"
            read:
                'name[?]equal_to': "lrouter-1"
                'tags[?]contains':
                    - scope: "Scope-3"
                      tag: "Tag-3"
                    - scope: "Scope-4"
                      tag: "Tag-4"
                    - scope: "Scope-5"
                      tag: "Tag-5"

TagIsPersistedAcrossNSXManagerClusterNodes:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'TagIsPersistedAcrossNSXManagerClusterNodes'
    Version: "2"
    TCMSId: ''
    Priority: 'P1'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify tag is persisted across NSXManager cluster nodes'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create multiple logical switches with multiple tags in it
                3. Verify logical switches with corresponding tags are
                   available on other two cluster nodes
                4. Delete some of the tags from logical switches
                5. Verify corresponding changes are reflected on other two nodes'
    ExpectedResult: 'Changes related to tags should get reflected on whole MP cluster'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: 'Automated'
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - CreateLogicalSwitch01WithMultipleTags
            - - VerifyLogicalSwitchWithMultipleTagsOnNSXManager1
            - - VerifyLogicalSwitchWithMultipleTagsOnNSXManager2
            - - VerifyLogicalSwitchWithMultipleTagsOnNSXManager3
        ExitSequence:
            - - DeleteLogicalSwitch1

TagIsPersistedAfterRebootingNSXManagerCluster:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'TagIsPersistedAfterRebootingNSXManagerCluster'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX
    Summary: 'Verify tag is persisted after rebooting NSXManager cluster'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create multiple logical switches with multiple tags in it
                3. Reboot NSXManager cluster
                4. Verify tags are persisted with logical switches'
    ExpectedResult: 'Tags should persist after rebooting NSXManager cluster'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: 'Automated'
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - MapNSXManager1ToCluster
            - - CreateLogicalSwitch01WithMultipleTags
            - - VerifyLogicalSwitchWithMultipleTagsOnNSXManager1
            - - VerifyLogicalSwitchWithMultipleTagsOnNSXManager2
            - - VerifyLogicalSwitchWithMultipleTagsOnNSXManager3
            - - Restart_NSXManager1
            - - Restart_NSXManager2
            - - Restart_NSXManager3
            - - Wait_For_Cluster_Status_Stable_On_NSXManager1
            - - Wait_For_Cluster_Status_Stable_On_NSXManager2
            - - Wait_For_Cluster_Status_Stable_On_NSXManager3
            - - VerifyLogicalSwitchWithMultipleTagsOnNSXManager1
            - - VerifyLogicalSwitchWithMultipleTagsOnNSXManager2
            - - VerifyLogicalSwitchWithMultipleTagsOnNSXManager3
        ExitSequence:
            - - DeleteLogicalSwitch1

        Wait_For_Cluster_Status_Stable_On_NSXManager1:
            <<: *WAIT_STABLE_NODE_1
            sleepbetweenworkloads: 120

AddTagUsingTacacsUser:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'AddTagUsingTacacsUser'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX_1AUTHSERVER
    Summary: 'Verify IPPool can be updated with tags using Tacacs user'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create IPPool
                3. Update IPPool with tags in it using Tacacs user
                4. Verify IPPool with tags in it is getting updated using Tacacs user'
    ExpectedResult: 'IPPool with tags in it should get updated using Tacacs user'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: 'Automated'
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - SetAAAId
            - - UpdateProviderList
            - - VerifyProviderList
            - - StopAuthServer
            - - BackupDefaultConfig
            - - AddUser
            - - StartAuthServer
            - - CreateIPPool1
            - - UpdateIPPool1WithTagsUsingTacacsUser
            - - VerifyIPPool1WithTags
        ExitSequence:
            - - DeleteIPPool1
            - - StopAuthServer
            - - RestoreDefaultConfig
            - - StartAuthServer

        UpdateIPPool1WithTagsUsingTacacsUser:
            Type: "GroupingObject"
            Testgroupingobject: "nsxmanager.[1].ippool.[1]"
            runtime_params:
                username: "nsxadmin"
                password: "admin123"
            reconfigure:
                summary: "Updated IPPool"
                tags:
                    - scope: "Scope-1"
                      tag: "Tag-1"
                    - scope: "Scope-2"
                      tag: "Tag-2"
                    - scope: "Scope-3"
                      tag: "Tag-3"
                    - scope: "Scope-4"
                      tag: "Tag-4"
                    - scope: "Scope-5"
                      tag: "Tag-5"

RemoveTagUsingTacacsUser:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'RemoveTagUsingTacacsUser'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX_1AUTHSERVER
    Summary: 'Verify IPPool can be updated by removing tags from it using Tacacs user'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create IPPool
                3. Update IPPool with tags in it using Tacacs user
                4. Update IPPool and remove tags from it using Tacacs user
                5. Verify tags are getting removed from IPPool using Tacacs user'
    ExpectedResult: 'Tags should get removed from IPPool using Tacacs user'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: 'Automated'
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - SetAAAId
            - - UpdateProviderList
            - - VerifyProviderList
            - - StopAuthServer
            - - BackupDefaultConfig
            - - AddUser
            - - StartAuthServer
            - - CreateIPPool1
            - - UpdateIPPool1WithTagsUsingTacacsUser
            - - VerifyIPPool1WithTags
            - - RemoveTagsFromIPPool1UsingTacacsUser
            - - VerifyTagsRemovedFromIPPool1
            - - VerifyRemainingTagsInIPPool1
        ExitSequence:
            - - DeleteIPPool1
            - - StopAuthServer
            - - RestoreDefaultConfig
            - - StartAuthServer

        UpdateIPPool1WithTagsUsingTacacsUser:
            Type: "GroupingObject"
            Testgroupingobject: "nsxmanager.[1].ippool.[1]"
            runtime_params:
                username: "nsxadmin"
                password: "admin123"
            reconfigure:
                summary: "Updated IPPool"
                tags:
                    - scope: "Scope-1"
                      tag: "Tag-1"
                    - scope: "Scope-2"
                      tag: "Tag-2"
                    - scope: "Scope-3"
                      tag: "Tag-3"
                    - scope: "Scope-4"
                      tag: "Tag-4"
                    - scope: "Scope-5"
                      tag: "Tag-5"

        RemoveTagsFromIPPool1UsingTacacsUser:
            Type: "GroupingObject"
            Testgroupingobject: "nsxmanager.[1].ippool.[1]"
            runtime_params:
                username: "nsxadmin"
                password: "admin123"
            reconfigure:
                summary: "Updated IPPool"
                tags:
                    - scope: "Scope-2"
                      tag: "Tag-2"
                    - scope: "Scope-3"
                      tag: "Tag-3"
                    - scope: "Scope-4"
                      tag: "Tag-4"

        VerifyTagsRemovedFromIPPool1:
            Type: "GroupingObject"
            Testgroupingobject: "nsxmanager.[1].ippool.[1]"
            read:
                'name[?]equal_to': "IPPool-1"
                'tags[?]not_contains':
                    - scope: "Scope-1"
                      tag: "Tag-1"
                    - scope: "Scope-5"
                      tag: "Tag-5"

        VerifyRemainingTagsInIPPool1:
            Type: "GroupingObject"
            Testgroupingobject: "nsxmanager.[1].ippool.[1]"
            read:
                'name[?]equal_to': "IPPool-1"
                'tags[?]contains':
                    - scope: "Scope-2"
                      tag: "Tag-2"
                    - scope: "Scope-3"
                      tag: "Tag-3"
                    - scope: "Scope-4"
                      tag: "Tag-4"

ReadTagsUsingTacacsUser:
    Product: 'NSXTransformers'
    Component: 'Tagging'
    Category: 'ManagementPlatform'
    TestName: 'ReadTagsUsingTacacsUser'
    Version: "2"
    TCMSId: ''
    Priority: 'P2'
    PMT: ''
    Testcaselevel: 'Functional'
    Testcasetype: 'Functional'
    QCPath:  ''
    TestbedSpec: *3MP_3CCP_4ESX_1AUTHSERVER
    Summary: 'Verify IPPool details with tags in it can be retrieved using Tacacs user'
    Procedure: '1. Create setup with three NSXManagers, three NSXControllers and two ESX servers
                2. Create IPPool with tags in it using Tacacs user
                3. Get IPPool details with tags in it using Tacacs user
                4. Verify IPPool details with tags in it are getting retrieved using Tacacs user'
    ExpectedResult: 'IPPool details with tags in it should get retrieved using Tacacs user'
    Duration: '300'
    Tags: 'nsx,management,tagging'
    AutomationLevel: 'Automated'
    Developer: 'dgargote'
    FullyAutomatable: 'Y'
    Status: 'Execution Ready'
    PartnerFacing: 'Y'
    WORKLOADS:
        <<: *CommonWorkloads
        Sequence:
            - - SetAAAId
            - - UpdateProviderList
            - - VerifyProviderList
            - - StopAuthServer
            - - BackupDefaultConfig
            - - AddUser
            - - StartAuthServer
            - - CreateIPPool1WithTagsUsingTacacsUser
            - - VerifyIPPool1WithTagsUsingTacacsUser
        ExitSequence:
            - - DeleteIPPool1
            - - StopAuthServer
            - - RestoreDefaultConfig
            - - StartAuthServer

        CreateIPPool1WithTagsUsingTacacsUser:
            <<: *CREATE_IPPOOL_WITH_TAGS
            runtime_params:
                username: "nsxadmin"
                password: "admin123"

        VerifyIPPool1WithTagsUsingTacacsUser:
            <<: *VERIFY_IPPOOL_WITH_TAGS
            runtime_params:
                username: "nsxadmin"
                password: "admin123"

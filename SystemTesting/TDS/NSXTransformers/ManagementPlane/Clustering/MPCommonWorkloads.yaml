MPClusteringConfigurationWorkloads: &MPClusteringConfigurationWorkloads

  NSXControllerClusterNode1: &NSXCONTROLLER_CLUSTERNODE1
    'nsxcontroller.[1].clusternode.[1]'

  NSXControllerClusterNode2: &NSXCONTROLLER_CLUSTERNODE2
    'nsxcontroller.[1].clusternode.[2]'

  NSXControllerClusterNode3: &NSXCONTROLLER_CLUSTERNODE3
    'nsxcontroller.[1].clusternode.[3]'

  GetMPNode1Id: &GET_MP_NODE1_ID
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    clusternode:
      '[1]':
        discover: 'true'
        manager_role:
          mgmt_cluster_listen_addr:
            ip_address: nsxmanager.[1]->manager_ip

  GetMPNode2Id: &GET_MP_NODE2_ID
    Type: "NSX"
    TestNSX: "nsxmanager.[2]"
    clusternode:
      '[2]':
        discover: 'true'
        manager_role:
          mgmt_cluster_listen_addr:
            ip_address: nsxmanager.[2]->manager_ip

  GetMPNode3Id: &GET_MP_NODE3_ID
    Type: "NSX"
    TestNSX: "nsxmanager.[3]"
    clusternode:
      '[3]':
        discover: 'true'
        manager_role:
          mgmt_cluster_listen_addr:
            ip_address: nsxmanager.[3]->manager_ip

  GetMPNode4Id: &GET_MP_NODE4_ID
    Type: "NSX"
    TestNSX: "nsxmanager.[4]"
    clusternode:
      '[4]':
        discover: 'true'
        manager_role:
          mgmt_cluster_listen_addr:
            ip_address: nsxmanager.[4]->manager_ip

  GetMPNode5Id: &GET_MP_NODE5_ID
    Type: "NSX"
    TestNSX: "nsxmanager.[5]"
    clusternode:
      '[5]':
        discover: 'true'
        manager_role:
          mgmt_cluster_listen_addr:
            ip_address: nsxmanager.[5]->manager_ip

  GetMPNode6Id: &GET_MP_NODE6_ID
    Type: "NSX"
    TestNSX: "nsxmanager.[6]"
    clusternode:
      '[6]':
        discover: 'true'
        manager_role:
          mgmt_cluster_listen_addr:
            ip_address: nsxmanager.[6]->manager_ip

  GetMPNode7Id: &GET_MP_NODE7_ID
    Type: "NSX"
    TestNSX: "nsxmanager.[7]"
    clusternode:
      '[7]':
        discover: 'true'
        manager_role:
          mgmt_cluster_listen_addr:
            ip_address: nsxmanager.[7]->manager_ip

  GetMPNode8Id: &GET_MP_NODE8_ID
    Type: "NSX"
    TestNSX: "nsxmanager.[8]"
    clusternode:
      '[8]':
        discover: 'true'
        manager_role:
          mgmt_cluster_listen_addr:
            ip_address: nsxmanager.[8]->manager_ip

  AddMPNode2ToCluster: &ADD_MP_NODE_2_TO_CLUSTER
    Type: NSX
    TestNSX: "nsxmanager.[1]"
    noofretries: 3
    sleepbetweenretry: 30
    clusternode:
      '[2]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[2]"
          manager_thumbprint: "nsxmanager.[2]"

  AddMPNode3ToCluster: &ADD_MP_NODE_3_TO_CLUSTER
    Type: NSX
    TestNSX: "nsxmanager.[1]"
    noofretries: 3
    sleepbetweenretry: 30
    clusternode:
      '[3]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[3]"
          manager_thumbprint: "nsxmanager.[3]"

  AddMPNode4ToCluster: &ADD_MP_NODE_4_TO_CLUSTER
    Type: NSX
    TestNSX: "nsxmanager.[1]"
    noofretries: 3
    sleepbetweenretry: 30
    clusternode:
      '[4]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[4]"
          manager_thumbprint: "nsxmanager.[4]"

  AddMPNode4ToClusterNode3: &ADD_MP_NODE_4_TO_CLUSTER_NODE_3
    <<: *ADD_MP_NODE_4_TO_CLUSTER
    TestNSX: "nsxmanager.[3]"

  Add2MPNodesToCluster: &ADD_2_MP_NODES_TO_CLUSTER
    Type: NSX
    TestNSX: "nsxmanager.[1]"
    noofretries: 3
    sleepbetweenretry: 30
    clusternode:
      '[2-3]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[x=clusternode_index]"
          manager_thumbprint: "nsxmanager.[x=clusternode_index]"

  AddMPNode1ToClusterNode3: &ADD_MP_NODE_1_TO_CLUSTER_MP_NODE_3
    Type: NSX
    TestNSX: "nsxmanager.[3]"
    noofretries: 3
    sleepbetweenretry: 30
    clusternode:
      '[1]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[1]"
          manager_thumbprint: "nsxmanager.[1]"

  AddMPNode2ToClusterNode3: &ADD_MP_NODE_2_TO_CLUSTER_MP_NODE_3
    Type: NSX
    TestNSX: "nsxmanager.[3]"
    noofretries: 3
    sleepbetweenretry: 30
    clusternode:
      '[2]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[2]"
          manager_thumbprint: "nsxmanager.[2]"

  AddMPNode4ToClusterNode1: &ADD_MP_NODE_4_TO_CLUSTER_MP_NODE_1
    Type: NSX
    TestNSX: "nsxmanager.[1]"
    noofretries: 3
    sleepbetweenretry: 30
    clusternode:
      '[4]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[4]"
          manager_thumbprint: "nsxmanager.[4]"

  AddMPNode5ToClusterNode1:
    Type: NSX
    TestNSX: "nsxmanager.[1]"
    clusternode:
      '[5]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[5]"
          manager_thumbprint: "nsxmanager.[5]"

  AddMPNode5ToClusterNode4: &ADD_MP_NODE_5_TO_CLUSTER_MP_NODE_4
    Type: NSX
    TestNSX: "nsxmanager.[4]"
    clusternode:
      '[5]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[5]"
          manager_thumbprint: "nsxmanager.[5]"

  AddMPNode6ToClusterNode4: &ADD_MP_NODE_6_TO_CLUSTER_MP_NODE_4
    Type: NSX
    TestNSX: "nsxmanager.[4]"
    clusternode:
      '[6]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[6]"
          manager_thumbprint: "nsxmanager.[6]"

  AddMPNode7ToClusterNode4: &ADD_MP_NODE_7_TO_CLUSTER_MP_NODE_4
    Type: NSX
    TestNSX: "nsxmanager.[4]"
    clusternode:
      '[7]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[7]"
          manager_thumbprint: "nsxmanager.[7]"

  AddMPNode8ToClusterNode4: &ADD_MP_NODE_8_TO_CLUSTER_MP_NODE_4
    Type: NSX
    TestNSX: "nsxmanager.[4]"
    clusternode:
      '[8]':
        mgr_role_config:
          username: 'admin'
          password: 'default'
          node_type: 'AddManagementNodeSpec'
          manager_ip: "nsxmanager.[8]"
          manager_thumbprint: "nsxmanager.[8]"

  AddMPNode2ToClusterNode1_Using_CLI:
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    execution_type: 'cli'
    clusternode:
      '[2]':
        username: 'admin'
        password: 'default'
        manager_ip: "nsxmanager.[2]"
        manager_thumbprint: "nsxmanager.[2]"

  AddMPNode3ToClusterNode1_Using_CLI:
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    execution_type: 'cli'
    clusternode:
      '[3]':
        username: 'admin'
        password: 'default'
        manager_ip: "nsxmanager.[3]"
        manager_thumbprint: "nsxmanager.[3]"

  RemoveMPNode2FromCluster_Using_CLI: &REMOVE_MP_NODE_2_FROM_NODE_1_CLI
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    execution_type: 'cli'
    deleteclusternode: "nsxmanager.[1].clusternode.[2]"

  RemoveMPNode3FromCluster_Using_CLI: &REMOVE_MP_NODE_3_FROM_NODE_1_CLI
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    execution_type: 'cli'
    deleteclusternode: "nsxmanager.[1].clusternode.[3]"

  ReadCluster_Node1: &READ_CLUSTER_NODE_1
    Type: "Cluster"
    TestCluster: "nsxmanager.[1].clusternode.[1]"
    read:
      'id_[?]contain_once': 'nsxmanager.[1].clusternode.[1]'
      'manager_role[?]contain_once':
        'node_type[?]equal_to': 'ManagementClusterRoleConfig'

  ReadCluster_Node2: &READ_CLUSTER_NODE_2
    Type: Cluster
    TestCluster: "nsxmanager.[2].clusternode.[2]"
    read:
      'id_[?]contain_once': 'nsxmanager.[2].clusternode.[2]'
      'manager_role[?]contain_once':
        'node_type[?]equal_to': 'ManagementClusterRoleConfig'

  ReadCluster_Node3: &READ_CLUSTER_NODE_3
    Type: "Cluster"
    TestCluster: "nsxmanager.[3].clusternode.[3]"
    read:
      'id_[?]contain_once': 'nsxmanager.[3].clusternode.[3]'
      'manager_role[?]contain_once':
        'node_type[?]equal_to': 'ManagementClusterRoleConfig'

  ReadCluster_Node4: &READ_CLUSTER_NODE_4
    Type: "Cluster"
    TestCluster: "nsxmanager.[4].clusternode.[4]"
    read:
      'id_[?]contain_once': 'nsxmanager.[4].clusternode.[4]'
      'manager_role[?]contain_once':
        'node_type[?]equal_to': 'ManagementClusterRoleConfig'

  ReadCluster_Node5: &READ_CLUSTER_NODE_5
    Type: "Cluster"
    TestCluster: "nsxmanager.[5].clusternode.[5]"
    read:
      'id_[?]contain_once': 'nsxmanager.[5].clusternode.[5]'
      'manager_role[?]contain_once':
        'node_type[?]equal_to': 'ManagementClusterRoleConfig'

  ReadCluster_Node6: &READ_CLUSTER_NODE_6
    Type: "Cluster"
    TestCluster: "nsxmanager.[6].clusternode.[6]"
    read:
      'id_[?]contain_once': 'nsxmanager.[6].clusternode.[6]'
      'manager_role[?]contain_once':
        'node_type[?]equal_to': 'ManagementClusterRoleConfig'

  ReadCluster_Node7: &READ_CLUSTER_NODE_7
    Type: "Cluster"
    TestCluster: "nsxmanager.[7].clusternode.[7]"
    read:
      'id_[?]contain_once': 'nsxmanager.[7].clusternode.[7]'
      'manager_role[?]contain_once':
        'node_type[?]equal_to': 'ManagementClusterRoleConfig'

  ReadCluster_Node8: &READ_CLUSTER_NODE_8
    Type: "Cluster"
    TestCluster: "nsxmanager.[8].clusternode.[8]"
    read:
      'id_[?]contain_once': 'nsxmanager.[8].clusternode.[8]'
      'manager_role[?]contain_once':
        'node_type[?]equal_to': 'ManagementClusterRoleConfig'

  RemoveMP_Node1: &REMOVE_MP_NODE_1
    Type : "NSX"
    TestNSX : "nsxmanager.[1]"
    deleteclusternode:  "nsxmanager.[1].clusternode.[1]"

  RemoveMP_Node2: &REMOVE_MP_NODE_2
    Type : "NSX"
    TestNSX : "nsxmanager.[1]"
    deleteclusternode:  "nsxmanager.[2].clusternode.[2]"

  RemoveMP_Node3: &REMOVE_MP_NODE_3
    Type : "NSX"
    TestNSX : "nsxmanager.[1]"
    deleteclusternode:  "nsxmanager.[3].clusternode.[3]"

  RemoveMP_Node1FromNode3: &REMOVE_MP_NODE_1_FROM_NODE3
    Type : "NSX"
    TestNSX : "nsxmanager.[3]"
    deleteclusternode:  "nsxmanager.[3].clusternode.[1]"

  RemoveMP_Node2FromNode3: &REMOVE_MP_NODE_2_FROM_NODE3
    Type : "NSX"
    TestNSX : "nsxmanager.[3]"
    deleteclusternode:  "nsxmanager.[3].clusternode.[2]"

  RemoveMP_Node3_From_Node2: &REMOVE_MP_NODE_3_FROM_NODE_2
    Type : "NSX"
    TestNSX : "nsxmanager.[2]"
    deleteclusternode:  "nsxmanager.[2].clusternode.[3]"

  RemoveMP_Node4: &REMOVE_MP_NODE_4
    Type : "NSX"
    TestNSX : "nsxmanager.[1]"
    deleteclusternode:  "nsxmanager.[1].clusternode.[4]"

  RemoveMP_Node5_From_Node4: &REMOVE_MP_NODE_5_FROM_NODE_4
    Type : "NSX"
    TestNSX : "nsxmanager.[4]"
    deleteclusternode:  "nsxmanager.[5].clusternode.[5]"

  RemoveMP_Node5_From_Node1: &REMOVE_MP_NODE_5_FROM_NODE_1
    Type : "NSX"
    TestNSX : "nsxmanager.[1]"
    deleteclusternode:  "nsxmanager.[5].clusternode.[5]"

  RemoveMP_Node6_From_Node4: &REMOVE_MP_NODE_6_FROM_NODE_4
    Type : "NSX"
    TestNSX : "nsxmanager.[4]"
    deleteclusternode:  "nsxmanager.[6].clusternode.[6]"

  RemoveMP_Node7_From_Node4: &REMOVE_MP_NODE_7_FROM_NODE_4
    Type : "NSX"
    TestNSX : "nsxmanager.[4]"
    deleteclusternode:  "nsxmanager.[7].clusternode.[7]"

  SetNSXOnManager: &SET_NSX_ON_MANAGER
    Type: Host
    TestHost: 'esx.[1-2]'
    configure_nsx_manager:
      operation: set
      # from the manager node, get the ip and thumbprint
      # and do something like nsxcli manager <ip> <thumbprint>
      # This will make MPA attempt to connect to MP but it won't
      # because MP doesn't know about this host yet
      nsx_ip: nsxmanager.[1]
      nsx_thumbprint: nsxmanager.[1]

  ConfigureNSXRegister: &CONFIGURE_NSX_REGISTER
    Type: Host
    TestHost: 'esx.[1-2]'
    configure_nsx_registration:
      # Host can be registered on the MP using a CLI.
      # This cli will internally invoke an API call to the MP
      # with parameters api username and password.
      nsx_api_user: nsxmanager.[1]
      nsx_thumbprint: nsxmanager.[1]

  UnregisterHost: &UNREGISTER_HOST_1_AND_2
     Type: NSX
     TestNSX: 'nsxmanager.[1]'
     deletehostnode: 'nsxmanager.[1].hostnode.[1-2]'

  BlockMPNode2Traffic_On_Node1:
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    node_network_partitioning:
      operation: 'set'
      manager_ip: 'nsxmanager.[2]'
      execution_type: 'cli'

  UnBlockMPNode2Traffic_On_Node1:
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    node_network_partitioning:
      operation: 'reset'
      manager_ip: 'nsxmanager.[2]'
      execution_type: 'cli'

  BlockMPNode3Traffic_On_Node1:
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    node_network_partitioning:
      operation: 'set'
      manager_ip: 'nsxmanager.[3]'
      execution_type: 'cli'

  UnBlockMPNode3Traffic_On_Node1:
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    node_network_partitioning:
      operation: 'reset'
      manager_ip: 'nsxmanager.[3]'
      execution_type: 'cli'

  BlockNSXController1TrafficFromNSXManager1: &BlockNSXController1TrafficFromNSXManager1
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    node_network_partitioning:
      operation: 'set'
      manager_ip: 'nsxcontroller.[1]->ip'
      execution_type: 'cli'

  UnblockNSXController1TrafficFromNSXManager1: &UnblockNSXController1TrafficFromNSXManager1
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    node_network_partitioning:
      operation: 'reset'
      manager_ip: 'nsxcontroller.[1]->ip'
      execution_type: 'cli'

  BlockNSXController2TrafficFromNSXManager1: &BlockNSXController2TrafficFromNSXManager1
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    node_network_partitioning:
      operation: 'set'
      manager_ip: 'nsxcontroller.[2]->ip'
      execution_type: 'cli'

  UnblockNSXController2TrafficFromNSXManager1: &UnblockNSXController2TrafficFromNSXManager1
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    node_network_partitioning:
      operation: 'reset'
      manager_ip: 'nsxcontroller.[2]->ip'
      execution_type: 'cli'

  BlockNSXController3TrafficFromNSXManager1: &BlockNSXController3TrafficFromNSXManager1
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    node_network_partitioning:
      operation: 'set'
      manager_ip: 'nsxcontroller.[3]->ip'
      execution_type: 'cli'

  UnblockNSXController3TrafficFromNSXManager1: &UnblockNSXController3TrafficFromNSXManager1
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    node_network_partitioning:
      operation: 'reset'
      manager_ip: 'nsxcontroller.[3]->ip'
      execution_type: 'cli'

MPClusteringVerificationWorkloads: &MPClusteringVerificationWorkloads

  VerifyClusterStatusFrom_Node1: &VERIFY_CLUSTER_STATUS_FROM_NODE_1
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    cluster_status:
      'control_cluster_status':
        'status[?]equal_to': 'STABLE'
      'mgmt_cluster_status':
        'status[?]equal_to': 'STABLE'

  VerifyClusterStatusFrom_Node2: &VERIFY_CLUSTER_STATUS_FROM_NODE_2
    <<: *VERIFY_CLUSTER_STATUS_FROM_NODE_1
    TestCluster: 'nsxmanager.[2].cluster.[1]'

  VerifyClusterStatusFrom_Node3: &VERIFY_CLUSTER_STATUS_FROM_NODE_3
    <<: *VERIFY_CLUSTER_STATUS_FROM_NODE_1
    TestCluster: 'nsxmanager.[3].cluster.[1]'

  VerifyClusterStatusFrom_Node4: &VERIFY_CLUSTER_STATUS_FROM_NODE_4
    <<: *VERIFY_CLUSTER_STATUS_FROM_NODE_1
    TestCluster: 'nsxmanager.[4].cluster.[1]'

  VerifyClusterStatusFrom_Node5: &VERIFY_CLUSTER_STATUS_FROM_NODE_5
    <<: *VERIFY_CLUSTER_STATUS_FROM_NODE_1
    TestCluster: 'nsxmanager.[5].cluster.[1]'

  VerifyClusterStatusFrom_Node6: &VERIFY_CLUSTER_STATUS_FROM_NODE_6
    <<: *VERIFY_CLUSTER_STATUS_FROM_NODE_1
    TestCluster: 'nsxmanager.[6].cluster.[1]'

  VerifyClusterStatusFrom_Node7: &VERIFY_CLUSTER_STATUS_FROM_NODE_7
    <<: *VERIFY_CLUSTER_STATUS_FROM_NODE_1
    TestCluster: 'nsxmanager.[7].cluster.[1]'

  VerifyClusterStatusFrom_Node8: &VERIFY_CLUSTER_STATUS_FROM_NODE_8
    <<: *VERIFY_CLUSTER_STATUS_FROM_NODE_1
    TestCluster: 'nsxmanager.[8].cluster.[1]'

  VerifyClusterStatus_Stable_On_Node1_Using_CLI: &VERIFY_CLUSTER_STATUS_FROM_NODE_1_USING_CLI
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    execution_type: 'cli'
    get_cluster_details:
      'management_cluster_status[?]equal_to': 'stable'

  VerifyClusterStatus_Stable_On_Node2_Using_CLI:
    Type: 'NSX'
    TestNSX: 'nsxmanager.[2]'
    execution_type: 'cli'
    get_cluster_details:
      'management_cluster_status[?]equal_to': 'stable'

  VerifyClusterStatus_Stable_On_Node3_Using_CLI:
    Type: 'NSX'
    TestNSX: 'nsxmanager.[3]'
    execution_type: 'cli'
    get_cluster_details:
      'management_cluster_status[?]equal_to': 'stable'

  VerifyClusterStatusFromAllNodesCLI: &VERIFY_CLUSTER_STATUS_FROM_ALL_NODES_CLI
    - ["VerifyClusterStatus_Stable_On_Node1_Using_CLI"]
    - ["VerifyClusterStatus_Stable_On_Node2_Using_CLI"]
    - ["VerifyClusterStatus_Stable_On_Node3_Using_CLI"]

  VerifyMPClusterStatusUnstable_On_Node1: &VERIFY_MP_CLUSTER_STATUS_UNSTABLE_ON_NODE1
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    cluster_status:
      'control_cluster_status':
        'status[?]equal_to': 'STABLE'
      'mgmt_cluster_status':
        'status[?]equal_to': 'UNSTABLE'

  VerifyMPClusterStatusUnstable_On_Node3: &VERIFY_MP_CLUSTER_STATUS_UNSTABLE_ON_NODE3
    <<: *VERIFY_MP_CLUSTER_STATUS_UNSTABLE_ON_NODE1
    TestCluster: 'nsxmanager.[3].cluster.[1]'

  VerifyMPClusterStatusUnknown_On_Node1: &VERIFY_MP_CLUSTER_STATUS_UNKNOWN_ON_NODE1
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    cluster_status:
      'control_cluster_status':
        'status[?]equal_to': 'STABLE'
      'mgmt_cluster_status':
        'status[?]equal_to': 'UNKNOWN'

  VerifyMPClusterStatusUnknown_On_Node2: &VERIFY_MP_CLUSTER_STATUS_UNKNOWN_ON_NODE2
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[2].cluster.[1]'
    cluster_status:
      'control_cluster_status':
        'status[?]equal_to': 'STABLE'
      'mgmt_cluster_status':
        'status[?]equal_to': 'UNKNOWN'

  VerifyClusterMembers_2MP_1CCP: &VERIFY_CLUSTER_MEMBERS_2MP_1CCP
    Type: "Cluster"
    TestCluster: "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 3
      'results[?]contain_once':
        - 'id_': 'nsxmanager.[1].clusternode.[1]'
          'manager_role':
            'node_type': 'ManagementClusterRoleConfig'
        - 'id_': 'nsxmanager.[2].clusternode.[2]'
          'manager_role':
            'node_type': 'ManagementClusterRoleConfig'
        - 'id_': *NSXCONTROLLER_CLUSTERNODE1
          'controller_role':
            'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_1MP_1CCP: &VERIFY_CLUSTER_MEMBERS_1MP_1CCP
    Type: "Cluster"
    TestCluster: "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 2
      'results[?]contain_once':
        - 'id_': 'nsxmanager.[1].clusternode.[1]'
          'manager_role':
            'node_type': 'ManagementClusterRoleConfig'
        - 'id_': *NSXCONTROLLER_CLUSTERNODE1
          'controller_role':
            'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_2MP: &VERIFY_CLUSTER_MEMBERS_2MP
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 2
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_2MP_From_Node1: &VERIFY_CLUSTER_MEMBERS_2MP_FROM_NODE_1
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 2
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

# delete this later
  VerifyClusterMembers_2MP_From_Node4: &VERIFY_CLUSTER_MEMBERS_2MP_FROM_NODE_4
    <<: *VERIFY_CLUSTER_MEMBERS_2MP_FROM_NODE_1
    TestCluster:  "nsxmanager.[4].clusternode.[1]"

  VerifyClusterMembers_2MP_From_Node3_Having_Node4: &VERIFY_CLUSTER_MEMBERS_2MP_FROM_NODE_3_HAVING_NODE_4
    Type: "Cluster"
    TestCluster:  "nsxmanager.[3].clusternode.[3]"
    get_cluster_members:
      'result_count[?]equal_to': 2
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[3].clusternode.[3]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[4].clusternode.[4]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_2MP_From_Node4_Having_Node6: &VERIFY_CLUSTER_MEMBERS_2MP_FROM_NODE_4_HAVING_NODE_6
    Type: "Cluster"
    TestCluster:  "nsxmanager.[4].clusternode.[4]"
    get_cluster_members:
      'result_count[?]equal_to': 2
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[4].clusternode.[4]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[6].clusternode.[6]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_1MP_From_Node4: &VERIFY_CLUSTER_MEMBERS_1MP_FROM_NODE_4
    Type: "Cluster"
    TestCluster:  "nsxmanager.[4].clusternode.[4]"
    get_cluster_members:
      'result_count[?]equal_to': 1
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[4].clusternode.[4]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_3MP_From_Node4: &VERIFY_CLUSTER_MEMBERS_3MP_FROM_NODE_4
    Type: "Cluster"
    TestCluster:  "nsxmanager.[4].clusternode.[4]"
    get_cluster_members:
      'result_count[?]equal_to': 3
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[4].clusternode.[4]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[5].clusternode.[5]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[6].clusternode.[6]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_3MP_From_Node4_Having_Nodes_4_6_7: &VERIFY_CLUSTER_MEMBERS_3MP_FROM_NODE_4_HAVING_NODES_4_6_7
    Type: "Cluster"
    TestCluster:  "nsxmanager.[4].clusternode.[4]"
    get_cluster_members:
      'result_count[?]equal_to': 3
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[4].clusternode.[4]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[7].clusternode.[7]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[6].clusternode.[6]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_3MP_From_Node4_Having_Nodes_4_5_7: &VERIFY_CLUSTER_MEMBERS_3MP_FROM_NODE_4_HAVING_NODES_4_5_7
    Type: "Cluster"
    TestCluster:  "nsxmanager.[4].clusternode.[4]"
    get_cluster_members:
      'result_count[?]equal_to': 3
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[4].clusternode.[4]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[7].clusternode.[7]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[5].clusternode.[5]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_2MP_From_Node3: &VERIFY_CLUSTER_MEMBERS_2MP_FROM_NODE_3
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[3]"
    get_cluster_members:
      'result_count[?]equal_to': 2
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[1].clusternode.[3]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_3MP: &VERIFY_CLUSTER_MEMBERS_3MP
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 3
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[3].clusternode.[3]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_3MP_From_Node_1: &VERIFY_CLUSTER_MEMBERS_3MP_FROM_NODE_1
    <<: *VERIFY_CLUSTER_MEMBERS_3MP
    TestCluster:  "nsxmanager.[1].clusternode.[1]"

  VerifyClusterMembers_3MP_From_Node_3: &VERIFY_CLUSTER_MEMBERS_3MP_FROM_NODE_3
    <<: *VERIFY_CLUSTER_MEMBERS_3MP
    TestCluster:  "nsxmanager.[3].clusternode.[3]"

  VerifyClusterMembers_3MP_After_Node4_Added:
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 3
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[1].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[4].clusternode.[4]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_2MP_3CCP: &VERIFY_CLUSTER_MEMBERS_2MP_3CCP_FROM_NODE_1
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 5
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE1
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE2
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE3
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_1MP_3CCP: &VERIFY_CLUSTER_MEMBERS_1MP_3CCP_FROM_NODE_1
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 4
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE1
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE2
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE3
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_3MP_3CCP: &VERIFY_CLUSTER_MEMBERS_3MP_3CCP_FROM_NODE_1
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 6
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[1].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[1].clusternode.[3]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE1
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE2
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE3
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_3MP_2CCP_From_Node1: &VERIFY_CLUSTER_MEMBERS_3MP_2CCP_FROM_NODE_1
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 5
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[3].clusternode.[3]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE1
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE2
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_3MP_1CCP_From_Node1: &VERIFY_CLUSTER_MEMBERS_3MP_1CCP_FROM_NODE_1
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 4
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[3].clusternode.[3]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE1
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_2MP_2CCP_From_Node1: &VERIFY_CLUSTER_MEMBERS_2MP_2CCP_FROM_NODE_1
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 4
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE1
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE2
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_1MP_2CCP_From_Node1: &VERIFY_CLUSTER_MEMBERS_1MP_2CCP_FROM_NODE_1
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 3
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE1
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE2
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_2MP_1CCP_From_Node1: &VERIFY_CLUSTER_MEMBERS_2MP_1CCP_FROM_NODE_1
    Type: "Cluster"
    TestCluster: "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 3
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': *NSXCONTROLLER_CLUSTERNODE1
           'controller_role':
             'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_1MP_1CCP_From_Node1: &VERIFY_CLUSTER_MEMBERS_1MP_1CCP_FROM_NODE_1
    Type: "Cluster"
    TestCluster: "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 2
      'results[?]contain_once':
        - 'id_': 'nsxmanager.[1].clusternode.[1]'
          'manager_role':
            'node_type': 'ManagementClusterRoleConfig'
        - 'id_': *NSXCONTROLLER_CLUSTERNODE1
          'controller_role':
            'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_1MP_1CCP_From_Node2: &VERIFY_CLUSTER_MEMBERS_1MP_1CCP_FROM_NODE_2
    Type: "Cluster"
    TestCluster: "nsxmanager.[2].clusternode.[2]"
    get_cluster_members:
      'result_count[?]equal_to': 2
      'results[?]contain_once':
        - 'id_': 'nsxmanager.[2].clusternode.[2]'
          'manager_role':
            'node_type': 'ManagementClusterRoleConfig'
        - 'id_': 'nsxcontroller.[2].clusternode.[2]'
          'controller_role':
            'node_type': 'ControllerClusterRoleConfig'

  VerifyClusterMembers_4MP_From_Node1:
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 4
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[1].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[1].clusternode.[3]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[5].clusternode.[5]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_3MP_From_Node1: &VERIFY_CLUSTER_MEMBERS_3MP_FROM_NODE_1_HAVING_NODES_1_2_4
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 3
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[4].clusternode.[4]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_4MP_From_Node1_Having_Nodes_1_2_3_4: &VERIFY_CLUSTER_MEMBERS_4MP_FROM_NODE_1_HAVING_NODES_1_2_3_4
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 4
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[3].clusternode.[3]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[4].clusternode.[4]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_4MP_From_Node3_Having_Nodes_1_2_3_4: &VERIFY_CLUSTER_MEMBERS_4MP_FROM_NODE_3_HAVING_NODES_1_2_3_4
    Type: "Cluster"
    TestCluster:  "nsxmanager.[3].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 4
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[3].clusternode.[3]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'
         - 'id_': 'nsxmanager.[4].clusternode.[4]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  Wait_For_Cluster_Status_Stable_On_Node1: &WAIT_STABLE_NODE_1
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    wait_for_required_cluster_status:
      'required_status': 'STABLE'
      'time_to_monitor': '300'

  Wait_For_Cluster_Status_Stable_On_Node2: &WAIT_STABLE_NODE_2
    <<: *WAIT_STABLE_NODE_1
    TestCluster: 'nsxmanager.[2].cluster.[1]'

  Wait_For_Cluster_Status_Stable_On_Node3: &WAIT_STABLE_NODE_3
    <<: *WAIT_STABLE_NODE_1
    TestCluster: 'nsxmanager.[3].cluster.[1]'

  Wait_For_Cluster_Status_Stable_On_Node4: &WAIT_STABLE_NODE_4
    <<: *WAIT_STABLE_NODE_1
    TestCluster: 'nsxmanager.[4].cluster.[1]'

  Wait_For_Cluster_Status_Stable_On_Node5: &WAIT_STABLE_NODE_5
    <<: *WAIT_STABLE_NODE_1
    TestCluster: 'nsxmanager.[5].cluster.[1]'

  Wait_For_Cluster_Status_Stable_On_Node6: &WAIT_STABLE_NODE_6
    <<: *WAIT_STABLE_NODE_1
    TestCluster: 'nsxmanager.[6].cluster.[1]'

  Wait_For_Cluster_Status_Stable_On_Node7: &WAIT_STABLE_NODE_7
    <<: *WAIT_STABLE_NODE_1
    TestCluster: 'nsxmanager.[7].cluster.[1]'

  Wait_For_Cluster_Status_Unstable_On_Node1: &WAIT_UNSTABLE_NODE_1
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    wait_for_required_cluster_status:
      'required_status': 'UNSTABLE'
      'time_to_monitor': '300'

  Wait_For_Cluster_Status_Unstable_On_Node2: &WAIT_UNSTABLE_NODE_2
    <<: *WAIT_UNSTABLE_NODE_1
    TestCluster: 'nsxmanager.[2].cluster.[1]'

  Wait_For_Cluster_Status_Unstable_On_Node3: &WAIT_UNSTABLE_NODE_3
    <<: *WAIT_UNSTABLE_NODE_1
    TestCluster: 'nsxmanager.[3].cluster.[1]'

  Wait_For_Cluster_Status_Unstable_On_Node4: &WAIT_UNSTABLE_NODE_4
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[4].cluster.[1]'
    wait_for_required_cluster_status:
      'required_status': 'UNSTABLE'
      'time_to_monitor': '300'

  Wait_For_Cluster_Status_Unstable_On_Node6: &WAIT_UNSTABLE_NODE_6
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[6].cluster.[1]'
    wait_for_required_cluster_status:
      'required_status': 'UNSTABLE'
      'time_to_monitor': '300'

  Wait_For_Cluster_Status_Unknown_On_Node1: &WAIT_UNKNOWN_NODE_1
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    wait_for_required_cluster_status:
      'required_status': 'UNKNOWN'
      'time_to_monitor': '300'

  Wait_For_Cluster_Status_Unknown_On_Node3: &WAIT_UNKNOWN_NODE_3
    <<: *WAIT_UNKNOWN_NODE_1
    TestCluster: 'nsxmanager.[3].cluster.[1]'

  Wait_For_Cluster_Status_Unknown_On_Node2: &WAIT_UNKNOWN_NODE_2
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[2].cluster.[1]'
    wait_for_required_cluster_status:
      'required_status': 'UNKNOWN'
      'time_to_monitor': '300'

  Wait_For_Cluster_Status_Init_On_Node1: &WAIT_INIT_NODE_1
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    wait_for_required_cluster_status:
      'required_status': 'INITIALIZING'
      'time_to_monitor': '300'

  Wait_For_Cluster_Status_Init_On_Node2: &WAIT_INIT_NODE_2
    <<: *WAIT_INIT_NODE_1
    TestCluster: 'nsxmanager.[2].cluster.[1]'

  Wait_For_Cluster_Status_Init_On_Node3: &WAIT_INIT_NODE_3
    <<: *WAIT_INIT_NODE_1
    TestCluster: 'nsxmanager.[3].cluster.[1]'

  Wait_For_Cluster_Status_Init_On_Node4: &WAIT_INIT_NODE_4
    <<: *WAIT_INIT_NODE_1
    TestCluster: 'nsxmanager.[4].cluster.[1]'

  Wait_For_Cluster_Status_Init_On_Node5: &WAIT_INIT_NODE_5
    <<: *WAIT_INIT_NODE_1
    TestCluster: 'nsxmanager.[5].cluster.[1]'

  Wait_For_Cluster_Status_Init_On_Node6: &WAIT_INIT_NODE_6
    <<: *WAIT_INIT_NODE_1
    TestCluster: 'nsxmanager.[6].cluster.[1]'

  VerifyClusterStatusUnknownFromNode3: &VERIFY_CLUSTER_STATUS_UNKNOWN_NODE_3
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[3].cluster.[1]'
    cluster_status:
      'control_cluster_status':
        'status[?]equal_to': 'STABLE'
      'mgmt_cluster_status':
        'status[?]equal_to': 'UNKNOWN'

  VerifyClusterStatusUnknownFromNode2: &VERIFY_CLUSTER_STATUS_UNKNOWN_NODE_2
    <<: *VERIFY_CLUSTER_STATUS_UNKNOWN_NODE_3
    TestCluster: 'nsxmanager.[2].cluster.[1]'

  VerifyClusterStatusUnknownFromNode1: &VERIFY_CLUSTER_STATUS_UNKNOWN_NODE_1
    <<: *VERIFY_CLUSTER_STATUS_UNKNOWN_NODE_3
    TestCluster: 'nsxmanager.[1].cluster.[1]'

  VerifyClusterStatusInitFromNode3: &VERIFY_CLUSTER_STATUS_INIT_NODE_3
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[3].cluster.[1]'
    cluster_status:
      'control_cluster_status':
        'status[?]equal_to': 'STABLE'
      'mgmt_cluster_status':
        'status[?]equal_to': 'INITIALIZING'

  VerifyClusterStatusInitFromNode2: &VERIFY_CLUSTER_STATUS_INIT_NODE_2
    <<: *VERIFY_CLUSTER_STATUS_INIT_NODE_3
    TestCluster: 'nsxmanager.[2].cluster.[1]'

  VerifyClusterStatusInitFromNode1: &VERIFY_CLUSTER_STATUS_INIT_NODE_1
    <<: *VERIFY_CLUSTER_STATUS_INIT_NODE_3
    TestCluster: 'nsxmanager.[1].cluster.[1]'

  VerifyMPClusterStatusUnstable: &VERIFY_MP_CLUSTER_STATUS_UNSTABLE_NODE_1
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    cluster_status:
    'control_cluster_status':
      'status[?]equal_to': 'STABLE'
    'mgmt_cluster_status':
      'status[?]equal_to': 'UNSTABLE'

  VerifyMPClusterStatusUnstableNode2: &VERIFY_MP_CLUSTER_STATUS_UNSTABLE_NODE_2
    <<: *VERIFY_MP_CLUSTER_STATUS_UNSTABLE_NODE_1
    TestCluster: 'nsxmanager.[2].cluster.[1]'

  PowerOnMP_Node1: &POWER_ON_MP_NODE_1
    Type: VM
    TestVM: nsxmanager.[1]
    vmstate: poweron

  PowerOnMP_Node2: &POWER_ON_MP_NODE_2
    <<: *POWER_ON_MP_NODE_1
    TestVM: nsxmanager.[2]

  PowerOnMP_Node3: &POWER_ON_MP_NODE_3
    <<: *POWER_ON_MP_NODE_1
    TestVM: nsxmanager.[3]

  PowerOnMP_Node4: &POWER_ON_MP_NODE_4
    <<: *POWER_ON_MP_NODE_1
    TestVM: nsxmanager.[4]

  PowerOnMP_Node5: &POWER_ON_MP_NODE_5
    <<: *POWER_ON_MP_NODE_1
    TestVM: nsxmanager.[5]

  PowerOnMP_Node6: &POWER_ON_MP_NODE_6
    <<: *POWER_ON_MP_NODE_1
    TestVM: nsxmanager.[6]

  PowerOnMP_Node7: &POWER_ON_MP_NODE_7
    <<: *POWER_ON_MP_NODE_1
    TestVM: nsxmanager.[7]

  PowerOnMP_Node8: &POWER_ON_MP_NODE_8
    <<: *POWER_ON_MP_NODE_1
    TestVM: nsxmanager.[8]

  PowerOffMP_Node1: &POWER_OFF_MP_NODE_1
    Type: VM
    TestVM: nsxmanager.[1]
    vmstate: poweroff

  PowerOffMP_Node2: &POWER_OFF_MP_NODE_2
    <<: *POWER_OFF_MP_NODE_1
    TestVM: nsxmanager.[2]

  PowerOffMP_Node3: &POWER_OFF_MP_NODE_3
    <<: *POWER_OFF_MP_NODE_1
    TestVM: nsxmanager.[3]

  PowerOffMP_Node4: &POWER_OFF_MP_NODE_4
    <<: *POWER_OFF_MP_NODE_1
    TestVM: nsxmanager.[4]

  PowerOffMP_Node5: &POWER_OFF_MP_NODE_5
    <<: *POWER_OFF_MP_NODE_1
    TestVM: nsxmanager.[5]

  PowerOffMP_Node6: &POWER_OFF_MP_NODE_6
    <<: *POWER_OFF_MP_NODE_1
    TestVM: nsxmanager.[6]

  PowerOffMP_Node7: &POWER_OFF_MP_NODE_7
    <<: *POWER_OFF_MP_NODE_1
    TestVM: nsxmanager.[7]

  PowerOffMP_Node8: &POWER_OFF_MP_NODE_8
    <<: *POWER_OFF_MP_NODE_1
    TestVM: nsxmanager.[8]

  Reboot_Node1_CLI:
    Type: NSX
    TestNSX: "nsxmanager.[1]"
    configure_power_state:
      state: 'reboot'
      execution_type: 'cli'

  Reboot_Node2_CLI:
    Type: NSX
    TestNSX: "nsxmanager.[2]"
    configure_power_state:
      state: 'reboot'
      execution_type: 'cli'

  Reboot_Node3_CLI:
    Type: NSX
    TestNSX: "nsxmanager.[3]"
    configure_power_state:
      state: 'reboot'
      execution_type: 'cli'

  VerifyProtonServiceStartAfterReboot_Node1_CLI:
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[1]"
    execution_type: 'cli'
    SleepBetweenWorkloads: 150
    get_service_state:
      'table[?]contain_once':
        - service_name: 'proton'
          service_state: 'running'

  VerifyProtonServiceStartAfterReboot_Node2_CLI:
    Type: "Service"
    TestService: "nsxmanager.[2].nsxservice.[1]"
    execution_type: 'cli'
    SleepBetweenWorkloads: 150
    get_service_state:
      'table[?]contain_once':
        - service_name: 'proton'
          service_state: 'running'

  VerifyProtonServiceStartAfterReboot_Node3_CLI:
    Type: "Service"
    TestService: "nsxmanager.[3].nsxservice.[1]"
    execution_type: 'cli'
    SleepBetweenWorkloads: 150
    get_service_state:
      'table[?]contain_once':
        - service_name: 'proton'
          service_state: 'running'

  SetProtonServiceIdFor_Node1: &SET_PROTON_SERVICE_ID_FOR_NODE_1
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    nsxservice:
      '[1]':
        map_object: true
        id_: 'proton'

  SetProtonServiceIdFor_Node1_WithSleep:
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
    sleepbetweenworkloads: 300

  SetProtonServiceIdFor_Node2: &SET_PROTON_SERVICE_ID_FOR_NODE_2
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
    TestNSX: "nsxmanager.[2]"

  SetProtonServiceIdFor_Node3: &SET_PROTON_SERVICE_ID_FOR_NODE_3
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
    TestNSX: "nsxmanager.[3]"

  SetProtonServiceIdFor_Node4: &SET_PROTON_SERVICE_ID_FOR_NODE_4
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
    TestNSX: "nsxmanager.[4]"

  SetProtonServiceIdFor_Node2_WithSleep:
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_2
    sleepbetweenworkloads: 300

  SetProtonServiceIdFor_Node3_WithSleep:
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_3
    sleepbetweenworkloads: 300

  SetProtonServiceIdFor_Node4_WithSleep:
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_4
    sleepbetweenworkloads: 300

  SetProtonServiceIdFor_Node5: &SET_PROTON_SERVICE_ID_FOR_NODE_5
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
    TestNSX: "nsxmanager.[5]"

  SetProtonServiceIdFor_Node6: &SET_PROTON_SERVICE_ID_FOR_NODE_6
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
    TestNSX: "nsxmanager.[6]"

  SetProtonServiceIdFor_Node7: &SET_PROTON_SERVICE_ID_FOR_NODE_77
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
    TestNSX: "nsxmanager.[7]"

  SetProtonServiceIdFor_Node8: &SET_PROTON_SERVICE_ID_FOR_NODE_8
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
    TestNSX: "nsxmanager.[8]"

  SetLocatorServiceIdFor_Node1: &SET_LOCATOR_SERVICE_ID_FOR_NODE_1
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    nsxservice:
      '[2]':
        map_object: true
        id_: 'locator'

  SetLocatorServiceIdFor_Node2: &SET_LOCATOR_SERVICE_ID_FOR_NODE_2
    <<: *SET_LOCATOR_SERVICE_ID_FOR_NODE_1
    TestNSX: "nsxmanager.[2]"

  SetLocatorServiceIdFor_Node3: &SET_LOCATOR_SERVICE_ID_FOR_NODE_3
    <<: *SET_LOCATOR_SERVICE_ID_FOR_NODE_1
    TestNSX: "nsxmanager.[3]"

  SetLocatorServiceIdFor_Node4: &SET_LOCATOR_SERVICE_ID_FOR_NODE_4
    <<: *SET_LOCATOR_SERVICE_ID_FOR_NODE_1
    TestNSX: "nsxmanager.[4]"

  StopProtonServiceOn_Node1: &STOP_PROTON_SERVICE_ON_NODE_1
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[1]"
    configure_service_state:
      state: 'stop'
      service_name: 'proton'

  StopProtonServiceOn_Node2: &STOP_PROTON_SERVICE_ON_NODE_2
    <<: *STOP_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[2].nsxservice.[1]"

  StopProtonServiceOn_Node3: &STOP_PROTON_SERVICE_ON_NODE_3
    <<: *STOP_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[3].nsxservice.[1]"

  StopProtonServiceOn_Node4: &STOP_PROTON_SERVICE_ON_NODE_4
    <<: *STOP_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[4].nsxservice.[1]"

  StopProtonServiceOn_Node5: &STOP_PROTON_SERVICE_ON_NODE_5
    <<: *STOP_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[5].nsxservice.[1]"

  StopProtonServiceOn_Node6: &STOP_PROTON_SERVICE_ON_NODE_6
    <<: *STOP_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[6].nsxservice.[1]"

  StopProtonServiceOn_Node7: &STOP_PROTON_SERVICE_ON_NODE_7
    <<: *STOP_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[7].nsxservice.[1]"

  StopProtonServiceOn_Node8: &STOP_PROTON_SERVICE_ON_NODE_8
    <<: *STOP_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[8].nsxservice.[1]"

  RestartProtonServiceOn_Node1: &RESTART_PROTON_SERVICE_ON_NODE_1
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[1]"
    noofretries: '3'
    sleepbetweenretry: '30'
    configure_service_state:
      state: 'restart'
      service_name: 'proton'

  RestartProtonServiceOn_Node2: &RESTART_PROTON_SERVICE_ON_NODE_2
    <<: *RESTART_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[2].nsxservice.[1]"

  RestartProtonServiceOn_Node3: &RESTART_PROTON_SERVICE_ON_NODE_3
    <<: *RESTART_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[3].nsxservice.[1]"

  RestartProtonServiceOn_Node4: &RESTART_PROTON_SERVICE_ON_NODE_4
    <<: *RESTART_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[4].nsxservice.[1]"

  VerifyStopProtonServiceStatusFor_Node1: &VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_1
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[1]"
    noofretries: '3'
    sleepbetweenretry: '30'
    get_service_state:
      'runtime_state[?]equal_to': 'stopped'

  VerifyStopProtonServiceStatusFor_Node2: &VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_2
    <<: *VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[2].nsxservice.[1]"

  VerifyStopProtonServiceStatusFor_Node3: &VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_3
    <<: *VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[3].nsxservice.[1]"

  VerifyStopProtonServiceStatusFor_Node4: &VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_4
    <<: *VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[4].nsxservice.[1]"

  VerifyStopProtonServiceStatusFor_Node5: &VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_5
    <<: *VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[5].nsxservice.[1]"

  VerifyStopProtonServiceStatusFor_Node6: &VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_6
    <<: *VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[6].nsxservice.[1]"

  VerifyStopProtonServiceStatusFor_Node7: &VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_7
    <<: *VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[7].nsxservice.[1]"

  VerifyStopProtonServiceStatusFor_Node8: &VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_8
    <<: *VERFIY_STOP_PROTON_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[8].nsxservice.[1]"

  StartProtonServiceOn_Node1: &START_PROTON_SERVICE_ON_NODE_1
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[1]"
    configure_service_state:
      state: 'start'
      service_name: 'proton'

  StartProtonServiceOn_Node2: &START_PROTON_SERVICE_ON_NODE_2
    <<: *START_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[2].nsxservice.[1]"

  StartProtonServiceOn_Node3: &START_PROTON_SERVICE_ON_NODE_3
    <<: *START_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[3].nsxservice.[1]"

  StartProtonServiceOn_Node4: &START_PROTON_SERVICE_ON_NODE_4
    <<: *START_PROTON_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[4].nsxservice.[1]"

  StartProtonServiceOn_Node1_WithSleep:
    <<: *START_PROTON_SERVICE_ON_NODE_1
    sleepbetweenworkloads: 15

  StartProtonServiceOn_Node2_WithSleep:
    <<: *START_PROTON_SERVICE_ON_NODE_2
    sleepbetweenworkloads: 15

  StartProtonServiceOn_Node3_WithSleep:
    <<: *START_PROTON_SERVICE_ON_NODE_3
    sleepbetweenworkloads: 15

  StartProtonServiceOn_Node4_WithSleep:
    <<: *START_PROTON_SERVICE_ON_NODE_4
    sleepbetweenworkloads: 15

  RetartProtonServiceOn_Node1_WithSleep:
    <<: *RESTART_PROTON_SERVICE_ON_NODE_1
    noofretries: '3'
    sleepbetweenretry: '30'

  RetartProtonServiceOn_Node2_WithSleep:
    <<: *RESTART_PROTON_SERVICE_ON_NODE_2
    noofretries: '3'
    sleepbetweenretry: '30'

  RetartProtonServiceOn_Node3_WithSleep:
    <<: *RESTART_PROTON_SERVICE_ON_NODE_2
    noofretries: '3'
    sleepbetweenretry: '30'

  VerifyStartProtonServiceStatusFor_Node1: &VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_1
    Type: "Service"
    noofretries: '3'
    sleepbetweenretry: '30'
    TestService: "nsxmanager.[1].nsxservice.[1]"
    get_service_state:
      'runtime_state[?]equal_to': 'running'

  VerifyStartProtonServiceStatusFor_Node2: &VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_2
    <<: *VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[2].nsxservice.[1]"

  VerifyStartProtonServiceStatusFor_Node3: &VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_3
    <<: *VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[3].nsxservice.[1]"

  VerifyStartProtonServiceStatusFor_Node4: &VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_4
    <<: *VERFIY_START_PROTON_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[4].nsxservice.[1]"

  Shutdown_Node1: &SHUTDOWN_NODE_1
    Type: NSX
    TestNSX: "nsxmanager.[1]"
    configure_power_state:
      state: 'shutdown'

  Shutdown_Node2: &SHUTDOWN_NODE_2
    Type: NSX
    TestNSX: "nsxmanager.[2]"
    configure_power_state:
      state: 'shutdown'

  Shutdown_Node3: &SHUTDOWN_NODE_3
    Type: NSX
    TestNSX: "nsxmanager.[3]"
    configure_power_state:
      state: 'shutdown'

  Shutdown_Node4: &SHUTDOWN_NODE_4
    Type: NSX
    TestNSX: "nsxmanager.[4]"
    configure_power_state:
      state: 'shutdown'

  Shutdown_Node5: &SHUTDOWN_NODE_5
    Type: NSX
    TestNSX: "nsxmanager.[5]"
    configure_power_state:
      state: 'shutdown'

  Shutdown_Node6: &SHUTDOWN_NODE_6
    Type: NSX
    TestNSX: "nsxmanager.[6]"
    configure_power_state:
      state: 'shutdown'

  Shutdown_Node7: &SHUTDOWN_NODE_7
    Type: NSX
    TestNSX: "nsxmanager.[7]"
    configure_power_state:
      state: 'shutdown'

  Shutdown_Node8: &SHUTDOWN_NODE_8
    Type: NSX
    TestNSX: "nsxmanager.[8]"
    configure_power_state:
      state: 'shutdown'

  Restart_Node1: &RESTART_NODE_1
    Type: NSX
    TestNSX: "nsxmanager.[1]"
    configure_power_state:
      state: 'restart'

  Restart_Node2: &RESTART_NODE_2
    Type: NSX
    TestNSX: "nsxmanager.[2]"
    configure_power_state:
      state: 'restart'

  Restart_Node3: &RESTART_NODE_3
    Type: NSX
    TestNSX: "nsxmanager.[3]"
    configure_power_state:
      state: 'restart'

  Restart_Node4: &RESTART_NODE_4
    Type: NSX
    TestNSX: "nsxmanager.[4]"
    configure_power_state:
      state: 'restart'

  Restart_Node5: &RESTART_NODE_5
    Type: NSX
    TestNSX: "nsxmanager.[5]"
    configure_power_state:
      state: 'restart'

  Restart_Node6: &RESTART_NODE_6
    Type: NSX
    TestNSX: "nsxmanager.[6]"
    configure_power_state:
      state: 'restart'

  MapNSXManager1ToCluster: &MAP_NSX_MANAGER_1_TO_CLUSTER
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    cluster:
      '[1]':
        map_object: true
        id_: 1

  MapNSXManager2ToCluster : &MAP_NSX_MANAGER_2_TO_CLUSTER
    Type: 'NSX'
    TestNSX: 'nsxmanager.[2]'
    cluster:
      '[1]':
        map_object: true
        id_: 1

  MapNSXManager3ToCluster : &MAP_NSX_MANAGER_3_TO_CLUSTER
    Type: 'NSX'
    TestNSX: 'nsxmanager.[3]'
    cluster:
      '[1]':
        map_object: true
        id_: 1

  MapNSXManager4ToCluster: &MAP_NSX_MANAGER_4_TO_CLUSTER
    Type: 'NSX'
    TestNSX: 'nsxmanager.[4]'
    cluster:
      '[1]':
        map_object: true
        id_: 1

  MapNSXManager5ToCluster: &MAP_NSX_MANAGER_5_TO_CLUSTER
    Type: 'NSX'
    TestNSX: 'nsxmanager.[5]'
    cluster:
      '[1]':
        map_object: true
        id_: 1

  MapNSXManager6ToCluster: &MAP_NSX_MANAGER_6_TO_CLUSTER
    Type: 'NSX'
    TestNSX: 'nsxmanager.[6]'
    cluster:
      '[1]':
        map_object: true
        id_: 1

  MapNSXManager7ToCluster: &MAP_NSX_MANAGER_7_TO_CLUSTER
    Type: 'NSX'
    TestNSX: 'nsxmanager.[7]'
    cluster:
      '[1]':
        map_object: true
        id_: 1

  MapNSXManager8ToCluster: &MAP_NSX_MANAGER_8_TO_CLUSTER
    Type: 'NSX'
    TestNSX: 'nsxmanager.[8]'
    cluster:
      '[1]':
        map_object: true
        id_: 1

  RestartLocatorServiceOn_Node1: &RESTART_LOCATOR_SERVICE_ON_NODE_1
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[2]"
    noofretries: '3'
    sleepbetweenretry: '30'
    configure_service_state:
      state: 'restart'
      service_name: 'locator'

  RestartLocatorServiceOn_Node2: &RESTART_LOCATOR_SERVICE_ON_NODE_2
    <<: *RESTART_LOCATOR_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[2].nsxservice.[2]"

  RestartLocatorServiceOn_Node3: &RESTART_LOCATOR_SERVICE_ON_NODE_3
    <<: *RESTART_LOCATOR_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[3].nsxservice.[2]"

  RestartLocatorServiceOn_Node4: &RESTART_LOCATOR_SERVICE_ON_NODE_4
    <<: *RESTART_LOCATOR_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[4].nsxservice.[2]"

  StopLocatorServiceOn_Node1: &STOP_LOCATOR_SERVICE_ON_NODE_1
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[2]"
    noofretries: '3'
    sleepbetweenretry: '30'
    configure_service_state:
      state: 'stop'
      service_name: 'locator'

  StopLocatorServiceOn_Node2: &STOP_LOCATOR_SERVICE_ON_NODE_2
    <<: *STOP_LOCATOR_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[2].nsxservice.[2]"

  StopLocatorServiceOn_Node3: &STOP_LOCATOR_SERVICE_ON_NODE_3
    <<: *STOP_LOCATOR_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[3].nsxservice.[2]"

  StopLocatorServiceOn_Node4: &STOP_LOCATOR_SERVICE_ON_NODE_4
    <<: *STOP_LOCATOR_SERVICE_ON_NODE_1
    TestService: "nsxmanager.[4].nsxservice.[2]"

  VerifyStartLocatorServiceStatusFor_Node1: &VERFIY_START_LOCATOR_SERVICE_STATUS_FOR_NODE_1
    Type: "Service"
    noofretries: '3'
    sleepbetweenretry: '30'
    TestService: "nsxmanager.[1].nsxservice.[2]"
    get_service_state:
      'runtime_state[?]equal_to': 'running'

  VerifyStartLocatorServiceStatusFor_Node2: &VERFIY_START_LOCATOR_SERVICE_STATUS_FOR_NODE_2
    <<: *VERFIY_START_LOCATOR_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[2].nsxservice.[2]"

  VerifyStartLocatorServiceStatusFor_Node3: &VERFIY_START_LOCATOR_SERVICE_STATUS_FOR_NODE_3
    <<: *VERFIY_START_LOCATOR_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[3].nsxservice.[2]"

  VerifyStartLocatorServiceStatusFor_Node4: &VERFIY_START_LOCATOR_SERVICE_STATUS_FOR_NODE_4
    <<: *VERFIY_START_LOCATOR_SERVICE_STATUS_FOR_NODE_1
    TestService: "nsxmanager.[4].nsxservice.[2]"

  StopAllServicesOn_Node1: &STOP_ALL_SERVICES_ON_NODE_1
    - ["StopProtonServiceOn_Node1"]
    - ["SetLocatorServiceIdFor_Node1"]
    - ["StopLocatorServiceOn_Node1"]

  StopAllServicesOn_Node2: &STOP_ALL_SERVICES_ON_NODE_2
    - ["StopProtonServiceOn_Node2"]
    - ["SetLocatorServiceIdFor_Node2"]
    - ["StopLocatorServiceOn_Node2"]

  StopAllServicesOn_Node3: &STOP_ALL_SERVICES_ON_NODE_3
    - ["StopProtonServiceOn_Node3"]
    - ["SetLocatorServiceIdFor_Node3"]
    - ["StopLocatorServiceOn_Node3"]

  StopAllServicesOn_Node4: &STOP_ALL_SERVICES_ON_NODE_4
    - ["StopProtonServiceOn_Node4"]
    - ["SetLocatorServiceIdFor_Node4"]
    - ["StopLocatorServiceOn_Node4"]

  RestartAllServicesOn_Node1: &RESTART_ALL_SERVICES_ON_NODE_1
    - ["RestartProtonServiceOn_Node1"]
    - ["RestartLocatorServiceOn_Node1"]

  RestartAllServicesOn_Node2: &RESTART_ALL_SERVICES_ON_NODE_2
    - ["RestartProtonServiceOn_Node2"]
    - ["RestartLocatorServiceOn_Node2"]

  RestartAllServicesOn_Node3: &RESTART_ALL_SERVICES_ON_NODE_3
    - ["RestartProtonServiceOn_Node3"]
    - ["RestartLocatorServiceOn_Node3"]

  RestartAllServicesOn_Node4: &RESTART_ALL_SERVICES_ON_NODE_4
    - ["RestartProtonServiceOn_Node4"]
    - ["RestartLocatorServiceOn_Node4"]

  VerifyStartAllServicesOn_Node1: &VERIFY_START_ALL_SERVICES_ON_NODE_1
    - ["VerifyStartProtonServiceStatusFor_Node1"]
    - ["VerifyStartLocatorServiceStatusFor_Node1"]

  VerifyStartAllServicesOn_Node2: &VERIFY_START_ALL_SERVICES_ON_NODE_2
    - ["VerifyStartProtonServiceStatusFor_Node2"]
    - ["VerifyStartLocatorServiceStatusFor_Node2"]

  VerifyStartAllServicesOn_Node3: &VERIFY_START_ALL_SERVICES_ON_NODE_3
    - ["VerifyStartProtonServiceStatusFor_Node3"]
    - ["VerifyStartLocatorServiceStatusFor_Node3"]

  VerifyStartAllServicesOn_Node4: &VERIFY_START_ALL_SERVICES_ON_NODE_4
    - ["VerifyStartProtonServiceStatusFor_Node4"]
    - ["VerifyStartLocatorServiceStatusFor_Node4"]

  DeleteDataOnMPNode1: &DELETE_DATA_AND_CONFIG_ON_NODE1
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    noofretries: '3'
    sleepbetweenretry: '30'
    node_cleanup:
        execution_type: 'cli'

  DeleteDataOnMPNode2: &DELETE_DATA_AND_CONFIG_ON_NODE2
    <<: *DELETE_DATA_AND_CONFIG_ON_NODE1
    TestNSX: 'nsxmanager.[2]'

  DeleteDataOnMPNode3: &DELETE_DATA_AND_CONFIG_ON_NODE3
    <<: *DELETE_DATA_AND_CONFIG_ON_NODE1
    TestNSX: 'nsxmanager.[3]'

  DeleteDataOnMPNode4: &DELETE_DATA_AND_CONFIG_ON_NODE4
    <<: *DELETE_DATA_AND_CONFIG_ON_NODE1
    TestNSX: 'nsxmanager.[4]'

  VerifyClusterMembers_1MP_From_Node1: &VERIFY_CLUSTER_MEMBERS_1MP_FROM_NODE_1
    Type: "Cluster"
    TestCluster:  "nsxmanager.[1].clusternode.[1]"
    get_cluster_members:
      'result_count[?]equal_to': 1
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[1].clusternode.[1]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_1MP_From_Node2: &VERIFY_CLUSTER_MEMBERS_1MP_FROM_NODE_2
    Type: "Cluster"
    TestCluster:  "nsxmanager.[2].clusternode.[2]"
    get_cluster_members:
      'result_count[?]equal_to': 1
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[2].clusternode.[2]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  VerifyClusterMembers_1MP_From_Node3: &VERIFY_CLUSTER_MEMBERS_1MP_FROM_NODE_3
    Type: "Cluster"
    TestCluster:  "nsxmanager.[3].clusternode.[3]"
    get_cluster_members:
      'result_count[?]equal_to': 1
      'results[?]contain_once':
         - 'id_': 'nsxmanager.[3].clusternode.[3]'
           'manager_role':
             'node_type': 'ManagementClusterRoleConfig'

  DeleteDataAndConfigFileFromNode1: &DELETE_DATA_AND_CONFIG_FILE_FROM_NODE_1
    - ["DeleteDataOnMPNode1"]

  DeleteDataAndConfigFileFromNode2: &DELETE_DATA_AND_CONFIG_FILE_FROM_NODE_2
    - ["DeleteDataOnMPNode2"]

  DeleteDataAndConfigFileFromNode3: &DELETE_DATA_AND_CONFIG_FILE_FROM_NODE_3
    - ["DeleteDataOnMPNode3"]

  DeleteDataAndConfigFileFromNode4: &DELETE_DATA_AND_CONFIG_FILE_FROM_NODE_4
    - ["DeleteDataOnMPNode4"]

  GetMPNodeIdForAllNodes: &GET_MP_NODE_ID_FOR_ALL_NODES
    - ["GetMPNode1Id"]
    - ["GetMPNode2Id"]
    - ["GetMPNode3Id"]

  MapNSXManagerForAllNodes: &MAP_NSX_MANAGER_FOR_ALL_NODES
    - ["MapNSXManager1ToCluster"]
    - ["MapNSXManager2ToCluster"]
    - ["MapNSXManager3ToCluster"]

  ReadClusterForAllNodes: &READ_CLUSTER_FOR_ALL_NODES
    - ["ReadCluster_Node1"]
    - ["ReadCluster_Node2"]
    - ["ReadCluster_Node3"]

  VerifyClusterStatusFromAllNodes: &VERIFY_CLUSTER_STATUS_FROM_ALL_NODES
    - ["Wait_For_Cluster_Status_Stable_On_Node1"]
    - ["Wait_For_Cluster_Status_Stable_On_Node2"]
    - ["Wait_For_Cluster_Status_Stable_On_Node3"]

  VerifyClusterStatusFromAllNodesForMPAndCCP: &VERIFY_CLUSTER_STATUS_FROM_ALL_NODES_FOR_MP_AND_CCP
    - ["VerifyClusterStatusFrom_Node1"]
    - ["VerifyClusterStatusFrom_Node2"]
    - ["VerifyClusterStatusFrom_Node3"]

  VerifyClusterStatusFromNodes1And2: &VERIFY_CLUSTER_STATUS_FROM_NODES_1_AND_2
    - ["Wait_For_Cluster_Status_Stable_On_Node1"]
    - ["Wait_For_Cluster_Status_Stable_On_Node2"]

  VerifyClusterStatusFromNodes1And2ForMPAndCCP: &VERIFY_CLUSTER_STATUS_FROM_NODES_1_AND_2_MP_AND_CCP
    - ["VerifyClusterStatusFrom_Node1"]
    - ["VerifyClusterStatusFrom_Node2"]

  VerifyClusterMembersFromAllNodes: &VERIFY_CLUSTER_MEMBERS_FROM_ALL_NODES
    - ["VerifyClusterMembers_1MP_From_Node1"]
    - ["VerifyClusterMembers_1MP_From_Node2"]
    - ["VerifyClusterMembers_1MP_From_Node3"]

  InitialVerificationOf3MP3CCPNodeCluster: &INITIAL_VERIFICATION_OF_3MP_3CCP_NODE_CLUSTER
    - ["GetMPNodeIdForAllNodes"]
    - ["MapNSXManager1ToCluster"]
    - ["ReadClusterForAllNodes"]
    - ["VerifyClusterStatusFromAllNodesForMPAndCCP"]
    - ["InitializeController1"]
    - ["JoinController1ToCCPCluster"]
    - ["JoinController2ToCCPCluster"]
    - ["JoinController3ToCCPCluster"]
    - ["ActivateController2"]
    - ["ActivateController3"]
    - ["VerifyClusterMembers_3MP_3CCP"]
    - ["VerifyAllNSXManagersOnController1"]

  InitialVerificationOf3MPNodeCluster: &INITIAL_VERIFICATION_OF_3MP_NODE_CLUSTER
    - ["GetMPNodeIdForAllNodes"]
    - ["MapNSXManager1ToCluster"]
    - ["ReadClusterForAllNodes"]
    - ["VerifyClusterStatusFromAllNodes"]
    - ["VerifyClusterMembers_3MP"]

  InitialSetupOf3MPNodesToCluster: &INITIAL_SETUP_OF_3MP_NODES_TO_CLUSTER
    - ["GetMPNodeIdForAllNodes"]
    - ["MapNSXManagerForAllNodes"]
    - ["ReadClusterForAllNodes"]
    - ["VerifyClusterStatusFromAllNodes"]
    - ["VerifyClusterMembersFromAllNodes"]
    - ["Add2MPNodesToCluster"]
    - ["VerifyClusterMembers_3MP"]

  SetProtonServiceIdFor_Node1WithSleep:
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_1
    sleepbetweenworkloads: 600

  ClusterStabilityFor3MPClusterAfterTestCaseExecution: &CLUSTER_STABILITYFOR_3MP_CLUSTER_AFTER_TEST_CASE_EXECUTION
    - ["PowerOnMP_Node1"]
    - ["PowerOnMP_Node2"]
    - ["PowerOnMP_Node3"]
    - ["SetProtonServiceIdFor_Node1WithSleep"]
    - ["GetMPNodeIdForAllNodes"]
    - ["MapNSXManager1ToCluster"]
    - ["SetProtonServiceIdFor_Node2","SetProtonServiceIdFor_Node3"]
    - ["RestartProtonServiceOn_Node1","RestartProtonServiceOn_Node2",
      "RestartProtonServiceOn_Node3"]
    - ["VerifyStartProtonServiceStatusFor_Node1",
      "VerifyStartProtonServiceStatusFor_Node2",
      "VerifyStartProtonServiceStatusFor_Node3"]
    - ["Wait_For_Cluster_Status_Stable_On_Node1",
      "Wait_For_Cluster_Status_Stable_On_Node2",
      "Wait_For_Cluster_Status_Stable_On_Node3"]
    - ["VerifyClusterMembers_3MP"]

  ClusterStabilityFor3MP3CCPClusterAfterTestCaseExecution: &CLUSTER_STABILITY_FOR_3MP_3CCP_CLUSTER_AFTER_TEST_CASE_EXECUTION
    - ["PowerOnMP_Node1","PowerOnMP_Node2","PowerOnMP_Node3"]
    - ["SetProtonServiceIdFor_Node1_WithSleep"]
    - ["RestartProtonServiceOn_Node1","RestartProtonServiceOn_Node2",
      "RestartProtonServiceOn_Node3"]
    - ["VerifyStartProtonServiceStatusFor_Node1",
      "VerifyStartProtonServiceStatusFor_Node2",
      "VerifyStartProtonServiceStatusFor_Node3"]
    - ["Wait_For_Cluster_Status_Stable_On_Node1",
      "Wait_For_Cluster_Status_Stable_On_Node2",
      "Wait_For_Cluster_Status_Stable_On_Node3"]
    - ["VerifyClusterMembers_3MP_3CCP"]

  SetProtonServiceIdFor_Node2_With_Sleep: &SET_PROTON_SERVICE_ID_FOR_NODE_2_WITH_SLEEP
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_2
    sleepbetweenworkloads: 120

  SetProtonServiceIdFor_Node3_With_Sleep: &SET_PROTON_SERVICE_ID_FOR_NODE_3_WITH_SLEEP
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_3
    sleepbetweenworkloads: 120

  SetProtonServiceIdFor_Node4_With_Sleep: &SET_PROTON_SERVICE_ID_FOR_NODE_4_WITH_SLEEP
    <<: *SET_PROTON_SERVICE_ID_FOR_NODE_4
    sleepbetweenworkloads: 120

  Cleanup2NodesMPCluster: &CLEANUP_2_NODES_MP_CLUSTER
    - ["CleanupMPNode1ForReuse"]
    - ["CleanupMPNode2ForReuse"]

  Cleanup3NodesMPCluster: &CLEANUP_3_NODES_MP_CLUSTER
    - ["CleanupMPNode1ForReuse"]
    - ["CleanupMPNode2ForReuse"]
    - ["CleanupMPNode3ForReuse"]

  DeleteNode2FromClusterNode1: &DELETE_NODE_2_FROM_CLUSTER_NODE_1
    - ["PowerOnMP_Node2"]
    - ["SetProtonServiceIdFor_Node2_With_Sleep"]
    - ["StopProtonServiceOn_Node2"]
    - ["VerifyStopProtonServiceStatusFor_Node2"]
    - ["RemoveMP_Node2"]

  DeleteNode3FromClusterNode1: &DELETE_NODE_3_FROM_CLUSTER_NODE_1
    - ["PowerOnMP_Node3"]
    - ["SetProtonServiceIdFor_Node3_With_Sleep"]
    - ["StopProtonServiceOn_Node3"]
    - ["VerifyStopProtonServiceStatusFor_Node3"]
    - ["RemoveMP_Node3"]

  DeleteNode4FromClusterNode1: &DELETE_NODE_4_FROM_CLUSTER_NODE_1
    - ["PowerOnMP_Node4"]
    - ["SetProtonServiceIdFor_Node4_With_Sleep"]
    - ["StopProtonServiceOn_Node4"]
    - ["VerifyStopProtonServiceStatusFor_Node4"]
    - ["RemoveMP_Node4"]

  CleanupMPNode1ForReuse: &CLEANUP_MP_NODE_1_FOR_REUSE
    - ["PowerOnMP_Node1"]
    - ["SetProtonServiceIdFor_Node1_WithSleep"]
    - ["StopAllServicesOn_Node1"]
    - ["DeleteDataAndConfigFileFromNode1"]
    - ["RestartAllServicesOn_Node1"]
    - ["VerifyStartAllServicesOn_Node1"]
    - ["MapNSXManager1ToCluster"]
    - ["Wait_For_Cluster_Status_Stable_On_Node1"]
    - ["GetMPNode1Id"]
    - ["VerifyClusterMembers_1MP_From_Node1"]

  CleanupMPNode2ForReuse: &CLEANUP_MP_NODE_2_FOR_REUSE
    - ["PowerOnMP_Node2"]
    - ["SetProtonServiceIdFor_Node2_WithSleep"]
    - ["StopAllServicesOn_Node2"]
    - ["DeleteDataAndConfigFileFromNode2"]
    - ["RestartAllServicesOn_Node2"]
    - ["VerifyStartAllServicesOn_Node2"]
    - ["MapNSXManager2ToCluster"]
    - ["Wait_For_Cluster_Status_Stable_On_Node2"]
    - ["GetMPNode2Id"]
    - ["VerifyClusterMembers_1MP_From_Node2"]

  CleanupMPNode3ForReuse: &CLEANUP_MP_NODE_3_FOR_REUSE
    - ["PowerOnMP_Node3"]
    - ["SetProtonServiceIdFor_Node3_WithSleep"]
    - ["StopAllServicesOn_Node3"]
    - ["DeleteDataAndConfigFileFromNode3"]
    - ["RestartAllServicesOn_Node3"]
    - ["VerifyStartAllServicesOn_Node3"]
    - ["MapNSXManager3ToCluster"]
    - ["Wait_For_Cluster_Status_Stable_On_Node3"]
    - ["GetMPNode3Id"]
    - ["VerifyClusterMembers_1MP_From_Node3"]

  CleanupMPNode4ForReuse: &CLEANUP_MP_NODE_4_FOR_REUSE
    - ["PowerOnMP_Node4"]
    - ["SetProtonServiceIdFor_Node4_WithSleep"]
    - ["StopAllServicesOn_Node4"]
    - ["DeleteDataAndConfigFileFromNode4"]
    - ["RestartAllServicesOn_Node4"]
    - ["VerifyStartAllServicesOn_Node4"]
    - ["MapNSXManager4ToCluster"]
    - ["Wait_For_Cluster_Status_Stable_On_Node4"]
    - ["GetMPNode4Id"]
    - ["VerifyClusterMembers_1MP_From_Node4"]

CCPClusteringConfigurationWorkloads: &CCPClusteringConfigurationWorkloads

  execution_type:
    CONTROLLER: &CONTROLLER_EXECUTION_TYPE
      cli

  JoinController1ToCCPCluster: &ADD_CCP_NODE_1_TO_CCP_CLUSTER
    Type: Controller
    TestController: 'nsxcontroller.[1]'
    expectedResult: ignore
    clusternode:
      '[1]':
        controller_ip: 'nsxcontroller.[1]'
        control_cluster_thumbprint: 'nsxcontroller.[1]'
        execution_type: 'cli'

  JoinController2ToCCPCluster: &ADD_CCP_NODE_2_TO_CCP_CLUSTER
    Type: Controller
    TestController: 'nsxcontroller.[1]'
    expectedResult: ignore
    clusternode:
      '[2]':
        controller_ip: 'nsxcontroller.[2]'
        control_cluster_thumbprint: 'nsxcontroller.[2]'
        execution_type: 'cli'

  JoinController2ToCCPClusterNode2: &ADD_CCP_NODE_2_TO_CCP_CLUSTER_NODE2
    Type: Controller
    TestController: 'nsxcontroller.[2]'
    clusternode:
      '[2]':
        controller_ip: 'nsxcontroller.[2]'
        control_cluster_thumbprint: 'nsxcontroller.[2]'
        execution_type: 'cli'

  JoinController3ToCCPCluster: &ADD_CCP_NODE_3_TO_CCP_CLUSTER
    Type: Controller
    TestController: 'nsxcontroller.[1]'
    expectedResult: ignore
    clusternode:
      '[3]':
        controller_ip: 'nsxcontroller.[3]'
        control_cluster_thumbprint: 'nsxcontroller.[3]'
        execution_type: 'cli'

  UnregisterController1FromMPCluster: &UNREGISTER_CCP_NODE_1_FROM_MP_CLUSTER
    Type: NSX
    TestNSX: 'nsxmanager.[1]'
    deleteclusternode: *NSXCONTROLLER_CLUSTERNODE1

  UnregisterController2: &UNREGISTER_CCP_NODE_2
    Type: NSX
    TestNSX: 'nsxmanager.[1]'
    deleteclusternode: *NSXCONTROLLER_CLUSTERNODE2
    SkipPostProcess: "1"

  UnregisterController3: &UNREGISTER_CCP_NODE_3
    Type: NSX
    TestNSX: 'nsxmanager.[1]'
    deleteclusternode: *NSXCONTROLLER_CLUSTERNODE3
    SkipPostProcess: "1"

  RegisterController1: &REGISTER_CONTROLLER_1
    Type: Controller
    TestController: 'nsxcontroller.[1]'
    set_nsx_registration:
      manager_ip: 'nsxmanager.[1]'
      manager_thumbprint: 'nsxmanager.[1]'
      execution_type: 'cli'

  RegisterController2: &REGISTER_CONTROLLER_2
    Type: Controller
    TestController: 'nsxcontroller.[2]'
    set_nsx_registration:
      manager_ip: 'nsxmanager.[1]'
      manager_thumbprint: 'nsxmanager.[1]'
      execution_type: 'cli'

  RegisterController2WithMPNode2: &REGISTER_CONTROLLER_2_WITH_MP_NODE2
    Type: Controller
    TestController: 'nsxcontroller.[2]'
    set_nsx_registration:
      manager_ip: 'nsxmanager.[2]'
      manager_thumbprint: 'nsxmanager.[2]'
      execution_type: 'cli'

  RegisterController3: &REGISTER_CONTROLLER_3
    Type: Controller
    TestController: 'nsxcontroller.[3]'
    set_nsx_registration:
      manager_ip: 'nsxmanager.[1]'
      manager_thumbprint: 'nsxmanager.[1]'
      execution_type: 'cli'

  RegisterAllControllerToMPCluster: &REGISTER_ALL_CONTROLLERS_TO_MP_CLUSTER
    Type: Controller
    TestController: 'nsxcontroller.[-1]'
    set_nsx_registration:
      manager_ip: 'nsxmanager.[1]'
      manager_thumbprint: 'nsxmanager.[1]'
      execution_type: 'cli'

  ActivateController2: &ACTIVATE_CONTROLLER_2
    Type: Controller
    TestController: 'nsxcontroller.[2]'
    configure_service_state:
      state: 'activate'
      service_name: 'control-cluster'
    execution_type: 'cli'

  ActivateController3: &ACTIVATE_CONTROLLER_3
    Type: Controller
    TestController: 'nsxcontroller.[3]'
    configure_service_state:
      state: 'activate'
      service_name: 'control-cluster'
    execution_type: 'cli'

  DeactivateController2: &DEACTIVATE_CONTROLLER_2
    Type: Controller
    TestController: 'nsxcontroller.[2]'
    configure_service_state:
      state: 'deactivate'
      service_name: 'control-cluster'
    execution_type: 'cli'

  DeactivateController3: &DEACTIVATE_CONTROLLER_3
    Type: Controller
    TestController: 'nsxcontroller.[3]'
    configure_service_state:
      state: 'deactivate'
      service_name: 'control-cluster'
    execution_type: 'cli'

  InitializeController1: &INITIALIZE_CONTROLLER_1
    Type: Controller
    TestController: 'nsxcontroller.[1]'
    expectedResult: ignore
    configure_service_state:
      state: 'initialize'
      service_name: 'control-cluster'
    execution_type: 'cli'

  InitializeController2: &INITIALIZE_CONTROLLER_2
    <<: *INITIALIZE_CONTROLLER_1
    TestController: 'nsxcontroller.[2]'

  ControllerSecurityPassword: &CONTROLLER_SECURITY_PASSWORD
    '12345'

  SetSecurityOnController1: &SET_SECURITY_ON_CONTROLLER_1
    Type: Controller
    TestController: 'nsxcontroller.[1]'
    set_security:
      security_type: 'password'
      value: *CONTROLLER_SECURITY_PASSWORD
    execution_type: 'cli'

  SetSecurityOnController2: &SET_SECURITY_ON_CONTROLLER_2
    Type: Controller
    TestController: 'nsxcontroller.[2]'
    set_security:
      security_type: 'password'
      value: *CONTROLLER_SECURITY_PASSWORD
    execution_type: 'cli'

  SetSecurityOnController3: &SET_SECURITY_ON_CONTROLLER_3
    Type: Controller
    TestController: 'nsxcontroller.[3]'
    set_security:
      security_type: 'password'
      value: *CONTROLLER_SECURITY_PASSWORD
    execution_type: 'cli'

  SetupThreeNodeCCPCluster: &SETUP_3_NODE_CCP_CLUSTER
    - - InitializeController1
    - - JoinController1ToCCPCluster
    - - JoinController2ToCCPCluster
    - - JoinController3ToCCPCluster
    - - ActivateController2
    - - ActivateController3

  Verify3CCPCluster_From_CCP: &VERIFY_THREE_NODE_CCP_CLUSTER_STATUS
    Type: "ClusterNode"
    Testclusternode: *NSXCONTROLLER_CLUSTERNODE1
    execution_type: 'cli'
    'get_cluster_node':
      'in_majority[?]equal_to': "true"
      'cluster_nodes[?]contain_once':
        - controller_ip: "nsxcontroller.[1]"
          id_: *NSXCONTROLLER_CLUSTERNODE1
          status: "active"
        - controller_ip: "nsxcontroller.[2]"
          id_: *NSXCONTROLLER_CLUSTERNODE2
          status: "active"
        - controller_ip: "nsxcontroller.[3]"
          id_: *NSXCONTROLLER_CLUSTERNODE3
          status: "active"

  VerifyCCPClusterStatusActive: &VERIFY_CCP_CLUSTER_STATUS_ACTIVE
    <<: *VERIFY_THREE_NODE_CCP_CLUSTER_STATUS

  VerifyOneNodeCCPClusterStatus: &VERIFY_ONE_NODE_CCP_CLUSTER_STATUS
    Type: "ClusterNode"
    Testclusternode: *NSXCONTROLLER_CLUSTERNODE1
    execution_type: 'cli'
    'get_cluster_node':
      'in_majority[?]equal_to': "true"
      'cluster_nodes[?]contain_once':
        - controller_ip: "nsxcontroller.[1]"
          id_: *NSXCONTROLLER_CLUSTERNODE1
          status: "active"

  Restart_CCP_Node1: &RESTART_CCP_NODE_1
    Type: VM
    TestVM: "nsxcontroller.[1]"
    vmstate: reboot

  Poweron_CCP_Node1: &POWERON_CCP_NODE_1
    Type: VM
    TestVM: "nsxcontroller.[1]"
    vmstate: poweron

  Poweroff_CCP_Node1: &POWEROFF_CCP_NODE_1
    Type: VM
    TestVM: "nsxcontroller.[1]"
    vmstate: poweroff

  Crash_CCP_Node1: &CRASH_CCP_NODE_1
    Type: VM
    TestVM: "nsxcontroller.[1]"
    vmstate: crash
    expectedResult: ignore

  Restart_CCP_Node2: &RESTART_CCP_NODE_2
    Type: VM
    TestVM: "nsxcontroller.[2]"
    vmstate: reboot

  Poweron_CCP_Node2: &POWERON_CCP_NODE_2
    Type: VM
    TestVM: "nsxcontroller.[2]"
    vmstate: poweron

  Poweroff_CCP_Node2: &POWEROFF_CCP_NODE_2
    Type: VM
    TestVM: "nsxcontroller.[2]"
    vmstate: poweroff

  Crash_CCP_Node2: &CRASH_CCP_NODE_2
    Type: VM
    TestVM: "nsxcontroller.[2]"
    vmstate: crash
    expectedResult: ignore

  Restart_CCP_Node3: &RESTART_CCP_NODE_3
    Type: VM
    TestVM: "nsxcontroller.[3]"
    vmstate: reboot

  Poweron_CCP_Node3: &POWERON_CCP_NODE_3
    Type: VM
    TestVM: "nsxcontroller.[3]"
    vmstate: poweron

  Poweroff_CCP_Node3: &POWEROFF_CCP_NODE_3
    Type: VM
    TestVM: "nsxcontroller.[3]"
    vmstate: poweroff

  Crash_CCP_Node3: &CRASH_CCP_NODE_3
    Type: VM
    TestVM: "nsxcontroller.[3]"
    vmstate: crash
    expectedResult: ignore

  StopController1: &STOP_CONTROLLER_1
    Type: Controller
    TestController: 'nsxcontroller.[1]'
    configure_service_state:
        state: 'stop'
        service_name: 'controller'

  StopController2: &STOP_CONTROLLER_2
    <<: *STOP_CONTROLLER_1
    TestController: 'nsxcontroller.[2]'

  StopController3: &STOP_CONTROLLER_3
    <<: *STOP_CONTROLLER_1
    TestController: 'nsxcontroller.[3]'

  StartMootOnController1: &START_MOOT_ON_CONTROLLER_1
      Type: Controller
      TestController: 'nsxcontroller.[1]'
      configure_service_state:
          state: 'start'
          service_name: 'moot-server'
          execution_type: 'cmd'

  StartMootOnController2: &START_MOOT_ON_CONTROLLER_2
      <<: *START_MOOT_ON_CONTROLLER_1
      TestController: 'nsxcontroller.[2]'

  StartMootOnController3: &START_MOOT_ON_CONTROLLER_3
      <<: *START_MOOT_ON_CONTROLLER_1
      TestController: 'nsxcontroller.[3]'

  StopMootOnController1: &STOP_MOOT_ON_CONTROLLER_1
      Type: Controller
      TestController: 'nsxcontroller.[1]'
      configure_service_state:
          state: 'stop'
          service_name: 'moot-server'
          execution_type: 'cmd'

  StopMootOnController2: &STOP_MOOT_ON_CONTROLLER_2
      <<: *STOP_MOOT_ON_CONTROLLER_1
      TestController: 'nsxcontroller.[2]'

  StopMootOnController3: &STOP_MOOT_ON_CONTROLLER_3
      <<: *STOP_MOOT_ON_CONTROLLER_1
      TestController: 'nsxcontroller.[3]'

  ClearController1: &CLEAR_CONTROLLER_1
      Type: Controller
      TestController: 'nsxcontroller.[1]'
      clear_controller:
          execution_type: 'cmd'

  ClearController2: &CLEAR_CONTROLLER_2
      <<: *CLEAR_CONTROLLER_1
      TestController: 'nsxcontroller.[2]'

  ClearController3: &CLEAR_CONTROLLER_3
      <<: *CLEAR_CONTROLLER_1
      TestController: 'nsxcontroller.[3]'

  RemoveCCPNode1FromCluster: &RemoveCCPNode1FromCluster
    Type: Controller
    TestController: 'nsxcontroller.[1]'
    noofretries: '3'
    sleepbetweenretry: '20'
    remove_ccp_cluster_node:
        controller_ip: 'nsxcontroller.[1]'
        execution_type: 'cli'

  RemoveCCPNode2FromCluster: &RemoveCCPNode2FromCluster
    Type: Controller
    TestController: 'nsxcontroller.[1]'
    noofretries: '3'
    sleepbetweenretry: '20'
    remove_ccp_cluster_node:
        controller_ip: 'nsxcontroller.[2]'
        execution_type: 'cli'

  RemoveCCPNode2FromClusterNode2: &RemoveCCPNode2FromClusterNode2
    Type: Controller
    TestController: 'nsxcontroller.[2]'
    noofretries: '3'
    sleepbetweenretry: '20'
    remove_ccp_cluster_node:
        controller_ip: 'nsxcontroller.[2]'
        execution_type: 'cli'

  RemoveCCPNode3FromCluster: &RemoveCCPNode3FromCluster
    Type: Controller
    TestController: 'nsxcontroller.[1]'
    noofretries: '3'
    sleepbetweenretry: '20'
    remove_ccp_cluster_node:
        controller_ip: 'nsxcontroller.[3]'
        execution_type: 'cli'

  DeleteMootServerOnController1: &DELETE_MOOT_SERVER_ON_CONTROLLER_1
      Type: 'NSX'
      TestNSX: 'nsxcontroller.[1]'
      delete_backend_file:
          file_name: '*'
          execution_type: 'cmd'
          path: '/var/moot-server'

  DeleteMootServerOnController2: &DELETE_MOOT_SERVER_ON_CONTROLLER_2
      <<: *DELETE_MOOT_SERVER_ON_CONTROLLER_1
      TestNSX: 'nsxcontroller.[2]'

  DeleteMootServerOnController3: &DELETE_MOOT_SERVER_ON_CONTROLLER_3
      <<: *DELETE_MOOT_SERVER_ON_CONTROLLER_1
      TestNSX: 'nsxcontroller.[3]'

  DeleteBootStrapOnController3: &DELETE_BOOT_STRAP_ON_CONTROLLER3
      Type: 'NSX'
      TestNSX: 'nsxcontroller.[3]'
      delete_backend_file:
          file_name: 'bootstrap-config'
          execution_type: 'cmd'
          path: '/opt/vmware/etc'

  DeleteControllerNodeUUIDFileOnController3: &DELETE_CONTROLLER_NODE_UUID_FILE_ON_CONTROLLER3
      Type: 'NSX'
      TestNSX: 'nsxcontroller.[3]'
      delete_backend_file:
          file_name: 'node-uuid'
          execution_type: 'cmd'
          path: '/opt/vmware/etc'

  DeleteBootStrapOnController2: &DELETE_BOOT_STRAP_ON_CONTROLLER2
    <<: *DELETE_BOOT_STRAP_ON_CONTROLLER3
    TestNSX: 'nsxcontroller.[2]'

  DeleteControllerNodeUUIDFileOnController2: &DELETE_CONTROLLER_NODE_UUID_FILE_ON_CONTROLLER2
    <<: *DELETE_CONTROLLER_NODE_UUID_FILE_ON_CONTROLLER3
    TestNSX: 'nsxcontroller.[2]'

  DeleteBootStrapOnController1: &DELETE_BOOT_STRAP_ON_CONTROLLER1
    <<: *DELETE_BOOT_STRAP_ON_CONTROLLER3
    TestNSX: 'nsxcontroller.[1]'

  DeleteControllerNodeUUIDFileOnController1: &DELETE_CONTROLLER_NODE_UUID_FILE_ON_CONTROLLER1
    <<: *DELETE_CONTROLLER_NODE_UUID_FILE_ON_CONTROLLER3
    TestNSX: 'nsxcontroller.[1]'

  StartController1: &START_CONTROLLER_1
    Type: Controller
    TestController: 'nsxcontroller.[1]'
    configure_service_state:
      state: 'start'
      service_name: 'controller'

  StartController2: &START_CONTROLLER_2
    <<: *START_CONTROLLER_1
    TestController: 'nsxcontroller.[2]'

  StartController3: &START_CONTROLLER_3
    <<: *START_CONTROLLER_1
    TestController: 'nsxcontroller.[3]'

  VerifyAllNSXManagersOnController1: &VERIFY_3MP_MEMBERS_ON_CCP1
    Type: "ClusterNode"
    Testclusternode: *NSXCONTROLLER_CLUSTERNODE1
    execution_type: 'cli'
    'get_cluster_managers[?]contain_once':
      table:
        - ip: "nsxmanager.[1]->manager_ip"
          port: "5671"
          thumbprint: 'nsxmanager.[1]->manager_messaging_thumbprint'
        - ip: "nsxmanager.[2]->manager_ip"
          port: "5671"
          thumbprint: 'nsxmanager.[2]->manager_messaging_thumbprint'
        - ip: "nsxmanager.[3]->manager_ip"
          port: "5671"
          thumbprint: 'nsxmanager.[3]->manager_messaging_thumbprint'

  VerifyTwoNSXManagersOnController1: &VERIFY_2MP_MEMBERS_ON_CCP1
    Type: "ClusterNode"
    Testclusternode: *NSXCONTROLLER_CLUSTERNODE1
    execution_type: 'cli'
    'get_cluster_managers[?]contain_once':
      table:
        - ip: "nsxmanager.[1]->manager_ip"
          port: "5671"
          thumbprint: 'nsxmanager.[1]->manager_messaging_thumbprint'
        - ip: "nsxmanager.[2]->manager_ip"
          port: "5671"
          thumbprint: 'nsxmanager.[2]->manager_messaging_thumbprint'

  VerifyOneNSXManagersOnController1: &VERIFY_1MP_MEMBER_ON_CCP1
    Type: "ClusterNode"
    Testclusternode: *NSXCONTROLLER_CLUSTERNODE1
    execution_type: 'cli'
    'get_cluster_managers[?]contain_once':
      table:
        - ip: "nsxmanager.[1]->manager_ip"
          port: "5671"
          thumbprint: 'nsxmanager.[1]->manager_messaging_thumbprint'

  VerifyOneNSXManagersOnController2: &VERIFY_1MP_MEMBER_ON_CCP2
    Type: "ClusterNode"
    Testclusternode: 'nsxcontroller.[2].clusternode.[2]'
    execution_type: 'cli'
    'get_cluster_managers[?]contain_once':
      table:
        - ip: "nsxmanager.[2]->manager_ip"
          port: "5671"
          thumbprint: 'nsxmanager.[2]->manager_messaging_thumbprint'

  CleanupCCPNode3ForReuse: &CLEANUP_CCP_NODE_3_FOR_REUSE
    - ['StopController3']
    - ['RemoveCCPNode3FromCluster']
    - ['UnregisterController3']
    - ["StopMootOnController3"]
    - ["ClearController3"]
    - ["DeleteMootServerOnController3"]
    - ['DeleteBootStrapOnController3']
    - ['DeleteControllerNodeUUIDFileOnController3']
    - ["StartMootOnController3"]

  CleanupCCPNode2ForReuse: &CLEANUP_CCP_NODE_2_FOR_REUSE
    - ['StopController2']
    - ['RemoveCCPNode2FromCluster']
    - ['UnregisterController2']
    - ["StopMootOnController2"]
    - ["ClearController2"]
    - ["DeleteMootServerOnController2"]
    - ['DeleteBootStrapOnController2']
    - ['DeleteControllerNodeUUIDFileOnController2']
    - ["StartMootOnController2"]

  CleanupCCPNode1ForReuse: &CLEANUP_CCP_NODE_1_FOR_REUSE
    - ['StopController1']
    - ['RemoveCCPNode1FromCluster']
    - ['UnregisterController1FromMPCluster']
    - ["StopMootOnController1"]
    - ["ClearController1"]
    - ["DeleteMootServerOnController1"]
    - ['DeleteBootStrapOnController1']
    - ['DeleteControllerNodeUUIDFileOnController1']
    - ["StartMootOnController1"]

  Cleanup2NodesCCPCluster: &CLEANUP_2_NODES_CCP_CLUSTER
  - ["CleanupCCPNode2ForReuse"]
  - ["CleanupCCPNode1ForReuse"]

  Cleanup3NodesCCPCluster: &CLEANUP_3_NODES_CCP_CLUSTER
  - ["CleanupCCPNode3ForReuse"]
  - ["CleanupCCPNode2ForReuse"]
  - ["CleanupCCPNode1ForReuse"]

  GetFullSyncCountBeforeTestOnNSXController1: &GetFullSyncCountBeforeTestOnNSXController1
    Type: "Controller"
    TestController: 'nsxcontroller.[1]'
    PersistData: "Yes"
    execution_type: 'cli'
    read_full_sync_count:
      'number_syncs[?]defined': ''

  GetFullSyncCountBeforeTestOnNSXController2: &GetFullSyncCountBeforeTestOnNSXController2
    <<: *GetFullSyncCountBeforeTestOnNSXController1
    TestController: 'nsxcontroller.[2]'

  GetFullSyncCountBeforeTestOnNSXController3: &GetFullSyncCountBeforeTestOnNSXController3
    <<: *GetFullSyncCountBeforeTestOnNSXController1
    TestController: 'nsxcontroller.[3]'

  VerifyFullSyncCountAfterTestOnNSXController1: &VerifyFullSyncCountAfterTestOnNSXController1
    Type: "Controller"
    TestController: 'nsxcontroller.[1]'
    before_test_full_sync_count: 'nsxcontroller.[1]->read_full_sync_count->number_syncs'
    execution_type: 'cli'
    get_full_sync_diff:
      'full_sync_diff[?]<': '10'

  VerifyFullSyncCountAfterTestOnNSXController2: &VerifyFullSyncCountAfterTestOnNSXController2
    <<: *VerifyFullSyncCountAfterTestOnNSXController1
    TestController: 'nsxcontroller.[2]'
    before_test_full_sync_count: 'nsxcontroller.[2]->read_full_sync_count->number_syncs'

  VerifyFullSyncCountAfterTestOnNSXController3: &VerifyFullSyncCountAfterTestOnNSXController3
    <<: *VerifyFullSyncCountAfterTestOnNSXController1
    TestController: 'nsxcontroller.[3]'
    before_test_full_sync_count: 'nsxcontroller.[3]->read_full_sync_count->number_syncs'


StateSynchNodeWorkloads: &StateSynchNodeWorkloads

  CreateStateSynchNode: &CREATE_STATE_SYNCH_NODE
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    state_synch_node:
      '[1]':
        map_object: true
        id_: ""

  GetStateSynchNodeDetails: &GET_STATE_SYNCH_NODE_DETAILS
    Type: "Cluster"
    Testcluster: "nsxmanager.[1].state_synch_node.[1]"
    PersistData: "Yes"
    read:
      'state_synch_node_id[?]defined': ''
      'ipaddress[?]defined': ''

  PoweroffStateSynchNode: &POWEROFF_STATE_SYNCH_NODE
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    managers: 'nsxmanager.[-1]'
    ipaddress: 'nsxmanager.[1].state_synch_node.[1]->read->ipaddress'
    state_synch_node_vmstate: poweroff

  PoweronStateSynchNode: &POWERON_STATE_SYNCH_NODE
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    managers: 'nsxmanager.[-1]'
    ipaddress: 'nsxmanager.[1].state_synch_node.[1]->read->ipaddress'
    state_synch_node_vmstate: poweron

  RestartStateSynchNode: &RESTART_STATE_SYNCH_NODE
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    managers: 'nsxmanager.[-1]'
    ipaddress: 'nsxmanager.[1].state_synch_node.[1]->read->ipaddress'
    state_synch_node_vmstate: reboot

  CrashStateSynchNode: &CRASH_STATE_SYNCH_NODE
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    managers: 'nsxmanager.[-1]'
    ipaddress: 'nsxmanager.[1].state_synch_node.[1]->read->ipaddress'
    state_synch_node_vmstate: crash

  PoweroffNonStateSynchNode: &POWEROFF_NON_STATE_SYNCH_NODE
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    managers: 'nsxmanager.[-1]'
    ipaddress: 'nsxmanager.[1].state_synch_node.[1]->read->ipaddress'
    non_state_synch_node_vmstate: poweroff

  PoweronNonStateSynchNode: &POWERON_NON_STATE_SYNCH_NODE
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    managers: 'nsxmanager.[-1]'
    ipaddress: 'nsxmanager.[1].state_synch_node.[1]->read->ipaddress'
    non_state_synch_node_vmstate: poweron

  RestartNonStateSynchNode: &RESTART_NON_STATE_SYNCH_NODE
    Type: 'Cluster'
    TestCluster: 'nsxmanager.[1].cluster.[1]'
    managers: 'nsxmanager.[-1]'
    ipaddress: 'nsxmanager.[1].state_synch_node.[1]->read->ipaddress'
    non_state_synch_node_vmstate: reboot

  RestartProtonServiceOnStateSynchNode: &RESTART_PROTON_SERVICE_ON_STATE_SYNCH_NODE
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[1]"
    managers: 'nsxmanager.[-1]'
    ipaddress: 'nsxmanager.[1].state_synch_node.[1]->read->ipaddress'
    service_name: 'proton'
    state_synch_node_service_status: 'restart'

  RestartRabbitmqServiceOnStateSynchNode: &RESTART_RABBITMQ_SERVICE_ON_STATE_SYNCH_NODE
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[1]"
    managers: 'nsxmanager.[-1]'
    ipaddress: 'nsxmanager.[1].state_synch_node.[1]->read->ipaddress'
    service_name: 'rabbitmq'
    state_synch_node_service_status: 'restart'

  RestartProtonServiceOnNonStateSynchNode: &RESTART_PROTON_SERVICE_ON_NON_STATE_SYNCH_NODE
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[1]"
    managers: 'nsxmanager.[-1]'
    ipaddress: 'nsxmanager.[1].state_synch_node.[1]->read->ipaddress'
    service_name: 'proton'
    non_state_synch_node_service_status: 'restart'

  RestartRabbitmqServiceOnNonStateSynchNode: &RESTART_RABBITMQ_SERVICE_ON_NON_STATE_SYNCH_NODE
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[1]"
    managers: 'nsxmanager.[-1]'
    ipaddress: 'nsxmanager.[1].state_synch_node.[1]->read->ipaddress'
    service_name: 'rabbitmq'
    non_state_synch_node_service_status: 'restart'

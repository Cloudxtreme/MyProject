IPPoolWorkloads: &IPPoolWorkloads

  SetIPPoolId:
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    ippool:
      '[1]':
        map_object: true
        id_: 'incorrect_id'

  SetIPPool1IdForNode2:
    Type: "NSX"
    TestNSX: "nsxmanager.[2]"
    ippool:
      '[1]':
        map_object: true
        id_: 'nsxmanager.[1].ippool.[1]'

  CreateIPPool1From_Node1: &CREATE_IPPOOL_1
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    ippool:
      '[1]':
        name: 'autogenerate'
        summary: "IPPool-1 created through automation"
        subnets:
          - allocation_ranges:
            - end: 192.168.1.10
              begin: 192.168.1.2
            - end: 192.168.1.20
              begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPool2From_Node1: &CREATE_IPPOOL_2
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    ippool:
      '[2]':
        name: 'autogenerate'
        summary: "IPPool-2 created through automation"
        subnets:
          - allocation_ranges:
            - end: 192.168.1.10
              begin: 192.168.1.2
            - end: 192.168.1.20
              begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPool3From_Node1: &CREATE_IPPOOL_3
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    ippool:
      '[3]':
        name: 'autogenerate'
        summary: "IPPool-3 created through automation"
        subnets:
          - allocation_ranges:
            - end: 192.168.1.10
              begin: 192.168.1.2
            - end: 192.168.1.20
              begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPool2From_Node2: &CREATE_IPPOOL_2_FROM_NODE2
    Type: "NSX"
    TestNSX: "nsxmanager.[2]"
    ippool:
      '[2]':
        name: 'autogenerate'
        summary: "IPPool-2 created through automation"
        subnets:
          - allocation_ranges:
            - end: 192.168.1.10
              begin: 192.168.1.2
            - end: 192.168.1.20
              begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPool3From_Node3: &CREATE_IPPOOL_3_FROM_NODE3
    <<: *CREATE_IPPOOL_3
    TestNSX: "nsxmanager.[3]"

  CreateIPPool3From_Node7: &CREATE_IPPOOL_3_FROM_NODE7
    <<: *CREATE_IPPOOL_3
    TestNSX: "nsxmanager.[7]"

  CreateIPPoolFrom_Node1_1_to_10: &CREATE_1_TO_10_IPPOOL_FROM_NODE1
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    ippool:
      '[1-10]':
        name: 'autogenerate'
        summary: "IPPool created through automation"
        subnets:
          - allocation_ranges:
            - end: 192.168.1.10
              begin: 192.168.1.2
            - end: 192.168.1.20
              begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPoolFrom_Node4_1_to_10:
    Type: "NSX"
    TestNSX: "nsxmanager.[4]"
    ippool:
      '[1-10]':
        name: 'autogenerate'
        summary: "IPPool created through automation"
        subnets:
          - allocation_ranges:
            - end: 192.168.1.10
              begin: 192.168.1.2
            - end: 192.168.1.20
              begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPoolFrom_Node3_11_to_20: &CREATE_11_TO_20_IPPOOL_FROM_NODE3
    Type: "NSX"
    TestNSX: "nsxmanager.[3]"
    ippool:
      '[11-20]':
        name: 'autogenerate'
        summary: "IPPool created through automation"
        subnets:
          - allocation_ranges:
            - end: 192.168.1.10
              begin: 192.168.1.2
            - end: 192.168.1.20
              begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPoolFrom_Node4_11_to_20:
    Type: "NSX"
    TestNSX: "nsxmanager.[4]"
    ippool:
      '[11-20]':
        name: 'autogenerate'
        summary: "IPPool created through automation"
        subnets:
          - allocation_ranges:
            - end: 192.168.1.10
              begin: 192.168.1.2
            - end: 192.168.1.20
              begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPool1From_Node5: &CREATE_IPPOOL_1_FROM_NODE5
    Type: "NSX"
    TestNSX: "nsxmanager.[5]"
    ippool:
      '[1]':
        name: 'autogenerate'
        summary: "IPPool-1 created through automation"
        subnets:
          - allocation_ranges:
            - end: 192.168.1.10
              begin: 192.168.1.2
            - end: 192.168.1.20
              begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPool1From_Node6: &CREATE_IPPOOL_1_FROM_NODE6
    Type: "NSX"
    TestNSX: "nsxmanager.[6]"
    ippool:
      '[1]':
        name: 'autogenerate'
        summary: "IPPool-1 created through automation"
        subnets:
          - allocation_ranges:
            - end: 192.168.1.10
              begin: 192.168.1.2
            - end: 192.168.1.20
              begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPool2From_Node6: &CREATE_IPPOOL_2_FROM_NODE6
    Type: "NSX"
    TestNSX: "nsxmanager.[6]"
    ippool:
      '[2]':
        name: 'autogenerate'
        summary: "IPPool-2 created through automation"
        subnets:
          - allocation_ranges:
            - end: 192.168.1.10
              begin: 192.168.1.2
            - end: 192.168.1.20
              begin: 192.168.1.11
            cidr: 192.168.1.0/24
            gateway_ip: 192.168.1.255
            servers:
              - 192.1.1.1

  CreateIPPool1From_Node4: &CREATE_IPPOOL_1_FROM_NODE4
    <<: *CREATE_IPPOOL_1
    TestNSX: "nsxmanager.[4]"

  ReadIPPool1From_Node1: &READ_IP_POOL_1_FROM_NODE_1
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[1].ippool.[1]"
    read:
      'name[?]defined': ''
      'summary[?]equal_to': "IPPool-1 created through automation"

  ReadIPPool1From_Node5: &READ_IP_POOL_1_FROM_NODE_5
    <<: *READ_IP_POOL_1_FROM_NODE_1
    Testgroupingobject: "nsxmanager.[5].ippool.[1]"

  ReadIPPool1From_Node6: &READ_IP_POOL_1_FROM_NODE_6
    <<: *READ_IP_POOL_1_FROM_NODE_1
    Testgroupingobject: "nsxmanager.[6].ippool.[1]"

  ReadIPPool1From_Node7: &READ_IP_POOL_1_FROM_NODE_7
    <<: *READ_IP_POOL_1_FROM_NODE_1
    Testgroupingobject: "nsxmanager.[7].ippool.[1]"

  ReadIPPool1From_Node8: &READ_IP_POOL_1_FROM_NODE_8
    <<: *READ_IP_POOL_1_FROM_NODE_1
    Testgroupingobject: "nsxmanager.[8].ippool.[1]"

  ReadIPPool8From_Node1_For_1_10: &READ_IP_POOL_8_FROM_NODE_1_For_1_10
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[1].ippool.[8]"
    read:
      'name[?]defined': ''
      'summary[?]equal_to': "IPPool created through automation"

  ReadIPPool1From_Node2_For_1_10: &READ_IP_POOL_1_FROM_NODE_2_For_1_10
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[2].ippool.[1]"
    read:
      'name[?]defined': ''
      'summary[?]equal_to': "IPPool created through automation"

  ReadIPPool1From_Node1_For_1_10: &READ_IP_POOL_1_FROM_NODE_1_For_1_10
    <<: *READ_IP_POOL_1_FROM_NODE_2_For_1_10
    Testgroupingobject: "nsxmanager.[1].ippool.[1]"

  ReadIPPool1From_Node3_For_1_10: &READ_IP_POOL_1_FROM_NODE_3_For_1_10
    <<: *READ_IP_POOL_1_FROM_NODE_2_For_1_10
    Testgroupingobject: "nsxmanager.[3].ippool.[1]"

  ReadIPPool4From_Node3_For_1_10: &READ_IP_POOL_4_FROM_NODE_3_For_1_10
    <<: *READ_IP_POOL_1_FROM_NODE_2_For_1_10
    Testgroupingobject: "nsxmanager.[3].ippool.[4]"

  ReadIPPool2From_Node3_For_1_10: &READ_IP_POOL_2_FROM_NODE_3_For_1_10
    <<: *READ_IP_POOL_1_FROM_NODE_2_For_1_10
    Testgroupingobject: "nsxmanager.[3].ippool.[2]"

  ReadIPPoolFrom_Node1_For_1_10: &READ_IP_POOL_FROM_NODE_1_FOR_1_TO_10
    Type: "GroupingObject"
    TestGroupingObject: "nsxmanager.[1].ippool.[1]"
    get_pool_list:
      'results[?]contain_once':
        - id_: "nsxmanager.[1].ippool.[1]"
        - id_: "nsxmanager.[1].ippool.[2]"
        - id_: "nsxmanager.[1].ippool.[3]"
        - id_: "nsxmanager.[1].ippool.[4]"
        - id_: "nsxmanager.[1].ippool.[5]"
        - id_: "nsxmanager.[1].ippool.[6]"
        - id_: "nsxmanager.[1].ippool.[7]"
        - id_: "nsxmanager.[1].ippool.[8]"
        - id_: "nsxmanager.[1].ippool.[9]"
        - id_: "nsxmanager.[1].ippool.[10]"

  ReadIPPoolFrom_Node2_For_1_10: &READ_IP_POOL_FROM_NODE_2_FOR_1_TO_10
    Type: "GroupingObject"
    TestGroupingObject: "nsxmanager.[2].ippool.[1]"
    get_pool_list:
      'results[?]contain_once':
        - id_: "nsxmanager.[2].ippool.[1]"
        - id_: "nsxmanager.[2].ippool.[2]"
        - id_: "nsxmanager.[2].ippool.[3]"
        - id_: "nsxmanager.[2].ippool.[4]"
        - id_: "nsxmanager.[2].ippool.[5]"
        - id_: "nsxmanager.[2].ippool.[6]"
        - id_: "nsxmanager.[2].ippool.[7]"
        - id_: "nsxmanager.[2].ippool.[8]"
        - id_: "nsxmanager.[2].ippool.[9]"
        - id_: "nsxmanager.[2].ippool.[10]"

  ReadIPPoolFrom_Node3_For_1_10: &READ_IP_POOL_FROM_NODE_3_FOR_1_TO_10
    Type: "GroupingObject"
    TestGroupingObject: "nsxmanager.[3].ippool.[1]"
    get_pool_list:
      'results[?]contain_once':
        - id_: "nsxmanager.[3].ippool.[1]"
        - id_: "nsxmanager.[3].ippool.[2]"
        - id_: "nsxmanager.[3].ippool.[3]"
        - id_: "nsxmanager.[3].ippool.[4]"
        - id_: "nsxmanager.[3].ippool.[5]"
        - id_: "nsxmanager.[3].ippool.[6]"
        - id_: "nsxmanager.[3].ippool.[7]"
        - id_: "nsxmanager.[3].ippool.[8]"
        - id_: "nsxmanager.[3].ippool.[9]"
        - id_: "nsxmanager.[3].ippool.[10]"

  ReadIPPoolFrom_Node1_For_11_20: &READ_IP_POOL_FROM_NODE_1_FOR_11_TO_20
    Type: "GroupingObject"
    TestGroupingObject: "nsxmanager.[1].ippool.[1]"
    get_pool_list:
      'results[?]contain_once':
        - id_: "nsxmanager.[1].ippool.[11]"
        - id_: "nsxmanager.[1].ippool.[12]"
        - id_: "nsxmanager.[1].ippool.[13]"
        - id_: "nsxmanager.[1].ippool.[14]"
        - id_: "nsxmanager.[1].ippool.[15]"
        - id_: "nsxmanager.[1].ippool.[16]"
        - id_: "nsxmanager.[1].ippool.[17]"
        - id_: "nsxmanager.[1].ippool.[18]"
        - id_: "nsxmanager.[1].ippool.[19]"
        - id_: "nsxmanager.[1].ippool.[20]"

  ReadIPPoolFrom_Node3_For_11_20: &READ_IP_POOL_FROM_NODE_3_FOR_11_TO_20
    Type: "GroupingObject"
    TestGroupingObject: "nsxmanager.[3].ippool.[1]"
    get_pool_list:
      'results[?]contain_once':
        - id_: "nsxmanager.[3].ippool.[11]"
        - id_: "nsxmanager.[3].ippool.[12]"
        - id_: "nsxmanager.[3].ippool.[13]"
        - id_: "nsxmanager.[3].ippool.[14]"
        - id_: "nsxmanager.[3].ippool.[15]"
        - id_: "nsxmanager.[3].ippool.[16]"
        - id_: "nsxmanager.[3].ippool.[17]"
        - id_: "nsxmanager.[3].ippool.[18]"
        - id_: "nsxmanager.[3].ippool.[19]"
        - id_: "nsxmanager.[3].ippool.[20]"

  UpdateIPPool1From_Node2_For_1_10: &UPDATE_IP_POOL_1_FROM_NODE_2_For_1_10
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[2].ippool.[1]"
    reconfigure: true
    name: "Auto-IPPool-1"
    summary: "IPPool Modified through automation"

  UpdateIPPool2From_Node3_For_1_10: &UPDATE_IP_POOL_2_FROM_NODE_3_For_1_10
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[3].ippool.[2]"
    reconfigure: true
    name: "Auto-IPPool-2"
    summary: "IPPool Modified through automation"

  ReadPPool1From_Node2_For_1_10_After_Update: &READ_IP_POOL_2_FROM_NODE_2_For_1_10_AFTER_UPDATE
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[2].ippool.[1]"
    read:
      'name[?]equal_to': 'Auto-IPPool-1'
      'summary[?]equal_to': "IPPool Modified through automation"

  ReadPPool2From_Node3_For_1_10_After_Update: &READ_IP_POOL_2_FROM_NODE_3_For_1_10_AFTER_UPDATE
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[3].ippool.[2]"
    read:
      'name[?]equal_to': 'Auto-IPPool-2'
      'summary[?]equal_to': "IPPool Modified through automation"

  ReadIPPoolFrom_Node2: &READ_IP_POOL_FROM_NODE_2
    <<: *READ_IP_POOL_1_FROM_NODE_1
    Testgroupingobject: "nsxmanager.[2].ippool.[1]"

  ReadIPPool2From_Node2: &READ_IP_POOL_2_FROM_NODE_2
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[2].ippool.[2]"
    read:
      'name[?]defined': ''
      'summary[?]equal_to': "IPPool-2 created through automation"

  ReadIPPool2From_Node1: &READ_IP_POOL_2_FROM_NODE_1
    <<: *READ_IP_POOL_2_FROM_NODE_2
    Testgroupingobject: "nsxmanager.[1].ippool.[2]"

  ReadIPPool2From_Node3: &READ_IP_POOL_2_FROM_NODE_3
    <<: *READ_IP_POOL_2_FROM_NODE_2
    Testgroupingobject: "nsxmanager.[3].ippool.[2]"

  ReadIPPoolFrom_Node3: &READ_IP_POOL_FROM_NODE_3
    <<: *READ_IP_POOL_1_FROM_NODE_1
    Testgroupingobject: "nsxmanager.[3].ippool.[1]"

  ReadIPPool3From_Node3: &READ_IP_POOL_3_FROM_NODE_3
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[3].ippool.[3]"
    read:
      'name[?]defined': ''
      'summary[?]equal_to': "IPPool-3 created through automation"

  ReadIPPool3From_Node7: &READ_IP_POOL_3_FROM_NODE_7
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[7].ippool.[3]"
    read:
      'name[?]defined': ''
      'summary[?]equal_to': "IPPool-3 created through automation"

  ReadIPPool3From_Node8: &READ_IP_POOL_3_FROM_NODE_8
    <<: *READ_IP_POOL_3_FROM_NODE_7
    Testgroupingobject: "nsxmanager.[8].ippool.[3]"

  UpdateIPPoolFrom_Node1: &UPDATE_IP_POOL_FROM_NODE_1
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[1].ippool.[1]"
    reconfigure: true
    name: "Auto-IPPool-1"
    summary: "Updated summary"

  UpdateIPPoolFrom_Node2: &UPDATE_IP_POOL_FROM_NODE_2
    <<: *UPDATE_IP_POOL_FROM_NODE_1
    Testgroupingobject: "nsxmanager.[2].ippool.[1]"

  UpdateIPPoolFrom_Node3: &UPDATE_IP_POOL_FROM_NODE_3
    <<: *UPDATE_IP_POOL_FROM_NODE_1
    Testgroupingobject: "nsxmanager.[3].ippool.[1]"

  ReadIPPoolFrom_Node1_After_Update: &READ_IP_POOL_AFTER_UPDATE
    Type: "GroupingObject"
    Testgroupingobject: "nsxmanager.[1].ippool.[1]"
    read:
      'name[?]defined': 'Auto-IPPool-1'
      'summary[?]equal_to': "Updated summary"

  ReadIPPoolFrom_Node2_After_Update:
    <<: *READ_IP_POOL_AFTER_UPDATE
    Testgroupingobject: "nsxmanager.[2].ippool.[1]"

  ReadIPPoolFrom_Node3_After_Update:
    <<: *READ_IP_POOL_AFTER_UPDATE
    Testgroupingobject: "nsxmanager.[3].ippool.[1]"

  ReadIPPoolsFromAllNodes: &READ_IP_POOLS_FROM_ALL_NODES
    - ["ReadIPPool1From_Node1"]
    - ["ReadIPPool2From_Node2"]
    - ["ReadIPPool3From_Node3"]

  VerifyIPPoolList_Count_0: &READ_IP_POOL_COUNT_0
    Type: "GroupingObject"
    TestGroupingObject: "nsxmanager.[1].ippool.[1]"
    get_pool_list:
      'result_count[?]equal_to': 0

  VerifyIPPoolList_Count_1: &READ_IP_POOL_COUNT
    Type: "GroupingObject"
    TestGroupingObject: "nsxmanager.[1].ippool.[1]"
    get_pool_list:
      'result_count[?]equal_to': 1

  VerifyIPPoolList_Count_1_From_Node4: &READ_IP_POOL_COUNT_1_FROM_NODE4
    <<: *READ_IP_POOL_COUNT
    TestGroupingObject: "nsxmanager.[4].ippool.[1]"

  VerifyIPPoolList_Count_2_From_Node1: &READ_IP_POOL_COUNT_2_FROM_NODE1
    Type: "GroupingObject"
    TestGroupingObject: "nsxmanager.[1].ippool.[1]"
    get_pool_list:
      'result_count[?]equal_to': 2

  VerifyIPPoolList_Count_2_From_Node2: &READ_IP_POOL_COUNT_2_FROM_NODE2
    <<: *READ_IP_POOL_COUNT_2_FROM_NODE1
    TestGroupingObject: "nsxmanager.[2].ippool.[1]"

  VerifyIPPoolList_Count_2_From_Node3: &READ_IP_POOL_COUNT_2_FROM_NODE3
    <<: *READ_IP_POOL_COUNT_2_FROM_NODE1
    TestGroupingObject: "nsxmanager.[3].ippool.[1]"

  VerifyIPPoolList_Count_3: &READ_IP_POOL_COUNT_3_FROM_NODE1
    <<: *READ_IP_POOL_COUNT
    get_pool_list:
      'result_count[?]equal_to': 3

  VerifyIPPoolList_Count_3_From_Node2: &READ_IP_POOL_COUNT_3_FROM_NODE2
    <<: *READ_IP_POOL_COUNT_3_FROM_NODE1

  VerifyIPPoolList_Count_3_From_Node3: &READ_IP_POOL_COUNT_3_FROM_NODE3
    <<: *READ_IP_POOL_COUNT_3_FROM_NODE1

  VerifyIPPoolList_Count_10_From_Node1: &READ_IP_POOL_COUNT_10_FROM_NODE1
    Type: "GroupingObject"
    TestGroupingObject: "nsxmanager.[1].ippool.[1]"
    get_pool_list:
      'result_count[?]equal_to': 10

  VerifyIPPoolList_Count_10_From_Node2: &READ_IP_POOL_COUNT_10_FROM_NODE2
    <<: *READ_IP_POOL_COUNT_10_FROM_NODE1
    TestGroupingObject: "nsxmanager.[2].ippool.[1]"

  VerifyIPPoolList_Count_10_From_Node3: &READ_IP_POOL_COUNT_10_FROM_NODE3
    <<: *READ_IP_POOL_COUNT_10_FROM_NODE1
    TestGroupingObject: "nsxmanager.[3].ippool.[1]"

  VerifyIPPoolList_Count_10_From_Node4: &READ_IP_POOL_COUNT_10_FROM_NODE4
    <<: *READ_IP_POOL_COUNT_10_FROM_NODE1
    TestGroupingObject: "nsxmanager.[4].ippool.[1]"

  VerifyIPPoolList_Count_10_From_Node5: &READ_IP_POOL_COUNT_10_FROM_NODE5
    <<: *READ_IP_POOL_COUNT_10_FROM_NODE1
    TestGroupingObject: "nsxmanager.[5].ippool.[1]"

  VerifyIPPoolList_Count_10_From_Node6: &READ_IP_POOL_COUNT_10_FROM_NODE6
    <<: *READ_IP_POOL_COUNT_10_FROM_NODE1
    TestGroupingObject: "nsxmanager.[6].ippool.[1]"

  VerifyIPPoolList_Count_20_From_Node4: &READ_IP_POOL_COUNT_20_FROM_NODE4
    Type: "GroupingObject"
    TestGroupingObject: "nsxmanager.[4].ippool.[1]"
    get_pool_list:
      'result_count[?]equal_to': 20

  VerifyIPPoolList_Count_20_From_Node6: &READ_IP_POOL_COUNT_20_FROM_NODE6
    <<: *READ_IP_POOL_COUNT_20_FROM_NODE4
    TestGroupingObject: "nsxmanager.[6].ippool.[1]"

  VerifyIPPoolList_Count_20:
    <<: *READ_IP_POOL_COUNT
    get_pool_list:
      'result_count[?]equal_to': 20

  VerifyIPPoolList_Count_1_From_Node5: &READ_IP_POOL_COUNT_1_FROM_NODE5
    <<: *READ_IP_POOL_COUNT
    TestGroupingObject: "nsxmanager.[5].ippool.[1]"

  VerifyIPPoolList_Count_1_From_Node6: &READ_IP_POOL_COUNT_1_FROM_NODE6
    <<: *READ_IP_POOL_COUNT
    TestGroupingObject: "nsxmanager.[6].ippool.[2]"

  DeleteIPPool1From_Node1: &DELETE_IPPOOL_1_FROM_NODE_1
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    deleteippool: "nsxmanager.[1].ippool.[1]"

  DeleteIPPool1From_Node2: &DELETE_IPPOOL_1_FROM_NODE_2
    Type: "NSX"
    TestNSX: "nsxmanager.[2]"
    deleteippool: "nsxmanager.[1].ippool.[1]"

  DeleteIPPool1From_Node3: &DELETE_IPPOOL_1_FROM_NODE_3
    Type: "NSX"
    TestNSX: "nsxmanager.[3]"
    deleteippool: "nsxmanager.[3].ippool.[1]"

  DeleteAllIPPoolsFrom_Node1: &DELETE_ALL_IPPOOLS
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    deleteippool: "nsxmanager.[1].ippool.[-1]"

  DeleteAllIPPoolsFrom_Node2: &DELETE_ALL_IPPOOLS_FROM_NODE_2
    Type: "NSX"
    TestNSX: "nsxmanager.[2]"
    deleteippool: "nsxmanager.[2].ippool.[-1]"

  DeleteAllIPPoolsFrom_Node3: &DELETE_ALL_IPPOOLS_FROM_NODE_3
    <<: *DELETE_ALL_IPPOOLS
    TestNSX: "nsxmanager.[3]"

  DeleteAllIPPoolsFrom_Node4:
    Type: "NSX"
    TestNSX: "nsxmanager.[4]"
    deleteippool: "nsxmanager.[4].ippool.[-1]"

  DeleteAllIPPoolsFrom_Node6:
    Type: "NSX"
    TestNSX: "nsxmanager.[6]"
    deleteippool: "nsxmanager.[6].ippool.[-1]"

  Discover2FabricHosts:
      Type: NSX
      TestNSX: 'nsxmanager.[1]'
      hostnode:
          '[1-2]':
              discover: 'true'
              ip_addresses: 'esx.[x=hostnode_index]'

ApplianceManagementWorkloads: &ApplianceManagementWorkloads

  SetServiceId: &SET_NTP_SERVICE_ID
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    nsxservice:
      '[1]':
        map_object: true
        id_: 'service'

  RestartProtonService: &RESTART_PROTON_SERVICE
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[1]"
    configure_service_state:
      state: 'restart'
      service_name: 'proton'

  RestartRabbitmqService: &RESTART_RABBITMQ_SERVICE
    Type: "Service"
    TestService: "nsxmanager.[1].nsxservice.[1]"
    configure_service_state:
      state: 'restart'
      service_name: 'rabbitmq'

AAA_WORKLOADS: &AAA_WORKLOADS

  SetAAAId: &SET_AAA_ID
    Type: "NSX"
    TestNSX: "nsxmanager.[1]"
    aaa_provider:
        '[1]':
            map_object: true
            id_: 1

  UpdateProviderListForNode1: &UPDATE_PROVIDER_LIST_FOR_NODE_1
    Type: "AAA"
    Testaaa: "nsxmanager.[1].aaa_provider.[1]"
    reconfigure: true
    provider_list:
      - resource_type: "TacacsPlusAAAProviderGroupProperties"
        auth_type: "CHAP"
        servers:
          - address: 'authserver.[1]->ip'
            secret_key: "testing123"

  UpdateProviderListForNode2: &UPDATE_PROVIDER_LIST_FOR_NODE_2
    Type: "AAA"
    Testaaa: "nsxmanager.[2].aaa_provider.[1]"
    reconfigure: true
    provider_list:
      - resource_type: "TacacsPlusAAAProviderGroupProperties"
        auth_type: "CHAP"
        servers:
          - address: 'authserver.[1]->ip'
            secret_key: "testing123"

  UpdateProviderListForNode3: &UPDATE_PROVIDER_LIST_FOR_NODE_3
    Type: "AAA"
    Testaaa: "nsxmanager.[3].aaa_provider.[1]"
    reconfigure: true
    provider_list:
      - resource_type: "TacacsPlusAAAProviderGroupProperties"
        auth_type: "CHAP"
        servers:
          - address: 'authserver.[1]->ip'
            secret_key: "testing123"

  AddUser: &ADD_USER
    Type: AuthServer
    TestAuthServer: "authserver.[1]"
    sleepbetweenworkloads:  "10"
    add_user:
        username: 'sysadmin'
        password: 'admin123'
        service: 'vmware_nsx'

  BackupDefaultConfig: &BACKUP_DEFAULT_CONFIG
    Type: AuthServer
    TestAuthServer: "authserver.[1]"
    sleepbetweenworkloads:  "30"
    backup_config_file:
        file_name: 'tbackup.conf'

  RestoreDefaultConfig: &RESTORE_DEFAULT_CONFIG
    Type: AuthServer
    TestAuthServer: "authserver.[1]"
    sleepbetweenworkloads:  "30"
    restore_config_file:
        file_name: 'tbackup.conf'

  VerifyProviderList: &VERIFY_PROVIDER_LIST
    Type: "AAA"
    Testaaa: "nsxmanager.[1].aaa_provider.[1]"
    get_provider_list:
        'provider_list[?]contains':
          - 'resource_type[?]equal_to': "TacacsPlusAAAProviderGroupProperties"
            'auth_type[?]equal_to': "CHAP"

  StopAuthServer: &STOP_AUTH_SERVER
    Type: AuthServer
    TestAuthServer: "authserver.[1]"
    state: 'stop'
    configure_service_state:
        'content[?]match': 'Stopping TACACS+'

  StartAuthServer: &START_AUTH_SERVER
    Type: AuthServer
    TestAuthServer: "authserver.[1]"
    sleepbetweenworkloads:  "10"
    state: 'start'
    configure_service_state:
        'content[?]match': 'Starting TACACS+'

MessagingWorkloads: &MessagingWorkloads
  GetClients: &GET_CLIENTS
    Type: 'NSX'
    TestNSX: 'nsxmanager.[1]'
    messagingclient:
      '[1-5]':
        result_object: 'results'

  VerifyClientList: &VERIFY_CLIENT_LIST
    Type: 'Messaging'
    TestMessaging: 'nsxmanager.[1].messagingclient.[1]'
    get_clients_list:
      'result_count[?]equal_to': '5'

  VerifyClientByTypeHv: &VERIFY_CLIENT_BY_TYPE_HV
    Type: 'Messaging'
    TestMessaging: 'nsxmanager.[1].messagingclient.[1]'
    client_type: 'cvn-hv'
    get_clients_by_type:
      'result_count[?]equal_to': '2'

  VerifyClientByTypeCCP: &VERIFY_CLIENT_BY_TYPE_CCP
    Type: 'Messaging'
    TestMessaging: 'nsxmanager.[1].messagingclient.[1]'
    client_type: 'cvn-ccp'
    get_clients_by_type:
      'result_count[?]equal_to': '3'

  PingClient_1: &PING_CLIENT_1
    Type: 'Messaging'
    TestMessaging: 'nsxmanager.[1].messagingclient.[1]'
    noofretries: 3
    sleepbetweenretry: 60
    ping_client:
      'client_status[?]equal_to': 'true'

  PingClient_2: &PING_CLIENT_2
    <<: *PING_CLIENT_1
    TestMessaging: 'nsxmanager.[1].messagingclient.[2]'

  PingClient_3: &PING_CLIENT_3
    <<: *PING_CLIENT_1
    TestMessaging: 'nsxmanager.[1].messagingclient.[3]'

  PingClient_4: &PING_CLIENT_4
    <<: *PING_CLIENT_1
    TestMessaging: 'nsxmanager.[1].messagingclient.[4]'


  PingClient_5: &PING_CLIENT_5
    <<: *PING_CLIENT_1
    TestMessaging: 'nsxmanager.[1].messagingclient.[5]'

  VerifyHeartbeatStatusOfClient1: &VERIFY_HEARTBEAT_STATUS_OF_CLIENT_1
    Type: 'Messaging'
    TestMessaging: 'nsxmanager.[1].messagingclient.[1]'
    noofretries: 3
    sleepbetweenretry: 60
    heartbeat_status:
      'client_status[?]equal_to': 'UP'

  VerifyHeartbeatStatusOfClient2: &VERIFY_HEARTBEAT_STATUS_OF_CLIENT_2
    <<: *VERIFY_HEARTBEAT_STATUS_OF_CLIENT_1
    TestMessaging: 'nsxmanager.[1].messagingclient.[2]'

  VerifyHeartbeatStatusOfClient3: &VERIFY_HEARTBEAT_STATUS_OF_CLIENT_3
    <<: *VERIFY_HEARTBEAT_STATUS_OF_CLIENT_1
    TestMessaging: 'nsxmanager.[1].messagingclient.[3]'

  VerifyHeartbeatStatusOfClient4: &VERIFY_HEARTBEAT_STATUS_OF_CLIENT_4
    <<: *VERIFY_HEARTBEAT_STATUS_OF_CLIENT_1
    TestMessaging: 'nsxmanager.[1].messagingclient.[4]'

  VerifyHeartbeatStatusOfClient5: &VERIFY_HEARTBEAT_STATUS_OF_CLIENT_5
    <<: *VERIFY_HEARTBEAT_STATUS_OF_CLIENT_1
    TestMessaging: 'nsxmanager.[1].messagingclient.[5]'

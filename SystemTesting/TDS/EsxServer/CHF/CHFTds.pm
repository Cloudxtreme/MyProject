#!/usr/bin/perl

########################################################################
# Copyright (C) 2011 VMWare, Inc.
# # All Rights Reserved
########################################################################
package TDS::EsxServer::CHF::CHFTds;

#
# This file contains the structured hash for CHF category,
# The following lines explain the keys of the internal
# hash in general.
#

use FindBin;
use lib "$FindBin::Bin/..";
use TDS::Main::VDNetMainTds;
use Data::Dumper;

@ISA = qw(TDS::Main::VDNetMainTds);

{
   # List of tests in this test category, refer the excel sheet TDS
   @TESTS = ("Configuration","InvalidConfiguration","OpaqueChannel","OpaqueChannelInvalid",
             "ConnectivityUnicast","IsolationUnicast","ConnectivityMulticast",
             "IsolationMulticast","ConnectivityBroadcast","IsolationBroadcast",
             "PartialDeploy","JumboFrame","VLANVST","VLANVGT","VLANConflict","PVLAN",
             "NetFence","InvalidNetFence","vMotion","Teaming","ConfigurationPersistence",
             "Offloading","StressLongevity","DVPort","Limitation","IPv6","DVShaper",
             "DVMirror");
   %CHF = (
      'Configuration' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "rpmt,bqmt",
         TestName          => "Configuration",
         Summary           => "Verify configuration of cross-host fencing",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['CreateChfInstance'],['AddFenceID'],
                                  ['DeleteFenceID'],['DisableBC'],
                                  ['EnableBC']],
            ExitSequence      => [['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],
                                  ['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "DisableBC"        => {
               Type           => "VC",
               OPT            => "disableBC",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "EnableBC"        => {
               Type           => "VC",
               OPT            => "enableBC",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'InvalidConfiguration' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         TestName          => "InvalidConfiguration",
         Summary           => "Verify invalid configuration of cross-host fencing",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['ChangeVnicPortgroup_1'],['AddFenceID'],
                                  ['CreateChfInstance'],['AddFenceID'],
                                  ['DeleteFenceID']],
            ExitSequence      => [['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],
                                  ['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "-1",
               ExpectedResult => "FAIL",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'OpaqueChannel' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         TestName          => "OpaqueChannel",
         Summary           => "Verify OpaqueChannel configuration of cross-host fencing",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               host        => 1,
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],['AddFenceID'],
                                  ['DeleteFenceID'],['DisableBC'],
                                  ['EnableBC'],['RemoveChfInstance']],
            ExitSequence      => [['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "DisableBC"        => {
               Type           => "VC",
               OPT            => "disableBC",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "EnableBC"        => {
               Type           => "VC",
               OPT            => "enableBC",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'OpaqueChannelInvalid' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         TestName          => "OpaqueChannelInvalid",
         Summary           => "Verify OpaqueChannel invalid configuration of cross-host fencing",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               host        => 1,
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance_1'],
                                  ['CreateChfInstance_2'],
                                  ['AddFenceID_1'],['AddFenceID_2'],
                                  ['DeleteFenceID'],['DisableBC'],
                                  ['EnableBC'],['RemoveChfInstance']],
            ExitSequence      => [['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance_1" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "vds",
               ExpectedResult => "FAIL",
            },
            "CreateChfInstance_2" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "AddFenceID_1"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "pg",
               FenceId        => "99",
               ExpectedResult => "FAIL",
            },
            "AddFenceID_2"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "-1",
               ExpectedResult => "FAIL",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "vds",
               PortGroupName  => "chfpg",
               ExpectedResult => "FAIL",
            },
            "DisableBC"        => {
               Type           => "VC",
               OPT            => "disableBC",
               VDSName        => "chfvds",
               PortGroupName  => "pg",
               ExpectedResult => "FAIL",
            },
            "EnableBC"        => {
               Type           => "VC",
               OPT            => "enableBC",
               VDSName        => "vds",
               PortGroupName  => "chfpg",
               ExpectedResult => "FAIL",
            },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "vds",
               ExpectedResult => "FAIL",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'ConnectivityUnicast' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "rpmt,bqmt",
         TestName          => "ConnectivityUnicast",
         Summary           => "Verify unicast in the same fence network",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['AddFenceID'],['Iperf']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "Iperf" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofInbound    => "1",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'IsolationUnicast' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "bqmt",
         TestName          => "IsolationUnicast",
         Summary           => "Verify unicast in different fence networks",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['ChangeVnicPortgroup_2'],['AddFenceID_1'],
                                  ['AddFenceID_2'],['Iperf']],
            ExitSequence      => [['DeleteFenceID_1'],['DeleteFenceID_2'],
                                  ['ChangeVnicPortgroup_3'],
                                  ['RemoveChfInstance'],
                                  ['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg1,chfpg2",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg1,chfpg2",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg1",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg2",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID_1"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
               FenceId        => "100",
            },
            "AddFenceID_2"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
               FenceId        => "99",
            },
            "Iperf" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofInbound    => "1",
               expectedresult => "FAIL",
            },
            "DeleteFenceID_1"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
            },
            "DeleteFenceID_2"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
            },
            "ChangeVnicPortgroup_3" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'ConnectivityMulticast' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "rpmt,bqmt",
         TestName          => "ConnectivityMulticast",
         Summary           => "Verify multicast in the same fence network",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['AddFenceID'],['Iperf']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "Iperf" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               routingscheme  => "multicast",
               multicasttimetolive =>"32",
               NoofInbound    => "1",
               Verification   => "PktCap",
               VerificationResult => "PASS",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'IsolationMulticast' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "bqmt",
         TestName          => "IsolationMulticast",
         Summary           => "Verify multicast in different fence networks",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['ChangeVnicPortgroup_2'],['AddFenceID_1'],
                                  ['AddFenceID_2'],['Iperf']],
            ExitSequence      => [['DeleteFenceID_1'],['DeleteFenceID_2'],
                                  ['ChangeVnicPortgroup_3'],
                                  ['RemoveChfInstance'],
                                  ['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg1,chfpg2",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg1,chfpg2",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg1",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg2",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID_1"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
               FenceId        => "100",
            },
            "AddFenceID_2"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
               FenceId        => "99",
            },
            "Iperf" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               routingscheme  => "multicast",
               multicasttimetolive =>"32",
               NoofInbound    => "1",
               Verification   => "PktCap",
               VerificationResult => "FAIL",
            },
            "DeleteFenceID_1"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
            },
            "DeleteFenceID_2"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
            },
            "ChangeVnicPortgroup_3" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'ConnectivityBroadcast' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "rpmt,bqmt",
         TestName          => "ConnectivityBroadcast",
         Summary           => "Verify Broadcast in the same fence network",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['AddFenceID'],['Ping']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "Ping" => {
               Type           => "Traffic",
               ToolName       => "ping",
               RoutingScheme  => "broadcast",
               NoofOutbound   => "1",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'IsolationBroadcast' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "bqmt",
         TestName          => "IsolationBroadcast",
         Summary           => "Verify broadcast in different fence networks",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['ChangeVnicPortgroup_2'],['AddFenceID_1'],
                                  ['AddFenceID_2'],['Ping']],
            ExitSequence      => [['DeleteFenceID_1'],['DeleteFenceID_2'],
                                  ['ChangeVnicPortgroup_3'],
                                  ['RemoveChfInstance'],
                                  ['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg1,chfpg2",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg1,chfpg2",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg1",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg2",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID_1"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
               FenceId        => "100",
            },
            "AddFenceID_2"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
               FenceId        => "99",
            },
            "Ping" => {
               Type           => "Traffic",
               ToolName       => "ping",
               RoutingScheme  => "broadcast",
               NoofOutbound   => "1",
               expectedresult => "FAIL",
            },
            "DeleteFenceID_1"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
            },
            "DeleteFenceID_2"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
            },
            "ChangeVnicPortgroup_3" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'PartialDeploy' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         TestName          => "PartialDeploy",
         Summary           => "Verify partially deployed fence network",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
            helper2        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['ChangeVnicPortgroup_2'],['AddFenceID'],
                                  ['Iperf_1'],['ChangeVnicPortgroup_3'],
                                  ['Iperf_2']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_4'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg1,chfpg2",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg1,chfpg2",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg1",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "helper2",
               TestAdapter    => "1",
               PortGroupName  => "chfpg2",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
               FenceId        => "100",
            },
            "Iperf_1" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofOutbound   => "1",
               TestAdapter    => "SUT:vnic:1",
               SupportAdapter => "helper1:vnic:1",
            },
            "ChangeVnicPortgroup_3" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg2",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "Iperf_2" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofOutbound   => "1",
               TestAdapter    => "SUT:vnic:1",
               SupportAdapter => "helper2:vnic:1",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
            },
            "ChangeVnicPortgroup_4" => {
               Type           => "VM",
               Target         => "SUT,helper1,helper2",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'JumboFrame' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         TestName          => "JumboFrame",
         Summary           => "Verify that fence can work well with jumbo frame",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['SetVDSMTU'],['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['NetAdapter_1'],['NetAdapter_2'],
                                  ['AddFenceID'],['Iperf']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               #
               #Pay attention that tg3 doesn't support JF.
               #You can specify the driver name as "SUT:e1000e:1"
               #
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "SetVDSMTU" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               mtu            => "9000",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "NetAdapter_1" => {
               Type           => "NetAdapter",
               Target         => "SUT",
               ipv4           => "192.168.30.1",
               TestAdapter    => "1",
               MTU            => "9000",
               TSOIPv4        => "Enable",
            },
            "NetAdapter_2" => {
               Type           => "NetAdapter",
               Target         => "helper1",
               ipv4           => "192.168.30.2",
               TestAdapter    => "1",
               MTU            => "9000",
               TSOIPv4        => "Enable",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "Iperf" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofInbound    => "1",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      #
      # For vlan/pvlan cases, please pay attention to you physical network configurations and
      # change some parameters if needed. Here is my vmnic info:
      #    interface GigabitEthernet1/23
      #     switchport trunk encapsulation dot1q
      #     switchport trunk native vlan 310
      #     switchport trunk allowed vlan 301-310
      #     switchport mode trunk
      #     mtu 9000
      #    end
      #
      'VLANVST' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "rpmt,bqmt",
         TestName          => "VLANVST",
         Summary           => "Verify that the fence network can work correctly in VLAN VST environment",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],
                                  ['CreateVDS'],['CreateVDSPortGroup'],
                                  ['AddVDSPort'],['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['ChangeVnicPortgroup_2'],
                                  ['AddFenceID_1'],['AddFenceID_2'],
                                  ['setVDSPGVlan_1'],['Iperf_1'],
                                  ['setVDSPGVlan_2'],['Iperf_2']],
            ExitSequence      => [['DeleteFenceID_1'],['DeleteFenceID_2'],
                                  ['ChangeVnicPortgroup_3'],
                                  ['RemoveChfInstance'],
                                  ['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg1,chfpg2",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg1,chfpg2",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg1",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg2",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID_1"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
               FenceId        => "100",
            },
            "AddFenceID_2"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
               FenceId        => "100",
            },
            "setVDSPGVlan_1" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "SUT",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               accessvlan     => VDNetLib::Common::GlobalConfig::VDNET_VLAN_D,
               portgroup      => "chfpg1",
            },
            "Iperf_1" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofInbound    => "1",
               expectedresult => "FAIL",
            },
            "setVDSPGVlan_2" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "helper1",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               accessvlan     => VDNetLib::Common::GlobalConfig::VDNET_VLAN_D,
               portgroup      => "chfpg2",
            },
            "Iperf_2" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofInbound    => "1",
               expectedresult => "PASS",
            },
            "DeleteFenceID_1"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
            },
            "DeleteFenceID_2"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
            },
            "ChangeVnicPortgroup_3" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'VLANVGT' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "rpmt,bqmt",
         TestName          => "VLANVGT",
         Summary           => "Verify that the fence network can work correctly in VLAN VGT environment",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],
                                  ['CreateVDS'],['CreateVDSPortGroup'],
                                  ['AddVDSPort'],['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['AddFenceID'],['setVDSPGVlan'],
                                  ['setVMVlan_1'],['Iperf_1'],
                                  ['setVMVlan_2'],['Iperf_2']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "setVDSPGVlan" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "SUT",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               trunkrange     => "[" . VDNetLib::Common::GlobalConfig::VDNET_VLAN_D . "-" . VDNetLib::Common::GlobalConfig::VDNET_VLAN_D . "]",
               portgroup      => "chfpg",
            },
            "setVMVlan_1" => {
               Type           => "NetAdapter",
               Target         => "SUT",
               TestAdapter    => "1",
               IntType        => "vnic",
               vlan           => VDNetLib::Common::GlobalConfig::VDNET_VLAN_D,
            },
            "Iperf_1" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofInbound    => "1",
               expectedresult => "FAIL",
            },
            "setVMVlan_2" => {
               Type           => "NetAdapter",
               Target         => "helper1",
               TestAdapter    => "1",
               IntType        => "vnic",
               vlan           => VDNetLib::Common::GlobalConfig::VDNET_VLAN_D,
            },
            "Iperf_2" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofInbound    => "1",
               expectedresult => "PASS",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'VLANConflict' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "rpmt,bqmt",
         TestName          => "VLANConflict",
         Summary           => "Verify that fence can work correctly when VMs in same fence but different vlan",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
            helper2        => {
               vnic        => ['vmxnet3:1'],
            },
            helper3        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],
                                  ['CreateVDS'],['CreateVDSPortGroup'],
                                  ['AddVDSPort'],['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['ChangeVnicPortgroup_2'],
                                  ['AddFenceID_1'],['AddFenceID_2'],
                                  ['setVDSPGVlan_1'],['setVDSPGVlan_2'],
                                  ['SetMAC_1'],['SetMAC_2'],
                                  ['Ping_1'],['Ping_2'],['Ping_3']],
            ExitSequence      => [['ResetMAC'],['DeleteFenceID_1'],
                                  ['DeleteFenceID_2'],
                                  ['ChangeVnicPortgroup_3'],
                                  ['RemoveChfInstance'],
                                  ['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg1,chfpg2",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg1,chfpg2",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1,helper2",
               TestAdapter    => "1",
               PortGroupName  => "chfpg1",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "helper3",
               TestAdapter    => "1",
               PortGroupName  => "chfpg2",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID_1"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
               FenceId        => "100",
            },
            "AddFenceID_2"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
               FenceId        => "100",
            },
            "setVDSPGVlan_1" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "SUT",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               accessvlan     => VDNetLib::Common::GlobalConfig::VDNET_VLAN_D,
               portgroup      => "chfpg1",
            },
            "setVDSPGVlan_2" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "helper1",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               accessvlan     => VDNetLib::Common::GlobalConfig::VDNET_VLAN_E,
               portgroup      => "chfpg2",
            },
            "SetMAC_1" => {
               Type           => "NetAdapter",
               Iterations     => "1",
               Target         => "helper1",
               TestAdapter    => "1",
               SetMACAddr     => "00:11:22:33:44:55",
            },
            "SetMAC_2" => {
               Type           => "NetAdapter",
               Iterations     => "1",
               Target         => "helper3",
               TestAdapter    => "1",
               SetMACAddr     => "00:11:22:33:44:55",
            },
            "ResetMAC" => {
               Type           => "NetAdapter",
               Iterations     => "1",
               Target         => "helper1,helper3",
               TestAdapter    => "1",
               SetMACAddr     => "reset",
            },
            "Ping_1" => {
               Type           => "Traffic",
               ToolName       => "ping",
               TestAdapter    => "SUT:vnic:1",
               SupportAdapter => "helper2:vnic:1",
               NoofInbound    => "1",
            },
            "Ping_2" => {
               Type           => "Traffic",
               ToolName       => "ping",
               TestAdapter    => "SUT:vnic:1",
               SupportAdapter => "helper3:vnic:1",
               NoofInbound    => "1",
               expectedresult => "FAIL",
            },
            "Ping_3" => {
               Type           => "Traffic",
               ToolName       => "ping",
               TestAdapter    => "SUT:vnic:1",
               SupportAdapter => "helper1:vnic:1",
               NoofOutbound   => "1",
            },
            "DeleteFenceID_1"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
            },
            "DeleteFenceID_2"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
            },
            "ChangeVnicPortgroup_3" => {
               Type           => "VM",
               Target         => "SUT,helper1,helper2,helper3",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'PVLAN' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "bqmt",
         TestName          => "PVLAN",
         Summary           => "Verify fence works fine with PVLAN",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['AddPVLAN_1'],['AddPVLAN_2'],['AddPVLAN_3'],
                                  ['SetPVLAN_1'],['SetPVLAN_2'],['SetPVLAN_3'],
                                  ['CreateChfInstance'],['AddFenceID_1'],
                                  ['AddFenceID_2'],['AddFenceID_3'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['ChangeVnicPortgroup_2'],
                                  ['Iperf_1'],['ChangeVnicPortgroup_3'],
                                  ['Iperf_1'],['ChangeVnicPortgroup_4'],
                                  ['Iperf_2']],
            ExitSequence      => [['DeleteFenceID_1'],['DeleteFenceID_2'],
                                  ['DeleteFenceID_3'],
                                  ['ChangeVnicPortgroup_5'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg1,chfpg2,chfpg3",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg1,chfpg2,chfpg3",
            },
            "AddPVLAN_1" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "SUT",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               addpvlanmap    => "promiscuous",
               primaryvlan    => VDNetLib::Common::GlobalConfig::VDNET_PVLAN_PRI_A,
               secondaryvlan  => VDNetLib::Common::GlobalConfig::VDNET_PVLAN_PRI_A,
            },
            "AddPVLAN_2" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "SUT",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               addpvlanmap    => "community",
               primaryvlan    => VDNetLib::Common::GlobalConfig::VDNET_PVLAN_PRI_A,
               secondaryvlan  => VDNetLib::Common::GlobalConfig::VDNET_PVLAN_SEC_COM_A,
            },
            "AddPVLAN_3" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "SUT",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               addpvlanmap    => "isolated",
               primaryvlan    => VDNetLib::Common::GlobalConfig::VDNET_PVLAN_PRI_A,
               secondaryvlan  => VDNetLib::Common::GlobalConfig::VDNET_PVLAN_SEC_ISO_A,
            },
            "SetPVLAN_1" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "SUT",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               setpvlantype   => "chfpg1",
               pvlan          => VDNetLib::Common::GlobalConfig::VDNET_PVLAN_PRI_A,
            },
            "SetPVLAN_2" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "SUT",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               setpvlantype   => "chfpg2",
               pvlan          => VDNetLib::Common::GlobalConfig::VDNET_PVLAN_SEC_COM_A,
            },
            "SetPVLAN_3" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "SUT",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               setpvlantype   => "chfpg3",
               pvlan          => VDNetLib::Common::GlobalConfig::VDNET_PVLAN_SEC_ISO_A,
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "AddFenceID_1"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
               FenceId        => "100",
            },
            "AddFenceID_2"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
               FenceId        => "100",
            },
            "AddFenceID_3"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg3",
               FenceId        => "100",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg1",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg2",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "Iperf_1" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofInbound    => "1",
               expectedresult => "PASS",
            },
            "ChangeVnicPortgroup_3" => {
               Type           => "VM",
               Target         => "helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg3",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "ChangeVnicPortgroup_4" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg2",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "Iperf_2" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofInbound    => "1",
               expectedresult => "FAIL",
            },
            "DeleteFenceID_1"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
            },
            "DeleteFenceID_2"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
            },
            "DeleteFenceID_3"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg3",
            },
            "ChangeVnicPortgroup_5" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'NetFence' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "rpmt,bqmt",
         TestName          => "NetFence",
         Summary           => "Verify configuration of cross-host fencing",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['CreateChfInstance'],
                                  ['AddFenceID'],['CheckNetFence'],
                                  ['DeleteFenceID'],['DisableBC'],
                                  ['EnableBC']],
            ExitSequence      => [['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],
                                  ['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "DisableBC"        => {
               Type           => "VC",
               OPT            => "disableBC",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "EnableBC"        => {
               Type           => "VC",
               OPT            => "enableBC",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
            "CheckNetFence" => {
               Type           => "Host",
               Target         => "SUT",
               CHF            => "checkNetFence",
               VDSName        => "chfvds",
               FenceId        => "100",
            },
         },
      },

      'InvalidNetFence' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         TestName          => "InvalidNetFence",
         Summary           => "Verify configuration of cross-host fencing",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['CreateChfInstance'],
                                  ['AddFenceID'],['CheckNetFence'],
                                  ['DeleteFenceID'],['DisableBC'],
                                  ['EnableBC']],
            ExitSequence      => [['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],
                                  ['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "DisableBC"        => {
               Type           => "VC",
               OPT            => "disableBC",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "EnableBC"        => {
               Type           => "VC",
               OPT            => "enableBC",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
            "CheckNetFence" => {
               Type           => "Host",
               Target         => "SUT",
               CHF            => "checkNetFence",
               VDSName        => "chfvds",
               FenceId        => "101",
               ExpectedResult => "FAIL",
            },
         },
      },

      'vMotion' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "bqmt,vmotion",
         TestName          => "vMotion",
         Summary           => "Verify vMotion can work well in fence network",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               switch      => ['vss:1'],
               vmknic      => ['switch1:1'],
               vnic        => ['vmxnet3:1'],
               datastoreType  => "shared",
            },
            helper1        => {
               switch      => ['vss:1'],
               vmknic      => ['switch1:1'],
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['EnableVMotion_1'],['EnableVMotion_2'],
                                  ['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],['AddFenceID'],
                                  ['vmotion','Iperf']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "EnableVMotion_1" => {
               Type             => "NetAdapter",
               Target           => "SUT",
               TestAdapter      => "1",
               IntType          => "vmknic",
               VMotion          => "ENABLE",
               ipv4             => "192.168.111.1",
            },
            "EnableVMotion_2" => {
               Type             => "NetAdapter",
               Target           => "helper1",
               TestAdapter      => "1",
               IntType          => "vmknic",
               VMotion          => "ENABLE",
               ipv4             => "192.168.111.2",
            },
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "vmotion" => {
               Type           => "VC",
               OPT            => "vMotion",
               VM             => "SUT",
               DstHost        => "helper1",
               Priority       => "high",
               Staytime       => "10",
               RoundTrip      => "yes",
            },
            "Iperf" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               TestAdapter    => "SUT:vnic:1",
               SupportAdapter => "helper1:vnic:1",
               NoofInbound    => "1",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'Teaming' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         TestName          => "Teaming",
         Summary           => "Verify if nicteaming works well with fence network",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
            helper2        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['AddUplink'],['CreateVDSPortGroup'],
                                  ['AddVDSPort'],['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],['AddFenceID'],
                                  ['SetTeaming_1'],['Iperf'],
                                  ['SetTeaming_2'],['Iperf'],
                                  ['SetTeaming_3'],['Iperf'],
                                  ['SetTeaming_4'],['Iperf'],
                                  ['SetTeaming_5'],['Iperf']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "AddUplink" => {
               Type           => "VC",
               OPT            => "adduplink",
               VDSName        => "chfvds",
               Uplink         => "helper1::2",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1,helper2",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "SetTeaming_1" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "Helper1",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               confignicteaming => "chfpg",
               lbpolicy       => "loadbalance_srcmac",
             },
            "Iperf" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               TestDuration   => "20",
               NoofInbound    => "1",
               TestAdapter    => "SUT:vnic:1",
               SupportAdapter => "helper1:vnic:1,helper2:vnic:1",
            },
            "SetTeaming_2" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "Helper1",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               confignicteaming => "chfpg",
               lbpolicy       => "loadbalance_srcid",
             },
            "SetTeaming_3" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "Helper1",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               confignicteaming => "chfpg",
               lbpolicy       => "loadbalance_ip",
             },
            "SetTeaming_4" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "Helper1",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               confignicteaming => "chfpg",
               lbpolicy       => "failover_explicit",
             },
            "SetTeaming_5" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "Helper1",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               confignicteaming => "chfpg",
               lbpolicy       => "loadbalance_loadbased",
             },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1,helper2",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'ConfigurationPersistence' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         TestName          => "ConfigurationPersistence",
         Summary           => "Verify configuration persistence of fence network after server reboot",
         Tags              => "hostreboot",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],['AddFenceID'],
                                  ['ChangeVnicPortgroup_1'],['RebootHost'],
                                  ['PowerOnVM'],['CheckNetFence']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "RebootHost" => {
               Type           => "Host",
               Target         => "SUT",
               reboot         => "yes",
            },
            "PowerOnVM" => {
               Type           => "VM",
               Operation      => "poweron",
            },
            "CheckNetFence" => {
               Type           => "Host",
               Target         => "SUT",
               CHF            => "checkNetFence",
               VDSName        => "chfvds",
               FenceId        => "100",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'Offloading' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "rpmt,bqmt",
         TestName          => "Offloading",
         Summary           => "Verify that the change of Hardware Capabilities will not affect fence network",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],['AddFenceID'],
                                  ['NetAdapter_hw1'],['Iperf'],
                                  ['NetAdapter_hw2'],['Iperf'],
                                  ['NetAdapter_hw3'],['Iperf'],
                                  ['NetAdapter_hw4'],['Iperf'],
                                  ['NetAdapter_hw5'],['Iperf'],
                                  ['NetAdapter_hw6'],['Iperf'],
                                  ['NetAdapter_hw7'],['Iperf'],
                                  ['NetAdapter_hw8'],['Iperf']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "NetAdapter_hw1"  => {
               Type           => "NetAdapter",
               Target         => "SUT",
               TestAdapter    => "1",
               IntType        => "vmnic",
               nethighdma     => "0",
            },
            "Iperf" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofInbound    => "1",
            },
            "NetAdapter_hw2"  => {
               Type           => "NetAdapter",
               Target         => "SUT",
               TestAdapter    => "1",
               IntType        => "vmnic",
               netsgspanpgs   => "0",
            },
            "NetAdapter_hw3"  => {
               Type           => "NetAdapter",
               Target         => "SUT",
               TestAdapter    => "1",
               IntType        => "vmnic",
               netsg          => "0",
            },
            "NetAdapter_hw4"  => {
               Type           => "NetAdapter",
               Target         => "SUT",
               TestAdapter    => "1",
               IntType        => "vmnic",
               ipchecksum     => "0",
            },
            "NetAdapter_hw5"  => {
               Type           => "NetAdapter",
               Target         => "SUT",
               TestAdapter    => "1",
               IntType        => "vmnic",
               vlanrx         => "0",
            },
            "NetAdapter_hw6"  => {
               Type           => "NetAdapter",
               Target         => "SUT",
               TestAdapter    => "1",
               IntType        => "vmnic",
               vlantx         => "0",
            },
            "NetAdapter_hw7"  => {
               Type           => "NetAdapter",
               Target         => "SUT",
               TestAdapter    => "1",
               IntType        => "vmnic",
               offload16offset => "0",
            },
            "NetAdapter_hw8"  => {
               Type           => "NetAdapter",
               Target         => "SUT",
               TestAdapter    => "1",
               IntType        => "vmnic",
               offload8offset => "0",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'StressLongevity' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         TestName          => "StressLongevity",
         Summary           => "Run longevity test against the fence module to make sure that running for a long time does not lead to memory leak or other problems",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],['AddFenceID'],
                                  ['VerifyIperfPass','ChangeFenceId']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            # It will take 20 seconds that fence.jar change fence id.
            # I design iperf run 1 hour. 3600/20=180
            "VerifyIperfPass" => {
               Type           => "Traffic",
               ToolName       => "iperf",
               TestDuration   => "3600",
               NoOfinbound    => "1",
               L4Protocol     => "TCP",
               maxtimeout     => "3700",
            },
            "ChangeFenceId"      => {
               Type           => "VC",
               OPT            => "changeFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               ChangeTimes    => "180",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'DVPort' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         TestName          => "DVPort",
         Summary           => "Verify that different kinds of DVPort can work normally in fence network",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup_1'],
                                  ['CreateVDSPortGroup_2'],
                                  ['AddVDSPort'],['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],['AddFenceID_1'],
                                  ['AddFenceID_2'],['Iperf'],
                                  ['ChangeVnicPortgroup_2'],['Iperf']],
            ExitSequence      => [['DeleteFenceID_1'],['DeleteFenceID_2'],
                                  ['ChangeVnicPortgroup_3'],
                                  ['RemoveChfInstance'],
                                  ['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup_1" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg1",
               binding        => "earlybinding",
            },
            "CreateVDSPortGroup_2" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg2",
               binding        => "latebinding",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg1,chfpg2",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg1",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID_1"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
               FenceId        => "100",
            },
            "AddFenceID_2"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
               FenceId        => "99",
            },
            "Iperf" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               NoofInbound    => "1",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg2",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "DeleteFenceID_1"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
            },
            "DeleteFenceID_2"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
            },
            "ChangeVnicPortgroup_3" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'Limitation' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         TestName          => "Limitation",
         Summary           => "Verify if the max number of fence switches within a host is 16",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               host        => 1,
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateChfInstance']],
            ExitSequence      => [['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds1-16",
               DCName         => "chftest",
               Uplink         => "SUT::0",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds1-16",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds1-16",
               Hosts          => "SUT",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'IPv6' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "bqmt",
         TestName          => "IPv6",
         Summary           => "Verify that the IPv6 traffic (TCP/UDP) can run smoothly in fence network.",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['AddFenceID'],['NetAdapter_SetIPv6'],
                                  ['TRAFFIC_udp'],['TRAFFIC_tcp'],
                                  ['NetAdapter_RemoveIPv6']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
           "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "NetAdapter_SetIPv6" => {
               Type           => "NetAdapter",
               Iterations     => "1",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               IPV6ADDR       => "DEFAULT",
               IPV6           => "ADD",
            },
            "TRAFFIC_udp" => {
               Type           => "Traffic",
               ToolName       => "netperf",
               L4Protocol     => "udp",
               L3Protocol     => "ipv6",
               TestDuration   => "30",
            },
            "TRAFFIC_tcp" => {
               Type           => "Traffic",
               ToolName       => "netperf",
               L4Protocol     => "tcp",
               L3Protocol     => "ipv6",
               TestDuration   => "30",
            },
            "NetAdapter_RemoveIPv6" => {
               Type           => "NetAdapter",
               Iterations     => "1",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               IPV6ADDR       => "DEFAULT",
               IPV6           => "DELETE",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'DVShaper' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "rpmt,bqmt",
         TestName          => "DVShaper",
         Summary           => "Verify dvshaper in fence network",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
         },

         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],
                                  ['ChangeVnicPortgroup_2'],['AddFenceID_1'],
                                  ['AddFenceID_2'],['EnableInShaping'],
                                  ['EnableOutShaping'],['Iperf']],
            ExitSequence      => [['DeleteFenceID_1'],['DeleteFenceID_2'],
                                  ['ChangeVnicPortgroup_3'],
                                  ['RemoveChfInstance'],
                                  ['RemoveHostFromVDS'],['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg1,chfpg2",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "5",
               addporttodvportgroup => "chfpg1,chfpg2",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT",
               TestAdapter    => "1",
               PortGroupName  => "chfpg1",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "helper1",
               TestAdapter    => "1",
               PortGroupName  => "chfpg2",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID_1"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
               FenceId        => "100",
            },
            "AddFenceID_2"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
               FenceId        => "100",
            },
            "EnableInShaping" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "SUT",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               enableinshaping => "chfpg1",
               avgbandwidth   => "100000",
               peakbandwidth  => "120000",
               burstsize      => "120000",
            },
            "EnableOutShaping" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "SUT",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               enableoutshaping => "chfpg1",
               avgbandwidth   => "100000",
               peakbandwidth  => "120000",
               burstsize      => "120000",
           },
            "Iperf" => {
               Type           => "Traffic",
               ToolName       => "Iperf",
               l4protocol     => "tcp",
               maxthroughput  => "100",
               TestDuration   => "100",
               NoofInbound    => "1",
               NoofOutbound   => "1",
            },
            "DeleteFenceID_1"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg1",
            },
            "DeleteFenceID_2"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg2",
            },
            "ChangeVnicPortgroup_3" => {
               Type           => "VM",
               Target         => "SUT,helper1",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

      'DVMirror' => {
         Component         => "network vL2/CHF/BFN",
         Category          => "ESX Server",
         Tags              => "rpmt,bqmt",
         TestName          => "DVMirror",
         Summary           => "Verify that DVMirror can work correctly in fence network",
         ExpectedResult    => "PASS",
         PreConfig => {
         },
         Parameters => {
            SUT            => {
               vnic        => ['vmxnet3:1'],
            },
            helper1        => {
               vnic        => ['vmxnet3:1'],
            },
            helper2        => {
               vnic        => ['vmxnet3:1'],
            },
         },
         WORKLOADS => {
            Sequence          => [['ConnectVC'],['CreateDC'],['CreateVDS'],
                                  ['CreateVDSPortGroup'],['AddVDSPort'],
                                  ['CreateChfInstance'],
                                  ['ChangeVnicPortgroup_1'],['AddFenceID'],
                                  ['AddMirror'],['Netperf']],
            ExitSequence      => [['DeleteFenceID'],['ChangeVnicPortgroup_2'],
                                  ['RemoveChfInstance'],['RemoveHostFromVDS'],
                                  ['RemoveDC']],
            Duration          => "time in seconds",
            "ConnectVC" => {
               Type           => "VC",
               OPT            => "connect",
            },
            "CreateDC" => {
               Type           => "VC",
               OPT            => "adddc",
               DCName         => "/chftest",
               Hosts          => "SUT,helper1",
            },
            "CreateVDS" => {
               Type           => "VC",
               OPT            => "createvds",
               VDSName        => "chfvds",
               DCName         => "chftest",
               Uplink         => "SUT::1,helper1::1",
            },
            "CreateVDSPortGroup" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               createdvportgroup => "chfpg",
            },
            "AddVDSPort" => {
               Type           => "Switch",
               SwitchType     => "vdswitch",
               Target         => "VC",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               ports          => "3",
               addporttodvportgroup => "chfpg",
            },
            "CreateChfInstance" => {
               Type           => "VC",
               OPT            => "createChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "ChangeVnicPortgroup_1" => {
               Type           => "VM",
               Target         => "SUT,helper1,helper2",
               TestAdapter    => "1",
               PortGroupName  => "chfpg",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
            },
            "AddFenceID"      => {
               Type           => "VC",
               OPT            => "addFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
               FenceId        => "100",
            },
            "AddMirror" => {
               Type           => "Switch",
               Target         => "SUT",
               SwitchType     => "vdswitch",
               datacenter     => "chftest",
               TestSwitch     => "chfvds",
               addmirrorsession => "Test_Mirror",
               srcrxport      => "8",
               srctxport      => "8",
               dstport        => "9",
               desc           => "CHF_Mirror_Test",
               stripvlan      => "true",
               length         => "100",
               normaltraffic  => "false",
            },
            "Netperf" => {
               Type           => "Traffic",
               ToolName       => "netperf",
               L4Protocol     => "tcp",
               TestAdapter    => "SUT:vnic:1",
               SupportAdapter => "helper1:vnic:1",
               verification   => "pktCap",
               verificationadapter => "helper2:vnic:1",
               TestDuration   => "60",
            },
            "DeleteFenceID"   => {
               Type           => "VC",
               OPT            => "deleteFenceId",
               VDSName        => "chfvds",
               PortGroupName  => "chfpg",
            },
            "ChangeVnicPortgroup_2" => {
               Type           => "VM",
               Target         => "SUT,helper1,helper2",
               TestAdapter    => "1",
               PortGroupName  => "vdtest",
               Operation      => "ChangePortGroup",
               Anchor         => "vc",
             },
            "RemoveChfInstance" => {
               Type           => "VC",
               OPT            => "removeChfInstance",
               DCName         => "chftest",
               VDSName        => "chfvds",
            },
            "RemoveHostFromVDS" => {
               Type           => "VC",
               OPT            => "removehostfromvds",
               VDSName        => "chfvds",
               Hosts          => "SUT,helper1",
            },
            "RemoveDC" => {
               Type           => "VC",
               OPT            => "removedc",
               DCName         => "/chftest",
            },
         },
      },

   );

}


########################################################################
#
# new --
#       This is the constructor for CHF
#
# Input:
#       none
#
# Results:
#       An instance/object of CHF class
#
# Side effects:
#       None
#
########################################################################

sub new
{
   my ($proto) = @_;
   # Below way of getting class name is to allow new class as well as
   # $class->new.  In new class, proto itself is class, and $class->new,
   # ref($class) return the class
   my $class = ref($proto) || $proto;
   my $self = $class->SUPER::new(\%CHF);
   return (bless($self, $class));
}

1;

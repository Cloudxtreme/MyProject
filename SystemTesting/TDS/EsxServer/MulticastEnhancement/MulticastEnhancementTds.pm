#!/usr/bin/perl
##########################################################################
# Copyright (C) 2014 VMWare, Inc.
#  All Rights Reserved
##########################################################################
package TDS::EsxServer::MulticastEnhancement::MulticastEnhancementTds;

#
#
# This file contains the structured hash for Multicatst Support Enhancement TDS.
# The following lines explain the keys of the internal
# hash in general.
#
#
use FindBin;
use lib "$FindBin::Bin/..";
use TDS::Main::VDNetMainTds;
use Data::Dumper;
use TDS::EsxServer::MulticastEnhancement::CommonWorkloads ':AllConstants';
use VDNetLib::TestData::TestbedSpecs::TestbedSpec;
@ISA = qw(TDS::Main::VDNetMainTds);

{
   %MulticastEnhancement = (
      'IGMPv1Join' => {
         TestName         => 'IGMPv1Join',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify IGMPv1 join messages can be '.
                             'processed by vmkernel correctly',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastLegacyMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetMcastSnoopingMode'],
                   ['SetIGMP1OnVM1'],
                   ['IGMP1ReportOnVM1'],
                   ['VerifyIGMP1StatsOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP1OnVM1'         => SET_IGMP1_ON_VM1,
            'IGMP1ReportOnVM1'      => IGMP1_JOIN_REPORT_ON_VM1,
            'VerifyIGMP1StatsOnVM1' => VERIFY_IGMP1_JOIN_ON_VM1,
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
         },
      },
      'IGMPv2Join' => {
         TestName         => 'IGMPv2Join',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify IGMPv2 join messages can be '.
                             'processed by vmkernel correctly',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetIGMPVersion2OnHost1'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetIGMP2OnVM1'],
                   ['IGMP2ReportOnVM1'],
                   ['VerifyIGMP2StatsOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetIGMPVersion3OnHost1'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetIGMPVersion2OnHost1' => SET_IGMP_QUERY_VERSION2_ON_HOST1,
            'SetIGMPVersion3OnHost1' => SET_IGMP_QUERY_VERSION3_ON_HOST1,
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP2OnVM1'         => SET_IGMP2_ON_VM1,
            'IGMP2ReportOnVM1'      => IGMP2_JOIN_REPORT_ON_VM1,
            'VerifyIGMP2StatsOnVM1' => VERIFY_IGMP2_JOIN_ON_VM1,
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
         },
      },
      'IGMPv3Join' => {
         TestName         => 'IGMPv3Join',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify IGMPv3 join messages can be '.
                             'processed by vmkernel correctly',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetIGMP3OnVM1'],
                   ['IGMP3ReportOnVM1'],
                   ['VerifyIGMP3StatsOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP3OnVM1'         => SET_IGMP3_ON_VM1,
            'IGMP3ReportOnVM1'      => IGMP3_JOIN_REPORT_ON_VM1,
            'VerifyIGMP3StatsOnVM1' => VERIFY_IGMP3_JOIN_ON_VM1,
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
         },
      },
      'IGMPv3Leave' => {
         TestName         => 'IGMPv3Leave',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify IGMPv3 leave messages can be '.
                             'processed by vmkernel correctly',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetIGMP3OnVM1'],
                   ['IGMP3ReportOnVM1'],
                   ['McastQuitOnVM1'],
                   ['VerifyIGMP3LeaveOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP3OnVM1'         => SET_IGMP3_ON_VM1,
            'IGMP3ReportOnVM1'      => IGMP3_JOIN_REPORT_ON_VM1,
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
            'VerifyIGMP3LeaveOnVM1' => {
                Type           => "NetAdapter",
                TestAdapter    => "vm.[1].vnic.[1]",
                McastProtocol  => "igmp",
                McastAddr      => IGMP3_MCAST_ADDR,
                VerifyMcastReportStats => [
                   {
                      'mcastprotocol[?]equal_to'   => 'IGMP',
                      'mcastversion[?]equal_to'    => '3',
                      'mcastmode[?]equal_to'       => 'include',
                      'groupaddr[?]equal_to'       => IGMP3_MCAST_ADDR,
                      'sourceaddrs[?]contain_once' => ['empty'],
                   },
                ]
            },
         },
      },
      'MLDv1Join' => {
         TestName         => 'MLDv1Join',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify MLDv1 join messages can be '.
                             'processed by vmkernel correctly',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMLDVersion1OnHost1'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetMLD1OnVM1'],
                   ['MLD1ReportOnVM1'],
                   ['VerifyMLD1StatsOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMLDVersion2OnHost1'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMLDVersion1OnHost1' => SET_MLD_QUERY_VERSION1_ON_HOST1,
            'SetMLDVersion2OnHost1' => SET_MLD_QUERY_VERSION2_ON_HOST1,
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetMLD1OnVM1'         => SET_MLD1_ON_VM1,
            'MLD1ReportOnVM1'      => MLD1_JOIN_REPORT_ON_VM1,
            'VerifyMLD1StatsOnVM1' => VERIFY_MLD1_JOIN_ON_VM1,
            'McastQuitOnVM1'       => MCAST_QUIT_ON_VM1,
         },
      },
      'MLDv2Join' => {
         TestName         => 'MLDv2Join',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify MLDv2 join messages can be '.
                             'processed by vmkernel correctly',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetMLD2OnVM1'],
                   ['MLD2ReportOnVM1'],
                   ['VerifyMLD2StatsOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetMLD2OnVM1'         => SET_MLD2_ON_VM1,
            'MLD2ReportOnVM1'      => MLD2_JOIN_REPORT_ON_VM1,
            'VerifyMLD2StatsOnVM1' => VERIFY_MLD2_JOIN_ON_VM1,
            'McastQuitOnVM1'       => MCAST_QUIT_ON_VM1,
         },
      },
      'MLDv2Leave' => {
         TestName         => 'MLDv2Leave',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify MLDv2 leave messages can be '.
                             'processed by vmkernel correctly',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetMLD2OnVM1'],
                   ['MLD2ReportOnVM1'],
                   ['McastQuitOnVM1'],
                   ['VerifyMLD2LeaveOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetMLD2OnVM1'         => SET_MLD2_ON_VM1,
            'MLD2ReportOnVM1'      => MLD2_JOIN_REPORT_ON_VM1,
            'McastQuitOnVM1'       => MCAST_QUIT_ON_VM1,
            'VerifyMLD2LeaveOnVM1' => {
                Type           => "NetAdapter",
                TestAdapter    => "vm.[1].vnic.[1]",
                McastProtocol  => "mld",
                McastAddr      => MLD2_MCAST_VSI_NODE,
                VerifyMcastReportStats => [
                   {
                      'mcastprotocol[?]equal_to'   => 'MLD',
                      'mcastversion[?]equal_to'    => '2',
                      'mcastmode[?]equal_to'       => 'include',
                      'groupaddr[?]equal_to'       => MLD2_MCAST_VSI_NODE,
                      'sourceaddrs[?]contain_once' => ['empty'],
                   },
                ]
            },
         },
      },
      'IGMPv1MembershipTimeout' => {
         TestName         => 'IGMPv1MembershipTimeout',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify IGMPv1 group address will be removed '.
                             'after membership timeout occurs. ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['SetMcastLegacyMode'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetIGMP1OnVM1'],
                   ['DefaultQueryInterval'],
                   ['SetMcastSnoopingMode'],
                   ['IGMP1ReportOnVM1'],
                   ['VerifyIGMP1StatsOnVM1'],
                   ['MinimumQueryInterval'],
                   ['McastQuitOnVM1'],
                   ['VerifyIGMP1TimeoutOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['SetMcastLegacyMode'],
                   ['DefaultQueryInterval'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP1OnVM1'         => SET_IGMP1_ON_VM1,
            'IGMP1ReportOnVM1'      => IGMP1_JOIN_REPORT_ON_VM1,
            'VerifyIGMP1StatsOnVM1' => VERIFY_IGMP1_JOIN_ON_VM1,
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
            'MinimumQueryInterval'  => SET_MINIMUM_IGMP_QUERY_INTERVAL,
            'DefaultQueryInterval'  => SET_DEFAULT_IGMP_QUERY_INTERVAL,
            'VerifyIGMP1TimeoutOnVM1' => {
               SleepBetweenWorkloads => GROUP_MEMBERSHIP_TIMEOUT,
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               McastProtocol  => "igmp",
               McastAddr      => IGMP1_MCAST_ADDR,
               VerifyMcastReportStats => [
                  {
                    'groupaddr[?]not_match' => IGMP1_MCAST_ADDR,
                  },
               ]
            },
         },
      },
      'IGMPv2MembershipTimeout' => {
         TestName         => 'IGMPv2MembershipTimeout',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify IGMPv2 group address will be removed '.
                             'after membership timeout occurs. ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['MinimumQueryInterval'],
                   ['SetIGMPVersion2OnHost1'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetIGMP2OnVM1'],
                   ['IGMP2ReportOnVM1'],
                   ['VerifyIGMP2StatsOnVM1'],
                   ['McastQuitOnVM1'],
                   ['VerifyIGMP2TimeoutOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['SetMcastLegacyMode'],
                   ['SetIGMPVersion3OnHost1'],
                   ['DefaultQueryInterval'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetIGMPVersion2OnHost1' => SET_IGMP_QUERY_VERSION2_ON_HOST1,
            'SetIGMPVersion3OnHost1' => SET_IGMP_QUERY_VERSION3_ON_HOST1,
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP2OnVM1'         => SET_IGMP2_ON_VM1,
            'IGMP2ReportOnVM1'      => IGMP2_JOIN_REPORT_ON_VM1,
            'VerifyIGMP2StatsOnVM1' => VERIFY_IGMP2_JOIN_ON_VM1,
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
            'MinimumQueryInterval'  => SET_MINIMUM_IGMP_QUERY_INTERVAL,
            'DefaultQueryInterval'  => SET_DEFAULT_IGMP_QUERY_INTERVAL,
            'VerifyIGMP2TimeoutOnVM1' => {
               SleepBetweenWorkloads => GROUP_MEMBERSHIP_TIMEOUT,
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               McastProtocol  => "igmp",
               McastAddr      => IGMP2_MCAST_ADDR,
               VerifyMcastReportStats => [
                  {
                    'groupaddr[?]not_match' => IGMP2_MCAST_ADDR,
                  },
               ]
            },
         },
      },
      'IGMPv3MembershipTimeout' => {
         TestName         => 'IGMPv3MembershipTimeout',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify IGMPv3 group address will be removed '.
                             'after membership timeout occurs. ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['MinimumQueryInterval'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetIGMP3OnVM1'],
                   ['IGMP3ReportOnVM1'],
                   ['VerifyIGMP3StatsOnVM1'],
                   ['McastQuitOnVM1'],
                   ['VerifyIGMP3TimeoutOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['SetMcastLegacyMode'],
                   ['DefaultQueryInterval'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP3OnVM1'         => SET_IGMP3_ON_VM1,
            'IGMP3ReportOnVM1'      => IGMP3_JOIN_REPORT_ON_VM1,
            'VerifyIGMP3StatsOnVM1' => VERIFY_IGMP3_JOIN_ON_VM1,
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
            'MinimumQueryInterval'  => SET_MINIMUM_IGMP_QUERY_INTERVAL,
            'DefaultQueryInterval'  => SET_DEFAULT_IGMP_QUERY_INTERVAL,
            'VerifyIGMP3TimeoutOnVM1' => {
               SleepBetweenWorkloads => GROUP_MEMBERSHIP_TIMEOUT,
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               McastProtocol  => "igmp",
               McastAddr      => IGMP3_MCAST_ADDR,
               VerifyMcastReportStats => [
                  {
                    'groupaddr[?]not_match' => IGMP3_MCAST_ADDR,
                  },
               ]
            },
         },
      },
      'MLDv1MembershipTimeout' => {
         TestName         => 'MLDv1MembershipTimeout',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify MLDv1 group address will be removed '.
                             'after membership timeout occurs. ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['MinimumQueryInterval'],
                   ['SetMLDVersion1OnHost1'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetMLD1OnVM1'],
                   ['MLD1ReportOnVM1'],
                   ['VerifyMLD1StatsOnVM1'],
                   ['McastQuitOnVM1'],
                   ['VerifyMLD1TimeoutOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['SetMcastLegacyMode'],
                   ['SetMLDVersion2OnHost1'],
                   ['DefaultQueryInterval'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMLDVersion1OnHost1' => SET_MLD_QUERY_VERSION1_ON_HOST1,
            'SetMLDVersion2OnHost1' => SET_MLD_QUERY_VERSION2_ON_HOST1,
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetMLD1OnVM1'          => SET_MLD1_ON_VM1,
            'MLD1ReportOnVM1'       => MLD1_JOIN_REPORT_ON_VM1,
            'VerifyMLD1StatsOnVM1'  => VERIFY_MLD1_JOIN_ON_VM1,
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
            'MinimumQueryInterval'  => SET_MINIMUM_IGMP_QUERY_INTERVAL,
            'DefaultQueryInterval'  => SET_DEFAULT_IGMP_QUERY_INTERVAL,
            'VerifyMLD1TimeoutOnVM1' => {
               SleepBetweenWorkloads => GROUP_MEMBERSHIP_TIMEOUT,
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               McastProtocol  => "mld",
               McastAddr      => MLD1_MCAST_VSI_NODE,
               VerifyMcastReportStats => [
                  {
                    'groupaddr[?]not_match' => MLD1_MCAST_VSI_NODE,
                  },
               ]
            },
         },
      },
      'MLDv2MembershipTimeout' => {
         TestName         => 'MLDv2MembershipTimeout',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify MLDv2 group address will be removed '.
                             'after membership timeout occurs. ',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['MinimumQueryInterval'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetMLD2OnVM1'],
                   ['MLD2ReportOnVM1'],
                   ['VerifyMLD2StatsOnVM1'],
                   ['McastQuitOnVM1'],
                   ['VerifyMLD2TimeoutOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['SetMcastLegacyMode'],
                   ['DefaultQueryInterval'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetMLD2OnVM1'          => SET_MLD2_ON_VM1,
            'MLD2ReportOnVM1'       => MLD2_JOIN_REPORT_ON_VM1,
            'VerifyMLD2StatsOnVM1'  => VERIFY_MLD2_JOIN_ON_VM1,
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
            'MinimumQueryInterval'  => SET_MINIMUM_IGMP_QUERY_INTERVAL,
            'DefaultQueryInterval'  => SET_DEFAULT_IGMP_QUERY_INTERVAL,
            'VerifyMLD2TimeoutOnVM1' => {
               SleepBetweenWorkloads => GROUP_MEMBERSHIP_TIMEOUT,
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               McastProtocol  => "mld",
               McastAddr      => MLD2_MCAST_VSI_NODE,
               VerifyMcastReportStats => [
                  {
                    'groupaddr[?]not_match' => MLD2_MCAST_VSI_NODE,
                  },
               ]
            },
         },
      },
      'IGMPv3IncludeSources' => {
         TestName         => 'IGMPv3IncludeSources',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that IGMPv3 join message '.
                             '(INCLUDE, {a, b, c, ...}) can be '.
                             'processed by vmkernel correctly',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetIGMP3OnVM1'],
                   ['IGMP3SourceInReport1OnVM1'],
                   ['VerifyIGMP3SourceIn1StatsOnVM1'],
                   ['IGMP3SourceInReport2OnVM1'],
                   ['VerifyIGMP3SourceIn2StatsOnVM1'],
                 ],
            ExitSequence => [
                   ['McastSecondServQuitOnVM1'],
                   ['McastQuitOnVM1'],
                   ['SetMcastLegacyMode'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP3OnVM1'             => SET_IGMP3_ON_VM1,
            'IGMP3SourceInReport1OnVM1' => {
               Type             => "Traffic",
               toolName         => "Mcast",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               McastMethod      => "MCAST_JOIN_SOURCE_GROUP",
               McastGroupAddr   => IGMP3_MCAST_ADDR,
               McastIpFamily    => "ipv4",
               McastSourceAddrs => IGMP3_SRC1_ADDRS_STR,
               connectivitytest => "0",
            },
            'IGMP3SourceInReport2OnVM1' => {
               Type             => "Traffic",
               toolName         => "Mcast",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               McastMethod      => "MCAST_JOIN_SOURCE_GROUP",
               McastGroupAddr   => IGMP3_MCAST_ADDR,
               McastIpFamily    => "ipv4",
               McastSourceAddrs => IGMP3_SRC2_ADDR,
               portnumber       => SECOND_SERVER_PORT,
               connectivitytest => "0",
            },
            'VerifyIGMP3SourceIn1StatsOnVM1' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               McastProtocol  => "igmp",
               McastAddr      => IGMP3_MCAST_ADDR,
               VerifyMcastReportStats => [
                  {
                    'mcastprotocol[?]equal_to'   => 'IGMP',
                    'mcastversion[?]equal_to'    => '3',
                    'mcastmode[?]equal_to'       => 'include',
                    'groupaddr[?]equal_to'       => IGMP3_MCAST_ADDR,
                    'sourceaddrs[?]contain_once' => IGMP3_SRC1_ADDRS_ARRAY,
                  },
               ]
            },
            'VerifyIGMP3SourceIn2StatsOnVM1' => VERIFY_IGMP3_EXCLUDE_EMPTY_SRC,
            'McastQuitOnVM1'           => MCAST_QUIT_ON_VM1,
            'McastSecondServQuitOnVM1' => MCAST_SECOND_SERV_QUIT_ON_VM1,
         },
      },
      'IGMPv3ExcludeSources' => {
         TestName         => 'IGMPv3ExcludeSources',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that IGMPv3 join message '.
                             '(EXCLUDE, {a, b, c, ...}) can be '.
                             'processed by vmkernel correctly',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetIGMP3OnVM1'],
                   ['IGMP3ReportOnVM1'],
                   ['IGMP3SourceExReport1OnVM1'],
                   ['VerifyIGMP3SourceEx1StatsOnVM1'],
                   ['IGMP3NewJOINREPORTONVM1'],
                   ['IGMP3SourceExReport2OnVM1'],
                   ['VerifyIGMP3SourceEx2StatsOnVM1'],
                 ],
            ExitSequence => [
                   ['McastSecondServQuitOnVM1'],
                   ['McastQuitOnVM1'],
                   ['SetMcastLegacyMode'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP3OnVM1'    => SET_IGMP3_ON_VM1,
            'IGMP3ReportOnVM1' => IGMP3_JOIN_REPORT_ON_VM1,
            'IGMP3SourceExReport1OnVM1' => {
               Type             => "Traffic",
               toolName         => "Mcast",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               McastMethod      => "MCAST_BLOCK_SOURCE",
               McastGroupAddr   => IGMP3_MCAST_ADDR,
               McastIpFamily    => "ipv4",
               McastSourceAddrs => IGMP3_SRC1_ADDRS_STR,
               connectivitytest => "0",
            },
            'VerifyIGMP3SourceEx1StatsOnVM1' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               McastProtocol  => "igmp",
               McastAddr      => IGMP3_MCAST_ADDR,
               VerifyMcastReportStats => [
                  {
                    'mcastprotocol[?]equal_to'   => 'IGMP',
                    'mcastversion[?]equal_to'    => '3',
                    'mcastmode[?]equal_to'       => 'exclude',
                    'groupaddr[?]equal_to'       => IGMP3_MCAST_ADDR,
                    'sourceaddrs[?]contain_once' => IGMP3_SRC1_ADDRS_ARRAY,
                  },
               ]
            },
            'IGMP3NewJOINREPORTONVM1' => {
               Type             => "Traffic",
               toolName         => "Mcast",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               McastMethod      => "MCAST_JOIN_GROUP",
               McastGroupAddr   => IGMP3_MCAST_ADDR,
               McastIpFamily    => "ipv4",
               PortNumber       => SECOND_SERVER_PORT,
               connectivitytest => "0",
            },
            'IGMP3SourceExReport2OnVM1' => {
               Type             => "Traffic",
               toolName         => "Mcast",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               McastMethod      => "MCAST_BLOCK_SOURCE",
               McastGroupAddr   => IGMP3_MCAST_ADDR,
               McastIpFamily    => "ipv4",
               McastSourceAddrs => IGMP3_SRC2_ADDR,
               PortNumber       => SECOND_SERVER_PORT,
               connectivitytest => "0",
            },
            'VerifyIGMP3SourceEx2StatsOnVM1' => VERIFY_IGMP3_EXCLUDE_EMPTY_SRC,
            'McastQuitOnVM1'           => MCAST_QUIT_ON_VM1,
            'McastSecondServQuitOnVM1' => MCAST_SECOND_SERV_QUIT_ON_VM1,
         },
      },
      'MLDv2IncludeSources' => {
         TestName         => 'MLDv2IncludeSources',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that MLDv2 join message '.
                             '(INCLUDE, {a, b, c, ...}) can be '.
                             'processed by vmkernel correctly',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetMLD2OnVM1'],
                   ['MLD2SourceInReport1OnVM1'],
                   ['VerifyMLD2SourceIn1StatsOnVM1'],
                   ['MLD2SourceInReport2OnVM1'],
                   ['VerifyMLD2SourceIn2StatsOnVM1'],
                 ],
            ExitSequence => [
                   ['McastSecondServQuitOnVM1'],
                   ['McastQuitOnVM1'],
                   ['SetMcastLegacyMode'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetMLD2OnVM1'             => SET_MLD2_ON_VM1,
            'MLD2SourceInReport1OnVM1' => {
               Type             => "Traffic",
               toolName         => "Mcast",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               McastMethod      => "MCAST_JOIN_SOURCE_GROUP",
               McastGroupAddr   => MLD2_MCAST_ADDR,
               McastIpFamily    => "ipv6",
               McastSourceAddrs => MLD2_SRC1_ADDRS_STR,
               connectivitytest => "0",
            },
            'MLD2SourceInReport2OnVM1' => {
               Type             => "Traffic",
               toolName         => "Mcast",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               McastMethod      => "MCAST_JOIN_SOURCE_GROUP",
               McastGroupAddr   => MLD2_MCAST_ADDR,
               McastIpFamily    => "ipv6",
               McastSourceAddrs => MLD2_SRC2_ADDR,
               portnumber       => SECOND_SERVER_PORT,
               connectivitytest => "0",
            },
            'VerifyMLD2SourceIn1StatsOnVM1' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               McastProtocol  => "mld",
               McastAddr      => MLD2_MCAST_VSI_NODE,
               VerifyMcastReportStats => [
                  {
                    'mcastprotocol[?]equal_to'   => 'MLD',
                    'mcastversion[?]equal_to'    => '2',
                    'mcastmode[?]equal_to'       => 'include',
                    'groupaddr[?]equal_to'       => MLD2_MCAST_VSI_NODE,
                    'sourceaddrs[?]contain_once' => MLD2_SRC1_ADDRS_ARRAY,
                  },
               ]
            },
            'VerifyMLD2SourceIn2StatsOnVM1' => VERIFY_MLD2_EXCLUDE_EMPTY_SRC,
            'McastQuitOnVM1'           => MCAST_QUIT_ON_VM1,
            'McastSecondServQuitOnVM1' => MCAST_SECOND_SERV_QUIT_ON_VM1,
         },
      },
      'MLDv2ExcludeSources' => {
         TestName         => 'MLDv2ExcludeSources',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that MLDv2 join message '.
                             '(EXCLUDE, {a, b, c, ...}) can be '.
                             'processed by vmkernel correctly',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetMLD2OnVM1'],
                   ['MLD2ReportOnVM1'],
                   ['MLD2SourceExReport1OnVM1'],
                   ['VerifyMLD2SourceEx1StatsOnVM1'],
                   ['MLD2NewJOINREPORTONVM1'],
                   ['MLD2SourceExReport2OnVM1'],
                   ['VerifyMLD2SourceEx2StatsOnVM1'],
                 ],
            ExitSequence => [
                   ['McastSecondServQuitOnVM1'],
                   ['McastQuitOnVM1'],
                   ['SetMcastLegacyMode'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetMLD2OnVM1'    => SET_MLD2_ON_VM1,
            'MLD2ReportOnVM1' => MLD2_JOIN_REPORT_ON_VM1,
            'MLD2SourceExReport1OnVM1' => {
               Type             => "Traffic",
               toolName         => "Mcast",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               McastMethod      => "MCAST_BLOCK_SOURCE",
               McastGroupAddr   => MLD2_MCAST_ADDR,
               McastIpFamily    => "ipv6",
               McastSourceAddrs => MLD2_SRC1_ADDRS_STR,
               connectivitytest => "0",
            },
            'VerifyMLD2SourceEx1StatsOnVM1' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               McastProtocol  => "mld",
               McastAddr      => MLD2_MCAST_VSI_NODE,
               VerifyMcastReportStats => [
                  {
                    'mcastprotocol[?]equal_to'   => 'MLD',
                    'mcastversion[?]equal_to'    => '2',
                    'mcastmode[?]equal_to'       => 'exclude',
                    'groupaddr[?]equal_to'       => MLD2_MCAST_VSI_NODE,
                    'sourceaddrs[?]contain_once' => MLD2_SRC1_ADDRS_ARRAY,
                  },
               ]
            },
            'MLD2NewJOINREPORTONVM1' => {
               Type             => "Traffic",
               toolName         => "Mcast",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               McastMethod      => "MCAST_JOIN_GROUP",
               McastGroupAddr   => MLD2_MCAST_ADDR,
               McastIpFamily    => "ipv6",
               PortNumber       => SECOND_SERVER_PORT,
               connectivitytest => "0",
            },
            'MLD2SourceExReport2OnVM1' => {
               Type             => "Traffic",
               toolName         => "Mcast",
               TestAdapter      => "vm.[2].vnic.[1]",
               SupportAdapter   => "vm.[1].vnic.[1]",
               McastMethod      => "MCAST_BLOCK_SOURCE",
               McastGroupAddr   => MLD2_MCAST_ADDR,
               McastIpFamily    => "ipv6",
               McastSourceAddrs => MLD2_SRC2_ADDR,
               PortNumber       => SECOND_SERVER_PORT,
               connectivitytest => "0",
            },
            'VerifyMLD2SourceEx2StatsOnVM1' => VERIFY_MLD2_EXCLUDE_EMPTY_SRC,
            'McastQuitOnVM1'           => MCAST_QUIT_ON_VM1,
            'McastSecondServQuitOnVM1' => MCAST_SECOND_SERV_QUIT_ON_VM1,
         },
      },
      'IGMPv2Tov3' => {
         TestName         => 'IGMPv2Tov3',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that IGMP version change may be '.
                             'recognized and lookup table is updated '.
                             'correctly.',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetIGMPVersion2OnHost1'],
                   ['MinimumQueryInterval'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetIGMP2OnVM1'],
                   ['IGMP2ReportOnVM1'],
                   ['VerifyIGMP2StatsOnVM1'],
                   ['SetIGMPVersion3OnHost1'],
                   ['SetIGMP3OnVM1'],
                   ['VerifyIGMP3Addr2OnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMcastLegacyMode'],
                   ['DefaultQueryInterval'],
                   ['SetIGMPVersion3OnHost1'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetIGMPVersion2OnHost1' => SET_IGMP_QUERY_VERSION2_ON_HOST1,
            'SetIGMPVersion3OnHost1' => SET_IGMP_QUERY_VERSION3_ON_HOST1,
            'MinimumQueryInterval'   => SET_MINIMUM_IGMP_QUERY_INTERVAL,
            'DefaultQueryInterval'   => SET_DEFAULT_IGMP_QUERY_INTERVAL,
            'SetMcastSnoopingMode'   => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'     => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP2OnVM1'         => SET_IGMP2_ON_VM1,
            'SetIGMP3OnVM1'         => SET_IGMP3_ON_VM1,
            'IGMP2ReportOnVM1'      => IGMP2_JOIN_REPORT_ON_VM1,
            'VerifyIGMP2StatsOnVM1' => VERIFY_IGMP2_JOIN_ON_VM1,
            'VerifyIGMP3Addr2OnVM1' => {
                SleepBetweenWorkloads => GROUP_QUERY_WAITING_TIME,
                Type           => "NetAdapter",
                TestAdapter    => "vm.[1].vnic.[1]",
                McastProtocol  => "igmp",
                McastAddr      => IGMP2_MCAST_ADDR,
                VerifyMcastReportStats => [
                   {
                     'mcastprotocol[?]equal_to'   => 'IGMP',
                     'mcastversion[?]equal_to'    => '3',
                     'mcastmode[?]equal_to'       => 'exclude',
                     'groupaddr[?]equal_to'       => IGMP2_MCAST_ADDR,
                     'sourceaddrs[?]contain_once' => ['empty'],
                   },
                ]
            },
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
         },
      },
      'IGMPv3Tov2' => {
         TestName         => 'IGMPv3Tov2',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that IGMP version change may be '.
                             'recognized and lookup table is updated '.
                             'correctly.',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetIGMPVersion3OnHost1'],
                   ['MinimumQueryInterval'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetIGMP3OnVM1'],
                   ['IGMP3ReportOnVM1'],
                   ['VerifyIGMP3StatsOnVM1'],
                   ['SetIGMPVersion2OnHost1'],
                   ['SetIGMP2OnVM1'],
                   ['VerifyIGMP2Addr3OnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMcastLegacyMode'],
                   ['DefaultQueryInterval'],
                   ['SetIGMPVersion3OnHost1'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetIGMPVersion2OnHost1' => SET_IGMP_QUERY_VERSION2_ON_HOST1,
            'SetIGMPVersion3OnHost1' => SET_IGMP_QUERY_VERSION3_ON_HOST1,
            'MinimumQueryInterval'   => SET_MINIMUM_IGMP_QUERY_INTERVAL,
            'DefaultQueryInterval'   => SET_DEFAULT_IGMP_QUERY_INTERVAL,
            'SetMcastSnoopingMode'   => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'     => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP2OnVM1'         => SET_IGMP2_ON_VM1,
            'SetIGMP3OnVM1'         => SET_IGMP3_ON_VM1,
            'IGMP3ReportOnVM1'      => IGMP3_JOIN_REPORT_ON_VM1,
            'VerifyIGMP3StatsOnVM1' => VERIFY_IGMP3_JOIN_ON_VM1,
            'VerifyIGMP2Addr3OnVM1' => {
                SleepBetweenWorkloads => GROUP_QUERY_WAITING_TIME,
                Type           => "NetAdapter",
                TestAdapter    => "vm.[1].vnic.[1]",
                McastProtocol  => "igmp",
                McastAddr      => IGMP3_MCAST_ADDR,
                VerifyMcastReportStats => [
                   {
                     'mcastprotocol[?]equal_to'   => 'IGMP',
                     'mcastversion[?]equal_to'    => '2',
                     'mcastmode[?]equal_to'       => 'exclude',
                     'groupaddr[?]equal_to'       => IGMP3_MCAST_ADDR,
                     'sourceaddrs[?]contain_once' => ['empty'],
                   },
                ]
            },
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
         },
      },
      'MLDv1Tov2' => {
         TestName         => 'MLDv1Tov2',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that MLD version change may be '.
                             'recognized and lookup table is updated '.
                             'correctly.',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMLDVersion1OnHost1'],
                   ['MinimumQueryInterval'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetMLD1OnVM1'],
                   ['MLD1ReportOnVM1'],
                   ['VerifyMLD1StatsOnVM1'],
                   ['SetMLDVersion2OnHost1'],
                   ['SetMLD2OnVM1'],
                   ['VerifyMLD2Addr1OnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMcastLegacyMode'],
                   ['DefaultQueryInterval'],
                   ['SetMLDVersion2OnHost1'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMLDVersion1OnHost1' => SET_MLD_QUERY_VERSION1_ON_HOST1,
            'SetMLDVersion2OnHost1' => SET_MLD_QUERY_VERSION2_ON_HOST1,
            'MinimumQueryInterval'  => SET_MINIMUM_IGMP_QUERY_INTERVAL,
            'DefaultQueryInterval'  => SET_DEFAULT_IGMP_QUERY_INTERVAL,
            'SetMcastSnoopingMode'  => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'    => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetMLD1OnVM1'         => SET_MLD1_ON_VM1,
            'SetMLD2OnVM1'         => SET_MLD2_ON_VM1,
            'MLD1ReportOnVM1'      => MLD1_JOIN_REPORT_ON_VM1,
            'VerifyMLD1StatsOnVM1' => VERIFY_MLD1_JOIN_ON_VM1,
            'VerifyMLD2Addr1OnVM1' => {
                SleepBetweenWorkloads => GROUP_QUERY_WAITING_TIME,
                Type           => "NetAdapter",
                TestAdapter    => "vm.[1].vnic.[1]",
                McastProtocol  => "mld",
                McastAddr      => MLD1_MCAST_VSI_NODE,
                VerifyMcastReportStats => [
                   {
                     'mcastprotocol[?]equal_to'   => 'MLD',
                     'mcastversion[?]equal_to'    => '2',
                     'mcastmode[?]equal_to'       => 'exclude',
                     'groupaddr[?]equal_to'       => MLD1_MCAST_VSI_NODE,
                     'sourceaddrs[?]contain_once' => ['empty'],
                   },
                ]
            },
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
         },
      },
      'MLDv2Tov1' => {
         TestName         => 'MLDv2Tov1',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that MLD version change may be '.
                             'recognized and lookup table is updated '.
                             'correctly.',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMLDVersion2OnHost1'],
                   ['MinimumQueryInterval'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetMLD2OnVM1'],
                   ['MLD2ReportOnVM1'],
                   ['VerifyMLD2StatsOnVM1'],
                   ['SetMLDVersion1OnHost1'],
                   ['SetMLD1OnVM1'],
                   ['VerifyMLD1Addr2OnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMcastLegacyMode'],
                   ['DefaultQueryInterval'],
                   ['SetMLDVersion2OnHost1'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMLDVersion1OnHost1' => SET_MLD_QUERY_VERSION1_ON_HOST1,
            'SetMLDVersion2OnHost1' => SET_MLD_QUERY_VERSION2_ON_HOST1,
            'MinimumQueryInterval'  => SET_MINIMUM_IGMP_QUERY_INTERVAL,
            'DefaultQueryInterval'  => SET_DEFAULT_IGMP_QUERY_INTERVAL,
            'SetMcastSnoopingMode'  => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'    => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetMLD1OnVM1'         => SET_MLD1_ON_VM1,
            'SetMLD2OnVM1'         => SET_MLD2_ON_VM1,
            'MLD2ReportOnVM1'      => MLD2_JOIN_REPORT_ON_VM1,
            'VerifyMLD2StatsOnVM1' => VERIFY_MLD2_JOIN_ON_VM1,
            'VerifyMLD1Addr2OnVM1' => {
                SleepBetweenWorkloads => GROUP_QUERY_WAITING_TIME,
                Type           => "NetAdapter",
                TestAdapter    => "vm.[1].vnic.[1]",
                McastProtocol  => "mld",
                McastAddr      => MLD2_MCAST_VSI_NODE,
                VerifyMcastReportStats => [
                   {
                     'mcastprotocol[?]equal_to'   => 'MLD',
                     'mcastversion[?]equal_to'    => '1',
                     'mcastmode[?]equal_to'       => 'exclude',
                     'groupaddr[?]equal_to'       => MLD2_MCAST_VSI_NODE,
                     'sourceaddrs[?]contain_once' => ['empty'],
                   },
                ]
            },
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
         },
      },
      'SnoopingModeToLegacy' => {
         TestName         => 'SnoopingModeToLegacy',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that lookup table (igmplookup list '.
                             ' and mldlookup list)  will get cleaned up '.
                             'after mode changes from snooping to legacy.',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['SetIGMPVersion3OnHost1'],
                   ['SetMLDVersion2OnHost1'],
                   ['SetMcastSnoopingMode'],
                   ['VerifySnoopingMcastFilterMode'],
                   ['SetIGMP3OnVM1'],
                   ['IGMP3ReportOnVM1'],
                   ['VerifyIGMP3StatsOnVM1'],
                   ['SetMLD2OnVM1'],
                   ['MLD2ReportOnVM1'],
                   ['VerifyMLD2StatsOnVM1'],
                   ['SetMcastLegacyMode'],
                   ['VerifyLegacyMcastFilterMode'],
                   ['VerifyIGMP3ClearedForVM1'],
                   ['VerifyMLD2ClearedForVM1'],
                   ['SwitchMulticastMode'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetIGMPVersion3OnHost1' => SET_IGMP_QUERY_VERSION3_ON_HOST1,
            'SetMLDVersion2OnHost1'  => SET_MLD_QUERY_VERSION2_ON_HOST1,
            'SetMcastSnoopingMode'  => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'    => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP3OnVM1'         => SET_IGMP3_ON_VM1,
            'IGMP3ReportOnVM1'      => IGMP3_JOIN_REPORT_ON_VM1,
            'SetMLD2OnVM1'          => SET_MLD2_ON_VM1,
            'VerifyIGMP3StatsOnVM1' => VERIFY_IGMP3_JOIN_ON_VM1,
            'MLD2ReportOnVM1'       => MLD2_JOIN_REPORT_ON_VM1,
            'VerifyMLD2StatsOnVM1'  => VERIFY_MLD2_JOIN_ON_VM1,
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
            'VerifySnoopingMcastFilterMode' => VERIFY_SNOOPING_MCASTFILTERMODE,
            'VerifyLegacyMcastFilterMode'   => VERIFY_LEGACY_MCASTFILTERMODE,
            'VerifyIGMP3ClearedForVM1' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               McastProtocol  => "igmp",
               McastAddr      => IGMP3_MCAST_ADDR,
               VerifyMcastReportStats => [
                  {
                    'groupaddr[?]not_match' => IGMP3_MCAST_ADDR,
                  },
               ]
            },
            'VerifyMLD2ClearedForVM1' => {
               Type           => "NetAdapter",
               TestAdapter    => "vm.[1].vnic.[1]",
               McastProtocol  => "igmp",
               McastAddr      => MLD2_MCAST_VSI_NODE,
               VerifyMcastReportStats => [
                  {
                    'groupaddr[?]not_match' => MLD2_MCAST_VSI_NODE,
                  },
               ]
            },
            'SwitchMulticastMode' => {
               Iterations => 10,
               SleepBetweenCombos => 30,
               Type       => "Switch",
               TestSwitch => "vc.[1].vds.[1]",
               multicastfilteringmode => "legacyFiltering,snooping",
            },
         },
      },
      'IPv4MulticastTraffic' => {
         TestName         => 'IPv4MulticastTraffic',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that iperf ipv4 multicast traffic '.
                             'works correctly under snooping mode.',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity,CAT_P0',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastSnoopingMode'],
                   ['AddUplinkToVds'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1', 'PlaceVM3OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2', 'PowerOnVM3'],
                   ['IPv4MulticastTrafficAmongVMs'],
                 ],
            ExitSequence => [
                   ['RemoveUplinkFromVds'],
                   ['PowerOffVM1', 'PowerOffVM2', 'PowerOffVM3'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2', 'DeleteVnic1OnVM3'],
                 ],
            'SetMcastSnoopingMode'  => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'    => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'PlaceVM3OnDVPG1'  => PLACE_VM3_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'DeleteVnic1OnVM3' => DELETE_VNIC1_ON_VM3,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOnVM3'  => POWERON_VM3,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'PowerOffVM3' => POWEROFF_VM3,
            'AddUplinkToVds'      => ADD_UPLINK_TO_VDS,
            'RemoveUplinkFromVds' => REMOVE_UPLINK_FROM_VDS,
            'IPv4MulticastTrafficAmongVMs' => {
                Type           => "Traffic",
                RoutingScheme  => "Multicast",
                L3Protocol     => "ipv4",
                multicasttimetolive =>"32",
                udpbandwidth   => "10M",
                TestAdapter    => "vm.[1].vnic.[1]",
                SupportAdapter => "vm.[2-3].vnic.[1]",
                TestDuration   => "60",
                MaxlossRate    => "10",
            },
         },
      },
      'IPv6MulticastTraffic' => {
         TestName         => 'IPv6MulticastTraffic',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that iperf ipv6 multicast traffic '.
                             'works correctly under snooping mode.',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P0',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastSnoopingMode'],
                   ['AddUplinkToVds'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1', 'PlaceVM3OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2', 'PowerOnVM3'],
                   ['IPv6MulticastTrafficAmongVMs'],
                 ],
            ExitSequence => [
                   ['RemoveUplinkFromVds'],
                   ['PowerOffVM1', 'PowerOffVM2', 'PowerOffVM3'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2', 'DeleteVnic1OnVM3'],
                 ],
            'SetMcastSnoopingMode'  => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'    => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'PlaceVM3OnDVPG1'  => PLACE_VM3_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'DeleteVnic1OnVM3' => DELETE_VNIC1_ON_VM3,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOnVM3'  => POWERON_VM3,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'PowerOffVM3' => POWEROFF_VM3,
            'AddUplinkToVds'      => ADD_UPLINK_TO_VDS,
            'RemoveUplinkFromVds' => REMOVE_UPLINK_FROM_VDS,
            'IPv6MulticastTrafficAmongVMs' => {
                Type           => "Traffic",
                RoutingScheme  => "Multicast",
                L3Protocol     => "ipv6",
                multicasttimetolive =>"32",
                udpbandwidth   => "10M",
                TestAdapter    => "vm.[1].vnic.[1]",
                SupportAdapter => "vm.[2-3].vnic.[1]",
                TestDuration   => "60",
                MaxlossRate    => "10",
            },
         },
      },
      'IPv4TrafficVmotion' => {
         TestName         => 'IPv4TrafficVmotion',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that iperf ipv4 multicast traffic '.
                             'works correctly under snooping mode while '.
                             'doing migration between hosts',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'physicalonly',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Vmotion_Topology,
         WORKLOADS        => {
            Sequence =>  [
                   ['AddUplinkToVds1'],
                   ['CreateVds2'],
                   ['CreateDvpgOnVds2'],
                   ['AddVmknicToHosts'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1', 'PlaceVM3OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2', 'PowerOnVM3'],
                   ['IPv4MulticastTraffic', 'VM3Vmotion'],
                 ],
            ExitSequence => [
                   ['RemoveUplinkFromVds1'],
                   ['RemoveVmknicFromHost1', 'RemoveVmknicFromHost2'],
                   ['DeleteVds2'],
                   ['PowerOffVM1', 'PowerOffVM2', 'PowerOffVM3'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2', 'DeleteVnic1OnVM3'],
                 ],
            'AddUplinkToVds1'      => ADD_UPLINK_TO_VDS,
            'RemoveUplinkFromVds1' => REMOVE_UPLINK_FROM_VDS,
            'SetMcastSnoopingMode'  => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'    => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'PlaceVM3OnDVPG1'  => PLACE_VM3_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'DeleteVnic1OnVM3' => DELETE_VNIC1_ON_VM3,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOnVM3'  => POWERON_VM3,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'PowerOffVM3' => POWEROFF_VM3,
            'CreateVds2'            => CREATE_VDS2,
            'CreateDvpgOnVds2'      => CREATE_DVPG_ON_VDS2,
            'DeleteVds2'            => DELETE_VDS2,
            'AddVmknicToHosts'      => ADD_VMKNIC_TO_HOSTS,
            'RemoveVmknicFromHost1' => REMOVE_VMKNIC_FROM_HOST1,
            'RemoveVmknicFromHost2' => REMOVE_VMKNIC_FROM_HOST2,
            'IPv4MulticastTraffic' => {
                Type           => "Traffic",
                RoutingScheme  => "Multicast",
                L3Protocol     => "ipv4",
                multicasttimetolive =>"32",
                udpbandwidth   => "10M",
                TestAdapter    => "vm.[1].vnic.[1]",
                SupportAdapter => "vm.[2-3].vnic.[1]",
                TestDuration   => "120",
                MaxlossRate    => "60",
            },
            'VM3Vmotion' => VM3_VMOTION,
         },
      },
      'IPv6TrafficVmotion' => {
         TestName         => 'IPv6TrafficVmotion',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify that iperf ipv6 multicast traffic '.
                             'works correctly under snooping mode while '.
                             'doing migration between hosts',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'physicalonly',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Vmotion_Topology,
         WORKLOADS        => {
            Sequence =>  [
                   ['AddUplinkToVds1'],
                   ['CreateVds2'],
                   ['CreateDvpgOnVds2'],
                   ['AddVmknicToHosts'],
                   ['SetMcastSnoopingMode'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1', 'PlaceVM3OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2', 'PowerOnVM3'],
                   ['IPv6MulticastTraffic', 'VM3Vmotion'],
                 ],
            ExitSequence => [
                   ['RemoveUplinkFromVds1'],
                   ['RemoveVmknicFromHost1', 'RemoveVmknicFromHost2'],
                   ['DeleteVds2'],
                   ['PowerOffVM1', 'PowerOffVM2', 'PowerOffVM3'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2', 'DeleteVnic1OnVM3'],
                 ],
            'AddUplinkToVds1'      => ADD_UPLINK_TO_VDS,
            'RemoveUplinkFromVds1' => REMOVE_UPLINK_FROM_VDS,
            'SetMcastSnoopingMode'  => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'    => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'PlaceVM3OnDVPG1'  => PLACE_VM3_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'DeleteVnic1OnVM3' => DELETE_VNIC1_ON_VM3,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOnVM3'  => POWERON_VM3,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'PowerOffVM3' => POWEROFF_VM3,
            'CreateVds2'            => CREATE_VDS2,
            'CreateDvpgOnVds2'      => CREATE_DVPG_ON_VDS2,
            'DeleteVds2'            => DELETE_VDS2,
            'AddVmknicToHosts'      => ADD_VMKNIC_TO_HOSTS,
            'RemoveVmknicFromHost1' => REMOVE_VMKNIC_FROM_HOST1,
            'RemoveVmknicFromHost2' => REMOVE_VMKNIC_FROM_HOST2,
            'IPv6MulticastTraffic' => {
                Type           => "Traffic",
                RoutingScheme  => "Multicast",
                L3Protocol     => "ipv6",
                multicasttimetolive =>"32",
                udpbandwidth   => "10M",
                TestAdapter    => "vm.[1].vnic.[1]",
                SupportAdapter => "vm.[2-3].vnic.[1]",
                TestDuration   => "120",
                MaxlossRate    => "60",
            },
            'VM3Vmotion' => VM3_VMOTION,
         },
      },
      'ModePersistent' => {
         TestName         => 'ModePersistent',
         Category         => 'EsxServer',
         Component        => 'Multicast Support Enhancement',
         Product          => 'ESX',
         QCPath           => 'OP\Networking-FVT\MulticastEnhancement',
         Summary          => 'Verify Multicast filter mode keeps persistent '.
                             'through ESXi host reboot',
         Procedure        => '',
         ExpectedResult   => 'PASS',
         Status           => 'Execution Ready',
         Tags             => 'sanity,hostreboot',
         PMT              => '7836',
         AutomationLevel  => 'Automated',
         FullyAutomatable => 'Y',
         TestcaseLevel    => 'Functional',
         TestcaseType     => 'Functional',
         Priority         => 'P1',
         Developer        => 'sqian',
         Partnerfacing    => 'N',
         Duration         => '',
         Version          => '2',
         AutomationStatus => 'Automated',
         TestbedSpec      => Mcast_Topology_1_VDS_Without_Pnic,
         WORKLOADS        => {
            Sequence =>  [
                   ['SetMcastSnoopingMode'],
                   ['RebootHost1'],
                   ['PlaceVM1OnDVPG1', 'PlaceVM2OnDVPG1'],
                   ['PowerOnVM1', 'PowerOnVM2'],
                   ['VerifySnoopingMcastFilterMode'],
                   ['SetIGMP3OnVM1'],
                   ['IGMP3ReportOnVM1'],
                   ['VerifyIGMP3StatsOnVM1'],
                 ],
            ExitSequence => [
                   ['McastQuitOnVM1'],
                   ['PowerOffVM1', 'PowerOffVM2'],
                   ['SetMcastLegacyMode'],
                   ['DeleteVnic1OnVM1', 'DeleteVnic1OnVM2'],
                 ],
            'SetMcastSnoopingMode' => SET_SNOOPING_MODE,
            'SetMcastLegacyMode'   => SET_LEGACY_MODE,
            'PlaceVM1OnDVPG1'  => PLACE_VM1_ON_DVPG1,
            'PlaceVM2OnDVPG1'  => PLACE_VM2_ON_DVPG1,
            'DeleteVnic1OnVM1' => DELETE_VNIC1_ON_VM1,
            'DeleteVnic1OnVM2' => DELETE_VNIC1_ON_VM2,
            'PowerOnVM1'  => POWERON_VM1,
            'PowerOnVM2'  => POWERON_VM2,
            'PowerOffVM1' => POWEROFF_VM1,
            'PowerOffVM2' => POWEROFF_VM2,
            'SetIGMP3OnVM1'         => SET_IGMP3_ON_VM1,
            'IGMP3ReportOnVM1'      => IGMP3_JOIN_REPORT_ON_VM1,
            'VerifyIGMP3StatsOnVM1' => VERIFY_IGMP3_JOIN_ON_VM1,
            'McastQuitOnVM1'        => MCAST_QUIT_ON_VM1,
            'VerifySnoopingMcastFilterMode' => VERIFY_SNOOPING_MCASTFILTERMODE,
            'RebootHost1' => {
                'Type' => 'Host',
                'TestHost' => 'host.[1].x.[x]',
                'reboot' => 'yes'
            },
         },
      },
   );
}

##########################################################################
# new --
#       This is the constructor for MulticastEnhancement TDS
#
# Input:
#       none
#
# Results:
#       An instance/object of MulticastEnhancement TDS class
#
# Side effects:
#       None
#
#########################################################################

sub new
{
   my ($proto) = @_;
   #
   # Below way of getting class name is to allow new class as well as
   # $class->new.  In new class, proto itself is class, and $class->new,
   # ref($class) return the class
   #
   my $class = ref($proto) || $proto;
   my $self = $class->SUPER::new(\%MulticastEnhancement);
   return (bless($self, $class));
}

1;
